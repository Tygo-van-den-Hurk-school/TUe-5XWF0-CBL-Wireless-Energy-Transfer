
HoverCharge_DCDC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08008b80  08008b80  00009b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f98  08008f98  0000a20c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fa0  08008fa0  0000a20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fa0  08008fa0  00009fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fa4  08008fa4  00009fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08008fa8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a20c  2**0
                  CONTENTS
 10 .bss          000003a8  2000020c  2000020c  0000a20c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005b4  200005b4  0000a20c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001113a  00000000  00000000  0000a23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002488  00000000  00000000  0001b376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  0001d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c21  00000000  00000000  0001e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d26e  00000000  00000000  0001f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013773  00000000  00000000  0003c60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000add94  00000000  00000000  0004fd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fdb16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b0  00000000  00000000  000fdb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00102d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b64 	.word	0x08008b64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08008b64 	.word	0x08008b64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFF);
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <__io_putchar+0x20>)
 8000bba:	f004 ff6b 	bl	8005a94 <HAL_UART_Transmit>

	return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000039c 	.word	0x2000039c

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bd0:	b08a      	sub	sp, #40	@ 0x28
 8000bd2:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fece 	bl	8001974 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f8c8 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 fb0e 	bl	80011fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000be0:	f000 fae6 	bl	80011b0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000be4:	f000 fa08 	bl	8000ff8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 fab2 	bl	8001150 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bec:	f000 f918 	bl	8000e20 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000bf0:	f000 f994 	bl	8000f1c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  printf("%s", TxStartMessage);
 8000bf4:	494b      	ldr	r1, [pc, #300]	@ (8000d24 <main+0x158>)
 8000bf6:	484c      	ldr	r0, [pc, #304]	@ (8000d28 <main+0x15c>)
 8000bf8:	f006 f83a 	bl	8006c70 <iprintf>

      PWM_Period = 64000000/(2*PWM_Freq)-1;
 8000bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8000d2c <main+0x160>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4a4b      	ldr	r2, [pc, #300]	@ (8000d30 <main+0x164>)
 8000c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b49      	ldr	r3, [pc, #292]	@ (8000d34 <main+0x168>)
 8000c0e:	601a      	str	r2, [r3, #0]
      PWM_PulseWidth = (int)((PWM_Period*PWM_DutyC)/100);
 8000c10:	4b48      	ldr	r3, [pc, #288]	@ (8000d34 <main+0x168>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c1c:	4b46      	ldr	r3, [pc, #280]	@ (8000d38 <main+0x16c>)
 8000c1e:	edd3 7a00 	vldr	s15, [r3]
 8000c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c26:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8000d3c <main+0x170>
 8000c2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c32:	ee17 2a90 	vmov	r2, s15
 8000c36:	4b42      	ldr	r3, [pc, #264]	@ (8000d40 <main+0x174>)
 8000c38:	601a      	str	r2, [r3, #0]

      __HAL_TIM_SET_AUTORELOAD(&htim1, PWM_Period);					//Timer 1 config
 8000c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d34 <main+0x168>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b41      	ldr	r3, [pc, #260]	@ (8000d44 <main+0x178>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c44:	4b3b      	ldr	r3, [pc, #236]	@ (8000d34 <main+0x168>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d44 <main+0x178>)
 8000c4c:	60da      	str	r2, [r3, #12]

       __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth);	//Tim1 Channel 1 config
 8000c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d40 <main+0x174>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b3c      	ldr	r3, [pc, #240]	@ (8000d44 <main+0x178>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	635a      	str	r2, [r3, #52]	@ 0x34
       HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	483a      	ldr	r0, [pc, #232]	@ (8000d44 <main+0x178>)
 8000c5c:	f003 ff3e 	bl	8004adc <HAL_TIM_PWM_Start>


      HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);				//ADC1 config
 8000c60:	2100      	movs	r1, #0
 8000c62:	4839      	ldr	r0, [pc, #228]	@ (8000d48 <main+0x17c>)
 8000c64:	f001 f990 	bl	8001f88 <HAL_ADCEx_Calibration_Start>
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_Buff, 2);
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4938      	ldr	r1, [pc, #224]	@ (8000d4c <main+0x180>)
 8000c6c:	4836      	ldr	r0, [pc, #216]	@ (8000d48 <main+0x17c>)
 8000c6e:	f001 f8b1 	bl	8001dd4 <HAL_ADC_Start_DMA>

      HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);				//ADC2 config
 8000c72:	2100      	movs	r1, #0
 8000c74:	4836      	ldr	r0, [pc, #216]	@ (8000d50 <main+0x184>)
 8000c76:	f001 f987 	bl	8001f88 <HAL_ADCEx_Calibration_Start>
      HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2_Buff, 2);
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4935      	ldr	r1, [pc, #212]	@ (8000d54 <main+0x188>)
 8000c7e:	4834      	ldr	r0, [pc, #208]	@ (8000d50 <main+0x184>)
 8000c80:	f001 f8a8 	bl	8001dd4 <HAL_ADC_Start_DMA>
  while (1)
  {
	  //PWM_DutyC = V_DCDC_OUT*111.11f;

	  	  // Conversion range 0-0.9V to 0-100%
	  	  PWM_PulseWidth = (int)((PWM_Period * PWM_DutyC)/100); //Hier is iets fout
 8000c84:	4b2b      	ldr	r3, [pc, #172]	@ (8000d34 <main+0x168>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	ee07 3a90 	vmov	s15, r3
 8000c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c90:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <main+0x16c>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c9a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000d3c <main+0x170>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca6:	ee17 2a90 	vmov	r2, s15
 8000caa:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <main+0x174>)
 8000cac:	601a      	str	r2, [r3, #0]
	  	  __HAL_TIM_SET_COMPARE (&htim1, TIM_CHANNEL_1, PWM_PulseWidth);
 8000cae:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <main+0x174>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <main+0x178>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	635a      	str	r2, [r3, #52]	@ 0x34


	  	  printf("\r\n V_DCDC_IN: %.2f V |  V_DCDC_OUT: %.2f V | I_IND: %.2f A  |  I_DCDC_OUT: %.2f A  |  Duty Cycle: %.2f", V_DCDC_IN, V_DCDC_OUT, I_IND,I_DCDC_OUT, PWM_DutyC);
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <main+0x18c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fc43 	bl	8000548 <__aeabi_f2d>
 8000cc2:	e9c7 0100 	strd	r0, r1, [r7]
 8000cc6:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <main+0x190>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fc3c 	bl	8000548 <__aeabi_f2d>
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <main+0x194>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc35 	bl	8000548 <__aeabi_f2d>
 8000cde:	4680      	mov	r8, r0
 8000ce0:	4689      	mov	r9, r1
 8000ce2:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <main+0x198>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fc2e 	bl	8000548 <__aeabi_f2d>
 8000cec:	4682      	mov	sl, r0
 8000cee:	468b      	mov	fp, r1
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <main+0x16c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fc27 	bl	8000548 <__aeabi_f2d>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000d02:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000d06:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000d0a:	e9cd 4500 	strd	r4, r5, [sp]
 8000d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d12:	4815      	ldr	r0, [pc, #84]	@ (8000d68 <main+0x19c>)
 8000d14:	f005 ffac 	bl	8006c70 <iprintf>
	  	  HAL_Delay(1000);
 8000d18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d1c:	f000 fe90 	bl	8001a40 <HAL_Delay>
	  	  PWM_PulseWidth = (int)((PWM_Period * PWM_DutyC)/100); //Hier is iets fout
 8000d20:	bf00      	nop
 8000d22:	e7af      	b.n	8000c84 <main+0xb8>
 8000d24:	20000000 	.word	0x20000000
 8000d28:	08008b80 	.word	0x08008b80
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	03d09000 	.word	0x03d09000
 8000d34:	20000454 	.word	0x20000454
 8000d38:	20000034 	.word	0x20000034
 8000d3c:	42c80000 	.word	0x42c80000
 8000d40:	20000458 	.word	0x20000458
 8000d44:	20000350 	.word	0x20000350
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	20000424 	.word	0x20000424
 8000d50:	20000278 	.word	0x20000278
 8000d54:	2000042c 	.word	0x2000042c
 8000d58:	20000448 	.word	0x20000448
 8000d5c:	20000438 	.word	0x20000438
 8000d60:	20000450 	.word	0x20000450
 8000d64:	20000440 	.word	0x20000440
 8000d68:	08008b84 	.word	0x08008b84

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b096      	sub	sp, #88	@ 0x58
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d76:	2228      	movs	r2, #40	@ 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f005 ffcd 	bl	8006d1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da4:	2301      	movs	r3, #1
 8000da6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da8:	2310      	movs	r3, #16
 8000daa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dac:	2302      	movs	r3, #2
 8000dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db0:	2300      	movs	r3, #0
 8000db2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000db4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000db8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fa3a 	bl	8003238 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000dca:	f000 faf1 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2102      	movs	r1, #2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fa62 	bl	80042b4 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000df6:	f000 fadb 	bl	80013b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fc8a 	bl	8004720 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e12:	f000 facd 	bl	80013b0 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3758      	adds	r7, #88	@ 0x58
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e42:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000e4a:	4b33      	ldr	r3, [pc, #204]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e4c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e52:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e58:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e64:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e76:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7c:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e82:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea2:	481d      	ldr	r0, [pc, #116]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000ea4:	f000 fe04 	bl	8001ab0 <HAL_ADC_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eae:	f000 fa7f 	bl	80013b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4816      	ldr	r0, [pc, #88]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000ebe:	f001 fb93 	bl	80025e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ec8:	f000 fa72 	bl	80013b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000eea:	f001 f8bf 	bl	800206c <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ef4:	f000 fa5c 	bl	80013b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_ADC1_Init+0xf8>)
 8000f02:	f001 f8b3 	bl	800206c <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000f0c:	f000 fa50 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	@ 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000228 	.word	0x20000228

08000f1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f34:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff4 <MX_ADC2_Init+0xd8>)
 8000f36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f3e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000f62:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f64:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000f68:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f90:	4817      	ldr	r0, [pc, #92]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000f92:	f000 fd8d 	bl	8001ab0 <HAL_ADC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000f9c:	f000 fa08 	bl	80013b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000fbe:	f001 f855 	bl	800206c <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000fc8:	f000 f9f2 	bl	80013b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_ADC2_Init+0xd4>)
 8000fda:	f001 f847 	bl	800206c <HAL_ADC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000fe4:	f000 f9e4 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000278 	.word	0x20000278
 8000ff4:	50000100 	.word	0x50000100

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09a      	sub	sp, #104	@ 0x68
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	222c      	movs	r2, #44	@ 0x2c
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fe71 	bl	8006d1a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <MX_TIM1_Init+0x150>)
 800103a:	4a44      	ldr	r2, [pc, #272]	@ (800114c <MX_TIM1_Init+0x154>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800103e:	4b42      	ldr	r3, [pc, #264]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001044:	4b40      	ldr	r3, [pc, #256]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001046:	2220      	movs	r2, #32
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800104a:	4b3f      	ldr	r3, [pc, #252]	@ (8001148 <MX_TIM1_Init+0x150>)
 800104c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001058:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <MX_TIM1_Init+0x150>)
 800105a:	2201      	movs	r2, #1
 800105c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001064:	4838      	ldr	r0, [pc, #224]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001066:	f003 fc81 	bl	800496c <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001070:	f000 f99e 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800107e:	4619      	mov	r1, r3
 8001080:	4831      	ldr	r0, [pc, #196]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001082:	f003 ff2b 	bl	8004edc <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800108c:	f000 f990 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001090:	482d      	ldr	r0, [pc, #180]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001092:	f003 fcc2 	bl	8004a1a <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800109c:	f000 f988 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010a0:	2320      	movs	r3, #32
 80010a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010b0:	4619      	mov	r1, r3
 80010b2:	4825      	ldr	r0, [pc, #148]	@ (8001148 <MX_TIM1_Init+0x150>)
 80010b4:	f004 fbba 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010be:	f000 f977 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4818      	ldr	r0, [pc, #96]	@ (8001148 <MX_TIM1_Init+0x150>)
 80010e8:	f003 fde4 	bl	8004cb4 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010f2:	f000 f95d 	bl	80013b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800110e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001118:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <MX_TIM1_Init+0x150>)
 800112c:	f004 fbec 	bl	8005908 <HAL_TIMEx_ConfigBreakDeadTime>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001136:	f000 f93b 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800113a:	4803      	ldr	r0, [pc, #12]	@ (8001148 <MX_TIM1_Init+0x150>)
 800113c:	f000 fa58 	bl	80015f0 <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3768      	adds	r7, #104	@ 0x68
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000350 	.word	0x20000350
 800114c:	40012c00 	.word	0x40012c00

08001150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <MX_USART2_UART_Init+0x5c>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001194:	f004 fc30 	bl	80059f8 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 f907 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000039c 	.word	0x2000039c
 80011ac:	40004400 	.word	0x40004400

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <MX_DMA_Init+0x48>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <MX_DMA_Init+0x48>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <MX_DMA_Init+0x48>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	200b      	movs	r0, #11
 80011d4:	f001 fcd9 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011d8:	200b      	movs	r0, #11
 80011da:	f001 fcf2 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	200c      	movs	r0, #12
 80011e4:	f001 fcd1 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011e8:	200c      	movs	r0, #12
 80011ea:	f001 fcea 	bl	8002bc2 <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001212:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a28      	ldr	r2, [pc, #160]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 8001218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a22      	ldr	r2, [pc, #136]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 8001230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001234:	6153      	str	r3, [r2, #20]
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a1c      	ldr	r2, [pc, #112]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800124c:	6153      	str	r3, [r2, #20]
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_GPIO_Init+0xbc>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_TX2_Pin|D5_TX1_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2141      	movs	r1, #65	@ 0x41
 800125e:	4817      	ldr	r0, [pc, #92]	@ (80012bc <MX_GPIO_Init+0xc0>)
 8001260:	f001 ffd2 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D8_OCP_Pin */
  GPIO_InitStruct.Pin = D8_OCP_Pin;
 8001264:	2301      	movs	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D8_OCP_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <MX_GPIO_Init+0xc4>)
 8001278:	f001 fe54 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_TX2_Pin D5_TX1_Pin */
  GPIO_InitStruct.Pin = D3_TX2_Pin|D5_TX1_Pin;
 800127c:	2341      	movs	r3, #65	@ 0x41
 800127e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	480a      	ldr	r0, [pc, #40]	@ (80012bc <MX_GPIO_Init+0xc0>)
 8001294:	f001 fe46 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_RX2_Pin D4_RX1_Pin */
  GPIO_InitStruct.Pin = D6_RX2_Pin|D4_RX1_Pin;
 8001298:	2382      	movs	r3, #130	@ 0x82
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_GPIO_Init+0xc0>)
 80012ac:	f001 fe3a 	bl	8002f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	48001400 	.word	0x48001400

080012c4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

		adc_val_1 = ADC1_Buff[0];
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xbc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001384 <HAL_ADC_ConvCpltCallback+0xc0>)
 80012d2:	6013      	str	r3, [r2, #0]
		V_DCDC_OUT = (((float)adc_val_1)/4095.0f)*3.3f;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_ADC_ConvCpltCallback+0xc0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012e0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001388 <HAL_ADC_ConvCpltCallback+0xc4>
 80012e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800138c <HAL_ADC_ConvCpltCallback+0xc8>
 80012ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <HAL_ADC_ConvCpltCallback+0xcc>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]

		adc_val_2 = ADC1_Buff[1];
 80012f6:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xbc>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a26      	ldr	r2, [pc, #152]	@ (8001394 <HAL_ADC_ConvCpltCallback+0xd0>)
 80012fc:	6013      	str	r3, [r2, #0]
		I_DCDC_OUT = (((float)adc_val_2)/4095.0f)*3.3f;
 80012fe:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800130a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001388 <HAL_ADC_ConvCpltCallback+0xc4>
 800130e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001312:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800138c <HAL_ADC_ConvCpltCallback+0xc8>
 8001316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131a:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <HAL_ADC_ConvCpltCallback+0xd4>)
 800131c:	edc3 7a00 	vstr	s15, [r3]

		adc_val_3 = ADC2_Buff[0];
 8001320:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1e      	ldr	r2, [pc, #120]	@ (80013a0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001326:	6013      	str	r3, [r2, #0]
		V_DCDC_IN = (((float)adc_val_3)/4095.0f)*3.3f;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <HAL_ADC_ConvCpltCallback+0xdc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001334:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001388 <HAL_ADC_ConvCpltCallback+0xc4>
 8001338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800138c <HAL_ADC_ConvCpltCallback+0xc8>
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001346:	edc3 7a00 	vstr	s15, [r3]

		adc_val_4 = ADC2_Buff[1];
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <HAL_ADC_ConvCpltCallback+0xd8>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001350:	6013      	str	r3, [r2, #0]
		I_IND = (((float)adc_val_4)/4095.0f)*3.3f;
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800135e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001388 <HAL_ADC_ConvCpltCallback+0xc4>
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800138c <HAL_ADC_ConvCpltCallback+0xc8>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_ADC_ConvCpltCallback+0xe8>)
 8001370:	edc3 7a00 	vstr	s15, [r3]

}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000424 	.word	0x20000424
 8001384:	20000434 	.word	0x20000434
 8001388:	457ff000 	.word	0x457ff000
 800138c:	40533333 	.word	0x40533333
 8001390:	20000438 	.word	0x20000438
 8001394:	2000043c 	.word	0x2000043c
 8001398:	20000440 	.word	0x20000440
 800139c:	2000042c 	.word	0x2000042c
 80013a0:	20000444 	.word	0x20000444
 80013a4:	20000448 	.word	0x20000448
 80013a8:	2000044c 	.word	0x2000044c
 80013ac:	20000450 	.word	0x20000450

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <Error_Handler+0x8>

080013bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_MspInit+0x44>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <HAL_MspInit+0x44>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6193      	str	r3, [r2, #24]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_MspInit+0x44>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_MspInit+0x44>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <HAL_MspInit+0x44>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_MspInit+0x44>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001424:	d156      	bne.n	80014d4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001426:	4b5b      	ldr	r3, [pc, #364]	@ (8001594 <HAL_ADC_MspInit+0x190>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a59      	ldr	r2, [pc, #356]	@ (8001594 <HAL_ADC_MspInit+0x190>)
 800142e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001430:	4b58      	ldr	r3, [pc, #352]	@ (8001594 <HAL_ADC_MspInit+0x190>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10b      	bne.n	8001450 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001438:	4b57      	ldr	r3, [pc, #348]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	4a56      	ldr	r2, [pc, #344]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 800143e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001442:	6153      	str	r3, [r2, #20]
 8001444:	4b54      	ldr	r3, [pc, #336]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b51      	ldr	r3, [pc, #324]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	4a50      	ldr	r2, [pc, #320]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	6153      	str	r3, [r2, #20]
 800145c:	4b4e      	ldr	r3, [pc, #312]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = A0_V_DCDC_OUT_Pin|A1_I_DCDC_OUT_Pin;
 8001468:	2303      	movs	r3, #3
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146c:	2303      	movs	r3, #3
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147e:	f001 fd51 	bl	8002f24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001482:	4b46      	ldr	r3, [pc, #280]	@ (800159c <HAL_ADC_MspInit+0x198>)
 8001484:	4a46      	ldr	r2, [pc, #280]	@ (80015a0 <HAL_ADC_MspInit+0x19c>)
 8001486:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001488:	4b44      	ldr	r3, [pc, #272]	@ (800159c <HAL_ADC_MspInit+0x198>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800148e:	4b43      	ldr	r3, [pc, #268]	@ (800159c <HAL_ADC_MspInit+0x198>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001494:	4b41      	ldr	r3, [pc, #260]	@ (800159c <HAL_ADC_MspInit+0x198>)
 8001496:	2280      	movs	r2, #128	@ 0x80
 8001498:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800149a:	4b40      	ldr	r3, [pc, #256]	@ (800159c <HAL_ADC_MspInit+0x198>)
 800149c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014a2:	4b3e      	ldr	r3, [pc, #248]	@ (800159c <HAL_ADC_MspInit+0x198>)
 80014a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014aa:	4b3c      	ldr	r3, [pc, #240]	@ (800159c <HAL_ADC_MspInit+0x198>)
 80014ac:	2220      	movs	r2, #32
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014b0:	4b3a      	ldr	r3, [pc, #232]	@ (800159c <HAL_ADC_MspInit+0x198>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b6:	4839      	ldr	r0, [pc, #228]	@ (800159c <HAL_ADC_MspInit+0x198>)
 80014b8:	f001 fb9d 	bl	8002bf6 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80014c2:	f7ff ff75 	bl	80013b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a34      	ldr	r2, [pc, #208]	@ (800159c <HAL_ADC_MspInit+0x198>)
 80014ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80014cc:	4a33      	ldr	r2, [pc, #204]	@ (800159c <HAL_ADC_MspInit+0x198>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014d2:	e05a      	b.n	800158a <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a32      	ldr	r2, [pc, #200]	@ (80015a4 <HAL_ADC_MspInit+0x1a0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d155      	bne.n	800158a <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014de:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <HAL_ADC_MspInit+0x190>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <HAL_ADC_MspInit+0x190>)
 80014e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <HAL_ADC_MspInit+0x190>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d10b      	bne.n	8001508 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014f0:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	4a28      	ldr	r2, [pc, #160]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	6153      	str	r3, [r2, #20]
 80014fc:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	4a22      	ldr	r2, [pc, #136]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 800150e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001512:	6153      	str	r3, [r2, #20]
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <HAL_ADC_MspInit+0x194>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = A3_V_DCDC_IN_Pin|A4_I_IND_Pin;
 8001520:	2330      	movs	r3, #48	@ 0x30
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001536:	f001 fcf5 	bl	8002f24 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 800153c:	4a1b      	ldr	r2, [pc, #108]	@ (80015ac <HAL_ADC_MspInit+0x1a8>)
 800153e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 800154e:	2280      	movs	r2, #128	@ 0x80
 8001550:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 8001554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001558:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 800155c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001560:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 8001564:	2220      	movs	r2, #32
 8001566:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800156e:	480e      	ldr	r0, [pc, #56]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 8001570:	f001 fb41 	bl	8002bf6 <HAL_DMA_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 800157a:	f7ff ff19 	bl	80013b0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 8001582:	639a      	str	r2, [r3, #56]	@ 0x38
 8001584:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <HAL_ADC_MspInit+0x1a4>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800158a:	bf00      	nop
 800158c:	3730      	adds	r7, #48	@ 0x30
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000045c 	.word	0x2000045c
 8001598:	40021000 	.word	0x40021000
 800159c:	200002c8 	.word	0x200002c8
 80015a0:	40020008 	.word	0x40020008
 80015a4:	50000100 	.word	0x50000100
 80015a8:	2000030c 	.word	0x2000030c
 80015ac:	4002001c 	.word	0x4002001c

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_TIM_Base_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015cc:	6193      	str	r3, [r2, #24]
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40012c00 	.word	0x40012c00
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <HAL_TIM_MspPostInit+0x68>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d11d      	bne.n	800164e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_TIM_MspPostInit+0x6c>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_TIM_MspPostInit+0x6c>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_TIM_MspPostInit+0x6c>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = D9_PWM_DCDC_Pin;
 800162a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800162e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800163c:	2306      	movs	r3, #6
 800163e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D9_PWM_DCDC_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f001 fc6b 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	@ 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a18      	ldr	r2, [pc, #96]	@ (80016e0 <HAL_UART_MspInit+0x80>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d129      	bne.n	80016d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <HAL_UART_MspInit+0x84>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_UART_MspInit+0x84>)
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_UART_MspInit+0x84>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_UART_MspInit+0x84>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a11      	ldr	r2, [pc, #68]	@ (80016e4 <HAL_UART_MspInit+0x84>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a4:	6153      	str	r3, [r2, #20]
 80016a6:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_UART_MspInit+0x84>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80016b2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c4:	2307      	movs	r3, #7
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d2:	f001 fc27 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	@ 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40004400 	.word	0x40004400
 80016e4:	40021000 	.word	0x40021000

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <NMI_Handler+0x4>

080016f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <MemManage_Handler+0x4>

08001700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <UsageFault_Handler+0x4>

08001710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173e:	f000 f95f 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <DMA1_Channel1_IRQHandler+0x10>)
 800174e:	f001 faf8 	bl	8002d42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002c8 	.word	0x200002c8

0800175c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <DMA1_Channel2_IRQHandler+0x10>)
 8001762:	f001 faee 	bl	8002d42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000030c 	.word	0x2000030c

08001770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_kill>:

int _kill(int pid, int sig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178a:	f005 fb19 	bl	8006dc0 <__errno>
 800178e:	4603      	mov	r3, r0
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
  return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_exit>:

void _exit (int status)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe7 	bl	8001780 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b2:	bf00      	nop
 80017b4:	e7fd      	b.n	80017b2 <_exit+0x12>

080017b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e00a      	b.n	80017de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c8:	f3af 8000 	nop.w
 80017cc:	4601      	mov	r1, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	60ba      	str	r2, [r7, #8]
 80017d4:	b2ca      	uxtb	r2, r1
 80017d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	dbf0      	blt.n	80017c8 <_read+0x12>
  }

  return len;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e009      	b.n	8001816 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	60ba      	str	r2, [r7, #8]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f9cc 	bl	8000ba8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	3301      	adds	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	dbf1      	blt.n	8001802 <_write+0x12>
  }
  return len;
 800181e:	687b      	ldr	r3, [r7, #4]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_close>:

int _close(int file)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001850:	605a      	str	r2, [r3, #4]
  return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_isatty>:

int _isatty(int file)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f005 fa7e 	bl	8006dc0 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20003000 	.word	0x20003000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	20000460 	.word	0x20000460
 80018f8:	200005b8 	.word	0x200005b8

080018fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001958 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff ffea 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <LoopForever+0x6>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	@ (8001960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <LoopForever+0xe>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	@ (800196c <LoopForever+0x16>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f005 fa3d 	bl	8006dcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001952:	f7ff f93b 	bl	8000bcc <main>

08001956 <LoopForever>:

LoopForever:
    b LoopForever
 8001956:	e7fe      	b.n	8001956 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001958:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001964:	08008fa8 	.word	0x08008fa8
  ldr r2, =_sbss
 8001968:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800196c:	200005b4 	.word	0x200005b4

08001970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_2_IRQHandler>
	...

08001974 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_Init+0x28>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	@ (800199c <HAL_Init+0x28>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f001 f8f5 	bl	8002b74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	200f      	movs	r0, #15
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fd14 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 f90d 	bl	8002bde <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f001 f8d5 	bl	8002b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	@ (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000038 	.word	0x20000038
 80019f8:	20000040 	.word	0x20000040
 80019fc:	2000003c 	.word	0x2000003c

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000040 	.word	0x20000040
 8001a24:	20000464 	.word	0x20000464

08001a28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000464 	.word	0x20000464

08001a40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000040 	.word	0x20000040

08001a88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b09a      	sub	sp, #104	@ 0x68
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e172      	b.n	8001db6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d176      	bne.n	8001bd0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d152      	bne.n	8001b90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fc7d 	bl	8001404 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d13b      	bne.n	8001b90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fef5 	bl	8002908 <ADC_Disable>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d12f      	bne.n	8001b90 <HAL_ADC_Init+0xe0>
 8001b30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12b      	bne.n	8001b90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b40:	f023 0302 	bic.w	r3, r3, #2
 8001b44:	f043 0202 	orr.w	r2, r3, #2
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6c:	4b94      	ldr	r3, [pc, #592]	@ (8001dc0 <HAL_ADC_Init+0x310>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a94      	ldr	r2, [pc, #592]	@ (8001dc4 <HAL_ADC_Init+0x314>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0c9a      	lsrs	r2, r3, #18
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b82:	e002      	b.n	8001b8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f9      	bne.n	8001b84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bac:	d110      	bne.n	8001bd0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f023 0312 	bic.w	r3, r3, #18
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f040 80df 	bne.w	8001d9c <HAL_ADC_Init+0x2ec>
 8001bde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 80da 	bne.w	8001d9c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80d2 	bne.w	8001d9c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c00:	f043 0202 	orr.w	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c08:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc8 <HAL_ADC_Init+0x318>)
 8001c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c14:	d102      	bne.n	8001c1c <HAL_ADC_Init+0x16c>
 8001c16:	4b6d      	ldr	r3, [pc, #436]	@ (8001dcc <HAL_ADC_Init+0x31c>)
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	e002      	b.n	8001c22 <HAL_ADC_Init+0x172>
 8001c1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c20:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d108      	bne.n	8001c42 <HAL_ADC_Init+0x192>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_Init+0x192>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_ADC_Init+0x194>
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11c      	bne.n	8001c82 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c48:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_ADC_Init+0x1ba>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x1ba>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_ADC_Init+0x1bc>
 8001c6a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d108      	bne.n	8001c82 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c80:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7e5b      	ldrb	r3, [r3, #25]
 8001c86:	035b      	lsls	r3, r3, #13
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c8c:	2a01      	cmp	r2, #1
 8001c8e:	d002      	beq.n	8001c96 <HAL_ADC_Init+0x1e6>
 8001c90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c94:	e000      	b.n	8001c98 <HAL_ADC_Init+0x1e8>
 8001c96:	2200      	movs	r2, #0
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d11b      	bne.n	8001cee <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7e5b      	ldrb	r3, [r3, #25]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	045a      	lsls	r2, r3, #17
 8001cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cce:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cd0:	e00d      	b.n	8001cee <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001cda:	f043 0220 	orr.w	r2, r3, #32
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d007      	beq.n	8001d06 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d02:	4313      	orrs	r3, r2
 8001d04:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d114      	bne.n	8001d3e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d22:	f023 0302 	bic.w	r3, r3, #2
 8001d26:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7e1b      	ldrb	r3, [r3, #24]
 8001d2c:	039a      	lsls	r2, r3, #14
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4313      	orrs	r3, r2
 8001d38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <HAL_ADC_Init+0x320>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10c      	bne.n	8001d74 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	f023 010f 	bic.w	r1, r3, #15
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 020f 	bic.w	r2, r2, #15
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f023 0303 	bic.w	r3, r3, #3
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d9a:	e00a      	b.n	8001db2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f023 0312 	bic.w	r3, r3, #18
 8001da4:	f043 0210 	orr.w	r2, r3, #16
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001dac:	2301      	movs	r3, #1
 8001dae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001db2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3768      	adds	r7, #104	@ 0x68
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000038 	.word	0x20000038
 8001dc4:	431bde83 	.word	0x431bde83
 8001dc8:	50000300 	.word	0x50000300
 8001dcc:	50000100 	.word	0x50000100
 8001dd0:	fff0c007 	.word	0xfff0c007

08001dd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 80b9 	bne.w	8001f66 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Start_DMA+0x2e>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e0b4      	b.n	8001f6c <HAL_ADC_Start_DMA+0x198>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f74 <HAL_ADC_Start_DMA+0x1a0>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 80a0 	bne.w	8001f58 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fd11 	bl	8002840 <ADC_Enable>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 8092 	bne.w	8001f4e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f74 <HAL_ADC_Start_DMA+0x1a0>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_ADC_Start_DMA+0x80>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e52:	d115      	bne.n	8001e80 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d027      	beq.n	8001ebe <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e7e:	e01e      	b.n	8001ebe <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e94:	d004      	beq.n	8001ea0 <HAL_ADC_Start_DMA+0xcc>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a37      	ldr	r2, [pc, #220]	@ (8001f78 <HAL_ADC_Start_DMA+0x1a4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d10e      	bne.n	8001ebe <HAL_ADC_Start_DMA+0xea>
 8001ea0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001eb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eca:	d106      	bne.n	8001eda <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed0:	f023 0206 	bic.w	r2, r3, #6
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ed8:	e002      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eec:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef4:	4a22      	ldr	r2, [pc, #136]	@ (8001f80 <HAL_ADC_Start_DMA+0x1ac>)
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <HAL_ADC_Start_DMA+0x1b0>)
 8001efe:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	221c      	movs	r2, #28
 8001f06:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0210 	orr.w	r2, r2, #16
 8001f16:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3340      	adds	r3, #64	@ 0x40
 8001f32:	4619      	mov	r1, r3
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f000 fea4 	bl	8002c84 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0204 	orr.w	r2, r2, #4
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	e00d      	b.n	8001f6a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001f56:	e008      	b.n	8001f6a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001f64:	e001      	b.n	8001f6a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
 8001f68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	50000300 	.word	0x50000300
 8001f78:	50000100 	.word	0x50000100
 8001f7c:	08002775 	.word	0x08002775
 8001f80:	080027ef 	.word	0x080027ef
 8001f84:	0800280b 	.word	0x0800280b

08001f88 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADCEx_Calibration_Start+0x1c>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e05f      	b.n	8002064 <HAL_ADCEx_Calibration_Start+0xdc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fcab 	bl	8002908 <ADC_Disable>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d14e      	bne.n	800205a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001fd0:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d107      	bne.n	8001fe8 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fe6:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ff6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001ff8:	f7ff fd16 	bl	8001a28 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ffe:	e01c      	b.n	800203a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002000:	f7ff fd12 	bl	8001a28 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b0a      	cmp	r3, #10
 800200c:	d915      	bls.n	800203a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800201c:	d10d      	bne.n	800203a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f023 0312 	bic.w	r3, r3, #18
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e014      	b.n	8002064 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002044:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002048:	d0da      	beq.n	8002000 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f023 0303 	bic.w	r3, r3, #3
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800206c:	b480      	push	{r7}
 800206e:	b09b      	sub	sp, #108	@ 0x6c
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x22>
 800208a:	2302      	movs	r3, #2
 800208c:	e2a1      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x566>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 8285 	bne.w	80025b0 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d81c      	bhi.n	80020e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	461a      	mov	r2, r3
 80020c2:	231f      	movs	r3, #31
 80020c4:	4093      	lsls	r3, r2
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4019      	ands	r1, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa00 f203 	lsl.w	r2, r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e6:	e063      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d81e      	bhi.n	800212e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	3b1e      	subs	r3, #30
 8002104:	221f      	movs	r2, #31
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	4019      	ands	r1, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	3b1e      	subs	r3, #30
 8002120:	fa00 f203 	lsl.w	r2, r0, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	635a      	str	r2, [r3, #52]	@ 0x34
 800212c:	e040      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b0e      	cmp	r3, #14
 8002134:	d81e      	bhi.n	8002174 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	3b3c      	subs	r3, #60	@ 0x3c
 800214a:	221f      	movs	r2, #31
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	4019      	ands	r1, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	3b3c      	subs	r3, #60	@ 0x3c
 8002166:	fa00 f203 	lsl.w	r2, r0, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38
 8002172:	e01d      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	3b5a      	subs	r3, #90	@ 0x5a
 8002188:	221f      	movs	r2, #31
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	4019      	ands	r1, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	3b5a      	subs	r3, #90	@ 0x5a
 80021a4:	fa00 f203 	lsl.w	r2, r0, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80e5 	bne.w	800238a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	d91c      	bls.n	8002202 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6999      	ldr	r1, [r3, #24]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	3b1e      	subs	r3, #30
 80021da:	2207      	movs	r2, #7
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4019      	ands	r1, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6898      	ldr	r0, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	619a      	str	r2, [r3, #24]
 8002200:	e019      	b.n	8002236 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6959      	ldr	r1, [r3, #20]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	2207      	movs	r2, #7
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6898      	ldr	r0, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	3b01      	subs	r3, #1
 8002254:	2b03      	cmp	r3, #3
 8002256:	d84f      	bhi.n	80022f8 <HAL_ADC_ConfigChannel+0x28c>
 8002258:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <HAL_ADC_ConfigChannel+0x1f4>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002271 	.word	0x08002271
 8002264:	08002293 	.word	0x08002293
 8002268:	080022b5 	.word	0x080022b5
 800226c:	080022d7 	.word	0x080022d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002276:	4b9c      	ldr	r3, [pc, #624]	@ (80024e8 <HAL_ADC_ConfigChannel+0x47c>)
 8002278:	4013      	ands	r3, r2
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	0691      	lsls	r1, r2, #26
 8002280:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002282:	430a      	orrs	r2, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800228e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002290:	e07b      	b.n	800238a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002298:	4b93      	ldr	r3, [pc, #588]	@ (80024e8 <HAL_ADC_ConfigChannel+0x47c>)
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	0691      	lsls	r1, r2, #26
 80022a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022b0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b2:	e06a      	b.n	800238a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022ba:	4b8b      	ldr	r3, [pc, #556]	@ (80024e8 <HAL_ADC_ConfigChannel+0x47c>)
 80022bc:	4013      	ands	r3, r2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	0691      	lsls	r1, r2, #26
 80022c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022c6:	430a      	orrs	r2, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022d2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022d4:	e059      	b.n	800238a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022dc:	4b82      	ldr	r3, [pc, #520]	@ (80024e8 <HAL_ADC_ConfigChannel+0x47c>)
 80022de:	4013      	ands	r3, r2
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	0691      	lsls	r1, r2, #26
 80022e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022e8:	430a      	orrs	r2, r1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022f4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022f6:	e048      	b.n	800238a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	069b      	lsls	r3, r3, #26
 8002308:	429a      	cmp	r2, r3
 800230a:	d107      	bne.n	800231c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800231a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002322:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	069b      	lsls	r3, r3, #26
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800233e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	069b      	lsls	r3, r3, #26
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002362:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800236a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002386:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002388:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x33e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x33e>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_ADC_ConfigChannel+0x340>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 810a 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d00f      	beq.n	80023da <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80023d8:	e049      	b.n	800246e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	409a      	lsls	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	d91c      	bls.n	8002436 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6999      	ldr	r1, [r3, #24]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	3b1b      	subs	r3, #27
 800240e:	2207      	movs	r2, #7
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	4019      	ands	r1, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6898      	ldr	r0, [r3, #8]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	3b1b      	subs	r3, #27
 8002428:	fa00 f203 	lsl.w	r2, r0, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	619a      	str	r2, [r3, #24]
 8002434:	e01b      	b.n	800246e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6959      	ldr	r1, [r3, #20]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	2207      	movs	r2, #7
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	4019      	ands	r1, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6898      	ldr	r0, [r3, #8]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	fa00 f203 	lsl.w	r2, r0, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800246e:	4b1f      	ldr	r3, [pc, #124]	@ (80024ec <HAL_ADC_ConfigChannel+0x480>)
 8002470:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b10      	cmp	r3, #16
 8002478:	d105      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800247a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	d015      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800248a:	2b11      	cmp	r3, #17
 800248c:	d105      	bne.n	800249a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800248e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800249e:	2b12      	cmp	r3, #18
 80024a0:	f040 8091 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 808a 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ba:	d102      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x456>
 80024bc:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_ADC_ConfigChannel+0x484>)
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e002      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x45c>
 80024c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024c6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10e      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x488>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x488>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e006      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x48a>
 80024e8:	83fff000 	.word	0x83fff000
 80024ec:	50000300 	.word	0x50000300
 80024f0:	50000100 	.word	0x50000100
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d150      	bne.n	800259c <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_ADC_ConfigChannel+0x4b0>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x4b0>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_ADC_ConfigChannel+0x4b2>
 800251c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800251e:	2b00      	cmp	r3, #0
 8002520:	d13c      	bne.n	800259c <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b10      	cmp	r3, #16
 8002528:	d11d      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x4fa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002532:	d118      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800253c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800253e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002540:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <HAL_ADC_ConfigChannel+0x574>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a27      	ldr	r2, [pc, #156]	@ (80025e4 <HAL_ADC_ConfigChannel+0x578>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9a      	lsrs	r2, r3, #18
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002556:	e002      	b.n	800255e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3b01      	subs	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002564:	e02e      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b11      	cmp	r3, #17
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x51a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002576:	d106      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002582:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002584:	e01e      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b12      	cmp	r3, #18
 800258c:	d11a      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800258e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002598:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800259a:	e013      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80025ae:	e00a      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80025c2:	e000      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025c4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	376c      	adds	r7, #108	@ 0x6c
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000038 	.word	0x20000038
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b099      	sub	sp, #100	@ 0x64
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002600:	d102      	bne.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002602:	4b5a      	ldr	r3, [pc, #360]	@ (800276c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	e002      	b.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002608:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800260c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0a2      	b.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002622:	2302      	movs	r3, #2
 8002624:	e09b      	b.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d17f      	bne.n	800273c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d179      	bne.n	800273c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002648:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800264a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d040      	beq.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002666:	035b      	lsls	r3, r3, #13
 8002668:	430b      	orrs	r3, r1
 800266a:	431a      	orrs	r2, r3
 800266c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800266e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d15c      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80026b2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d14b      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026c0:	f023 030f 	bic.w	r3, r3, #15
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026d2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d4:	e03c      	b.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d108      	bne.n	8002702 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d123      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002724:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	d112      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800272a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002732:	f023 030f 	bic.w	r3, r3, #15
 8002736:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002738:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800273a:	e009      	b.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800274e:	e000      	b.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002750:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800275a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800275e:	4618      	mov	r0, r3
 8002760:	3764      	adds	r7, #100	@ 0x64
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	50000100 	.word	0x50000100
 8002770:	50000300 	.word	0x50000300

08002774 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800278a:	2b00      	cmp	r3, #0
 800278c:	d126      	bne.n	80027dc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d115      	bne.n	80027d4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7fe fd75 	bl	80012c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80027da:	e004      	b.n	80027e6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff f943 	bl	8001a88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	f043 0204 	orr.w	r2, r3, #4
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff f933 	bl	8001a9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d108      	bne.n	800286c <ADC_Enable+0x2c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <ADC_Enable+0x2c>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <ADC_Enable+0x2e>
 800286c:	2300      	movs	r3, #0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d143      	bne.n	80028fa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	4b22      	ldr	r3, [pc, #136]	@ (8002904 <ADC_Enable+0xc4>)
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f043 0210 	orr.w	r2, r3, #16
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e02f      	b.n	80028fc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80028ac:	f7ff f8bc 	bl	8001a28 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028b2:	e01b      	b.n	80028ec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028b4:	f7ff f8b8 	bl	8001a28 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d914      	bls.n	80028ec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d00d      	beq.n	80028ec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e007      	b.n	80028fc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d1dc      	bne.n	80028b4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	8000003f 	.word	0x8000003f

08002908 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <ADC_Disable+0x2c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <ADC_Disable+0x2c>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <ADC_Disable+0x2e>
 8002934:	2300      	movs	r3, #0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d047      	beq.n	80029ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030d 	and.w	r3, r3, #13
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10f      	bne.n	8002968 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0202 	orr.w	r2, r2, #2
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2203      	movs	r2, #3
 800295e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002960:	f7ff f862 	bl	8001a28 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002966:	e029      	b.n	80029bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	f043 0210 	orr.w	r2, r3, #16
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e023      	b.n	80029cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002984:	f7ff f850 	bl	8001a28 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d914      	bls.n	80029bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10d      	bne.n	80029bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f043 0210 	orr.w	r2, r3, #16
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e007      	b.n	80029cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d0dc      	beq.n	8002984 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	60d3      	str	r3, [r2, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a20:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <__NVIC_GetPriorityGrouping+0x18>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	f003 0307 	and.w	r3, r3, #7
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	db0b      	blt.n	8002a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	4907      	ldr	r1, [pc, #28]	@ (8002a70 <__NVIC_EnableIRQ+0x38>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	2001      	movs	r0, #1
 8002a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	db0a      	blt.n	8002a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	490c      	ldr	r1, [pc, #48]	@ (8002ac0 <__NVIC_SetPriority+0x4c>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	0112      	lsls	r2, r2, #4
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	440b      	add	r3, r1
 8002a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a9c:	e00a      	b.n	8002ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4908      	ldr	r1, [pc, #32]	@ (8002ac4 <__NVIC_SetPriority+0x50>)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	761a      	strb	r2, [r3, #24]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000e100 	.word	0xe000e100
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	@ 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f1c3 0307 	rsb	r3, r3, #7
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	bf28      	it	cs
 8002ae6:	2304      	movcs	r3, #4
 8002ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d902      	bls.n	8002af8 <NVIC_EncodePriority+0x30>
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3b03      	subs	r3, #3
 8002af6:	e000      	b.n	8002afa <NVIC_EncodePriority+0x32>
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b10:	f04f 31ff 	mov.w	r1, #4294967295
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	43d9      	mvns	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	4313      	orrs	r3, r2
         );
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3724      	adds	r7, #36	@ 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b40:	d301      	bcc.n	8002b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00f      	b.n	8002b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b46:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <SysTick_Config+0x40>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4e:	210f      	movs	r1, #15
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	f7ff ff8e 	bl	8002a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <SysTick_Config+0x40>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5e:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <SysTick_Config+0x40>)
 8002b60:	2207      	movs	r2, #7
 8002b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	e000e010 	.word	0xe000e010

08002b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff29 	bl	80029d4 <__NVIC_SetPriorityGrouping>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b9c:	f7ff ff3e 	bl	8002a1c <__NVIC_GetPriorityGrouping>
 8002ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	6978      	ldr	r0, [r7, #20]
 8002ba8:	f7ff ff8e 	bl	8002ac8 <NVIC_EncodePriority>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff5d 	bl	8002a74 <__NVIC_SetPriority>
}
 8002bba:	bf00      	nop
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff31 	bl	8002a38 <__NVIC_EnableIRQ>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffa2 	bl	8002b30 <SysTick_Config>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e037      	b.n	8002c7c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c22:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f940 	bl	8002ee4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}  
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA_Start_IT+0x20>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e04a      	b.n	8002d3a <HAL_DMA_Start_IT+0xb6>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d13a      	bne.n	8002d2c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8d4 	bl	8002e88 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 020e 	orr.w	r2, r2, #14
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e00f      	b.n	8002d1a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 020a 	orr.w	r2, r2, #10
 8002d08:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0204 	bic.w	r2, r2, #4
 8002d18:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e005      	b.n	8002d38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	2204      	movs	r2, #4
 8002d60:	409a      	lsls	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d024      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x72>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01f      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0204 	bic.w	r2, r2, #4
 8002d90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002da0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d06a      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002db2:	e065      	b.n	8002e80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	2202      	movs	r2, #2
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d02c      	beq.n	8002e1e <HAL_DMA_IRQHandler+0xdc>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d027      	beq.n	8002e1e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10b      	bne.n	8002df4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 020a 	bic.w	r2, r2, #10
 8002dea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d035      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e1c:	e030      	b.n	8002e80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2208      	movs	r2, #8
 8002e24:	409a      	lsls	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d028      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x13e>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d023      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 020e 	bic.w	r2, r2, #14
 8002e46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f202 	lsl.w	r2, r1, r2
 8002e56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
    }
  }
}  
 8002e7e:	e7ff      	b.n	8002e80 <HAL_DMA_IRQHandler+0x13e>
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d108      	bne.n	8002ec8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ec6:	e007      	b.n	8002ed8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <DMA_CalcBaseAndBitshift+0x34>)
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a09      	ldr	r2, [pc, #36]	@ (8002f1c <DMA_CalcBaseAndBitshift+0x38>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	009a      	lsls	r2, r3, #2
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a06      	ldr	r2, [pc, #24]	@ (8002f20 <DMA_CalcBaseAndBitshift+0x3c>)
 8002f08:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	bffdfff8 	.word	0xbffdfff8
 8002f1c:	cccccccd 	.word	0xcccccccd
 8002f20:	40020000 	.word	0x40020000

08002f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f32:	e14e      	b.n	80031d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8140 	beq.w	80031cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d005      	beq.n	8002f64 <HAL_GPIO_Init+0x40>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d130      	bne.n	8002fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 0201 	and.w	r2, r3, #1
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d017      	beq.n	8003002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d123      	bne.n	8003056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	08da      	lsrs	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3208      	adds	r2, #8
 8003050:	6939      	ldr	r1, [r7, #16]
 8003052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0203 	and.w	r2, r3, #3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 809a 	beq.w	80031cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003098:	4b55      	ldr	r3, [pc, #340]	@ (80031f0 <HAL_GPIO_Init+0x2cc>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4a54      	ldr	r2, [pc, #336]	@ (80031f0 <HAL_GPIO_Init+0x2cc>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6193      	str	r3, [r2, #24]
 80030a4:	4b52      	ldr	r3, [pc, #328]	@ (80031f0 <HAL_GPIO_Init+0x2cc>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030b0:	4a50      	ldr	r2, [pc, #320]	@ (80031f4 <HAL_GPIO_Init+0x2d0>)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	220f      	movs	r2, #15
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030da:	d013      	beq.n	8003104 <HAL_GPIO_Init+0x1e0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a46      	ldr	r2, [pc, #280]	@ (80031f8 <HAL_GPIO_Init+0x2d4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00d      	beq.n	8003100 <HAL_GPIO_Init+0x1dc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a45      	ldr	r2, [pc, #276]	@ (80031fc <HAL_GPIO_Init+0x2d8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d007      	beq.n	80030fc <HAL_GPIO_Init+0x1d8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a44      	ldr	r2, [pc, #272]	@ (8003200 <HAL_GPIO_Init+0x2dc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_GPIO_Init+0x1d4>
 80030f4:	2303      	movs	r3, #3
 80030f6:	e006      	b.n	8003106 <HAL_GPIO_Init+0x1e2>
 80030f8:	2305      	movs	r3, #5
 80030fa:	e004      	b.n	8003106 <HAL_GPIO_Init+0x1e2>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e002      	b.n	8003106 <HAL_GPIO_Init+0x1e2>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_GPIO_Init+0x1e2>
 8003104:	2300      	movs	r3, #0
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	f002 0203 	and.w	r2, r2, #3
 800310c:	0092      	lsls	r2, r2, #2
 800310e:	4093      	lsls	r3, r2
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003116:	4937      	ldr	r1, [pc, #220]	@ (80031f4 <HAL_GPIO_Init+0x2d0>)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003124:	4b37      	ldr	r3, [pc, #220]	@ (8003204 <HAL_GPIO_Init+0x2e0>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003148:	4a2e      	ldr	r2, [pc, #184]	@ (8003204 <HAL_GPIO_Init+0x2e0>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800314e:	4b2d      	ldr	r3, [pc, #180]	@ (8003204 <HAL_GPIO_Init+0x2e0>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003172:	4a24      	ldr	r2, [pc, #144]	@ (8003204 <HAL_GPIO_Init+0x2e0>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003178:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <HAL_GPIO_Init+0x2e0>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43db      	mvns	r3, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800319c:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_GPIO_Init+0x2e0>)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a2:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <HAL_GPIO_Init+0x2e0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003204 <HAL_GPIO_Init+0x2e0>)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3301      	adds	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f47f aea9 	bne.w	8002f34 <HAL_GPIO_Init+0x10>
  }
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40010000 	.word	0x40010000
 80031f8:	48000400 	.word	0x48000400
 80031fc:	48000800 	.word	0x48000800
 8003200:	48000c00 	.word	0x48000c00
 8003204:	40010400 	.word	0x40010400

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003224:	e002      	b.n	800322c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800323e:	af00      	add	r7, sp, #0
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003248:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800324a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f001 b823 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003262:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 817d 	beq.w	800356e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003274:	4bbc      	ldr	r3, [pc, #752]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b04      	cmp	r3, #4
 800327e:	d00c      	beq.n	800329a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003280:	4bb9      	ldr	r3, [pc, #740]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b08      	cmp	r3, #8
 800328a:	d15c      	bne.n	8003346 <HAL_RCC_OscConfig+0x10e>
 800328c:	4bb6      	ldr	r3, [pc, #728]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003298:	d155      	bne.n	8003346 <HAL_RCC_OscConfig+0x10e>
 800329a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800329e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_OscConfig+0x94>
 80032c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e015      	b.n	80032f8 <HAL_RCC_OscConfig+0xc0>
 80032cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80032e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80032e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80032f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003300:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003304:	fa92 f2a2 	rbit	r2, r2
 8003308:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800330c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f002 021f 	and.w	r2, r2, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 811f 	beq.w	800356c <HAL_RCC_OscConfig+0x334>
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 8116 	bne.w	800356c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f000 bfaf 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x12e>
 8003358:	4b83      	ldr	r3, [pc, #524]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a82      	ldr	r2, [pc, #520]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 800335e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e036      	b.n	80033d4 <HAL_RCC_OscConfig+0x19c>
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x158>
 8003376:	4b7c      	ldr	r3, [pc, #496]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7b      	ldr	r2, [pc, #492]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 800337c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b79      	ldr	r3, [pc, #484]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a78      	ldr	r2, [pc, #480]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 8003388:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e021      	b.n	80033d4 <HAL_RCC_OscConfig+0x19c>
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x184>
 80033a2:	4b71      	ldr	r3, [pc, #452]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a70      	ldr	r2, [pc, #448]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0x19c>
 80033bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a69      	ldr	r2, [pc, #420]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b67      	ldr	r3, [pc, #412]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a66      	ldr	r2, [pc, #408]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033d4:	4b64      	ldr	r3, [pc, #400]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	f023 020f 	bic.w	r2, r3, #15
 80033dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	495f      	ldr	r1, [pc, #380]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d059      	beq.n	80034b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe fb13 	bl	8001a28 <HAL_GetTick>
 8003402:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fb0e 	bl	8001a28 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	@ 0x64
 8003416:	d902      	bls.n	800341e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	f000 bf43 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>
 800341e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003422:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003432:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_RCC_OscConfig+0x218>
 800344a:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	e015      	b.n	800347c <HAL_RCC_OscConfig+0x244>
 8003450:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003454:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003464:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003468:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800346c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003478:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003480:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003484:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003490:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f002 021f 	and.w	r2, r2, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f202 	lsl.w	r2, r1, r2
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ab      	beq.n	8003408 <HAL_RCC_OscConfig+0x1d0>
 80034b0:	e05d      	b.n	800356e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fe fab9 	bl	8001a28 <HAL_GetTick>
 80034b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fab4 	bl	8001a28 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	@ 0x64
 80034ca:	d902      	bls.n	80034d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	f000 bee9 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>
 80034d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80034e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_RCC_OscConfig+0x2cc>
 80034fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	e015      	b.n	8003530 <HAL_RCC_OscConfig+0x2f8>
 8003504:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003508:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003518:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800351c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003520:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003524:	fa93 f3a3 	rbit	r3, r3
 8003528:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800352c:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <HAL_RCC_OscConfig+0x330>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003534:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003538:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800353c:	fa92 f2a2 	rbit	r2, r2
 8003540:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003544:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	f042 0220 	orr.w	r2, r2, #32
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f002 021f 	and.w	r2, r2, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f202 	lsl.w	r2, r1, r2
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ab      	bne.n	80034bc <HAL_RCC_OscConfig+0x284>
 8003564:	e003      	b.n	800356e <HAL_RCC_OscConfig+0x336>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 817d 	beq.w	800387e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003584:	4ba6      	ldr	r3, [pc, #664]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00b      	beq.n	80035a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003590:	4ba3      	ldr	r3, [pc, #652]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d172      	bne.n	8003682 <HAL_RCC_OscConfig+0x44a>
 800359c:	4ba0      	ldr	r3, [pc, #640]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d16c      	bne.n	8003682 <HAL_RCC_OscConfig+0x44a>
 80035a8:	2302      	movs	r3, #2
 80035aa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80035ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_OscConfig+0x3a0>
 80035d2:	4b93      	ldr	r3, [pc, #588]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e013      	b.n	8003600 <HAL_RCC_OscConfig+0x3c8>
 80035d8:	2302      	movs	r3, #2
 80035da:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80035ea:	2302      	movs	r3, #2
 80035ec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80035f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80035fc:	4b88      	ldr	r3, [pc, #544]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	2202      	movs	r2, #2
 8003602:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003606:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800360a:	fa92 f2a2 	rbit	r2, r2
 800360e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003612:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0220 	orr.w	r2, r2, #32
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCC_OscConfig+0x410>
 8003632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003636:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d002      	beq.n	8003648 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f000 be2e 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	4b75      	ldr	r3, [pc, #468]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003654:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	21f8      	movs	r1, #248	@ 0xf8
 800365e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003666:	fa91 f1a1 	rbit	r1, r1
 800366a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800366e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003672:	fab1 f181 	clz	r1, r1
 8003676:	b2c9      	uxtb	r1, r1
 8003678:	408b      	lsls	r3, r1
 800367a:	4969      	ldr	r1, [pc, #420]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003680:	e0fd      	b.n	800387e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8088 	beq.w	80037a4 <HAL_RCC_OscConfig+0x56c>
 8003694:	2301      	movs	r3, #1
 8003696:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80036a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	461a      	mov	r2, r3
 80036bc:	2301      	movs	r3, #1
 80036be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe f9b2 	bl	8001a28 <HAL_GetTick>
 80036c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fe f9ad 	bl	8001a28 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d902      	bls.n	80036e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	f000 bde2 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>
 80036e0:	2302      	movs	r3, #2
 80036e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80036f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_RCC_OscConfig+0x4d8>
 800370a:	4b45      	ldr	r3, [pc, #276]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	e013      	b.n	8003738 <HAL_RCC_OscConfig+0x500>
 8003710:	2302      	movs	r3, #2
 8003712:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003722:	2302      	movs	r3, #2
 8003724:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003728:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003734:	4b3a      	ldr	r3, [pc, #232]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	2202      	movs	r2, #2
 800373a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800373e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800374a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800374e:	fab2 f282 	clz	r2, r2
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f042 0220 	orr.w	r2, r2, #32
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f002 021f 	and.w	r2, r2, #31
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	4013      	ands	r3, r2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0af      	beq.n	80036ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b2d      	ldr	r3, [pc, #180]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	21f8      	movs	r1, #248	@ 0xf8
 8003780:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003788:	fa91 f1a1 	rbit	r1, r1
 800378c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003790:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003794:	fab1 f181 	clz	r1, r1
 8003798:	b2c9      	uxtb	r1, r1
 800379a:	408b      	lsls	r3, r1
 800379c:	4920      	ldr	r1, [pc, #128]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
 80037a2:	e06c      	b.n	800387e <HAL_RCC_OscConfig+0x646>
 80037a4:	2301      	movs	r3, #1
 80037a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80037b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe f92a 	bl	8001a28 <HAL_GetTick>
 80037d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037da:	f7fe f925 	bl	8001a28 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d902      	bls.n	80037f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	f000 bd5a 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>
 80037f0:	2302      	movs	r3, #2
 80037f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003802:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d104      	bne.n	8003824 <HAL_RCC_OscConfig+0x5ec>
 800381a:	4b01      	ldr	r3, [pc, #4]	@ (8003820 <HAL_RCC_OscConfig+0x5e8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	e015      	b.n	800384c <HAL_RCC_OscConfig+0x614>
 8003820:	40021000 	.word	0x40021000
 8003824:	2302      	movs	r3, #2
 8003826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003836:	2302      	movs	r3, #2
 8003838:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800383c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003848:	4bc8      	ldr	r3, [pc, #800]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	2202      	movs	r2, #2
 800384e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003852:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003856:	fa92 f2a2 	rbit	r2, r2
 800385a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800385e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003862:	fab2 f282 	clz	r2, r2
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f002 021f 	and.w	r2, r2, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1ad      	bne.n	80037da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003882:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8110 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003898:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d079      	beq.n	8003998 <HAL_RCC_OscConfig+0x760>
 80038a4:	2301      	movs	r3, #1
 80038a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80038b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	4bab      	ldr	r3, [pc, #684]	@ (8003b70 <HAL_RCC_OscConfig+0x938>)
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	461a      	mov	r2, r3
 80038ca:	2301      	movs	r3, #1
 80038cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fe f8ab 	bl	8001a28 <HAL_GetTick>
 80038d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	e00a      	b.n	80038ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fe f8a6 	bl	8001a28 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d902      	bls.n	80038ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	f000 bcdb 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>
 80038ee:	2302      	movs	r3, #2
 80038f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003904:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003908:	2202      	movs	r2, #2
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003910:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	fa93 f2a3 	rbit	r2, r3
 800391a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800392c:	2202      	movs	r2, #2
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	fa93 f2a3 	rbit	r2, r3
 800393e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003942:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003946:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003948:	4b88      	ldr	r3, [pc, #544]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 800394a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003950:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003954:	2102      	movs	r1, #2
 8003956:	6019      	str	r1, [r3, #0]
 8003958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	fa93 f1a3 	rbit	r1, r3
 8003966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800396e:	6019      	str	r1, [r3, #0]
  return result;
 8003970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003974:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0a0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x6a0>
 8003996:	e08d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x87c>
 8003998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	fa93 f2a3 	rbit	r2, r3
 80039b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039ba:	601a      	str	r2, [r3, #0]
  return result;
 80039bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b68      	ldr	r3, [pc, #416]	@ (8003b70 <HAL_RCC_OscConfig+0x938>)
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	461a      	mov	r2, r3
 80039d6:	2300      	movs	r3, #0
 80039d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039da:	f7fe f825 	bl	8001a28 <HAL_GetTick>
 80039de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe f820 	bl	8001a28 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d902      	bls.n	80039fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	f000 bc55 	b.w	80042a4 <HAL_RCC_OscConfig+0x106c>
 80039fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a02:	2202      	movs	r2, #2
 8003a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f2a3 	rbit	r2, r3
 8003a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a26:	2202      	movs	r2, #2
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	fa93 f2a3 	rbit	r2, r3
 8003a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	fa93 f2a3 	rbit	r2, r3
 8003a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a66:	4b41      	ldr	r3, [pc, #260]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a72:	2102      	movs	r1, #2
 8003a74:	6019      	str	r1, [r3, #0]
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	fa93 f1a3 	rbit	r1, r3
 8003a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a8c:	6019      	str	r1, [r3, #0]
  return result;
 8003a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fab3 f383 	clz	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d197      	bne.n	80039e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 81a1 	beq.w	8003e0c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad0:	4b26      	ldr	r3, [pc, #152]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d116      	bne.n	8003b0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b23      	ldr	r3, [pc, #140]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4a22      	ldr	r2, [pc, #136]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	61d3      	str	r3, [r2, #28]
 8003ae8:	4b20      	ldr	r3, [pc, #128]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b74 <HAL_RCC_OscConfig+0x93c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d11a      	bne.n	8003b4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b16:	4b17      	ldr	r3, [pc, #92]	@ (8003b74 <HAL_RCC_OscConfig+0x93c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a16      	ldr	r2, [pc, #88]	@ (8003b74 <HAL_RCC_OscConfig+0x93c>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b22:	f7fd ff81 	bl	8001a28 <HAL_GetTick>
 8003b26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	e009      	b.n	8003b40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2c:	f7fd ff7c 	bl	8001a28 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	@ 0x64
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e3b1      	b.n	80042a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <HAL_RCC_OscConfig+0x93c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCC_OscConfig+0x940>
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4a02      	ldr	r2, [pc, #8]	@ (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6213      	str	r3, [r2, #32]
 8003b68:	e03c      	b.n	8003be4 <HAL_RCC_OscConfig+0x9ac>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	10908120 	.word	0x10908120
 8003b74:	40007000 	.word	0x40007000
 8003b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10c      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x96a>
 8003b88:	4bc1      	ldr	r3, [pc, #772]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4ac0      	ldr	r2, [pc, #768]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	4bbe      	ldr	r3, [pc, #760]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4abd      	ldr	r2, [pc, #756]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003b9a:	f023 0304 	bic.w	r3, r3, #4
 8003b9e:	6213      	str	r3, [r2, #32]
 8003ba0:	e020      	b.n	8003be4 <HAL_RCC_OscConfig+0x9ac>
 8003ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x994>
 8003bb2:	4bb7      	ldr	r3, [pc, #732]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4ab6      	ldr	r2, [pc, #728]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	6213      	str	r3, [r2, #32]
 8003bbe:	4bb4      	ldr	r3, [pc, #720]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4ab3      	ldr	r2, [pc, #716]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6213      	str	r3, [r2, #32]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0x9ac>
 8003bcc:	4bb0      	ldr	r3, [pc, #704]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4aaf      	ldr	r2, [pc, #700]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	6213      	str	r3, [r2, #32]
 8003bd8:	4bad      	ldr	r3, [pc, #692]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4aac      	ldr	r2, [pc, #688]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003bde:	f023 0304 	bic.w	r3, r3, #4
 8003be2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8081 	beq.w	8003cf8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf6:	f7fd ff17 	bl	8001a28 <HAL_GetTick>
 8003bfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fd ff12 	bl	8001a28 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e345      	b.n	80042a4 <HAL_RCC_OscConfig+0x106c>
 8003c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c20:	2202      	movs	r2, #2
 8003c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	fa93 f2a3 	rbit	r2, r3
 8003c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c40:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c44:	2202      	movs	r2, #2
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fa93 f2a3 	rbit	r2, r3
 8003c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c5e:	601a      	str	r2, [r3, #0]
  return result;
 8003c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c64:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_OscConfig+0xa4c>
 8003c7e:	4b84      	ldr	r3, [pc, #528]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	e013      	b.n	8003cac <HAL_RCC_OscConfig+0xa74>
 8003c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c88:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c94:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	fa93 f2a3 	rbit	r2, r3
 8003c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	4b79      	ldr	r3, [pc, #484]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cb0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	6011      	str	r1, [r2, #0]
 8003cb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cbc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	fa92 f1a2 	rbit	r1, r2
 8003cc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003cce:	6011      	str	r1, [r2, #0]
  return result;
 8003cd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cd4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	fab2 f282 	clz	r2, r2
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	f002 021f 	and.w	r2, r2, #31
 8003cea:	2101      	movs	r1, #1
 8003cec:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d084      	beq.n	8003c00 <HAL_RCC_OscConfig+0x9c8>
 8003cf6:	e07f      	b.n	8003df8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fe96 	bl	8001a28 <HAL_GetTick>
 8003cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	e00b      	b.n	8003d1a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fd fe91 	bl	8001a28 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e2c4      	b.n	80042a4 <HAL_RCC_OscConfig+0x106c>
 8003d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d22:	2202      	movs	r2, #2
 8003d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	fa93 f2a3 	rbit	r2, r3
 8003d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d42:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d46:	2202      	movs	r2, #2
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	fa93 f2a3 	rbit	r2, r3
 8003d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d60:	601a      	str	r2, [r3, #0]
  return result;
 8003d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d102      	bne.n	8003d86 <HAL_RCC_OscConfig+0xb4e>
 8003d80:	4b43      	ldr	r3, [pc, #268]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	e013      	b.n	8003dae <HAL_RCC_OscConfig+0xb76>
 8003d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d8e:	2202      	movs	r2, #2
 8003d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d96:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	fa93 f2a3 	rbit	r2, r3
 8003da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	4b39      	ldr	r3, [pc, #228]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003db2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003db6:	2102      	movs	r1, #2
 8003db8:	6011      	str	r1, [r2, #0]
 8003dba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dbe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	fa92 f1a2 	rbit	r1, r2
 8003dc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dcc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003dd0:	6011      	str	r1, [r2, #0]
  return result;
 8003dd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dd6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	fab2 f282 	clz	r2, r2
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	f002 021f 	and.w	r2, r2, #31
 8003dec:	2101      	movs	r1, #1
 8003dee:	fa01 f202 	lsl.w	r2, r1, r2
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d184      	bne.n	8003d02 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003df8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e00:	4b23      	ldr	r3, [pc, #140]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4a22      	ldr	r2, [pc, #136]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8242 	beq.w	80042a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003e90 <HAL_RCC_OscConfig+0xc58>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	f000 8213 	beq.w	8004252 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f040 8162 	bne.w	8004102 <HAL_RCC_OscConfig+0xeca>
 8003e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e42:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e50:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	fa93 f2a3 	rbit	r2, r3
 8003e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e62:	601a      	str	r2, [r3, #0]
  return result;
 8003e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e68:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2300      	movs	r3, #0
 8003e82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd fdd0 	bl	8001a28 <HAL_GetTick>
 8003e88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8c:	e00c      	b.n	8003ea8 <HAL_RCC_OscConfig+0xc70>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd fdc8 	bl	8001a28 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1fd      	b.n	80042a4 <HAL_RCC_OscConfig+0x106c>
 8003ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003eb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ecc:	601a      	str	r2, [r3, #0]
  return result;
 8003ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ed6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_OscConfig+0xcba>
 8003eec:	4bb0      	ldr	r3, [pc, #704]	@ (80041b0 <HAL_RCC_OscConfig+0xf78>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	e027      	b.n	8003f42 <HAL_RCC_OscConfig+0xd0a>
 8003ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003efa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	fa93 f2a3 	rbit	r2, r3
 8003f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f12:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	fa93 f2a3 	rbit	r2, r3
 8003f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f38:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	4b9c      	ldr	r3, [pc, #624]	@ (80041b0 <HAL_RCC_OscConfig+0xf78>)
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f46:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f4a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f4e:	6011      	str	r1, [r2, #0]
 8003f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f54:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	fa92 f1a2 	rbit	r1, r2
 8003f5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f62:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f66:	6011      	str	r1, [r2, #0]
  return result;
 8003f68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f6c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	fab2 f282 	clz	r2, r2
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	f042 0220 	orr.w	r2, r2, #32
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	f002 021f 	and.w	r2, r2, #31
 8003f82:	2101      	movs	r1, #1
 8003f84:	fa01 f202 	lsl.w	r2, r1, r2
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d182      	bne.n	8003e94 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8e:	4b88      	ldr	r3, [pc, #544]	@ (80041b0 <HAL_RCC_OscConfig+0xf78>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	497f      	ldr	r1, [pc, #508]	@ (80041b0 <HAL_RCC_OscConfig+0xf78>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
 8003fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fa93 f2a3 	rbit	r2, r3
 8003fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fda:	601a      	str	r2, [r3, #0]
  return result;
 8003fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fe4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ff0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fd14 	bl	8001a28 <HAL_GetTick>
 8004000:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004004:	e009      	b.n	800401a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004006:	f7fd fd0f 	bl	8001a28 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e144      	b.n	80042a4 <HAL_RCC_OscConfig+0x106c>
 800401a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004022:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	fa93 f2a3 	rbit	r2, r3
 8004036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800403e:	601a      	str	r2, [r3, #0]
  return result;
 8004040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004044:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004048:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d102      	bne.n	8004064 <HAL_RCC_OscConfig+0xe2c>
 800405e:	4b54      	ldr	r3, [pc, #336]	@ (80041b0 <HAL_RCC_OscConfig+0xf78>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	e027      	b.n	80040b4 <HAL_RCC_OscConfig+0xe7c>
 8004064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004068:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800406c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004076:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	fa93 f2a3 	rbit	r2, r3
 8004080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004084:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004092:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	fa93 f2a3 	rbit	r2, r3
 80040a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	4b3f      	ldr	r3, [pc, #252]	@ (80041b0 <HAL_RCC_OscConfig+0xf78>)
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040b8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040c6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	fa92 f1a2 	rbit	r1, r2
 80040d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040d8:	6011      	str	r1, [r2, #0]
  return result;
 80040da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040de:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	fab2 f282 	clz	r2, r2
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	f042 0220 	orr.w	r2, r2, #32
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f002 021f 	and.w	r2, r2, #31
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d082      	beq.n	8004006 <HAL_RCC_OscConfig+0xdce>
 8004100:	e0cf      	b.n	80042a2 <HAL_RCC_OscConfig+0x106a>
 8004102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004106:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800410a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800410e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004114:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	fa93 f2a3 	rbit	r2, r3
 800411e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004122:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004126:	601a      	str	r2, [r3, #0]
  return result;
 8004128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004130:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800413c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	461a      	mov	r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fd fc6e 	bl	8001a28 <HAL_GetTick>
 800414c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004150:	e009      	b.n	8004166 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004152:	f7fd fc69 	bl	8001a28 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e09e      	b.n	80042a4 <HAL_RCC_OscConfig+0x106c>
 8004166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800416e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004178:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	fa93 f2a3 	rbit	r2, r3
 8004182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004186:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800418a:	601a      	str	r2, [r3, #0]
  return result;
 800418c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004190:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004194:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d104      	bne.n	80041b4 <HAL_RCC_OscConfig+0xf7c>
 80041aa:	4b01      	ldr	r3, [pc, #4]	@ (80041b0 <HAL_RCC_OscConfig+0xf78>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	e029      	b.n	8004204 <HAL_RCC_OscConfig+0xfcc>
 80041b0:	40021000 	.word	0x40021000
 80041b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80041bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	fa93 f2a3 	rbit	r2, r3
 80041d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041de:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	fa93 f2a3 	rbit	r2, r3
 80041f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	4b2b      	ldr	r3, [pc, #172]	@ (80042b0 <HAL_RCC_OscConfig+0x1078>)
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004208:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800420c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004210:	6011      	str	r1, [r2, #0]
 8004212:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004216:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	fa92 f1a2 	rbit	r1, r2
 8004220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004224:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004228:	6011      	str	r1, [r2, #0]
  return result;
 800422a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800422e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	fab2 f282 	clz	r2, r2
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	f042 0220 	orr.w	r2, r2, #32
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	f002 021f 	and.w	r2, r2, #31
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d180      	bne.n	8004152 <HAL_RCC_OscConfig+0xf1a>
 8004250:	e027      	b.n	80042a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e01e      	b.n	80042a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004266:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <HAL_RCC_OscConfig+0x1078>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800426e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004272:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	429a      	cmp	r2, r3
 8004284:	d10b      	bne.n	800429e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004286:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800428a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800428e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004292:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000

080042b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b09e      	sub	sp, #120	@ 0x78
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e162      	b.n	8004592 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b90      	ldr	r3, [pc, #576]	@ (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b8d      	ldr	r3, [pc, #564]	@ (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 0207 	bic.w	r2, r3, #7
 80042e2:	498b      	ldr	r1, [pc, #556]	@ (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b89      	ldr	r3, [pc, #548]	@ (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e14a      	b.n	8004592 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b82      	ldr	r3, [pc, #520]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	497f      	ldr	r1, [pc, #508]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80dc 	beq.w	80044e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d13c      	bne.n	80043aa <HAL_RCC_ClockConfig+0xf6>
 8004330:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004334:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004338:	fa93 f3a3 	rbit	r3, r3
 800433c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800433e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d102      	bne.n	800435a <HAL_RCC_ClockConfig+0xa6>
 8004354:	4b6f      	ldr	r3, [pc, #444]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	e00f      	b.n	800437a <HAL_RCC_ClockConfig+0xc6>
 800435a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800435e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	667b      	str	r3, [r7, #100]	@ 0x64
 8004368:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800436c:	663b      	str	r3, [r7, #96]	@ 0x60
 800436e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004376:	4b67      	ldr	r3, [pc, #412]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800437e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004382:	fa92 f2a2 	rbit	r2, r2
 8004386:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004388:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800438a:	fab2 f282 	clz	r2, r2
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	f042 0220 	orr.w	r2, r2, #32
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	f002 021f 	and.w	r2, r2, #31
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f202 	lsl.w	r2, r1, r2
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d17b      	bne.n	800449e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e0f3      	b.n	8004592 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d13c      	bne.n	800442c <HAL_RCC_ClockConfig+0x178>
 80043b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_ClockConfig+0x128>
 80043d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	e00f      	b.n	80043fc <HAL_RCC_ClockConfig+0x148>
 80043dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f8:	4b46      	ldr	r3, [pc, #280]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004400:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004404:	fa92 f2a2 	rbit	r2, r2
 8004408:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800440a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800440c:	fab2 f282 	clz	r2, r2
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	f042 0220 	orr.w	r2, r2, #32
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	f002 021f 	and.w	r2, r2, #31
 800441c:	2101      	movs	r1, #1
 800441e:	fa01 f202 	lsl.w	r2, r1, r2
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d13a      	bne.n	800449e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0b2      	b.n	8004592 <HAL_RCC_ClockConfig+0x2de>
 800442c:	2302      	movs	r3, #2
 800442e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b01      	cmp	r3, #1
 800444c:	d102      	bne.n	8004454 <HAL_RCC_ClockConfig+0x1a0>
 800444e:	4b31      	ldr	r3, [pc, #196]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	e00d      	b.n	8004470 <HAL_RCC_ClockConfig+0x1bc>
 8004454:	2302      	movs	r3, #2
 8004456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004460:	2302      	movs	r3, #2
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	4b29      	ldr	r3, [pc, #164]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	2202      	movs	r2, #2
 8004472:	61ba      	str	r2, [r7, #24]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	fa92 f2a2 	rbit	r2, r2
 800447a:	617a      	str	r2, [r7, #20]
  return result;
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	fab2 f282 	clz	r2, r2
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	f042 0220 	orr.w	r2, r2, #32
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	f002 021f 	and.w	r2, r2, #31
 800448e:	2101      	movs	r1, #1
 8004490:	fa01 f202 	lsl.w	r2, r1, r2
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e079      	b.n	8004592 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800449e:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f023 0203 	bic.w	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	491a      	ldr	r1, [pc, #104]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b0:	f7fd faba 	bl	8001a28 <HAL_GetTick>
 80044b4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b8:	f7fd fab6 	bl	8001a28 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e061      	b.n	8004592 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 020c 	and.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1eb      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d214      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 0207 	bic.w	r2, r3, #7
 80044f6:	4906      	ldr	r1, [pc, #24]	@ (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <HAL_RCC_ClockConfig+0x25c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e040      	b.n	8004592 <HAL_RCC_ClockConfig+0x2de>
 8004510:	40022000 	.word	0x40022000
 8004514:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004524:	4b1d      	ldr	r3, [pc, #116]	@ (800459c <HAL_RCC_ClockConfig+0x2e8>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	491a      	ldr	r1, [pc, #104]	@ (800459c <HAL_RCC_ClockConfig+0x2e8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004542:	4b16      	ldr	r3, [pc, #88]	@ (800459c <HAL_RCC_ClockConfig+0x2e8>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4912      	ldr	r1, [pc, #72]	@ (800459c <HAL_RCC_ClockConfig+0x2e8>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004556:	f000 f829 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 800455a:	4601      	mov	r1, r0
 800455c:	4b0f      	ldr	r3, [pc, #60]	@ (800459c <HAL_RCC_ClockConfig+0x2e8>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004564:	22f0      	movs	r2, #240	@ 0xf0
 8004566:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	fa92 f2a2 	rbit	r2, r2
 800456e:	60fa      	str	r2, [r7, #12]
  return result;
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	fab2 f282 	clz	r2, r2
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	40d3      	lsrs	r3, r2
 800457a:	4a09      	ldr	r2, [pc, #36]	@ (80045a0 <HAL_RCC_ClockConfig+0x2ec>)
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	fa21 f303 	lsr.w	r3, r1, r3
 8004582:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <HAL_RCC_ClockConfig+0x2f0>)
 8004584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004586:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <HAL_RCC_ClockConfig+0x2f4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fa08 	bl	80019a0 <HAL_InitTick>
  
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3778      	adds	r7, #120	@ 0x78
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
 80045a0:	08008bec 	.word	0x08008bec
 80045a4:	20000038 	.word	0x20000038
 80045a8:	2000003c 	.word	0x2000003c

080045ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b08b      	sub	sp, #44	@ 0x2c
 80045b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045c6:	4b29      	ldr	r3, [pc, #164]	@ (800466c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d002      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x30>
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d003      	beq.n	80045e2 <HAL_RCC_GetSysClockFreq+0x36>
 80045da:	e03c      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045dc:	4b24      	ldr	r3, [pc, #144]	@ (8004670 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045de:	623b      	str	r3, [r7, #32]
      break;
 80045e0:	e03c      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80045e8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80045ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	fa92 f2a2 	rbit	r2, r2
 80045f4:	607a      	str	r2, [r7, #4]
  return result;
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	fab2 f282 	clz	r2, r2
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	40d3      	lsrs	r3, r2
 8004600:	4a1c      	ldr	r2, [pc, #112]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004606:	4b19      	ldr	r3, [pc, #100]	@ (800466c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	220f      	movs	r2, #15
 8004610:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	fa92 f2a2 	rbit	r2, r2
 8004618:	60fa      	str	r2, [r7, #12]
  return result;
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	fab2 f282 	clz	r2, r2
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	40d3      	lsrs	r3, r2
 8004624:	4a14      	ldr	r2, [pc, #80]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004626:	5cd3      	ldrb	r3, [r2, r3]
 8004628:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004634:	4a0e      	ldr	r2, [pc, #56]	@ (8004670 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	fbb2 f2f3 	udiv	r2, r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
 8004644:	e004      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4a0c      	ldr	r2, [pc, #48]	@ (800467c <HAL_RCC_GetSysClockFreq+0xd0>)
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	623b      	str	r3, [r7, #32]
      break;
 8004654:	e002      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004656:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004658:	623b      	str	r3, [r7, #32]
      break;
 800465a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465c:	6a3b      	ldr	r3, [r7, #32]
}
 800465e:	4618      	mov	r0, r3
 8004660:	372c      	adds	r7, #44	@ 0x2c
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	007a1200 	.word	0x007a1200
 8004674:	08008c04 	.word	0x08008c04
 8004678:	08008c14 	.word	0x08008c14
 800467c:	003d0900 	.word	0x003d0900

08004680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	@ (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000038 	.word	0x20000038

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800469e:	f7ff ffef 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a2:	4601      	mov	r1, r0
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80046b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	fa92 f2a2 	rbit	r2, r2
 80046b8:	603a      	str	r2, [r7, #0]
  return result;
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	fab2 f282 	clz	r2, r2
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	40d3      	lsrs	r3, r2
 80046c4:	4a04      	ldr	r2, [pc, #16]	@ (80046d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046c6:	5cd3      	ldrb	r3, [r2, r3]
 80046c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	08008bfc 	.word	0x08008bfc

080046dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046e2:	f7ff ffcd 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046e6:	4601      	mov	r1, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80046f0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80046f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	fa92 f2a2 	rbit	r2, r2
 80046fc:	603a      	str	r2, [r7, #0]
  return result;
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	fab2 f282 	clz	r2, r2
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	40d3      	lsrs	r3, r2
 8004708:	4a04      	ldr	r2, [pc, #16]	@ (800471c <HAL_RCC_GetPCLK2Freq+0x40>)
 800470a:	5cd3      	ldrb	r3, [r2, r3]
 800470c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000
 800471c:	08008bfc 	.word	0x08008bfc

08004720 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b092      	sub	sp, #72	@ 0x48
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80cd 	beq.w	80048de <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004744:	4b86      	ldr	r3, [pc, #536]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10e      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004750:	4b83      	ldr	r3, [pc, #524]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4a82      	ldr	r2, [pc, #520]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475a:	61d3      	str	r3, [r2, #28]
 800475c:	4b80      	ldr	r3, [pc, #512]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b7d      	ldr	r3, [pc, #500]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b7a      	ldr	r3, [pc, #488]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a79      	ldr	r2, [pc, #484]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004784:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fd f94f 	bl	8001a28 <HAL_GetTick>
 800478a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fd f94b 	bl	8001a28 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	@ 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0db      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b70      	ldr	r3, [pc, #448]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d07d      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d076      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ca:	4b65      	ldr	r3, [pc, #404]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047d8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	461a      	mov	r2, r3
 80047f4:	2301      	movs	r3, #1
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	4b55      	ldr	r3, [pc, #340]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	461a      	mov	r2, r3
 8004818:	2300      	movs	r3, #0
 800481a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800481c:	4a50      	ldr	r2, [pc, #320]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800481e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004820:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d045      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fd f8fc 	bl	8001a28 <HAL_GetTick>
 8004830:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fd f8f8 	bl	8001a28 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e086      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800484a:	2302      	movs	r3, #2
 800484c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
 8004856:	2302      	movs	r3, #2
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	61fb      	str	r3, [r7, #28]
  return result;
 8004862:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d102      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004878:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	e007      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800487e:	2302      	movs	r3, #2
 8004880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	4b35      	ldr	r3, [pc, #212]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488e:	2202      	movs	r2, #2
 8004890:	613a      	str	r2, [r7, #16]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	fa92 f2a2 	rbit	r2, r2
 8004898:	60fa      	str	r2, [r7, #12]
  return result;
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	fab2 f282 	clz	r2, r2
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	f002 021f 	and.w	r2, r2, #31
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f202 	lsl.w	r2, r1, r2
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0bd      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048b8:	4b29      	ldr	r3, [pc, #164]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4926      	ldr	r1, [pc, #152]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d2:	4b23      	ldr	r3, [pc, #140]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	4a22      	ldr	r2, [pc, #136]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	491a      	ldr	r1, [pc, #104]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004908:	4b15      	ldr	r3, [pc, #84]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490c:	f023 0210 	bic.w	r2, r3, #16
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4912      	ldr	r1, [pc, #72]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004916:	4313      	orrs	r3, r2
 8004918:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004926:	4b0e      	ldr	r3, [pc, #56]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	490b      	ldr	r1, [pc, #44]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004934:	4313      	orrs	r3, r2
 8004936:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004944:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	4903      	ldr	r1, [pc, #12]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004952:	4313      	orrs	r3, r2
 8004954:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3748      	adds	r7, #72	@ 0x48
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	10908100 	.word	0x10908100

0800496c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e049      	b.n	8004a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fe0c 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fb60 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e049      	b.n	8004ac0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f841 	bl	8004ac8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f000 fb09 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_TIM_PWM_Start+0x24>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e03c      	b.n	8004b7a <HAL_TIM_PWM_Start+0x9e>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d109      	bne.n	8004b1a <HAL_TIM_PWM_Start+0x3e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e02f      	b.n	8004b7a <HAL_TIM_PWM_Start+0x9e>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d109      	bne.n	8004b34 <HAL_TIM_PWM_Start+0x58>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e022      	b.n	8004b7a <HAL_TIM_PWM_Start+0x9e>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d109      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x72>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e015      	b.n	8004b7a <HAL_TIM_PWM_Start+0x9e>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d109      	bne.n	8004b68 <HAL_TIM_PWM_Start+0x8c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e008      	b.n	8004b7a <HAL_TIM_PWM_Start+0x9e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e088      	b.n	8004c94 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_PWM_Start+0xb6>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b90:	e023      	b.n	8004bda <HAL_TIM_PWM_Start+0xfe>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0xc6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ba0:	e01b      	b.n	8004bda <HAL_TIM_PWM_Start+0xfe>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xd6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb0:	e013      	b.n	8004bda <HAL_TIM_PWM_Start+0xfe>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xe6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bc0:	e00b      	b.n	8004bda <HAL_TIM_PWM_Start+0xfe>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0xf6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bd0:	e003      	b.n	8004bda <HAL_TIM_PWM_Start+0xfe>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fdfc 	bl	80057e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2b      	ldr	r2, [pc, #172]	@ (8004c9c <HAL_TIM_PWM_Start+0x1c0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_PWM_Start+0x134>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <HAL_TIM_PWM_Start+0x1c4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_PWM_Start+0x134>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a28      	ldr	r2, [pc, #160]	@ (8004ca4 <HAL_TIM_PWM_Start+0x1c8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_PWM_Start+0x134>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a27      	ldr	r2, [pc, #156]	@ (8004ca8 <HAL_TIM_PWM_Start+0x1cc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_PWM_Start+0x138>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_TIM_PWM_Start+0x13a>
 8004c14:	2300      	movs	r3, #0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <HAL_TIM_PWM_Start+0x1c0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x176>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3c:	d009      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x176>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1a      	ldr	r2, [pc, #104]	@ (8004cac <HAL_TIM_PWM_Start+0x1d0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x176>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <HAL_TIM_PWM_Start+0x1c4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d115      	bne.n	8004c7e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <HAL_TIM_PWM_Start+0x1d4>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b06      	cmp	r3, #6
 8004c62:	d015      	beq.n	8004c90 <HAL_TIM_PWM_Start+0x1b4>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c6a:	d011      	beq.n	8004c90 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7c:	e008      	b.n	8004c90 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e000      	b.n	8004c92 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	00010007 	.word	0x00010007

08004cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e0ff      	b.n	8004ed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b14      	cmp	r3, #20
 8004cde:	f200 80f0 	bhi.w	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d3d 	.word	0x08004d3d
 8004cec:	08004ec3 	.word	0x08004ec3
 8004cf0:	08004ec3 	.word	0x08004ec3
 8004cf4:	08004ec3 	.word	0x08004ec3
 8004cf8:	08004d7d 	.word	0x08004d7d
 8004cfc:	08004ec3 	.word	0x08004ec3
 8004d00:	08004ec3 	.word	0x08004ec3
 8004d04:	08004ec3 	.word	0x08004ec3
 8004d08:	08004dbf 	.word	0x08004dbf
 8004d0c:	08004ec3 	.word	0x08004ec3
 8004d10:	08004ec3 	.word	0x08004ec3
 8004d14:	08004ec3 	.word	0x08004ec3
 8004d18:	08004dff 	.word	0x08004dff
 8004d1c:	08004ec3 	.word	0x08004ec3
 8004d20:	08004ec3 	.word	0x08004ec3
 8004d24:	08004ec3 	.word	0x08004ec3
 8004d28:	08004e41 	.word	0x08004e41
 8004d2c:	08004ec3 	.word	0x08004ec3
 8004d30:	08004ec3 	.word	0x08004ec3
 8004d34:	08004ec3 	.word	0x08004ec3
 8004d38:	08004e81 	.word	0x08004e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fa0c 	bl	8005160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0208 	orr.w	r2, r2, #8
 8004d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0204 	bic.w	r2, r2, #4
 8004d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	619a      	str	r2, [r3, #24]
      break;
 8004d7a:	e0a5      	b.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa72 	bl	800526c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	021a      	lsls	r2, r3, #8
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	619a      	str	r2, [r3, #24]
      break;
 8004dbc:	e084      	b.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fad1 	bl	800536c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0208 	orr.w	r2, r2, #8
 8004dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0204 	bic.w	r2, r2, #4
 8004de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69d9      	ldr	r1, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	61da      	str	r2, [r3, #28]
      break;
 8004dfc:	e064      	b.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fb2f 	bl	8005468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	021a      	lsls	r2, r3, #8
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	61da      	str	r2, [r3, #28]
      break;
 8004e3e:	e043      	b.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fb72 	bl	8005530 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0208 	orr.w	r2, r2, #8
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0204 	bic.w	r2, r2, #4
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e7e:	e023      	b.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fbb0 	bl	80055ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	021a      	lsls	r2, r3, #8
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ec0:	e002      	b.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop

08004edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0b6      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x18a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f34:	d03e      	beq.n	8004fb4 <HAL_TIM_ConfigClockSource+0xd8>
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f3a:	f200 8087 	bhi.w	800504c <HAL_TIM_ConfigClockSource+0x170>
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f42:	f000 8086 	beq.w	8005052 <HAL_TIM_ConfigClockSource+0x176>
 8004f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4a:	d87f      	bhi.n	800504c <HAL_TIM_ConfigClockSource+0x170>
 8004f4c:	2b70      	cmp	r3, #112	@ 0x70
 8004f4e:	d01a      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0xaa>
 8004f50:	2b70      	cmp	r3, #112	@ 0x70
 8004f52:	d87b      	bhi.n	800504c <HAL_TIM_ConfigClockSource+0x170>
 8004f54:	2b60      	cmp	r3, #96	@ 0x60
 8004f56:	d050      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x11e>
 8004f58:	2b60      	cmp	r3, #96	@ 0x60
 8004f5a:	d877      	bhi.n	800504c <HAL_TIM_ConfigClockSource+0x170>
 8004f5c:	2b50      	cmp	r3, #80	@ 0x50
 8004f5e:	d03c      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0xfe>
 8004f60:	2b50      	cmp	r3, #80	@ 0x50
 8004f62:	d873      	bhi.n	800504c <HAL_TIM_ConfigClockSource+0x170>
 8004f64:	2b40      	cmp	r3, #64	@ 0x40
 8004f66:	d058      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x13e>
 8004f68:	2b40      	cmp	r3, #64	@ 0x40
 8004f6a:	d86f      	bhi.n	800504c <HAL_TIM_ConfigClockSource+0x170>
 8004f6c:	2b30      	cmp	r3, #48	@ 0x30
 8004f6e:	d064      	beq.n	800503a <HAL_TIM_ConfigClockSource+0x15e>
 8004f70:	2b30      	cmp	r3, #48	@ 0x30
 8004f72:	d86b      	bhi.n	800504c <HAL_TIM_ConfigClockSource+0x170>
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	d060      	beq.n	800503a <HAL_TIM_ConfigClockSource+0x15e>
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d867      	bhi.n	800504c <HAL_TIM_ConfigClockSource+0x170>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d05c      	beq.n	800503a <HAL_TIM_ConfigClockSource+0x15e>
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d05a      	beq.n	800503a <HAL_TIM_ConfigClockSource+0x15e>
 8004f84:	e062      	b.n	800504c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f96:	f000 fc03 	bl	80057a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	609a      	str	r2, [r3, #8]
      break;
 8004fb2:	e04f      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fc4:	f000 fbec 	bl	80057a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fd6:	609a      	str	r2, [r3, #8]
      break;
 8004fd8:	e03c      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f000 fb60 	bl	80056ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2150      	movs	r1, #80	@ 0x50
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fbb9 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8004ff8:	e02c      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005006:	461a      	mov	r2, r3
 8005008:	f000 fb7f 	bl	800570a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2160      	movs	r1, #96	@ 0x60
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fba9 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005018:	e01c      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	461a      	mov	r2, r3
 8005028:	f000 fb40 	bl	80056ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2140      	movs	r1, #64	@ 0x40
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fb99 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005038:	e00c      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f000 fb90 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 800504a:	e003      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      break;
 8005050:	e000      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005064:	7bfb      	ldrb	r3, [r7, #15]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a32      	ldr	r2, [pc, #200]	@ (800514c <TIM_Base_SetConfig+0xdc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_Base_SetConfig+0x28>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508e:	d003      	beq.n	8005098 <TIM_Base_SetConfig+0x28>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a2f      	ldr	r2, [pc, #188]	@ (8005150 <TIM_Base_SetConfig+0xe0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d108      	bne.n	80050aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a27      	ldr	r2, [pc, #156]	@ (800514c <TIM_Base_SetConfig+0xdc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <TIM_Base_SetConfig+0x6a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b8:	d00f      	beq.n	80050da <TIM_Base_SetConfig+0x6a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a24      	ldr	r2, [pc, #144]	@ (8005150 <TIM_Base_SetConfig+0xe0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00b      	beq.n	80050da <TIM_Base_SetConfig+0x6a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a23      	ldr	r2, [pc, #140]	@ (8005154 <TIM_Base_SetConfig+0xe4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <TIM_Base_SetConfig+0x6a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a22      	ldr	r2, [pc, #136]	@ (8005158 <TIM_Base_SetConfig+0xe8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_Base_SetConfig+0x6a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a21      	ldr	r2, [pc, #132]	@ (800515c <TIM_Base_SetConfig+0xec>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0e      	ldr	r2, [pc, #56]	@ (800514c <TIM_Base_SetConfig+0xdc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_Base_SetConfig+0xc0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0e      	ldr	r2, [pc, #56]	@ (8005154 <TIM_Base_SetConfig+0xe4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_Base_SetConfig+0xc0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a0d      	ldr	r2, [pc, #52]	@ (8005158 <TIM_Base_SetConfig+0xe8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0xc0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0c      	ldr	r2, [pc, #48]	@ (800515c <TIM_Base_SetConfig+0xec>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d103      	bne.n	8005138 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	615a      	str	r2, [r3, #20]
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40014000 	.word	0x40014000
 8005158:	40014400 	.word	0x40014400
 800515c:	40014800 	.word	0x40014800

08005160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800518e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f023 0302 	bic.w	r3, r3, #2
 80051ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a28      	ldr	r2, [pc, #160]	@ (800525c <TIM_OC1_SetConfig+0xfc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00b      	beq.n	80051d8 <TIM_OC1_SetConfig+0x78>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a27      	ldr	r2, [pc, #156]	@ (8005260 <TIM_OC1_SetConfig+0x100>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_OC1_SetConfig+0x78>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a26      	ldr	r2, [pc, #152]	@ (8005264 <TIM_OC1_SetConfig+0x104>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC1_SetConfig+0x78>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a25      	ldr	r2, [pc, #148]	@ (8005268 <TIM_OC1_SetConfig+0x108>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d10c      	bne.n	80051f2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0308 	bic.w	r3, r3, #8
 80051de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 0304 	bic.w	r3, r3, #4
 80051f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a19      	ldr	r2, [pc, #100]	@ (800525c <TIM_OC1_SetConfig+0xfc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00b      	beq.n	8005212 <TIM_OC1_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a18      	ldr	r2, [pc, #96]	@ (8005260 <TIM_OC1_SetConfig+0x100>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <TIM_OC1_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a17      	ldr	r2, [pc, #92]	@ (8005264 <TIM_OC1_SetConfig+0x104>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_OC1_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a16      	ldr	r2, [pc, #88]	@ (8005268 <TIM_OC1_SetConfig+0x108>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d111      	bne.n	8005236 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	621a      	str	r2, [r3, #32]
}
 8005250:	bf00      	nop
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f023 0210 	bic.w	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0320 	bic.w	r3, r3, #32
 80052ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a24      	ldr	r2, [pc, #144]	@ (800535c <TIM_OC2_SetConfig+0xf0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d10d      	bne.n	80052ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	@ (800535c <TIM_OC2_SetConfig+0xf0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00b      	beq.n	800530c <TIM_OC2_SetConfig+0xa0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005360 <TIM_OC2_SetConfig+0xf4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_OC2_SetConfig+0xa0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a19      	ldr	r2, [pc, #100]	@ (8005364 <TIM_OC2_SetConfig+0xf8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_OC2_SetConfig+0xa0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a18      	ldr	r2, [pc, #96]	@ (8005368 <TIM_OC2_SetConfig+0xfc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d113      	bne.n	8005334 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005312:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800531a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a23      	ldr	r2, [pc, #140]	@ (8005458 <TIM_OC3_SetConfig+0xec>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10d      	bne.n	80053ea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053e8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005458 <TIM_OC3_SetConfig+0xec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <TIM_OC3_SetConfig+0x9e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a19      	ldr	r2, [pc, #100]	@ (800545c <TIM_OC3_SetConfig+0xf0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d007      	beq.n	800540a <TIM_OC3_SetConfig+0x9e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a18      	ldr	r2, [pc, #96]	@ (8005460 <TIM_OC3_SetConfig+0xf4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_OC3_SetConfig+0x9e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a17      	ldr	r2, [pc, #92]	@ (8005464 <TIM_OC3_SetConfig+0xf8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d113      	bne.n	8005432 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40012c00 	.word	0x40012c00
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	031b      	lsls	r3, r3, #12
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a16      	ldr	r2, [pc, #88]	@ (8005520 <TIM_OC4_SetConfig+0xb8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_OC4_SetConfig+0x7c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a15      	ldr	r2, [pc, #84]	@ (8005524 <TIM_OC4_SetConfig+0xbc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_OC4_SetConfig+0x7c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a14      	ldr	r2, [pc, #80]	@ (8005528 <TIM_OC4_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC4_SetConfig+0x7c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a13      	ldr	r2, [pc, #76]	@ (800552c <TIM_OC4_SetConfig+0xc4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d109      	bne.n	80054f8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	019b      	lsls	r3, r3, #6
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005574:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a15      	ldr	r2, [pc, #84]	@ (80055dc <TIM_OC5_SetConfig+0xac>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00b      	beq.n	80055a2 <TIM_OC5_SetConfig+0x72>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a14      	ldr	r2, [pc, #80]	@ (80055e0 <TIM_OC5_SetConfig+0xb0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d007      	beq.n	80055a2 <TIM_OC5_SetConfig+0x72>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a13      	ldr	r2, [pc, #76]	@ (80055e4 <TIM_OC5_SetConfig+0xb4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_OC5_SetConfig+0x72>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a12      	ldr	r2, [pc, #72]	@ (80055e8 <TIM_OC5_SetConfig+0xb8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d109      	bne.n	80055b6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800

080055ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800561a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800561e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	051b      	lsls	r3, r3, #20
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a16      	ldr	r2, [pc, #88]	@ (800569c <TIM_OC6_SetConfig+0xb0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_OC6_SetConfig+0x74>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a15      	ldr	r2, [pc, #84]	@ (80056a0 <TIM_OC6_SetConfig+0xb4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <TIM_OC6_SetConfig+0x74>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a14      	ldr	r2, [pc, #80]	@ (80056a4 <TIM_OC6_SetConfig+0xb8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_OC6_SetConfig+0x74>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <TIM_OC6_SetConfig+0xbc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d109      	bne.n	8005674 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005666:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800

080056ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 030a 	bic.w	r3, r3, #10
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570a:	b480      	push	{r7}
 800570c:	b087      	sub	sp, #28
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f023 0210 	bic.w	r2, r3, #16
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	031b      	lsls	r3, r3, #12
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	f043 0307 	orr.w	r3, r3, #7
 800578c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	021a      	lsls	r2, r3, #8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	2201      	movs	r2, #1
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1a      	ldr	r2, [r3, #32]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	43db      	mvns	r3, r3
 8005802:	401a      	ands	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1a      	ldr	r2, [r3, #32]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	fa01 f303 	lsl.w	r3, r1, r3
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
	...

0800582c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005840:	2302      	movs	r3, #2
 8005842:	e054      	b.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a24      	ldr	r2, [pc, #144]	@ (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d108      	bne.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005874:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a17      	ldr	r2, [pc, #92]	@ (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ac:	d009      	beq.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a13      	ldr	r2, [pc, #76]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a11      	ldr	r2, [pc, #68]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d10c      	bne.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40014000 	.word	0x40014000

08005908 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005920:	2302      	movs	r3, #2
 8005922:	e060      	b.n	80059e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a14      	ldr	r2, [pc, #80]	@ (80059f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d115      	bne.n	80059d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	051b      	lsls	r3, r3, #20
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00

080059f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e040      	b.n	8005a8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fb fe20 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2224      	movs	r2, #36	@ 0x24
 8005a24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0201 	bic.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8b6 	bl	8005ba8 <UART_SetConfig>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e022      	b.n	8005a8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f9e0 	bl	8005e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fa67 	bl	8005f58 <UART_CheckIdleState>
 8005a8a:	4603      	mov	r3, r0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	@ 0x28
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d177      	bne.n	8005b9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_UART_Transmit+0x24>
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e070      	b.n	8005b9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2221      	movs	r2, #33	@ 0x21
 8005ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aca:	f7fb ffad 	bl	8001a28 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae8:	d108      	bne.n	8005afc <HAL_UART_Transmit+0x68>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	e003      	b.n	8005b04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b04:	e02f      	b.n	8005b66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2180      	movs	r1, #128	@ 0x80
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fac9 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e03b      	b.n	8005b9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	881a      	ldrh	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b38:	b292      	uxth	r2, r2
 8005b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	3302      	adds	r3, #2
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	e007      	b.n	8005b54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1c9      	bne.n	8005b06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2140      	movs	r1, #64	@ 0x40
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fa93 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e005      	b.n	8005b9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b8a      	ldr	r3, [pc, #552]	@ (8005dfc <UART_SetConfig+0x254>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a78      	ldr	r2, [pc, #480]	@ (8005e00 <UART_SetConfig+0x258>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d120      	bne.n	8005c66 <UART_SetConfig+0xbe>
 8005c24:	4b77      	ldr	r3, [pc, #476]	@ (8005e04 <UART_SetConfig+0x25c>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d817      	bhi.n	8005c60 <UART_SetConfig+0xb8>
 8005c30:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <UART_SetConfig+0x90>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c55 	.word	0x08005c55
 8005c40:	08005c5b 	.word	0x08005c5b
 8005c44:	08005c4f 	.word	0x08005c4f
 8005c48:	2300      	movs	r3, #0
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e01d      	b.n	8005c8a <UART_SetConfig+0xe2>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	77fb      	strb	r3, [r7, #31]
 8005c52:	e01a      	b.n	8005c8a <UART_SetConfig+0xe2>
 8005c54:	2304      	movs	r3, #4
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e017      	b.n	8005c8a <UART_SetConfig+0xe2>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e014      	b.n	8005c8a <UART_SetConfig+0xe2>
 8005c60:	2310      	movs	r3, #16
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e011      	b.n	8005c8a <UART_SetConfig+0xe2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a67      	ldr	r2, [pc, #412]	@ (8005e08 <UART_SetConfig+0x260>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d102      	bne.n	8005c76 <UART_SetConfig+0xce>
 8005c70:	2300      	movs	r3, #0
 8005c72:	77fb      	strb	r3, [r7, #31]
 8005c74:	e009      	b.n	8005c8a <UART_SetConfig+0xe2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a64      	ldr	r2, [pc, #400]	@ (8005e0c <UART_SetConfig+0x264>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d102      	bne.n	8005c86 <UART_SetConfig+0xde>
 8005c80:	2300      	movs	r3, #0
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e001      	b.n	8005c8a <UART_SetConfig+0xe2>
 8005c86:	2310      	movs	r3, #16
 8005c88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c92:	d15a      	bne.n	8005d4a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005c94:	7ffb      	ldrb	r3, [r7, #31]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d827      	bhi.n	8005cea <UART_SetConfig+0x142>
 8005c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca0 <UART_SetConfig+0xf8>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005ceb 	.word	0x08005ceb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005ceb 	.word	0x08005ceb
 8005cb8:	08005ceb 	.word	0x08005ceb
 8005cbc:	08005ceb 	.word	0x08005ceb
 8005cc0:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fe fce8 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	61b8      	str	r0, [r7, #24]
        break;
 8005cca:	e013      	b.n	8005cf4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fe fd06 	bl	80046dc <HAL_RCC_GetPCLK2Freq>
 8005cd0:	61b8      	str	r0, [r7, #24]
        break;
 8005cd2:	e00f      	b.n	8005cf4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8005e10 <UART_SetConfig+0x268>)
 8005cd6:	61bb      	str	r3, [r7, #24]
        break;
 8005cd8:	e00c      	b.n	8005cf4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fe fc67 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 8005cde:	61b8      	str	r0, [r7, #24]
        break;
 8005ce0:	e008      	b.n	8005cf4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce6:	61bb      	str	r3, [r7, #24]
        break;
 8005ce8:	e004      	b.n	8005cf4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8005cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d074      	beq.n	8005de4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	005a      	lsls	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d916      	bls.n	8005d44 <UART_SetConfig+0x19c>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1c:	d212      	bcs.n	8005d44 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f023 030f 	bic.w	r3, r3, #15
 8005d26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	89fb      	ldrh	r3, [r7, #14]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	89fa      	ldrh	r2, [r7, #14]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	e04f      	b.n	8005de4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	77bb      	strb	r3, [r7, #30]
 8005d48:	e04c      	b.n	8005de4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4a:	7ffb      	ldrb	r3, [r7, #31]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d828      	bhi.n	8005da2 <UART_SetConfig+0x1fa>
 8005d50:	a201      	add	r2, pc, #4	@ (adr r2, 8005d58 <UART_SetConfig+0x1b0>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	08005da3 	.word	0x08005da3
 8005d68:	08005d93 	.word	0x08005d93
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005da3 	.word	0x08005da3
 8005d74:	08005da3 	.word	0x08005da3
 8005d78:	08005d9b 	.word	0x08005d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f7fe fc8c 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005d80:	61b8      	str	r0, [r7, #24]
        break;
 8005d82:	e013      	b.n	8005dac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d84:	f7fe fcaa 	bl	80046dc <HAL_RCC_GetPCLK2Freq>
 8005d88:	61b8      	str	r0, [r7, #24]
        break;
 8005d8a:	e00f      	b.n	8005dac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d8c:	4b20      	ldr	r3, [pc, #128]	@ (8005e10 <UART_SetConfig+0x268>)
 8005d8e:	61bb      	str	r3, [r7, #24]
        break;
 8005d90:	e00c      	b.n	8005dac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe fc0b 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 8005d96:	61b8      	str	r0, [r7, #24]
        break;
 8005d98:	e008      	b.n	8005dac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d9e:	61bb      	str	r3, [r7, #24]
        break;
 8005da0:	e004      	b.n	8005dac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	77bb      	strb	r3, [r7, #30]
        break;
 8005daa:	bf00      	nop
    }

    if (pclk != 0U)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d018      	beq.n	8005de4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085a      	lsrs	r2, r3, #1
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	441a      	add	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	d909      	bls.n	8005de0 <UART_SetConfig+0x238>
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd2:	d205      	bcs.n	8005de0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	e001      	b.n	8005de4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005df0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	efff69f3 	.word	0xefff69f3
 8005e00:	40013800 	.word	0x40013800
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40004400 	.word	0x40004400
 8005e0c:	40004800 	.word	0x40004800
 8005e10:	007a1200 	.word	0x007a1200

08005e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01a      	beq.n	8005f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f12:	d10a      	bne.n	8005f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	605a      	str	r2, [r3, #4]
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b098      	sub	sp, #96	@ 0x60
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f68:	f7fb fd5e 	bl	8001a28 <HAL_GetTick>
 8005f6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d12e      	bne.n	8005fda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f84:	2200      	movs	r2, #0
 8005f86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f88c 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d021      	beq.n	8005fda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e6      	bne.n	8005f96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e062      	b.n	80060a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d149      	bne.n	800607c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f856 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d03c      	beq.n	800607c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	623b      	str	r3, [r7, #32]
   return(result);
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006020:	633b      	str	r3, [r7, #48]	@ 0x30
 8006022:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800602e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	60fb      	str	r3, [r7, #12]
   return(result);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	69b9      	ldr	r1, [r7, #24]
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	617b      	str	r3, [r7, #20]
   return(result);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e5      	bne.n	8006034 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e011      	b.n	80060a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3758      	adds	r7, #88	@ 0x58
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b8:	e049      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d045      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fb fcb1 	bl	8001a28 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e048      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d031      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d110      	bne.n	800611a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2208      	movs	r2, #8
 80060fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f838 	bl	8006176 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2208      	movs	r2, #8
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e029      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006128:	d111      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f81e 	bl	8006176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e00f      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d0a6      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006176:	b480      	push	{r7}
 8006178:	b095      	sub	sp, #84	@ 0x54
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800619c:	643b      	str	r3, [r7, #64]	@ 0x40
 800619e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e6      	bne.n	800617e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3308      	adds	r3, #8
 80061b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	61fb      	str	r3, [r7, #28]
   return(result);
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3308      	adds	r3, #8
 80061ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e5      	bne.n	80061b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d118      	bne.n	800621e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f023 0310 	bic.w	r3, r3, #16
 8006200:	647b      	str	r3, [r7, #68]	@ 0x44
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	613b      	str	r3, [r7, #16]
   return(result);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006232:	bf00      	nop
 8006234:	3754      	adds	r7, #84	@ 0x54
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <__cvt>:
 800623e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006242:	ec57 6b10 	vmov	r6, r7, d0
 8006246:	2f00      	cmp	r7, #0
 8006248:	460c      	mov	r4, r1
 800624a:	4619      	mov	r1, r3
 800624c:	463b      	mov	r3, r7
 800624e:	bfbb      	ittet	lt
 8006250:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006254:	461f      	movlt	r7, r3
 8006256:	2300      	movge	r3, #0
 8006258:	232d      	movlt	r3, #45	@ 0x2d
 800625a:	700b      	strb	r3, [r1, #0]
 800625c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800625e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006262:	4691      	mov	r9, r2
 8006264:	f023 0820 	bic.w	r8, r3, #32
 8006268:	bfbc      	itt	lt
 800626a:	4632      	movlt	r2, r6
 800626c:	4616      	movlt	r6, r2
 800626e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006272:	d005      	beq.n	8006280 <__cvt+0x42>
 8006274:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006278:	d100      	bne.n	800627c <__cvt+0x3e>
 800627a:	3401      	adds	r4, #1
 800627c:	2102      	movs	r1, #2
 800627e:	e000      	b.n	8006282 <__cvt+0x44>
 8006280:	2103      	movs	r1, #3
 8006282:	ab03      	add	r3, sp, #12
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	ab02      	add	r3, sp, #8
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	ec47 6b10 	vmov	d0, r6, r7
 800628e:	4653      	mov	r3, sl
 8006290:	4622      	mov	r2, r4
 8006292:	f000 fe4d 	bl	8006f30 <_dtoa_r>
 8006296:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800629a:	4605      	mov	r5, r0
 800629c:	d119      	bne.n	80062d2 <__cvt+0x94>
 800629e:	f019 0f01 	tst.w	r9, #1
 80062a2:	d00e      	beq.n	80062c2 <__cvt+0x84>
 80062a4:	eb00 0904 	add.w	r9, r0, r4
 80062a8:	2200      	movs	r2, #0
 80062aa:	2300      	movs	r3, #0
 80062ac:	4630      	mov	r0, r6
 80062ae:	4639      	mov	r1, r7
 80062b0:	f7fa fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80062b4:	b108      	cbz	r0, 80062ba <__cvt+0x7c>
 80062b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80062ba:	2230      	movs	r2, #48	@ 0x30
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	454b      	cmp	r3, r9
 80062c0:	d31e      	bcc.n	8006300 <__cvt+0xc2>
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062c6:	1b5b      	subs	r3, r3, r5
 80062c8:	4628      	mov	r0, r5
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	b004      	add	sp, #16
 80062ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062d6:	eb00 0904 	add.w	r9, r0, r4
 80062da:	d1e5      	bne.n	80062a8 <__cvt+0x6a>
 80062dc:	7803      	ldrb	r3, [r0, #0]
 80062de:	2b30      	cmp	r3, #48	@ 0x30
 80062e0:	d10a      	bne.n	80062f8 <__cvt+0xba>
 80062e2:	2200      	movs	r2, #0
 80062e4:	2300      	movs	r3, #0
 80062e6:	4630      	mov	r0, r6
 80062e8:	4639      	mov	r1, r7
 80062ea:	f7fa fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80062ee:	b918      	cbnz	r0, 80062f8 <__cvt+0xba>
 80062f0:	f1c4 0401 	rsb	r4, r4, #1
 80062f4:	f8ca 4000 	str.w	r4, [sl]
 80062f8:	f8da 3000 	ldr.w	r3, [sl]
 80062fc:	4499      	add	r9, r3
 80062fe:	e7d3      	b.n	80062a8 <__cvt+0x6a>
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	9103      	str	r1, [sp, #12]
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e7d9      	b.n	80062bc <__cvt+0x7e>

08006308 <__exponent>:
 8006308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630a:	2900      	cmp	r1, #0
 800630c:	bfba      	itte	lt
 800630e:	4249      	neglt	r1, r1
 8006310:	232d      	movlt	r3, #45	@ 0x2d
 8006312:	232b      	movge	r3, #43	@ 0x2b
 8006314:	2909      	cmp	r1, #9
 8006316:	7002      	strb	r2, [r0, #0]
 8006318:	7043      	strb	r3, [r0, #1]
 800631a:	dd29      	ble.n	8006370 <__exponent+0x68>
 800631c:	f10d 0307 	add.w	r3, sp, #7
 8006320:	461d      	mov	r5, r3
 8006322:	270a      	movs	r7, #10
 8006324:	461a      	mov	r2, r3
 8006326:	fbb1 f6f7 	udiv	r6, r1, r7
 800632a:	fb07 1416 	mls	r4, r7, r6, r1
 800632e:	3430      	adds	r4, #48	@ 0x30
 8006330:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006334:	460c      	mov	r4, r1
 8006336:	2c63      	cmp	r4, #99	@ 0x63
 8006338:	f103 33ff 	add.w	r3, r3, #4294967295
 800633c:	4631      	mov	r1, r6
 800633e:	dcf1      	bgt.n	8006324 <__exponent+0x1c>
 8006340:	3130      	adds	r1, #48	@ 0x30
 8006342:	1e94      	subs	r4, r2, #2
 8006344:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006348:	1c41      	adds	r1, r0, #1
 800634a:	4623      	mov	r3, r4
 800634c:	42ab      	cmp	r3, r5
 800634e:	d30a      	bcc.n	8006366 <__exponent+0x5e>
 8006350:	f10d 0309 	add.w	r3, sp, #9
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	42ac      	cmp	r4, r5
 8006358:	bf88      	it	hi
 800635a:	2300      	movhi	r3, #0
 800635c:	3302      	adds	r3, #2
 800635e:	4403      	add	r3, r0
 8006360:	1a18      	subs	r0, r3, r0
 8006362:	b003      	add	sp, #12
 8006364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006366:	f813 6b01 	ldrb.w	r6, [r3], #1
 800636a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800636e:	e7ed      	b.n	800634c <__exponent+0x44>
 8006370:	2330      	movs	r3, #48	@ 0x30
 8006372:	3130      	adds	r1, #48	@ 0x30
 8006374:	7083      	strb	r3, [r0, #2]
 8006376:	70c1      	strb	r1, [r0, #3]
 8006378:	1d03      	adds	r3, r0, #4
 800637a:	e7f1      	b.n	8006360 <__exponent+0x58>

0800637c <_printf_float>:
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	b08d      	sub	sp, #52	@ 0x34
 8006382:	460c      	mov	r4, r1
 8006384:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006388:	4616      	mov	r6, r2
 800638a:	461f      	mov	r7, r3
 800638c:	4605      	mov	r5, r0
 800638e:	f000 fccd 	bl	8006d2c <_localeconv_r>
 8006392:	6803      	ldr	r3, [r0, #0]
 8006394:	9304      	str	r3, [sp, #16]
 8006396:	4618      	mov	r0, r3
 8006398:	f7f9 ff6a 	bl	8000270 <strlen>
 800639c:	2300      	movs	r3, #0
 800639e:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a0:	f8d8 3000 	ldr.w	r3, [r8]
 80063a4:	9005      	str	r0, [sp, #20]
 80063a6:	3307      	adds	r3, #7
 80063a8:	f023 0307 	bic.w	r3, r3, #7
 80063ac:	f103 0208 	add.w	r2, r3, #8
 80063b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063b4:	f8d4 b000 	ldr.w	fp, [r4]
 80063b8:	f8c8 2000 	str.w	r2, [r8]
 80063bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063c4:	9307      	str	r3, [sp, #28]
 80063c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80063ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006644 <_printf_float+0x2c8>)
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295
 80063d8:	f7fa fba8 	bl	8000b2c <__aeabi_dcmpun>
 80063dc:	bb70      	cbnz	r0, 800643c <_printf_float+0xc0>
 80063de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063e2:	4b98      	ldr	r3, [pc, #608]	@ (8006644 <_printf_float+0x2c8>)
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295
 80063e8:	f7fa fb82 	bl	8000af0 <__aeabi_dcmple>
 80063ec:	bb30      	cbnz	r0, 800643c <_printf_float+0xc0>
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	f7fa fb71 	bl	8000adc <__aeabi_dcmplt>
 80063fa:	b110      	cbz	r0, 8006402 <_printf_float+0x86>
 80063fc:	232d      	movs	r3, #45	@ 0x2d
 80063fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006402:	4a91      	ldr	r2, [pc, #580]	@ (8006648 <_printf_float+0x2cc>)
 8006404:	4b91      	ldr	r3, [pc, #580]	@ (800664c <_printf_float+0x2d0>)
 8006406:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800640a:	bf94      	ite	ls
 800640c:	4690      	movls	r8, r2
 800640e:	4698      	movhi	r8, r3
 8006410:	2303      	movs	r3, #3
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	f02b 0304 	bic.w	r3, fp, #4
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	f04f 0900 	mov.w	r9, #0
 800641e:	9700      	str	r7, [sp, #0]
 8006420:	4633      	mov	r3, r6
 8006422:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006424:	4621      	mov	r1, r4
 8006426:	4628      	mov	r0, r5
 8006428:	f000 f9d2 	bl	80067d0 <_printf_common>
 800642c:	3001      	adds	r0, #1
 800642e:	f040 808d 	bne.w	800654c <_printf_float+0x1d0>
 8006432:	f04f 30ff 	mov.w	r0, #4294967295
 8006436:	b00d      	add	sp, #52	@ 0x34
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643c:	4642      	mov	r2, r8
 800643e:	464b      	mov	r3, r9
 8006440:	4640      	mov	r0, r8
 8006442:	4649      	mov	r1, r9
 8006444:	f7fa fb72 	bl	8000b2c <__aeabi_dcmpun>
 8006448:	b140      	cbz	r0, 800645c <_printf_float+0xe0>
 800644a:	464b      	mov	r3, r9
 800644c:	2b00      	cmp	r3, #0
 800644e:	bfbc      	itt	lt
 8006450:	232d      	movlt	r3, #45	@ 0x2d
 8006452:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006456:	4a7e      	ldr	r2, [pc, #504]	@ (8006650 <_printf_float+0x2d4>)
 8006458:	4b7e      	ldr	r3, [pc, #504]	@ (8006654 <_printf_float+0x2d8>)
 800645a:	e7d4      	b.n	8006406 <_printf_float+0x8a>
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006462:	9206      	str	r2, [sp, #24]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	d13b      	bne.n	80064e0 <_printf_float+0x164>
 8006468:	2306      	movs	r3, #6
 800646a:	6063      	str	r3, [r4, #4]
 800646c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006470:	2300      	movs	r3, #0
 8006472:	6022      	str	r2, [r4, #0]
 8006474:	9303      	str	r3, [sp, #12]
 8006476:	ab0a      	add	r3, sp, #40	@ 0x28
 8006478:	e9cd a301 	strd	sl, r3, [sp, #4]
 800647c:	ab09      	add	r3, sp, #36	@ 0x24
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	6861      	ldr	r1, [r4, #4]
 8006482:	ec49 8b10 	vmov	d0, r8, r9
 8006486:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800648a:	4628      	mov	r0, r5
 800648c:	f7ff fed7 	bl	800623e <__cvt>
 8006490:	9b06      	ldr	r3, [sp, #24]
 8006492:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006494:	2b47      	cmp	r3, #71	@ 0x47
 8006496:	4680      	mov	r8, r0
 8006498:	d129      	bne.n	80064ee <_printf_float+0x172>
 800649a:	1cc8      	adds	r0, r1, #3
 800649c:	db02      	blt.n	80064a4 <_printf_float+0x128>
 800649e:	6863      	ldr	r3, [r4, #4]
 80064a0:	4299      	cmp	r1, r3
 80064a2:	dd41      	ble.n	8006528 <_printf_float+0x1ac>
 80064a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80064a8:	fa5f fa8a 	uxtb.w	sl, sl
 80064ac:	3901      	subs	r1, #1
 80064ae:	4652      	mov	r2, sl
 80064b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80064b6:	f7ff ff27 	bl	8006308 <__exponent>
 80064ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064bc:	1813      	adds	r3, r2, r0
 80064be:	2a01      	cmp	r2, #1
 80064c0:	4681      	mov	r9, r0
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	dc02      	bgt.n	80064cc <_printf_float+0x150>
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	07d2      	lsls	r2, r2, #31
 80064ca:	d501      	bpl.n	80064d0 <_printf_float+0x154>
 80064cc:	3301      	adds	r3, #1
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0a2      	beq.n	800641e <_printf_float+0xa2>
 80064d8:	232d      	movs	r3, #45	@ 0x2d
 80064da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064de:	e79e      	b.n	800641e <_printf_float+0xa2>
 80064e0:	9a06      	ldr	r2, [sp, #24]
 80064e2:	2a47      	cmp	r2, #71	@ 0x47
 80064e4:	d1c2      	bne.n	800646c <_printf_float+0xf0>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1c0      	bne.n	800646c <_printf_float+0xf0>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e7bd      	b.n	800646a <_printf_float+0xee>
 80064ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064f2:	d9db      	bls.n	80064ac <_printf_float+0x130>
 80064f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80064f8:	d118      	bne.n	800652c <_printf_float+0x1b0>
 80064fa:	2900      	cmp	r1, #0
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	dd0b      	ble.n	8006518 <_printf_float+0x19c>
 8006500:	6121      	str	r1, [r4, #16]
 8006502:	b913      	cbnz	r3, 800650a <_printf_float+0x18e>
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	07d0      	lsls	r0, r2, #31
 8006508:	d502      	bpl.n	8006510 <_printf_float+0x194>
 800650a:	3301      	adds	r3, #1
 800650c:	440b      	add	r3, r1
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006512:	f04f 0900 	mov.w	r9, #0
 8006516:	e7db      	b.n	80064d0 <_printf_float+0x154>
 8006518:	b913      	cbnz	r3, 8006520 <_printf_float+0x1a4>
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	07d2      	lsls	r2, r2, #31
 800651e:	d501      	bpl.n	8006524 <_printf_float+0x1a8>
 8006520:	3302      	adds	r3, #2
 8006522:	e7f4      	b.n	800650e <_printf_float+0x192>
 8006524:	2301      	movs	r3, #1
 8006526:	e7f2      	b.n	800650e <_printf_float+0x192>
 8006528:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800652c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800652e:	4299      	cmp	r1, r3
 8006530:	db05      	blt.n	800653e <_printf_float+0x1c2>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	6121      	str	r1, [r4, #16]
 8006536:	07d8      	lsls	r0, r3, #31
 8006538:	d5ea      	bpl.n	8006510 <_printf_float+0x194>
 800653a:	1c4b      	adds	r3, r1, #1
 800653c:	e7e7      	b.n	800650e <_printf_float+0x192>
 800653e:	2900      	cmp	r1, #0
 8006540:	bfd4      	ite	le
 8006542:	f1c1 0202 	rsble	r2, r1, #2
 8006546:	2201      	movgt	r2, #1
 8006548:	4413      	add	r3, r2
 800654a:	e7e0      	b.n	800650e <_printf_float+0x192>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	055a      	lsls	r2, r3, #21
 8006550:	d407      	bmi.n	8006562 <_printf_float+0x1e6>
 8006552:	6923      	ldr	r3, [r4, #16]
 8006554:	4642      	mov	r2, r8
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	d12b      	bne.n	80065b8 <_printf_float+0x23c>
 8006560:	e767      	b.n	8006432 <_printf_float+0xb6>
 8006562:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006566:	f240 80dd 	bls.w	8006724 <_printf_float+0x3a8>
 800656a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	f7fa faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006576:	2800      	cmp	r0, #0
 8006578:	d033      	beq.n	80065e2 <_printf_float+0x266>
 800657a:	4a37      	ldr	r2, [pc, #220]	@ (8006658 <_printf_float+0x2dc>)
 800657c:	2301      	movs	r3, #1
 800657e:	4631      	mov	r1, r6
 8006580:	4628      	mov	r0, r5
 8006582:	47b8      	blx	r7
 8006584:	3001      	adds	r0, #1
 8006586:	f43f af54 	beq.w	8006432 <_printf_float+0xb6>
 800658a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800658e:	4543      	cmp	r3, r8
 8006590:	db02      	blt.n	8006598 <_printf_float+0x21c>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	07d8      	lsls	r0, r3, #31
 8006596:	d50f      	bpl.n	80065b8 <_printf_float+0x23c>
 8006598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800659c:	4631      	mov	r1, r6
 800659e:	4628      	mov	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f af45 	beq.w	8006432 <_printf_float+0xb6>
 80065a8:	f04f 0900 	mov.w	r9, #0
 80065ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80065b0:	f104 0a1a 	add.w	sl, r4, #26
 80065b4:	45c8      	cmp	r8, r9
 80065b6:	dc09      	bgt.n	80065cc <_printf_float+0x250>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	079b      	lsls	r3, r3, #30
 80065bc:	f100 8103 	bmi.w	80067c6 <_printf_float+0x44a>
 80065c0:	68e0      	ldr	r0, [r4, #12]
 80065c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065c4:	4298      	cmp	r0, r3
 80065c6:	bfb8      	it	lt
 80065c8:	4618      	movlt	r0, r3
 80065ca:	e734      	b.n	8006436 <_printf_float+0xba>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4652      	mov	r2, sl
 80065d0:	4631      	mov	r1, r6
 80065d2:	4628      	mov	r0, r5
 80065d4:	47b8      	blx	r7
 80065d6:	3001      	adds	r0, #1
 80065d8:	f43f af2b 	beq.w	8006432 <_printf_float+0xb6>
 80065dc:	f109 0901 	add.w	r9, r9, #1
 80065e0:	e7e8      	b.n	80065b4 <_printf_float+0x238>
 80065e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc39      	bgt.n	800665c <_printf_float+0x2e0>
 80065e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006658 <_printf_float+0x2dc>)
 80065ea:	2301      	movs	r3, #1
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f af1d 	beq.w	8006432 <_printf_float+0xb6>
 80065f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80065fc:	ea59 0303 	orrs.w	r3, r9, r3
 8006600:	d102      	bne.n	8006608 <_printf_float+0x28c>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	07d9      	lsls	r1, r3, #31
 8006606:	d5d7      	bpl.n	80065b8 <_printf_float+0x23c>
 8006608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	f43f af0d 	beq.w	8006432 <_printf_float+0xb6>
 8006618:	f04f 0a00 	mov.w	sl, #0
 800661c:	f104 0b1a 	add.w	fp, r4, #26
 8006620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006622:	425b      	negs	r3, r3
 8006624:	4553      	cmp	r3, sl
 8006626:	dc01      	bgt.n	800662c <_printf_float+0x2b0>
 8006628:	464b      	mov	r3, r9
 800662a:	e793      	b.n	8006554 <_printf_float+0x1d8>
 800662c:	2301      	movs	r3, #1
 800662e:	465a      	mov	r2, fp
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f aefb 	beq.w	8006432 <_printf_float+0xb6>
 800663c:	f10a 0a01 	add.w	sl, sl, #1
 8006640:	e7ee      	b.n	8006620 <_printf_float+0x2a4>
 8006642:	bf00      	nop
 8006644:	7fefffff 	.word	0x7fefffff
 8006648:	08008c24 	.word	0x08008c24
 800664c:	08008c28 	.word	0x08008c28
 8006650:	08008c2c 	.word	0x08008c2c
 8006654:	08008c30 	.word	0x08008c30
 8006658:	08008c34 	.word	0x08008c34
 800665c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800665e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006662:	4553      	cmp	r3, sl
 8006664:	bfa8      	it	ge
 8006666:	4653      	movge	r3, sl
 8006668:	2b00      	cmp	r3, #0
 800666a:	4699      	mov	r9, r3
 800666c:	dc36      	bgt.n	80066dc <_printf_float+0x360>
 800666e:	f04f 0b00 	mov.w	fp, #0
 8006672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006676:	f104 021a 	add.w	r2, r4, #26
 800667a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800667c:	9306      	str	r3, [sp, #24]
 800667e:	eba3 0309 	sub.w	r3, r3, r9
 8006682:	455b      	cmp	r3, fp
 8006684:	dc31      	bgt.n	80066ea <_printf_float+0x36e>
 8006686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006688:	459a      	cmp	sl, r3
 800668a:	dc3a      	bgt.n	8006702 <_printf_float+0x386>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	07da      	lsls	r2, r3, #31
 8006690:	d437      	bmi.n	8006702 <_printf_float+0x386>
 8006692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006694:	ebaa 0903 	sub.w	r9, sl, r3
 8006698:	9b06      	ldr	r3, [sp, #24]
 800669a:	ebaa 0303 	sub.w	r3, sl, r3
 800669e:	4599      	cmp	r9, r3
 80066a0:	bfa8      	it	ge
 80066a2:	4699      	movge	r9, r3
 80066a4:	f1b9 0f00 	cmp.w	r9, #0
 80066a8:	dc33      	bgt.n	8006712 <_printf_float+0x396>
 80066aa:	f04f 0800 	mov.w	r8, #0
 80066ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066b2:	f104 0b1a 	add.w	fp, r4, #26
 80066b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b8:	ebaa 0303 	sub.w	r3, sl, r3
 80066bc:	eba3 0309 	sub.w	r3, r3, r9
 80066c0:	4543      	cmp	r3, r8
 80066c2:	f77f af79 	ble.w	80065b8 <_printf_float+0x23c>
 80066c6:	2301      	movs	r3, #1
 80066c8:	465a      	mov	r2, fp
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f aeae 	beq.w	8006432 <_printf_float+0xb6>
 80066d6:	f108 0801 	add.w	r8, r8, #1
 80066da:	e7ec      	b.n	80066b6 <_printf_float+0x33a>
 80066dc:	4642      	mov	r2, r8
 80066de:	4631      	mov	r1, r6
 80066e0:	4628      	mov	r0, r5
 80066e2:	47b8      	blx	r7
 80066e4:	3001      	adds	r0, #1
 80066e6:	d1c2      	bne.n	800666e <_printf_float+0x2f2>
 80066e8:	e6a3      	b.n	8006432 <_printf_float+0xb6>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	9206      	str	r2, [sp, #24]
 80066f2:	47b8      	blx	r7
 80066f4:	3001      	adds	r0, #1
 80066f6:	f43f ae9c 	beq.w	8006432 <_printf_float+0xb6>
 80066fa:	9a06      	ldr	r2, [sp, #24]
 80066fc:	f10b 0b01 	add.w	fp, fp, #1
 8006700:	e7bb      	b.n	800667a <_printf_float+0x2fe>
 8006702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	d1c0      	bne.n	8006692 <_printf_float+0x316>
 8006710:	e68f      	b.n	8006432 <_printf_float+0xb6>
 8006712:	9a06      	ldr	r2, [sp, #24]
 8006714:	464b      	mov	r3, r9
 8006716:	4442      	add	r2, r8
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	d1c3      	bne.n	80066aa <_printf_float+0x32e>
 8006722:	e686      	b.n	8006432 <_printf_float+0xb6>
 8006724:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006728:	f1ba 0f01 	cmp.w	sl, #1
 800672c:	dc01      	bgt.n	8006732 <_printf_float+0x3b6>
 800672e:	07db      	lsls	r3, r3, #31
 8006730:	d536      	bpl.n	80067a0 <_printf_float+0x424>
 8006732:	2301      	movs	r3, #1
 8006734:	4642      	mov	r2, r8
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f ae78 	beq.w	8006432 <_printf_float+0xb6>
 8006742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f ae70 	beq.w	8006432 <_printf_float+0xb6>
 8006752:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006756:	2200      	movs	r2, #0
 8006758:	2300      	movs	r3, #0
 800675a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800675e:	f7fa f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006762:	b9c0      	cbnz	r0, 8006796 <_printf_float+0x41a>
 8006764:	4653      	mov	r3, sl
 8006766:	f108 0201 	add.w	r2, r8, #1
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	d10c      	bne.n	800678e <_printf_float+0x412>
 8006774:	e65d      	b.n	8006432 <_printf_float+0xb6>
 8006776:	2301      	movs	r3, #1
 8006778:	465a      	mov	r2, fp
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae56 	beq.w	8006432 <_printf_float+0xb6>
 8006786:	f108 0801 	add.w	r8, r8, #1
 800678a:	45d0      	cmp	r8, sl
 800678c:	dbf3      	blt.n	8006776 <_printf_float+0x3fa>
 800678e:	464b      	mov	r3, r9
 8006790:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006794:	e6df      	b.n	8006556 <_printf_float+0x1da>
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	f104 0b1a 	add.w	fp, r4, #26
 800679e:	e7f4      	b.n	800678a <_printf_float+0x40e>
 80067a0:	2301      	movs	r3, #1
 80067a2:	4642      	mov	r2, r8
 80067a4:	e7e1      	b.n	800676a <_printf_float+0x3ee>
 80067a6:	2301      	movs	r3, #1
 80067a8:	464a      	mov	r2, r9
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	f43f ae3e 	beq.w	8006432 <_printf_float+0xb6>
 80067b6:	f108 0801 	add.w	r8, r8, #1
 80067ba:	68e3      	ldr	r3, [r4, #12]
 80067bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067be:	1a5b      	subs	r3, r3, r1
 80067c0:	4543      	cmp	r3, r8
 80067c2:	dcf0      	bgt.n	80067a6 <_printf_float+0x42a>
 80067c4:	e6fc      	b.n	80065c0 <_printf_float+0x244>
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	f104 0919 	add.w	r9, r4, #25
 80067ce:	e7f4      	b.n	80067ba <_printf_float+0x43e>

080067d0 <_printf_common>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	4616      	mov	r6, r2
 80067d6:	4698      	mov	r8, r3
 80067d8:	688a      	ldr	r2, [r1, #8]
 80067da:	690b      	ldr	r3, [r1, #16]
 80067dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	bfb8      	it	lt
 80067e4:	4613      	movlt	r3, r2
 80067e6:	6033      	str	r3, [r6, #0]
 80067e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067ec:	4607      	mov	r7, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	b10a      	cbz	r2, 80067f6 <_printf_common+0x26>
 80067f2:	3301      	adds	r3, #1
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	0699      	lsls	r1, r3, #26
 80067fa:	bf42      	ittt	mi
 80067fc:	6833      	ldrmi	r3, [r6, #0]
 80067fe:	3302      	addmi	r3, #2
 8006800:	6033      	strmi	r3, [r6, #0]
 8006802:	6825      	ldr	r5, [r4, #0]
 8006804:	f015 0506 	ands.w	r5, r5, #6
 8006808:	d106      	bne.n	8006818 <_printf_common+0x48>
 800680a:	f104 0a19 	add.w	sl, r4, #25
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	6832      	ldr	r2, [r6, #0]
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	42ab      	cmp	r3, r5
 8006816:	dc26      	bgt.n	8006866 <_printf_common+0x96>
 8006818:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	3b00      	subs	r3, #0
 8006820:	bf18      	it	ne
 8006822:	2301      	movne	r3, #1
 8006824:	0692      	lsls	r2, r2, #26
 8006826:	d42b      	bmi.n	8006880 <_printf_common+0xb0>
 8006828:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800682c:	4641      	mov	r1, r8
 800682e:	4638      	mov	r0, r7
 8006830:	47c8      	blx	r9
 8006832:	3001      	adds	r0, #1
 8006834:	d01e      	beq.n	8006874 <_printf_common+0xa4>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	f003 0306 	and.w	r3, r3, #6
 800683e:	2b04      	cmp	r3, #4
 8006840:	bf02      	ittt	eq
 8006842:	68e5      	ldreq	r5, [r4, #12]
 8006844:	6833      	ldreq	r3, [r6, #0]
 8006846:	1aed      	subeq	r5, r5, r3
 8006848:	68a3      	ldr	r3, [r4, #8]
 800684a:	bf0c      	ite	eq
 800684c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006850:	2500      	movne	r5, #0
 8006852:	4293      	cmp	r3, r2
 8006854:	bfc4      	itt	gt
 8006856:	1a9b      	subgt	r3, r3, r2
 8006858:	18ed      	addgt	r5, r5, r3
 800685a:	2600      	movs	r6, #0
 800685c:	341a      	adds	r4, #26
 800685e:	42b5      	cmp	r5, r6
 8006860:	d11a      	bne.n	8006898 <_printf_common+0xc8>
 8006862:	2000      	movs	r0, #0
 8006864:	e008      	b.n	8006878 <_printf_common+0xa8>
 8006866:	2301      	movs	r3, #1
 8006868:	4652      	mov	r2, sl
 800686a:	4641      	mov	r1, r8
 800686c:	4638      	mov	r0, r7
 800686e:	47c8      	blx	r9
 8006870:	3001      	adds	r0, #1
 8006872:	d103      	bne.n	800687c <_printf_common+0xac>
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	3501      	adds	r5, #1
 800687e:	e7c6      	b.n	800680e <_printf_common+0x3e>
 8006880:	18e1      	adds	r1, r4, r3
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	2030      	movs	r0, #48	@ 0x30
 8006886:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800688a:	4422      	add	r2, r4
 800688c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006894:	3302      	adds	r3, #2
 8006896:	e7c7      	b.n	8006828 <_printf_common+0x58>
 8006898:	2301      	movs	r3, #1
 800689a:	4622      	mov	r2, r4
 800689c:	4641      	mov	r1, r8
 800689e:	4638      	mov	r0, r7
 80068a0:	47c8      	blx	r9
 80068a2:	3001      	adds	r0, #1
 80068a4:	d0e6      	beq.n	8006874 <_printf_common+0xa4>
 80068a6:	3601      	adds	r6, #1
 80068a8:	e7d9      	b.n	800685e <_printf_common+0x8e>
	...

080068ac <_printf_i>:
 80068ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b0:	7e0f      	ldrb	r7, [r1, #24]
 80068b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068b4:	2f78      	cmp	r7, #120	@ 0x78
 80068b6:	4691      	mov	r9, r2
 80068b8:	4680      	mov	r8, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	469a      	mov	sl, r3
 80068be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068c2:	d807      	bhi.n	80068d4 <_printf_i+0x28>
 80068c4:	2f62      	cmp	r7, #98	@ 0x62
 80068c6:	d80a      	bhi.n	80068de <_printf_i+0x32>
 80068c8:	2f00      	cmp	r7, #0
 80068ca:	f000 80d2 	beq.w	8006a72 <_printf_i+0x1c6>
 80068ce:	2f58      	cmp	r7, #88	@ 0x58
 80068d0:	f000 80b9 	beq.w	8006a46 <_printf_i+0x19a>
 80068d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068dc:	e03a      	b.n	8006954 <_printf_i+0xa8>
 80068de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068e2:	2b15      	cmp	r3, #21
 80068e4:	d8f6      	bhi.n	80068d4 <_printf_i+0x28>
 80068e6:	a101      	add	r1, pc, #4	@ (adr r1, 80068ec <_printf_i+0x40>)
 80068e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068ec:	08006945 	.word	0x08006945
 80068f0:	08006959 	.word	0x08006959
 80068f4:	080068d5 	.word	0x080068d5
 80068f8:	080068d5 	.word	0x080068d5
 80068fc:	080068d5 	.word	0x080068d5
 8006900:	080068d5 	.word	0x080068d5
 8006904:	08006959 	.word	0x08006959
 8006908:	080068d5 	.word	0x080068d5
 800690c:	080068d5 	.word	0x080068d5
 8006910:	080068d5 	.word	0x080068d5
 8006914:	080068d5 	.word	0x080068d5
 8006918:	08006a59 	.word	0x08006a59
 800691c:	08006983 	.word	0x08006983
 8006920:	08006a13 	.word	0x08006a13
 8006924:	080068d5 	.word	0x080068d5
 8006928:	080068d5 	.word	0x080068d5
 800692c:	08006a7b 	.word	0x08006a7b
 8006930:	080068d5 	.word	0x080068d5
 8006934:	08006983 	.word	0x08006983
 8006938:	080068d5 	.word	0x080068d5
 800693c:	080068d5 	.word	0x080068d5
 8006940:	08006a1b 	.word	0x08006a1b
 8006944:	6833      	ldr	r3, [r6, #0]
 8006946:	1d1a      	adds	r2, r3, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6032      	str	r2, [r6, #0]
 800694c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006954:	2301      	movs	r3, #1
 8006956:	e09d      	b.n	8006a94 <_printf_i+0x1e8>
 8006958:	6833      	ldr	r3, [r6, #0]
 800695a:	6820      	ldr	r0, [r4, #0]
 800695c:	1d19      	adds	r1, r3, #4
 800695e:	6031      	str	r1, [r6, #0]
 8006960:	0606      	lsls	r6, r0, #24
 8006962:	d501      	bpl.n	8006968 <_printf_i+0xbc>
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	e003      	b.n	8006970 <_printf_i+0xc4>
 8006968:	0645      	lsls	r5, r0, #25
 800696a:	d5fb      	bpl.n	8006964 <_printf_i+0xb8>
 800696c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006970:	2d00      	cmp	r5, #0
 8006972:	da03      	bge.n	800697c <_printf_i+0xd0>
 8006974:	232d      	movs	r3, #45	@ 0x2d
 8006976:	426d      	negs	r5, r5
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800697c:	4859      	ldr	r0, [pc, #356]	@ (8006ae4 <_printf_i+0x238>)
 800697e:	230a      	movs	r3, #10
 8006980:	e011      	b.n	80069a6 <_printf_i+0xfa>
 8006982:	6821      	ldr	r1, [r4, #0]
 8006984:	6833      	ldr	r3, [r6, #0]
 8006986:	0608      	lsls	r0, r1, #24
 8006988:	f853 5b04 	ldr.w	r5, [r3], #4
 800698c:	d402      	bmi.n	8006994 <_printf_i+0xe8>
 800698e:	0649      	lsls	r1, r1, #25
 8006990:	bf48      	it	mi
 8006992:	b2ad      	uxthmi	r5, r5
 8006994:	2f6f      	cmp	r7, #111	@ 0x6f
 8006996:	4853      	ldr	r0, [pc, #332]	@ (8006ae4 <_printf_i+0x238>)
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	bf14      	ite	ne
 800699c:	230a      	movne	r3, #10
 800699e:	2308      	moveq	r3, #8
 80069a0:	2100      	movs	r1, #0
 80069a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069a6:	6866      	ldr	r6, [r4, #4]
 80069a8:	60a6      	str	r6, [r4, #8]
 80069aa:	2e00      	cmp	r6, #0
 80069ac:	bfa2      	ittt	ge
 80069ae:	6821      	ldrge	r1, [r4, #0]
 80069b0:	f021 0104 	bicge.w	r1, r1, #4
 80069b4:	6021      	strge	r1, [r4, #0]
 80069b6:	b90d      	cbnz	r5, 80069bc <_printf_i+0x110>
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	d04b      	beq.n	8006a54 <_printf_i+0x1a8>
 80069bc:	4616      	mov	r6, r2
 80069be:	fbb5 f1f3 	udiv	r1, r5, r3
 80069c2:	fb03 5711 	mls	r7, r3, r1, r5
 80069c6:	5dc7      	ldrb	r7, [r0, r7]
 80069c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069cc:	462f      	mov	r7, r5
 80069ce:	42bb      	cmp	r3, r7
 80069d0:	460d      	mov	r5, r1
 80069d2:	d9f4      	bls.n	80069be <_printf_i+0x112>
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d10b      	bne.n	80069f0 <_printf_i+0x144>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	07df      	lsls	r7, r3, #31
 80069dc:	d508      	bpl.n	80069f0 <_printf_i+0x144>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	6861      	ldr	r1, [r4, #4]
 80069e2:	4299      	cmp	r1, r3
 80069e4:	bfde      	ittt	le
 80069e6:	2330      	movle	r3, #48	@ 0x30
 80069e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069f0:	1b92      	subs	r2, r2, r6
 80069f2:	6122      	str	r2, [r4, #16]
 80069f4:	f8cd a000 	str.w	sl, [sp]
 80069f8:	464b      	mov	r3, r9
 80069fa:	aa03      	add	r2, sp, #12
 80069fc:	4621      	mov	r1, r4
 80069fe:	4640      	mov	r0, r8
 8006a00:	f7ff fee6 	bl	80067d0 <_printf_common>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d14a      	bne.n	8006a9e <_printf_i+0x1f2>
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	b004      	add	sp, #16
 8006a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	f043 0320 	orr.w	r3, r3, #32
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	4833      	ldr	r0, [pc, #204]	@ (8006ae8 <_printf_i+0x23c>)
 8006a1c:	2778      	movs	r7, #120	@ 0x78
 8006a1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	6831      	ldr	r1, [r6, #0]
 8006a26:	061f      	lsls	r7, r3, #24
 8006a28:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a2c:	d402      	bmi.n	8006a34 <_printf_i+0x188>
 8006a2e:	065f      	lsls	r7, r3, #25
 8006a30:	bf48      	it	mi
 8006a32:	b2ad      	uxthmi	r5, r5
 8006a34:	6031      	str	r1, [r6, #0]
 8006a36:	07d9      	lsls	r1, r3, #31
 8006a38:	bf44      	itt	mi
 8006a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a3e:	6023      	strmi	r3, [r4, #0]
 8006a40:	b11d      	cbz	r5, 8006a4a <_printf_i+0x19e>
 8006a42:	2310      	movs	r3, #16
 8006a44:	e7ac      	b.n	80069a0 <_printf_i+0xf4>
 8006a46:	4827      	ldr	r0, [pc, #156]	@ (8006ae4 <_printf_i+0x238>)
 8006a48:	e7e9      	b.n	8006a1e <_printf_i+0x172>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	f023 0320 	bic.w	r3, r3, #32
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	e7f6      	b.n	8006a42 <_printf_i+0x196>
 8006a54:	4616      	mov	r6, r2
 8006a56:	e7bd      	b.n	80069d4 <_printf_i+0x128>
 8006a58:	6833      	ldr	r3, [r6, #0]
 8006a5a:	6825      	ldr	r5, [r4, #0]
 8006a5c:	6961      	ldr	r1, [r4, #20]
 8006a5e:	1d18      	adds	r0, r3, #4
 8006a60:	6030      	str	r0, [r6, #0]
 8006a62:	062e      	lsls	r6, r5, #24
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	d501      	bpl.n	8006a6c <_printf_i+0x1c0>
 8006a68:	6019      	str	r1, [r3, #0]
 8006a6a:	e002      	b.n	8006a72 <_printf_i+0x1c6>
 8006a6c:	0668      	lsls	r0, r5, #25
 8006a6e:	d5fb      	bpl.n	8006a68 <_printf_i+0x1bc>
 8006a70:	8019      	strh	r1, [r3, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	6123      	str	r3, [r4, #16]
 8006a76:	4616      	mov	r6, r2
 8006a78:	e7bc      	b.n	80069f4 <_printf_i+0x148>
 8006a7a:	6833      	ldr	r3, [r6, #0]
 8006a7c:	1d1a      	adds	r2, r3, #4
 8006a7e:	6032      	str	r2, [r6, #0]
 8006a80:	681e      	ldr	r6, [r3, #0]
 8006a82:	6862      	ldr	r2, [r4, #4]
 8006a84:	2100      	movs	r1, #0
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7f9 fba2 	bl	80001d0 <memchr>
 8006a8c:	b108      	cbz	r0, 8006a92 <_printf_i+0x1e6>
 8006a8e:	1b80      	subs	r0, r0, r6
 8006a90:	6060      	str	r0, [r4, #4]
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	6123      	str	r3, [r4, #16]
 8006a96:	2300      	movs	r3, #0
 8006a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a9c:	e7aa      	b.n	80069f4 <_printf_i+0x148>
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	47d0      	blx	sl
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d0ad      	beq.n	8006a08 <_printf_i+0x15c>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	079b      	lsls	r3, r3, #30
 8006ab0:	d413      	bmi.n	8006ada <_printf_i+0x22e>
 8006ab2:	68e0      	ldr	r0, [r4, #12]
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	4298      	cmp	r0, r3
 8006ab8:	bfb8      	it	lt
 8006aba:	4618      	movlt	r0, r3
 8006abc:	e7a6      	b.n	8006a0c <_printf_i+0x160>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	47d0      	blx	sl
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d09d      	beq.n	8006a08 <_printf_i+0x15c>
 8006acc:	3501      	adds	r5, #1
 8006ace:	68e3      	ldr	r3, [r4, #12]
 8006ad0:	9903      	ldr	r1, [sp, #12]
 8006ad2:	1a5b      	subs	r3, r3, r1
 8006ad4:	42ab      	cmp	r3, r5
 8006ad6:	dcf2      	bgt.n	8006abe <_printf_i+0x212>
 8006ad8:	e7eb      	b.n	8006ab2 <_printf_i+0x206>
 8006ada:	2500      	movs	r5, #0
 8006adc:	f104 0619 	add.w	r6, r4, #25
 8006ae0:	e7f5      	b.n	8006ace <_printf_i+0x222>
 8006ae2:	bf00      	nop
 8006ae4:	08008c36 	.word	0x08008c36
 8006ae8:	08008c47 	.word	0x08008c47

08006aec <std>:
 8006aec:	2300      	movs	r3, #0
 8006aee:	b510      	push	{r4, lr}
 8006af0:	4604      	mov	r4, r0
 8006af2:	e9c0 3300 	strd	r3, r3, [r0]
 8006af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006afa:	6083      	str	r3, [r0, #8]
 8006afc:	8181      	strh	r1, [r0, #12]
 8006afe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b00:	81c2      	strh	r2, [r0, #14]
 8006b02:	6183      	str	r3, [r0, #24]
 8006b04:	4619      	mov	r1, r3
 8006b06:	2208      	movs	r2, #8
 8006b08:	305c      	adds	r0, #92	@ 0x5c
 8006b0a:	f000 f906 	bl	8006d1a <memset>
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <std+0x58>)
 8006b10:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <std+0x5c>)
 8006b14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <std+0x60>)
 8006b18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <std+0x64>)
 8006b1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <std+0x68>)
 8006b20:	6224      	str	r4, [r4, #32]
 8006b22:	429c      	cmp	r4, r3
 8006b24:	d006      	beq.n	8006b34 <std+0x48>
 8006b26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b2a:	4294      	cmp	r4, r2
 8006b2c:	d002      	beq.n	8006b34 <std+0x48>
 8006b2e:	33d0      	adds	r3, #208	@ 0xd0
 8006b30:	429c      	cmp	r4, r3
 8006b32:	d105      	bne.n	8006b40 <std+0x54>
 8006b34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3c:	f000 b96a 	b.w	8006e14 <__retarget_lock_init_recursive>
 8006b40:	bd10      	pop	{r4, pc}
 8006b42:	bf00      	nop
 8006b44:	08006c95 	.word	0x08006c95
 8006b48:	08006cb7 	.word	0x08006cb7
 8006b4c:	08006cef 	.word	0x08006cef
 8006b50:	08006d13 	.word	0x08006d13
 8006b54:	20000468 	.word	0x20000468

08006b58 <stdio_exit_handler>:
 8006b58:	4a02      	ldr	r2, [pc, #8]	@ (8006b64 <stdio_exit_handler+0xc>)
 8006b5a:	4903      	ldr	r1, [pc, #12]	@ (8006b68 <stdio_exit_handler+0x10>)
 8006b5c:	4803      	ldr	r0, [pc, #12]	@ (8006b6c <stdio_exit_handler+0x14>)
 8006b5e:	f000 b869 	b.w	8006c34 <_fwalk_sglue>
 8006b62:	bf00      	nop
 8006b64:	20000044 	.word	0x20000044
 8006b68:	08008749 	.word	0x08008749
 8006b6c:	20000054 	.word	0x20000054

08006b70 <cleanup_stdio>:
 8006b70:	6841      	ldr	r1, [r0, #4]
 8006b72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba4 <cleanup_stdio+0x34>)
 8006b74:	4299      	cmp	r1, r3
 8006b76:	b510      	push	{r4, lr}
 8006b78:	4604      	mov	r4, r0
 8006b7a:	d001      	beq.n	8006b80 <cleanup_stdio+0x10>
 8006b7c:	f001 fde4 	bl	8008748 <_fflush_r>
 8006b80:	68a1      	ldr	r1, [r4, #8]
 8006b82:	4b09      	ldr	r3, [pc, #36]	@ (8006ba8 <cleanup_stdio+0x38>)
 8006b84:	4299      	cmp	r1, r3
 8006b86:	d002      	beq.n	8006b8e <cleanup_stdio+0x1e>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f001 fddd 	bl	8008748 <_fflush_r>
 8006b8e:	68e1      	ldr	r1, [r4, #12]
 8006b90:	4b06      	ldr	r3, [pc, #24]	@ (8006bac <cleanup_stdio+0x3c>)
 8006b92:	4299      	cmp	r1, r3
 8006b94:	d004      	beq.n	8006ba0 <cleanup_stdio+0x30>
 8006b96:	4620      	mov	r0, r4
 8006b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9c:	f001 bdd4 	b.w	8008748 <_fflush_r>
 8006ba0:	bd10      	pop	{r4, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000468 	.word	0x20000468
 8006ba8:	200004d0 	.word	0x200004d0
 8006bac:	20000538 	.word	0x20000538

08006bb0 <global_stdio_init.part.0>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006be0 <global_stdio_init.part.0+0x30>)
 8006bb4:	4c0b      	ldr	r4, [pc, #44]	@ (8006be4 <global_stdio_init.part.0+0x34>)
 8006bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8006be8 <global_stdio_init.part.0+0x38>)
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2104      	movs	r1, #4
 8006bc0:	f7ff ff94 	bl	8006aec <std>
 8006bc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bc8:	2201      	movs	r2, #1
 8006bca:	2109      	movs	r1, #9
 8006bcc:	f7ff ff8e 	bl	8006aec <std>
 8006bd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bda:	2112      	movs	r1, #18
 8006bdc:	f7ff bf86 	b.w	8006aec <std>
 8006be0:	200005a0 	.word	0x200005a0
 8006be4:	20000468 	.word	0x20000468
 8006be8:	08006b59 	.word	0x08006b59

08006bec <__sfp_lock_acquire>:
 8006bec:	4801      	ldr	r0, [pc, #4]	@ (8006bf4 <__sfp_lock_acquire+0x8>)
 8006bee:	f000 b912 	b.w	8006e16 <__retarget_lock_acquire_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	200005a9 	.word	0x200005a9

08006bf8 <__sfp_lock_release>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	@ (8006c00 <__sfp_lock_release+0x8>)
 8006bfa:	f000 b90d 	b.w	8006e18 <__retarget_lock_release_recursive>
 8006bfe:	bf00      	nop
 8006c00:	200005a9 	.word	0x200005a9

08006c04 <__sinit>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	4604      	mov	r4, r0
 8006c08:	f7ff fff0 	bl	8006bec <__sfp_lock_acquire>
 8006c0c:	6a23      	ldr	r3, [r4, #32]
 8006c0e:	b11b      	cbz	r3, 8006c18 <__sinit+0x14>
 8006c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c14:	f7ff bff0 	b.w	8006bf8 <__sfp_lock_release>
 8006c18:	4b04      	ldr	r3, [pc, #16]	@ (8006c2c <__sinit+0x28>)
 8006c1a:	6223      	str	r3, [r4, #32]
 8006c1c:	4b04      	ldr	r3, [pc, #16]	@ (8006c30 <__sinit+0x2c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1f5      	bne.n	8006c10 <__sinit+0xc>
 8006c24:	f7ff ffc4 	bl	8006bb0 <global_stdio_init.part.0>
 8006c28:	e7f2      	b.n	8006c10 <__sinit+0xc>
 8006c2a:	bf00      	nop
 8006c2c:	08006b71 	.word	0x08006b71
 8006c30:	200005a0 	.word	0x200005a0

08006c34 <_fwalk_sglue>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	4607      	mov	r7, r0
 8006c3a:	4688      	mov	r8, r1
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	2600      	movs	r6, #0
 8006c40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c44:	f1b9 0901 	subs.w	r9, r9, #1
 8006c48:	d505      	bpl.n	8006c56 <_fwalk_sglue+0x22>
 8006c4a:	6824      	ldr	r4, [r4, #0]
 8006c4c:	2c00      	cmp	r4, #0
 8006c4e:	d1f7      	bne.n	8006c40 <_fwalk_sglue+0xc>
 8006c50:	4630      	mov	r0, r6
 8006c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d907      	bls.n	8006c6c <_fwalk_sglue+0x38>
 8006c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c60:	3301      	adds	r3, #1
 8006c62:	d003      	beq.n	8006c6c <_fwalk_sglue+0x38>
 8006c64:	4629      	mov	r1, r5
 8006c66:	4638      	mov	r0, r7
 8006c68:	47c0      	blx	r8
 8006c6a:	4306      	orrs	r6, r0
 8006c6c:	3568      	adds	r5, #104	@ 0x68
 8006c6e:	e7e9      	b.n	8006c44 <_fwalk_sglue+0x10>

08006c70 <iprintf>:
 8006c70:	b40f      	push	{r0, r1, r2, r3}
 8006c72:	b507      	push	{r0, r1, r2, lr}
 8006c74:	4906      	ldr	r1, [pc, #24]	@ (8006c90 <iprintf+0x20>)
 8006c76:	ab04      	add	r3, sp, #16
 8006c78:	6808      	ldr	r0, [r1, #0]
 8006c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c7e:	6881      	ldr	r1, [r0, #8]
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	f001 fbc5 	bl	8008410 <_vfiprintf_r>
 8006c86:	b003      	add	sp, #12
 8006c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c8c:	b004      	add	sp, #16
 8006c8e:	4770      	bx	lr
 8006c90:	20000050 	.word	0x20000050

08006c94 <__sread>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	460c      	mov	r4, r1
 8006c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9c:	f000 f86c 	bl	8006d78 <_read_r>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	bfab      	itete	ge
 8006ca4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ca8:	181b      	addge	r3, r3, r0
 8006caa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cae:	bfac      	ite	ge
 8006cb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cb2:	81a3      	strhlt	r3, [r4, #12]
 8006cb4:	bd10      	pop	{r4, pc}

08006cb6 <__swrite>:
 8006cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cba:	461f      	mov	r7, r3
 8006cbc:	898b      	ldrh	r3, [r1, #12]
 8006cbe:	05db      	lsls	r3, r3, #23
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	d505      	bpl.n	8006cd4 <__swrite+0x1e>
 8006cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ccc:	2302      	movs	r3, #2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f000 f840 	bl	8006d54 <_lseek_r>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	463b      	mov	r3, r7
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cea:	f000 b857 	b.w	8006d9c <_write_r>

08006cee <__sseek>:
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf6:	f000 f82d 	bl	8006d54 <_lseek_r>
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	bf15      	itete	ne
 8006d00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d0a:	81a3      	strheq	r3, [r4, #12]
 8006d0c:	bf18      	it	ne
 8006d0e:	81a3      	strhne	r3, [r4, #12]
 8006d10:	bd10      	pop	{r4, pc}

08006d12 <__sclose>:
 8006d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d16:	f000 b80d 	b.w	8006d34 <_close_r>

08006d1a <memset>:
 8006d1a:	4402      	add	r2, r0
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d100      	bne.n	8006d24 <memset+0xa>
 8006d22:	4770      	bx	lr
 8006d24:	f803 1b01 	strb.w	r1, [r3], #1
 8006d28:	e7f9      	b.n	8006d1e <memset+0x4>
	...

08006d2c <_localeconv_r>:
 8006d2c:	4800      	ldr	r0, [pc, #0]	@ (8006d30 <_localeconv_r+0x4>)
 8006d2e:	4770      	bx	lr
 8006d30:	20000190 	.word	0x20000190

08006d34 <_close_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d06      	ldr	r5, [pc, #24]	@ (8006d50 <_close_r+0x1c>)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	f7fa fd72 	bl	8001828 <_close>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_close_r+0x1a>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_close_r+0x1a>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	200005a4 	.word	0x200005a4

08006d54 <_lseek_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	@ (8006d74 <_lseek_r+0x20>)
 8006d58:	4604      	mov	r4, r0
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	602a      	str	r2, [r5, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7fa fd87 	bl	8001876 <_lseek>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_lseek_r+0x1e>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_lseek_r+0x1e>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	200005a4 	.word	0x200005a4

08006d78 <_read_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d07      	ldr	r5, [pc, #28]	@ (8006d98 <_read_r+0x20>)
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	4608      	mov	r0, r1
 8006d80:	4611      	mov	r1, r2
 8006d82:	2200      	movs	r2, #0
 8006d84:	602a      	str	r2, [r5, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f7fa fd15 	bl	80017b6 <_read>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_read_r+0x1e>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_read_r+0x1e>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	200005a4 	.word	0x200005a4

08006d9c <_write_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d07      	ldr	r5, [pc, #28]	@ (8006dbc <_write_r+0x20>)
 8006da0:	4604      	mov	r4, r0
 8006da2:	4608      	mov	r0, r1
 8006da4:	4611      	mov	r1, r2
 8006da6:	2200      	movs	r2, #0
 8006da8:	602a      	str	r2, [r5, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f7fa fd20 	bl	80017f0 <_write>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_write_r+0x1e>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_write_r+0x1e>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	200005a4 	.word	0x200005a4

08006dc0 <__errno>:
 8006dc0:	4b01      	ldr	r3, [pc, #4]	@ (8006dc8 <__errno+0x8>)
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000050 	.word	0x20000050

08006dcc <__libc_init_array>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	4d0d      	ldr	r5, [pc, #52]	@ (8006e04 <__libc_init_array+0x38>)
 8006dd0:	4c0d      	ldr	r4, [pc, #52]	@ (8006e08 <__libc_init_array+0x3c>)
 8006dd2:	1b64      	subs	r4, r4, r5
 8006dd4:	10a4      	asrs	r4, r4, #2
 8006dd6:	2600      	movs	r6, #0
 8006dd8:	42a6      	cmp	r6, r4
 8006dda:	d109      	bne.n	8006df0 <__libc_init_array+0x24>
 8006ddc:	4d0b      	ldr	r5, [pc, #44]	@ (8006e0c <__libc_init_array+0x40>)
 8006dde:	4c0c      	ldr	r4, [pc, #48]	@ (8006e10 <__libc_init_array+0x44>)
 8006de0:	f001 fec0 	bl	8008b64 <_init>
 8006de4:	1b64      	subs	r4, r4, r5
 8006de6:	10a4      	asrs	r4, r4, #2
 8006de8:	2600      	movs	r6, #0
 8006dea:	42a6      	cmp	r6, r4
 8006dec:	d105      	bne.n	8006dfa <__libc_init_array+0x2e>
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df4:	4798      	blx	r3
 8006df6:	3601      	adds	r6, #1
 8006df8:	e7ee      	b.n	8006dd8 <__libc_init_array+0xc>
 8006dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfe:	4798      	blx	r3
 8006e00:	3601      	adds	r6, #1
 8006e02:	e7f2      	b.n	8006dea <__libc_init_array+0x1e>
 8006e04:	08008fa0 	.word	0x08008fa0
 8006e08:	08008fa0 	.word	0x08008fa0
 8006e0c:	08008fa0 	.word	0x08008fa0
 8006e10:	08008fa4 	.word	0x08008fa4

08006e14 <__retarget_lock_init_recursive>:
 8006e14:	4770      	bx	lr

08006e16 <__retarget_lock_acquire_recursive>:
 8006e16:	4770      	bx	lr

08006e18 <__retarget_lock_release_recursive>:
 8006e18:	4770      	bx	lr

08006e1a <quorem>:
 8006e1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1e:	6903      	ldr	r3, [r0, #16]
 8006e20:	690c      	ldr	r4, [r1, #16]
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	4607      	mov	r7, r0
 8006e26:	db7e      	blt.n	8006f26 <quorem+0x10c>
 8006e28:	3c01      	subs	r4, #1
 8006e2a:	f101 0814 	add.w	r8, r1, #20
 8006e2e:	00a3      	lsls	r3, r4, #2
 8006e30:	f100 0514 	add.w	r5, r0, #20
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e44:	3301      	adds	r3, #1
 8006e46:	429a      	cmp	r2, r3
 8006e48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e50:	d32e      	bcc.n	8006eb0 <quorem+0x96>
 8006e52:	f04f 0a00 	mov.w	sl, #0
 8006e56:	46c4      	mov	ip, r8
 8006e58:	46ae      	mov	lr, r5
 8006e5a:	46d3      	mov	fp, sl
 8006e5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e60:	b298      	uxth	r0, r3
 8006e62:	fb06 a000 	mla	r0, r6, r0, sl
 8006e66:	0c02      	lsrs	r2, r0, #16
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	fb06 2303 	mla	r3, r6, r3, r2
 8006e6e:	f8de 2000 	ldr.w	r2, [lr]
 8006e72:	b280      	uxth	r0, r0
 8006e74:	b292      	uxth	r2, r2
 8006e76:	1a12      	subs	r2, r2, r0
 8006e78:	445a      	add	r2, fp
 8006e7a:	f8de 0000 	ldr.w	r0, [lr]
 8006e7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e92:	45e1      	cmp	r9, ip
 8006e94:	f84e 2b04 	str.w	r2, [lr], #4
 8006e98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e9c:	d2de      	bcs.n	8006e5c <quorem+0x42>
 8006e9e:	9b00      	ldr	r3, [sp, #0]
 8006ea0:	58eb      	ldr	r3, [r5, r3]
 8006ea2:	b92b      	cbnz	r3, 8006eb0 <quorem+0x96>
 8006ea4:	9b01      	ldr	r3, [sp, #4]
 8006ea6:	3b04      	subs	r3, #4
 8006ea8:	429d      	cmp	r5, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	d32f      	bcc.n	8006f0e <quorem+0xf4>
 8006eae:	613c      	str	r4, [r7, #16]
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f001 f97b 	bl	80081ac <__mcmp>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	db25      	blt.n	8006f06 <quorem+0xec>
 8006eba:	4629      	mov	r1, r5
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ec2:	f8d1 c000 	ldr.w	ip, [r1]
 8006ec6:	fa1f fe82 	uxth.w	lr, r2
 8006eca:	fa1f f38c 	uxth.w	r3, ip
 8006ece:	eba3 030e 	sub.w	r3, r3, lr
 8006ed2:	4403      	add	r3, r0
 8006ed4:	0c12      	lsrs	r2, r2, #16
 8006ed6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006eda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ee4:	45c1      	cmp	r9, r8
 8006ee6:	f841 3b04 	str.w	r3, [r1], #4
 8006eea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006eee:	d2e6      	bcs.n	8006ebe <quorem+0xa4>
 8006ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ef8:	b922      	cbnz	r2, 8006f04 <quorem+0xea>
 8006efa:	3b04      	subs	r3, #4
 8006efc:	429d      	cmp	r5, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	d30b      	bcc.n	8006f1a <quorem+0x100>
 8006f02:	613c      	str	r4, [r7, #16]
 8006f04:	3601      	adds	r6, #1
 8006f06:	4630      	mov	r0, r6
 8006f08:	b003      	add	sp, #12
 8006f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	3b04      	subs	r3, #4
 8006f12:	2a00      	cmp	r2, #0
 8006f14:	d1cb      	bne.n	8006eae <quorem+0x94>
 8006f16:	3c01      	subs	r4, #1
 8006f18:	e7c6      	b.n	8006ea8 <quorem+0x8e>
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	3b04      	subs	r3, #4
 8006f1e:	2a00      	cmp	r2, #0
 8006f20:	d1ef      	bne.n	8006f02 <quorem+0xe8>
 8006f22:	3c01      	subs	r4, #1
 8006f24:	e7ea      	b.n	8006efc <quorem+0xe2>
 8006f26:	2000      	movs	r0, #0
 8006f28:	e7ee      	b.n	8006f08 <quorem+0xee>
 8006f2a:	0000      	movs	r0, r0
 8006f2c:	0000      	movs	r0, r0
	...

08006f30 <_dtoa_r>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	69c7      	ldr	r7, [r0, #28]
 8006f36:	b099      	sub	sp, #100	@ 0x64
 8006f38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f3c:	ec55 4b10 	vmov	r4, r5, d0
 8006f40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006f42:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f44:	4683      	mov	fp, r0
 8006f46:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f4a:	b97f      	cbnz	r7, 8006f6c <_dtoa_r+0x3c>
 8006f4c:	2010      	movs	r0, #16
 8006f4e:	f000 fdfd 	bl	8007b4c <malloc>
 8006f52:	4602      	mov	r2, r0
 8006f54:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f58:	b920      	cbnz	r0, 8006f64 <_dtoa_r+0x34>
 8006f5a:	4ba7      	ldr	r3, [pc, #668]	@ (80071f8 <_dtoa_r+0x2c8>)
 8006f5c:	21ef      	movs	r1, #239	@ 0xef
 8006f5e:	48a7      	ldr	r0, [pc, #668]	@ (80071fc <_dtoa_r+0x2cc>)
 8006f60:	f001 fccc 	bl	80088fc <__assert_func>
 8006f64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f68:	6007      	str	r7, [r0, #0]
 8006f6a:	60c7      	str	r7, [r0, #12]
 8006f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f70:	6819      	ldr	r1, [r3, #0]
 8006f72:	b159      	cbz	r1, 8006f8c <_dtoa_r+0x5c>
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	604a      	str	r2, [r1, #4]
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4093      	lsls	r3, r2
 8006f7c:	608b      	str	r3, [r1, #8]
 8006f7e:	4658      	mov	r0, fp
 8006f80:	f000 feda 	bl	8007d38 <_Bfree>
 8006f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	1e2b      	subs	r3, r5, #0
 8006f8e:	bfb9      	ittee	lt
 8006f90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f94:	9303      	strlt	r3, [sp, #12]
 8006f96:	2300      	movge	r3, #0
 8006f98:	6033      	strge	r3, [r6, #0]
 8006f9a:	9f03      	ldr	r7, [sp, #12]
 8006f9c:	4b98      	ldr	r3, [pc, #608]	@ (8007200 <_dtoa_r+0x2d0>)
 8006f9e:	bfbc      	itt	lt
 8006fa0:	2201      	movlt	r2, #1
 8006fa2:	6032      	strlt	r2, [r6, #0]
 8006fa4:	43bb      	bics	r3, r7
 8006fa6:	d112      	bne.n	8006fce <_dtoa_r+0x9e>
 8006fa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006faa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fb4:	4323      	orrs	r3, r4
 8006fb6:	f000 854d 	beq.w	8007a54 <_dtoa_r+0xb24>
 8006fba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007214 <_dtoa_r+0x2e4>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 854f 	beq.w	8007a64 <_dtoa_r+0xb34>
 8006fc6:	f10a 0303 	add.w	r3, sl, #3
 8006fca:	f000 bd49 	b.w	8007a60 <_dtoa_r+0xb30>
 8006fce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	ec51 0b17 	vmov	r0, r1, d7
 8006fd8:	2300      	movs	r3, #0
 8006fda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006fde:	f7f9 fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fe2:	4680      	mov	r8, r0
 8006fe4:	b158      	cbz	r0, 8006ffe <_dtoa_r+0xce>
 8006fe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fe8:	2301      	movs	r3, #1
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fee:	b113      	cbz	r3, 8006ff6 <_dtoa_r+0xc6>
 8006ff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ff2:	4b84      	ldr	r3, [pc, #528]	@ (8007204 <_dtoa_r+0x2d4>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007218 <_dtoa_r+0x2e8>
 8006ffa:	f000 bd33 	b.w	8007a64 <_dtoa_r+0xb34>
 8006ffe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007002:	aa16      	add	r2, sp, #88	@ 0x58
 8007004:	a917      	add	r1, sp, #92	@ 0x5c
 8007006:	4658      	mov	r0, fp
 8007008:	f001 f980 	bl	800830c <__d2b>
 800700c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007010:	4681      	mov	r9, r0
 8007012:	2e00      	cmp	r6, #0
 8007014:	d077      	beq.n	8007106 <_dtoa_r+0x1d6>
 8007016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007018:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800701c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007024:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007028:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800702c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007030:	4619      	mov	r1, r3
 8007032:	2200      	movs	r2, #0
 8007034:	4b74      	ldr	r3, [pc, #464]	@ (8007208 <_dtoa_r+0x2d8>)
 8007036:	f7f9 f927 	bl	8000288 <__aeabi_dsub>
 800703a:	a369      	add	r3, pc, #420	@ (adr r3, 80071e0 <_dtoa_r+0x2b0>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 fada 	bl	80005f8 <__aeabi_dmul>
 8007044:	a368      	add	r3, pc, #416	@ (adr r3, 80071e8 <_dtoa_r+0x2b8>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f7f9 f91f 	bl	800028c <__adddf3>
 800704e:	4604      	mov	r4, r0
 8007050:	4630      	mov	r0, r6
 8007052:	460d      	mov	r5, r1
 8007054:	f7f9 fa66 	bl	8000524 <__aeabi_i2d>
 8007058:	a365      	add	r3, pc, #404	@ (adr r3, 80071f0 <_dtoa_r+0x2c0>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f7f9 facb 	bl	80005f8 <__aeabi_dmul>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 f90f 	bl	800028c <__adddf3>
 800706e:	4604      	mov	r4, r0
 8007070:	460d      	mov	r5, r1
 8007072:	f7f9 fd71 	bl	8000b58 <__aeabi_d2iz>
 8007076:	2200      	movs	r2, #0
 8007078:	4607      	mov	r7, r0
 800707a:	2300      	movs	r3, #0
 800707c:	4620      	mov	r0, r4
 800707e:	4629      	mov	r1, r5
 8007080:	f7f9 fd2c 	bl	8000adc <__aeabi_dcmplt>
 8007084:	b140      	cbz	r0, 8007098 <_dtoa_r+0x168>
 8007086:	4638      	mov	r0, r7
 8007088:	f7f9 fa4c 	bl	8000524 <__aeabi_i2d>
 800708c:	4622      	mov	r2, r4
 800708e:	462b      	mov	r3, r5
 8007090:	f7f9 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007094:	b900      	cbnz	r0, 8007098 <_dtoa_r+0x168>
 8007096:	3f01      	subs	r7, #1
 8007098:	2f16      	cmp	r7, #22
 800709a:	d851      	bhi.n	8007140 <_dtoa_r+0x210>
 800709c:	4b5b      	ldr	r3, [pc, #364]	@ (800720c <_dtoa_r+0x2dc>)
 800709e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070aa:	f7f9 fd17 	bl	8000adc <__aeabi_dcmplt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d048      	beq.n	8007144 <_dtoa_r+0x214>
 80070b2:	3f01      	subs	r7, #1
 80070b4:	2300      	movs	r3, #0
 80070b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80070b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070ba:	1b9b      	subs	r3, r3, r6
 80070bc:	1e5a      	subs	r2, r3, #1
 80070be:	bf44      	itt	mi
 80070c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80070c4:	2300      	movmi	r3, #0
 80070c6:	9208      	str	r2, [sp, #32]
 80070c8:	bf54      	ite	pl
 80070ca:	f04f 0800 	movpl.w	r8, #0
 80070ce:	9308      	strmi	r3, [sp, #32]
 80070d0:	2f00      	cmp	r7, #0
 80070d2:	db39      	blt.n	8007148 <_dtoa_r+0x218>
 80070d4:	9b08      	ldr	r3, [sp, #32]
 80070d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80070d8:	443b      	add	r3, r7
 80070da:	9308      	str	r3, [sp, #32]
 80070dc:	2300      	movs	r3, #0
 80070de:	930a      	str	r3, [sp, #40]	@ 0x28
 80070e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e2:	2b09      	cmp	r3, #9
 80070e4:	d864      	bhi.n	80071b0 <_dtoa_r+0x280>
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	bfc4      	itt	gt
 80070ea:	3b04      	subgt	r3, #4
 80070ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80070ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f0:	f1a3 0302 	sub.w	r3, r3, #2
 80070f4:	bfcc      	ite	gt
 80070f6:	2400      	movgt	r4, #0
 80070f8:	2401      	movle	r4, #1
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d863      	bhi.n	80071c6 <_dtoa_r+0x296>
 80070fe:	e8df f003 	tbb	[pc, r3]
 8007102:	372a      	.short	0x372a
 8007104:	5535      	.short	0x5535
 8007106:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800710a:	441e      	add	r6, r3
 800710c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007110:	2b20      	cmp	r3, #32
 8007112:	bfc1      	itttt	gt
 8007114:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007118:	409f      	lslgt	r7, r3
 800711a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800711e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007122:	bfd6      	itet	le
 8007124:	f1c3 0320 	rsble	r3, r3, #32
 8007128:	ea47 0003 	orrgt.w	r0, r7, r3
 800712c:	fa04 f003 	lslle.w	r0, r4, r3
 8007130:	f7f9 f9e8 	bl	8000504 <__aeabi_ui2d>
 8007134:	2201      	movs	r2, #1
 8007136:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800713a:	3e01      	subs	r6, #1
 800713c:	9214      	str	r2, [sp, #80]	@ 0x50
 800713e:	e777      	b.n	8007030 <_dtoa_r+0x100>
 8007140:	2301      	movs	r3, #1
 8007142:	e7b8      	b.n	80070b6 <_dtoa_r+0x186>
 8007144:	9012      	str	r0, [sp, #72]	@ 0x48
 8007146:	e7b7      	b.n	80070b8 <_dtoa_r+0x188>
 8007148:	427b      	negs	r3, r7
 800714a:	930a      	str	r3, [sp, #40]	@ 0x28
 800714c:	2300      	movs	r3, #0
 800714e:	eba8 0807 	sub.w	r8, r8, r7
 8007152:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007154:	e7c4      	b.n	80070e0 <_dtoa_r+0x1b0>
 8007156:	2300      	movs	r3, #0
 8007158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800715a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	dc35      	bgt.n	80071cc <_dtoa_r+0x29c>
 8007160:	2301      	movs	r3, #1
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	9307      	str	r3, [sp, #28]
 8007166:	461a      	mov	r2, r3
 8007168:	920e      	str	r2, [sp, #56]	@ 0x38
 800716a:	e00b      	b.n	8007184 <_dtoa_r+0x254>
 800716c:	2301      	movs	r3, #1
 800716e:	e7f3      	b.n	8007158 <_dtoa_r+0x228>
 8007170:	2300      	movs	r3, #0
 8007172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007176:	18fb      	adds	r3, r7, r3
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	2b01      	cmp	r3, #1
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	bfb8      	it	lt
 8007182:	2301      	movlt	r3, #1
 8007184:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007188:	2100      	movs	r1, #0
 800718a:	2204      	movs	r2, #4
 800718c:	f102 0514 	add.w	r5, r2, #20
 8007190:	429d      	cmp	r5, r3
 8007192:	d91f      	bls.n	80071d4 <_dtoa_r+0x2a4>
 8007194:	6041      	str	r1, [r0, #4]
 8007196:	4658      	mov	r0, fp
 8007198:	f000 fd8e 	bl	8007cb8 <_Balloc>
 800719c:	4682      	mov	sl, r0
 800719e:	2800      	cmp	r0, #0
 80071a0:	d13c      	bne.n	800721c <_dtoa_r+0x2ec>
 80071a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007210 <_dtoa_r+0x2e0>)
 80071a4:	4602      	mov	r2, r0
 80071a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80071aa:	e6d8      	b.n	8006f5e <_dtoa_r+0x2e>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e7e0      	b.n	8007172 <_dtoa_r+0x242>
 80071b0:	2401      	movs	r4, #1
 80071b2:	2300      	movs	r3, #0
 80071b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071b8:	f04f 33ff 	mov.w	r3, #4294967295
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	9307      	str	r3, [sp, #28]
 80071c0:	2200      	movs	r2, #0
 80071c2:	2312      	movs	r3, #18
 80071c4:	e7d0      	b.n	8007168 <_dtoa_r+0x238>
 80071c6:	2301      	movs	r3, #1
 80071c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ca:	e7f5      	b.n	80071b8 <_dtoa_r+0x288>
 80071cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	9307      	str	r3, [sp, #28]
 80071d2:	e7d7      	b.n	8007184 <_dtoa_r+0x254>
 80071d4:	3101      	adds	r1, #1
 80071d6:	0052      	lsls	r2, r2, #1
 80071d8:	e7d8      	b.n	800718c <_dtoa_r+0x25c>
 80071da:	bf00      	nop
 80071dc:	f3af 8000 	nop.w
 80071e0:	636f4361 	.word	0x636f4361
 80071e4:	3fd287a7 	.word	0x3fd287a7
 80071e8:	8b60c8b3 	.word	0x8b60c8b3
 80071ec:	3fc68a28 	.word	0x3fc68a28
 80071f0:	509f79fb 	.word	0x509f79fb
 80071f4:	3fd34413 	.word	0x3fd34413
 80071f8:	08008c65 	.word	0x08008c65
 80071fc:	08008c7c 	.word	0x08008c7c
 8007200:	7ff00000 	.word	0x7ff00000
 8007204:	08008c35 	.word	0x08008c35
 8007208:	3ff80000 	.word	0x3ff80000
 800720c:	08008d78 	.word	0x08008d78
 8007210:	08008cd4 	.word	0x08008cd4
 8007214:	08008c61 	.word	0x08008c61
 8007218:	08008c34 	.word	0x08008c34
 800721c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007220:	6018      	str	r0, [r3, #0]
 8007222:	9b07      	ldr	r3, [sp, #28]
 8007224:	2b0e      	cmp	r3, #14
 8007226:	f200 80a4 	bhi.w	8007372 <_dtoa_r+0x442>
 800722a:	2c00      	cmp	r4, #0
 800722c:	f000 80a1 	beq.w	8007372 <_dtoa_r+0x442>
 8007230:	2f00      	cmp	r7, #0
 8007232:	dd33      	ble.n	800729c <_dtoa_r+0x36c>
 8007234:	4bad      	ldr	r3, [pc, #692]	@ (80074ec <_dtoa_r+0x5bc>)
 8007236:	f007 020f 	and.w	r2, r7, #15
 800723a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800723e:	ed93 7b00 	vldr	d7, [r3]
 8007242:	05f8      	lsls	r0, r7, #23
 8007244:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007248:	ea4f 1427 	mov.w	r4, r7, asr #4
 800724c:	d516      	bpl.n	800727c <_dtoa_r+0x34c>
 800724e:	4ba8      	ldr	r3, [pc, #672]	@ (80074f0 <_dtoa_r+0x5c0>)
 8007250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007258:	f7f9 faf8 	bl	800084c <__aeabi_ddiv>
 800725c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007260:	f004 040f 	and.w	r4, r4, #15
 8007264:	2603      	movs	r6, #3
 8007266:	4da2      	ldr	r5, [pc, #648]	@ (80074f0 <_dtoa_r+0x5c0>)
 8007268:	b954      	cbnz	r4, 8007280 <_dtoa_r+0x350>
 800726a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800726e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007272:	f7f9 faeb 	bl	800084c <__aeabi_ddiv>
 8007276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800727a:	e028      	b.n	80072ce <_dtoa_r+0x39e>
 800727c:	2602      	movs	r6, #2
 800727e:	e7f2      	b.n	8007266 <_dtoa_r+0x336>
 8007280:	07e1      	lsls	r1, r4, #31
 8007282:	d508      	bpl.n	8007296 <_dtoa_r+0x366>
 8007284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007288:	e9d5 2300 	ldrd	r2, r3, [r5]
 800728c:	f7f9 f9b4 	bl	80005f8 <__aeabi_dmul>
 8007290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007294:	3601      	adds	r6, #1
 8007296:	1064      	asrs	r4, r4, #1
 8007298:	3508      	adds	r5, #8
 800729a:	e7e5      	b.n	8007268 <_dtoa_r+0x338>
 800729c:	f000 80d2 	beq.w	8007444 <_dtoa_r+0x514>
 80072a0:	427c      	negs	r4, r7
 80072a2:	4b92      	ldr	r3, [pc, #584]	@ (80074ec <_dtoa_r+0x5bc>)
 80072a4:	4d92      	ldr	r5, [pc, #584]	@ (80074f0 <_dtoa_r+0x5c0>)
 80072a6:	f004 020f 	and.w	r2, r4, #15
 80072aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072b6:	f7f9 f99f 	bl	80005f8 <__aeabi_dmul>
 80072ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072be:	1124      	asrs	r4, r4, #4
 80072c0:	2300      	movs	r3, #0
 80072c2:	2602      	movs	r6, #2
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	f040 80b2 	bne.w	800742e <_dtoa_r+0x4fe>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1d3      	bne.n	8007276 <_dtoa_r+0x346>
 80072ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80b7 	beq.w	8007448 <_dtoa_r+0x518>
 80072da:	4b86      	ldr	r3, [pc, #536]	@ (80074f4 <_dtoa_r+0x5c4>)
 80072dc:	2200      	movs	r2, #0
 80072de:	4620      	mov	r0, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	f7f9 fbfb 	bl	8000adc <__aeabi_dcmplt>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	f000 80ae 	beq.w	8007448 <_dtoa_r+0x518>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 80aa 	beq.w	8007448 <_dtoa_r+0x518>
 80072f4:	9b00      	ldr	r3, [sp, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	dd37      	ble.n	800736a <_dtoa_r+0x43a>
 80072fa:	1e7b      	subs	r3, r7, #1
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	4620      	mov	r0, r4
 8007300:	4b7d      	ldr	r3, [pc, #500]	@ (80074f8 <_dtoa_r+0x5c8>)
 8007302:	2200      	movs	r2, #0
 8007304:	4629      	mov	r1, r5
 8007306:	f7f9 f977 	bl	80005f8 <__aeabi_dmul>
 800730a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800730e:	9c00      	ldr	r4, [sp, #0]
 8007310:	3601      	adds	r6, #1
 8007312:	4630      	mov	r0, r6
 8007314:	f7f9 f906 	bl	8000524 <__aeabi_i2d>
 8007318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800731c:	f7f9 f96c 	bl	80005f8 <__aeabi_dmul>
 8007320:	4b76      	ldr	r3, [pc, #472]	@ (80074fc <_dtoa_r+0x5cc>)
 8007322:	2200      	movs	r2, #0
 8007324:	f7f8 ffb2 	bl	800028c <__adddf3>
 8007328:	4605      	mov	r5, r0
 800732a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800732e:	2c00      	cmp	r4, #0
 8007330:	f040 808d 	bne.w	800744e <_dtoa_r+0x51e>
 8007334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007338:	4b71      	ldr	r3, [pc, #452]	@ (8007500 <_dtoa_r+0x5d0>)
 800733a:	2200      	movs	r2, #0
 800733c:	f7f8 ffa4 	bl	8000288 <__aeabi_dsub>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007348:	462a      	mov	r2, r5
 800734a:	4633      	mov	r3, r6
 800734c:	f7f9 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 8007350:	2800      	cmp	r0, #0
 8007352:	f040 828b 	bne.w	800786c <_dtoa_r+0x93c>
 8007356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800735a:	462a      	mov	r2, r5
 800735c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007360:	f7f9 fbbc 	bl	8000adc <__aeabi_dcmplt>
 8007364:	2800      	cmp	r0, #0
 8007366:	f040 8128 	bne.w	80075ba <_dtoa_r+0x68a>
 800736a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800736e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007374:	2b00      	cmp	r3, #0
 8007376:	f2c0 815a 	blt.w	800762e <_dtoa_r+0x6fe>
 800737a:	2f0e      	cmp	r7, #14
 800737c:	f300 8157 	bgt.w	800762e <_dtoa_r+0x6fe>
 8007380:	4b5a      	ldr	r3, [pc, #360]	@ (80074ec <_dtoa_r+0x5bc>)
 8007382:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007386:	ed93 7b00 	vldr	d7, [r3]
 800738a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	ed8d 7b00 	vstr	d7, [sp]
 8007392:	da03      	bge.n	800739c <_dtoa_r+0x46c>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f340 8101 	ble.w	800759e <_dtoa_r+0x66e>
 800739c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073a0:	4656      	mov	r6, sl
 80073a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073a6:	4620      	mov	r0, r4
 80073a8:	4629      	mov	r1, r5
 80073aa:	f7f9 fa4f 	bl	800084c <__aeabi_ddiv>
 80073ae:	f7f9 fbd3 	bl	8000b58 <__aeabi_d2iz>
 80073b2:	4680      	mov	r8, r0
 80073b4:	f7f9 f8b6 	bl	8000524 <__aeabi_i2d>
 80073b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073cc:	f7f8 ff5c 	bl	8000288 <__aeabi_dsub>
 80073d0:	f806 4b01 	strb.w	r4, [r6], #1
 80073d4:	9d07      	ldr	r5, [sp, #28]
 80073d6:	eba6 040a 	sub.w	r4, r6, sl
 80073da:	42a5      	cmp	r5, r4
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	f040 8117 	bne.w	8007612 <_dtoa_r+0x6e2>
 80073e4:	f7f8 ff52 	bl	800028c <__adddf3>
 80073e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ec:	4604      	mov	r4, r0
 80073ee:	460d      	mov	r5, r1
 80073f0:	f7f9 fb92 	bl	8000b18 <__aeabi_dcmpgt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	f040 80f9 	bne.w	80075ec <_dtoa_r+0x6bc>
 80073fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073fe:	4620      	mov	r0, r4
 8007400:	4629      	mov	r1, r5
 8007402:	f7f9 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8007406:	b118      	cbz	r0, 8007410 <_dtoa_r+0x4e0>
 8007408:	f018 0f01 	tst.w	r8, #1
 800740c:	f040 80ee 	bne.w	80075ec <_dtoa_r+0x6bc>
 8007410:	4649      	mov	r1, r9
 8007412:	4658      	mov	r0, fp
 8007414:	f000 fc90 	bl	8007d38 <_Bfree>
 8007418:	2300      	movs	r3, #0
 800741a:	7033      	strb	r3, [r6, #0]
 800741c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800741e:	3701      	adds	r7, #1
 8007420:	601f      	str	r7, [r3, #0]
 8007422:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 831d 	beq.w	8007a64 <_dtoa_r+0xb34>
 800742a:	601e      	str	r6, [r3, #0]
 800742c:	e31a      	b.n	8007a64 <_dtoa_r+0xb34>
 800742e:	07e2      	lsls	r2, r4, #31
 8007430:	d505      	bpl.n	800743e <_dtoa_r+0x50e>
 8007432:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007436:	f7f9 f8df 	bl	80005f8 <__aeabi_dmul>
 800743a:	3601      	adds	r6, #1
 800743c:	2301      	movs	r3, #1
 800743e:	1064      	asrs	r4, r4, #1
 8007440:	3508      	adds	r5, #8
 8007442:	e73f      	b.n	80072c4 <_dtoa_r+0x394>
 8007444:	2602      	movs	r6, #2
 8007446:	e742      	b.n	80072ce <_dtoa_r+0x39e>
 8007448:	9c07      	ldr	r4, [sp, #28]
 800744a:	9704      	str	r7, [sp, #16]
 800744c:	e761      	b.n	8007312 <_dtoa_r+0x3e2>
 800744e:	4b27      	ldr	r3, [pc, #156]	@ (80074ec <_dtoa_r+0x5bc>)
 8007450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007456:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800745a:	4454      	add	r4, sl
 800745c:	2900      	cmp	r1, #0
 800745e:	d053      	beq.n	8007508 <_dtoa_r+0x5d8>
 8007460:	4928      	ldr	r1, [pc, #160]	@ (8007504 <_dtoa_r+0x5d4>)
 8007462:	2000      	movs	r0, #0
 8007464:	f7f9 f9f2 	bl	800084c <__aeabi_ddiv>
 8007468:	4633      	mov	r3, r6
 800746a:	462a      	mov	r2, r5
 800746c:	f7f8 ff0c 	bl	8000288 <__aeabi_dsub>
 8007470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007474:	4656      	mov	r6, sl
 8007476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800747a:	f7f9 fb6d 	bl	8000b58 <__aeabi_d2iz>
 800747e:	4605      	mov	r5, r0
 8007480:	f7f9 f850 	bl	8000524 <__aeabi_i2d>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748c:	f7f8 fefc 	bl	8000288 <__aeabi_dsub>
 8007490:	3530      	adds	r5, #48	@ 0x30
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800749a:	f806 5b01 	strb.w	r5, [r6], #1
 800749e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074a2:	f7f9 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d171      	bne.n	800758e <_dtoa_r+0x65e>
 80074aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074ae:	4911      	ldr	r1, [pc, #68]	@ (80074f4 <_dtoa_r+0x5c4>)
 80074b0:	2000      	movs	r0, #0
 80074b2:	f7f8 fee9 	bl	8000288 <__aeabi_dsub>
 80074b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074ba:	f7f9 fb0f 	bl	8000adc <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	f040 8095 	bne.w	80075ee <_dtoa_r+0x6be>
 80074c4:	42a6      	cmp	r6, r4
 80074c6:	f43f af50 	beq.w	800736a <_dtoa_r+0x43a>
 80074ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074ce:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <_dtoa_r+0x5c8>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	f7f9 f891 	bl	80005f8 <__aeabi_dmul>
 80074d6:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <_dtoa_r+0x5c8>)
 80074d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074dc:	2200      	movs	r2, #0
 80074de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e2:	f7f9 f889 	bl	80005f8 <__aeabi_dmul>
 80074e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ea:	e7c4      	b.n	8007476 <_dtoa_r+0x546>
 80074ec:	08008d78 	.word	0x08008d78
 80074f0:	08008d50 	.word	0x08008d50
 80074f4:	3ff00000 	.word	0x3ff00000
 80074f8:	40240000 	.word	0x40240000
 80074fc:	401c0000 	.word	0x401c0000
 8007500:	40140000 	.word	0x40140000
 8007504:	3fe00000 	.word	0x3fe00000
 8007508:	4631      	mov	r1, r6
 800750a:	4628      	mov	r0, r5
 800750c:	f7f9 f874 	bl	80005f8 <__aeabi_dmul>
 8007510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007514:	9415      	str	r4, [sp, #84]	@ 0x54
 8007516:	4656      	mov	r6, sl
 8007518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800751c:	f7f9 fb1c 	bl	8000b58 <__aeabi_d2iz>
 8007520:	4605      	mov	r5, r0
 8007522:	f7f8 ffff 	bl	8000524 <__aeabi_i2d>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800752e:	f7f8 feab 	bl	8000288 <__aeabi_dsub>
 8007532:	3530      	adds	r5, #48	@ 0x30
 8007534:	f806 5b01 	strb.w	r5, [r6], #1
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	42a6      	cmp	r6, r4
 800753e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	d124      	bne.n	8007592 <_dtoa_r+0x662>
 8007548:	4bac      	ldr	r3, [pc, #688]	@ (80077fc <_dtoa_r+0x8cc>)
 800754a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800754e:	f7f8 fe9d 	bl	800028c <__adddf3>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755a:	f7f9 fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800755e:	2800      	cmp	r0, #0
 8007560:	d145      	bne.n	80075ee <_dtoa_r+0x6be>
 8007562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007566:	49a5      	ldr	r1, [pc, #660]	@ (80077fc <_dtoa_r+0x8cc>)
 8007568:	2000      	movs	r0, #0
 800756a:	f7f8 fe8d 	bl	8000288 <__aeabi_dsub>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007576:	f7f9 fab1 	bl	8000adc <__aeabi_dcmplt>
 800757a:	2800      	cmp	r0, #0
 800757c:	f43f aef5 	beq.w	800736a <_dtoa_r+0x43a>
 8007580:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007582:	1e73      	subs	r3, r6, #1
 8007584:	9315      	str	r3, [sp, #84]	@ 0x54
 8007586:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800758a:	2b30      	cmp	r3, #48	@ 0x30
 800758c:	d0f8      	beq.n	8007580 <_dtoa_r+0x650>
 800758e:	9f04      	ldr	r7, [sp, #16]
 8007590:	e73e      	b.n	8007410 <_dtoa_r+0x4e0>
 8007592:	4b9b      	ldr	r3, [pc, #620]	@ (8007800 <_dtoa_r+0x8d0>)
 8007594:	f7f9 f830 	bl	80005f8 <__aeabi_dmul>
 8007598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800759c:	e7bc      	b.n	8007518 <_dtoa_r+0x5e8>
 800759e:	d10c      	bne.n	80075ba <_dtoa_r+0x68a>
 80075a0:	4b98      	ldr	r3, [pc, #608]	@ (8007804 <_dtoa_r+0x8d4>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075a8:	f7f9 f826 	bl	80005f8 <__aeabi_dmul>
 80075ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075b0:	f7f9 faa8 	bl	8000b04 <__aeabi_dcmpge>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	f000 8157 	beq.w	8007868 <_dtoa_r+0x938>
 80075ba:	2400      	movs	r4, #0
 80075bc:	4625      	mov	r5, r4
 80075be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c0:	43db      	mvns	r3, r3
 80075c2:	9304      	str	r3, [sp, #16]
 80075c4:	4656      	mov	r6, sl
 80075c6:	2700      	movs	r7, #0
 80075c8:	4621      	mov	r1, r4
 80075ca:	4658      	mov	r0, fp
 80075cc:	f000 fbb4 	bl	8007d38 <_Bfree>
 80075d0:	2d00      	cmp	r5, #0
 80075d2:	d0dc      	beq.n	800758e <_dtoa_r+0x65e>
 80075d4:	b12f      	cbz	r7, 80075e2 <_dtoa_r+0x6b2>
 80075d6:	42af      	cmp	r7, r5
 80075d8:	d003      	beq.n	80075e2 <_dtoa_r+0x6b2>
 80075da:	4639      	mov	r1, r7
 80075dc:	4658      	mov	r0, fp
 80075de:	f000 fbab 	bl	8007d38 <_Bfree>
 80075e2:	4629      	mov	r1, r5
 80075e4:	4658      	mov	r0, fp
 80075e6:	f000 fba7 	bl	8007d38 <_Bfree>
 80075ea:	e7d0      	b.n	800758e <_dtoa_r+0x65e>
 80075ec:	9704      	str	r7, [sp, #16]
 80075ee:	4633      	mov	r3, r6
 80075f0:	461e      	mov	r6, r3
 80075f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075f6:	2a39      	cmp	r2, #57	@ 0x39
 80075f8:	d107      	bne.n	800760a <_dtoa_r+0x6da>
 80075fa:	459a      	cmp	sl, r3
 80075fc:	d1f8      	bne.n	80075f0 <_dtoa_r+0x6c0>
 80075fe:	9a04      	ldr	r2, [sp, #16]
 8007600:	3201      	adds	r2, #1
 8007602:	9204      	str	r2, [sp, #16]
 8007604:	2230      	movs	r2, #48	@ 0x30
 8007606:	f88a 2000 	strb.w	r2, [sl]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	3201      	adds	r2, #1
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	e7bd      	b.n	800758e <_dtoa_r+0x65e>
 8007612:	4b7b      	ldr	r3, [pc, #492]	@ (8007800 <_dtoa_r+0x8d0>)
 8007614:	2200      	movs	r2, #0
 8007616:	f7f8 ffef 	bl	80005f8 <__aeabi_dmul>
 800761a:	2200      	movs	r2, #0
 800761c:	2300      	movs	r3, #0
 800761e:	4604      	mov	r4, r0
 8007620:	460d      	mov	r5, r1
 8007622:	f7f9 fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 8007626:	2800      	cmp	r0, #0
 8007628:	f43f aebb 	beq.w	80073a2 <_dtoa_r+0x472>
 800762c:	e6f0      	b.n	8007410 <_dtoa_r+0x4e0>
 800762e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007630:	2a00      	cmp	r2, #0
 8007632:	f000 80db 	beq.w	80077ec <_dtoa_r+0x8bc>
 8007636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007638:	2a01      	cmp	r2, #1
 800763a:	f300 80bf 	bgt.w	80077bc <_dtoa_r+0x88c>
 800763e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007640:	2a00      	cmp	r2, #0
 8007642:	f000 80b7 	beq.w	80077b4 <_dtoa_r+0x884>
 8007646:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800764a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800764c:	4646      	mov	r6, r8
 800764e:	9a08      	ldr	r2, [sp, #32]
 8007650:	2101      	movs	r1, #1
 8007652:	441a      	add	r2, r3
 8007654:	4658      	mov	r0, fp
 8007656:	4498      	add	r8, r3
 8007658:	9208      	str	r2, [sp, #32]
 800765a:	f000 fc21 	bl	8007ea0 <__i2b>
 800765e:	4605      	mov	r5, r0
 8007660:	b15e      	cbz	r6, 800767a <_dtoa_r+0x74a>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	dd08      	ble.n	800767a <_dtoa_r+0x74a>
 8007668:	42b3      	cmp	r3, r6
 800766a:	9a08      	ldr	r2, [sp, #32]
 800766c:	bfa8      	it	ge
 800766e:	4633      	movge	r3, r6
 8007670:	eba8 0803 	sub.w	r8, r8, r3
 8007674:	1af6      	subs	r6, r6, r3
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	9308      	str	r3, [sp, #32]
 800767a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800767c:	b1f3      	cbz	r3, 80076bc <_dtoa_r+0x78c>
 800767e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80b7 	beq.w	80077f4 <_dtoa_r+0x8c4>
 8007686:	b18c      	cbz	r4, 80076ac <_dtoa_r+0x77c>
 8007688:	4629      	mov	r1, r5
 800768a:	4622      	mov	r2, r4
 800768c:	4658      	mov	r0, fp
 800768e:	f000 fcc7 	bl	8008020 <__pow5mult>
 8007692:	464a      	mov	r2, r9
 8007694:	4601      	mov	r1, r0
 8007696:	4605      	mov	r5, r0
 8007698:	4658      	mov	r0, fp
 800769a:	f000 fc17 	bl	8007ecc <__multiply>
 800769e:	4649      	mov	r1, r9
 80076a0:	9004      	str	r0, [sp, #16]
 80076a2:	4658      	mov	r0, fp
 80076a4:	f000 fb48 	bl	8007d38 <_Bfree>
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	4699      	mov	r9, r3
 80076ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ae:	1b1a      	subs	r2, r3, r4
 80076b0:	d004      	beq.n	80076bc <_dtoa_r+0x78c>
 80076b2:	4649      	mov	r1, r9
 80076b4:	4658      	mov	r0, fp
 80076b6:	f000 fcb3 	bl	8008020 <__pow5mult>
 80076ba:	4681      	mov	r9, r0
 80076bc:	2101      	movs	r1, #1
 80076be:	4658      	mov	r0, fp
 80076c0:	f000 fbee 	bl	8007ea0 <__i2b>
 80076c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076c6:	4604      	mov	r4, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 81cf 	beq.w	8007a6c <_dtoa_r+0xb3c>
 80076ce:	461a      	mov	r2, r3
 80076d0:	4601      	mov	r1, r0
 80076d2:	4658      	mov	r0, fp
 80076d4:	f000 fca4 	bl	8008020 <__pow5mult>
 80076d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076da:	2b01      	cmp	r3, #1
 80076dc:	4604      	mov	r4, r0
 80076de:	f300 8095 	bgt.w	800780c <_dtoa_r+0x8dc>
 80076e2:	9b02      	ldr	r3, [sp, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f040 8087 	bne.w	80077f8 <_dtoa_r+0x8c8>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f040 8089 	bne.w	8007808 <_dtoa_r+0x8d8>
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076fc:	0d1b      	lsrs	r3, r3, #20
 80076fe:	051b      	lsls	r3, r3, #20
 8007700:	b12b      	cbz	r3, 800770e <_dtoa_r+0x7de>
 8007702:	9b08      	ldr	r3, [sp, #32]
 8007704:	3301      	adds	r3, #1
 8007706:	9308      	str	r3, [sp, #32]
 8007708:	f108 0801 	add.w	r8, r8, #1
 800770c:	2301      	movs	r3, #1
 800770e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 81b0 	beq.w	8007a78 <_dtoa_r+0xb48>
 8007718:	6923      	ldr	r3, [r4, #16]
 800771a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800771e:	6918      	ldr	r0, [r3, #16]
 8007720:	f000 fb72 	bl	8007e08 <__hi0bits>
 8007724:	f1c0 0020 	rsb	r0, r0, #32
 8007728:	9b08      	ldr	r3, [sp, #32]
 800772a:	4418      	add	r0, r3
 800772c:	f010 001f 	ands.w	r0, r0, #31
 8007730:	d077      	beq.n	8007822 <_dtoa_r+0x8f2>
 8007732:	f1c0 0320 	rsb	r3, r0, #32
 8007736:	2b04      	cmp	r3, #4
 8007738:	dd6b      	ble.n	8007812 <_dtoa_r+0x8e2>
 800773a:	9b08      	ldr	r3, [sp, #32]
 800773c:	f1c0 001c 	rsb	r0, r0, #28
 8007740:	4403      	add	r3, r0
 8007742:	4480      	add	r8, r0
 8007744:	4406      	add	r6, r0
 8007746:	9308      	str	r3, [sp, #32]
 8007748:	f1b8 0f00 	cmp.w	r8, #0
 800774c:	dd05      	ble.n	800775a <_dtoa_r+0x82a>
 800774e:	4649      	mov	r1, r9
 8007750:	4642      	mov	r2, r8
 8007752:	4658      	mov	r0, fp
 8007754:	f000 fcbe 	bl	80080d4 <__lshift>
 8007758:	4681      	mov	r9, r0
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd05      	ble.n	800776c <_dtoa_r+0x83c>
 8007760:	4621      	mov	r1, r4
 8007762:	461a      	mov	r2, r3
 8007764:	4658      	mov	r0, fp
 8007766:	f000 fcb5 	bl	80080d4 <__lshift>
 800776a:	4604      	mov	r4, r0
 800776c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800776e:	2b00      	cmp	r3, #0
 8007770:	d059      	beq.n	8007826 <_dtoa_r+0x8f6>
 8007772:	4621      	mov	r1, r4
 8007774:	4648      	mov	r0, r9
 8007776:	f000 fd19 	bl	80081ac <__mcmp>
 800777a:	2800      	cmp	r0, #0
 800777c:	da53      	bge.n	8007826 <_dtoa_r+0x8f6>
 800777e:	1e7b      	subs	r3, r7, #1
 8007780:	9304      	str	r3, [sp, #16]
 8007782:	4649      	mov	r1, r9
 8007784:	2300      	movs	r3, #0
 8007786:	220a      	movs	r2, #10
 8007788:	4658      	mov	r0, fp
 800778a:	f000 faf7 	bl	8007d7c <__multadd>
 800778e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007790:	4681      	mov	r9, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8172 	beq.w	8007a7c <_dtoa_r+0xb4c>
 8007798:	2300      	movs	r3, #0
 800779a:	4629      	mov	r1, r5
 800779c:	220a      	movs	r2, #10
 800779e:	4658      	mov	r0, fp
 80077a0:	f000 faec 	bl	8007d7c <__multadd>
 80077a4:	9b00      	ldr	r3, [sp, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	4605      	mov	r5, r0
 80077aa:	dc67      	bgt.n	800787c <_dtoa_r+0x94c>
 80077ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	dc41      	bgt.n	8007836 <_dtoa_r+0x906>
 80077b2:	e063      	b.n	800787c <_dtoa_r+0x94c>
 80077b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077ba:	e746      	b.n	800764a <_dtoa_r+0x71a>
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	1e5c      	subs	r4, r3, #1
 80077c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	bfbf      	itttt	lt
 80077c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80077ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80077cc:	1ae3      	sublt	r3, r4, r3
 80077ce:	bfb4      	ite	lt
 80077d0:	18d2      	addlt	r2, r2, r3
 80077d2:	1b1c      	subge	r4, r3, r4
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	bfbc      	itt	lt
 80077d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80077da:	2400      	movlt	r4, #0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bfb5      	itete	lt
 80077e0:	eba8 0603 	sublt.w	r6, r8, r3
 80077e4:	9b07      	ldrge	r3, [sp, #28]
 80077e6:	2300      	movlt	r3, #0
 80077e8:	4646      	movge	r6, r8
 80077ea:	e730      	b.n	800764e <_dtoa_r+0x71e>
 80077ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80077f0:	4646      	mov	r6, r8
 80077f2:	e735      	b.n	8007660 <_dtoa_r+0x730>
 80077f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077f6:	e75c      	b.n	80076b2 <_dtoa_r+0x782>
 80077f8:	2300      	movs	r3, #0
 80077fa:	e788      	b.n	800770e <_dtoa_r+0x7de>
 80077fc:	3fe00000 	.word	0x3fe00000
 8007800:	40240000 	.word	0x40240000
 8007804:	40140000 	.word	0x40140000
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	e780      	b.n	800770e <_dtoa_r+0x7de>
 800780c:	2300      	movs	r3, #0
 800780e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007810:	e782      	b.n	8007718 <_dtoa_r+0x7e8>
 8007812:	d099      	beq.n	8007748 <_dtoa_r+0x818>
 8007814:	9a08      	ldr	r2, [sp, #32]
 8007816:	331c      	adds	r3, #28
 8007818:	441a      	add	r2, r3
 800781a:	4498      	add	r8, r3
 800781c:	441e      	add	r6, r3
 800781e:	9208      	str	r2, [sp, #32]
 8007820:	e792      	b.n	8007748 <_dtoa_r+0x818>
 8007822:	4603      	mov	r3, r0
 8007824:	e7f6      	b.n	8007814 <_dtoa_r+0x8e4>
 8007826:	9b07      	ldr	r3, [sp, #28]
 8007828:	9704      	str	r7, [sp, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	dc20      	bgt.n	8007870 <_dtoa_r+0x940>
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007832:	2b02      	cmp	r3, #2
 8007834:	dd1e      	ble.n	8007874 <_dtoa_r+0x944>
 8007836:	9b00      	ldr	r3, [sp, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f47f aec0 	bne.w	80075be <_dtoa_r+0x68e>
 800783e:	4621      	mov	r1, r4
 8007840:	2205      	movs	r2, #5
 8007842:	4658      	mov	r0, fp
 8007844:	f000 fa9a 	bl	8007d7c <__multadd>
 8007848:	4601      	mov	r1, r0
 800784a:	4604      	mov	r4, r0
 800784c:	4648      	mov	r0, r9
 800784e:	f000 fcad 	bl	80081ac <__mcmp>
 8007852:	2800      	cmp	r0, #0
 8007854:	f77f aeb3 	ble.w	80075be <_dtoa_r+0x68e>
 8007858:	4656      	mov	r6, sl
 800785a:	2331      	movs	r3, #49	@ 0x31
 800785c:	f806 3b01 	strb.w	r3, [r6], #1
 8007860:	9b04      	ldr	r3, [sp, #16]
 8007862:	3301      	adds	r3, #1
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	e6ae      	b.n	80075c6 <_dtoa_r+0x696>
 8007868:	9c07      	ldr	r4, [sp, #28]
 800786a:	9704      	str	r7, [sp, #16]
 800786c:	4625      	mov	r5, r4
 800786e:	e7f3      	b.n	8007858 <_dtoa_r+0x928>
 8007870:	9b07      	ldr	r3, [sp, #28]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8104 	beq.w	8007a84 <_dtoa_r+0xb54>
 800787c:	2e00      	cmp	r6, #0
 800787e:	dd05      	ble.n	800788c <_dtoa_r+0x95c>
 8007880:	4629      	mov	r1, r5
 8007882:	4632      	mov	r2, r6
 8007884:	4658      	mov	r0, fp
 8007886:	f000 fc25 	bl	80080d4 <__lshift>
 800788a:	4605      	mov	r5, r0
 800788c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800788e:	2b00      	cmp	r3, #0
 8007890:	d05a      	beq.n	8007948 <_dtoa_r+0xa18>
 8007892:	6869      	ldr	r1, [r5, #4]
 8007894:	4658      	mov	r0, fp
 8007896:	f000 fa0f 	bl	8007cb8 <_Balloc>
 800789a:	4606      	mov	r6, r0
 800789c:	b928      	cbnz	r0, 80078aa <_dtoa_r+0x97a>
 800789e:	4b84      	ldr	r3, [pc, #528]	@ (8007ab0 <_dtoa_r+0xb80>)
 80078a0:	4602      	mov	r2, r0
 80078a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80078a6:	f7ff bb5a 	b.w	8006f5e <_dtoa_r+0x2e>
 80078aa:	692a      	ldr	r2, [r5, #16]
 80078ac:	3202      	adds	r2, #2
 80078ae:	0092      	lsls	r2, r2, #2
 80078b0:	f105 010c 	add.w	r1, r5, #12
 80078b4:	300c      	adds	r0, #12
 80078b6:	f001 f813 	bl	80088e0 <memcpy>
 80078ba:	2201      	movs	r2, #1
 80078bc:	4631      	mov	r1, r6
 80078be:	4658      	mov	r0, fp
 80078c0:	f000 fc08 	bl	80080d4 <__lshift>
 80078c4:	f10a 0301 	add.w	r3, sl, #1
 80078c8:	9307      	str	r3, [sp, #28]
 80078ca:	9b00      	ldr	r3, [sp, #0]
 80078cc:	4453      	add	r3, sl
 80078ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078d0:	9b02      	ldr	r3, [sp, #8]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	462f      	mov	r7, r5
 80078d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078da:	4605      	mov	r5, r0
 80078dc:	9b07      	ldr	r3, [sp, #28]
 80078de:	4621      	mov	r1, r4
 80078e0:	3b01      	subs	r3, #1
 80078e2:	4648      	mov	r0, r9
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	f7ff fa98 	bl	8006e1a <quorem>
 80078ea:	4639      	mov	r1, r7
 80078ec:	9002      	str	r0, [sp, #8]
 80078ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078f2:	4648      	mov	r0, r9
 80078f4:	f000 fc5a 	bl	80081ac <__mcmp>
 80078f8:	462a      	mov	r2, r5
 80078fa:	9008      	str	r0, [sp, #32]
 80078fc:	4621      	mov	r1, r4
 80078fe:	4658      	mov	r0, fp
 8007900:	f000 fc70 	bl	80081e4 <__mdiff>
 8007904:	68c2      	ldr	r2, [r0, #12]
 8007906:	4606      	mov	r6, r0
 8007908:	bb02      	cbnz	r2, 800794c <_dtoa_r+0xa1c>
 800790a:	4601      	mov	r1, r0
 800790c:	4648      	mov	r0, r9
 800790e:	f000 fc4d 	bl	80081ac <__mcmp>
 8007912:	4602      	mov	r2, r0
 8007914:	4631      	mov	r1, r6
 8007916:	4658      	mov	r0, fp
 8007918:	920e      	str	r2, [sp, #56]	@ 0x38
 800791a:	f000 fa0d 	bl	8007d38 <_Bfree>
 800791e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007922:	9e07      	ldr	r6, [sp, #28]
 8007924:	ea43 0102 	orr.w	r1, r3, r2
 8007928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800792a:	4319      	orrs	r1, r3
 800792c:	d110      	bne.n	8007950 <_dtoa_r+0xa20>
 800792e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007932:	d029      	beq.n	8007988 <_dtoa_r+0xa58>
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	2b00      	cmp	r3, #0
 8007938:	dd02      	ble.n	8007940 <_dtoa_r+0xa10>
 800793a:	9b02      	ldr	r3, [sp, #8]
 800793c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007940:	9b00      	ldr	r3, [sp, #0]
 8007942:	f883 8000 	strb.w	r8, [r3]
 8007946:	e63f      	b.n	80075c8 <_dtoa_r+0x698>
 8007948:	4628      	mov	r0, r5
 800794a:	e7bb      	b.n	80078c4 <_dtoa_r+0x994>
 800794c:	2201      	movs	r2, #1
 800794e:	e7e1      	b.n	8007914 <_dtoa_r+0x9e4>
 8007950:	9b08      	ldr	r3, [sp, #32]
 8007952:	2b00      	cmp	r3, #0
 8007954:	db04      	blt.n	8007960 <_dtoa_r+0xa30>
 8007956:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007958:	430b      	orrs	r3, r1
 800795a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800795c:	430b      	orrs	r3, r1
 800795e:	d120      	bne.n	80079a2 <_dtoa_r+0xa72>
 8007960:	2a00      	cmp	r2, #0
 8007962:	dded      	ble.n	8007940 <_dtoa_r+0xa10>
 8007964:	4649      	mov	r1, r9
 8007966:	2201      	movs	r2, #1
 8007968:	4658      	mov	r0, fp
 800796a:	f000 fbb3 	bl	80080d4 <__lshift>
 800796e:	4621      	mov	r1, r4
 8007970:	4681      	mov	r9, r0
 8007972:	f000 fc1b 	bl	80081ac <__mcmp>
 8007976:	2800      	cmp	r0, #0
 8007978:	dc03      	bgt.n	8007982 <_dtoa_r+0xa52>
 800797a:	d1e1      	bne.n	8007940 <_dtoa_r+0xa10>
 800797c:	f018 0f01 	tst.w	r8, #1
 8007980:	d0de      	beq.n	8007940 <_dtoa_r+0xa10>
 8007982:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007986:	d1d8      	bne.n	800793a <_dtoa_r+0xa0a>
 8007988:	9a00      	ldr	r2, [sp, #0]
 800798a:	2339      	movs	r3, #57	@ 0x39
 800798c:	7013      	strb	r3, [r2, #0]
 800798e:	4633      	mov	r3, r6
 8007990:	461e      	mov	r6, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007998:	2a39      	cmp	r2, #57	@ 0x39
 800799a:	d052      	beq.n	8007a42 <_dtoa_r+0xb12>
 800799c:	3201      	adds	r2, #1
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e612      	b.n	80075c8 <_dtoa_r+0x698>
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	dd07      	ble.n	80079b6 <_dtoa_r+0xa86>
 80079a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079aa:	d0ed      	beq.n	8007988 <_dtoa_r+0xa58>
 80079ac:	9a00      	ldr	r2, [sp, #0]
 80079ae:	f108 0301 	add.w	r3, r8, #1
 80079b2:	7013      	strb	r3, [r2, #0]
 80079b4:	e608      	b.n	80075c8 <_dtoa_r+0x698>
 80079b6:	9b07      	ldr	r3, [sp, #28]
 80079b8:	9a07      	ldr	r2, [sp, #28]
 80079ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80079be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d028      	beq.n	8007a16 <_dtoa_r+0xae6>
 80079c4:	4649      	mov	r1, r9
 80079c6:	2300      	movs	r3, #0
 80079c8:	220a      	movs	r2, #10
 80079ca:	4658      	mov	r0, fp
 80079cc:	f000 f9d6 	bl	8007d7c <__multadd>
 80079d0:	42af      	cmp	r7, r5
 80079d2:	4681      	mov	r9, r0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	f04f 020a 	mov.w	r2, #10
 80079dc:	4639      	mov	r1, r7
 80079de:	4658      	mov	r0, fp
 80079e0:	d107      	bne.n	80079f2 <_dtoa_r+0xac2>
 80079e2:	f000 f9cb 	bl	8007d7c <__multadd>
 80079e6:	4607      	mov	r7, r0
 80079e8:	4605      	mov	r5, r0
 80079ea:	9b07      	ldr	r3, [sp, #28]
 80079ec:	3301      	adds	r3, #1
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	e774      	b.n	80078dc <_dtoa_r+0x9ac>
 80079f2:	f000 f9c3 	bl	8007d7c <__multadd>
 80079f6:	4629      	mov	r1, r5
 80079f8:	4607      	mov	r7, r0
 80079fa:	2300      	movs	r3, #0
 80079fc:	220a      	movs	r2, #10
 80079fe:	4658      	mov	r0, fp
 8007a00:	f000 f9bc 	bl	8007d7c <__multadd>
 8007a04:	4605      	mov	r5, r0
 8007a06:	e7f0      	b.n	80079ea <_dtoa_r+0xaba>
 8007a08:	9b00      	ldr	r3, [sp, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfcc      	ite	gt
 8007a0e:	461e      	movgt	r6, r3
 8007a10:	2601      	movle	r6, #1
 8007a12:	4456      	add	r6, sl
 8007a14:	2700      	movs	r7, #0
 8007a16:	4649      	mov	r1, r9
 8007a18:	2201      	movs	r2, #1
 8007a1a:	4658      	mov	r0, fp
 8007a1c:	f000 fb5a 	bl	80080d4 <__lshift>
 8007a20:	4621      	mov	r1, r4
 8007a22:	4681      	mov	r9, r0
 8007a24:	f000 fbc2 	bl	80081ac <__mcmp>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	dcb0      	bgt.n	800798e <_dtoa_r+0xa5e>
 8007a2c:	d102      	bne.n	8007a34 <_dtoa_r+0xb04>
 8007a2e:	f018 0f01 	tst.w	r8, #1
 8007a32:	d1ac      	bne.n	800798e <_dtoa_r+0xa5e>
 8007a34:	4633      	mov	r3, r6
 8007a36:	461e      	mov	r6, r3
 8007a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a3c:	2a30      	cmp	r2, #48	@ 0x30
 8007a3e:	d0fa      	beq.n	8007a36 <_dtoa_r+0xb06>
 8007a40:	e5c2      	b.n	80075c8 <_dtoa_r+0x698>
 8007a42:	459a      	cmp	sl, r3
 8007a44:	d1a4      	bne.n	8007990 <_dtoa_r+0xa60>
 8007a46:	9b04      	ldr	r3, [sp, #16]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	2331      	movs	r3, #49	@ 0x31
 8007a4e:	f88a 3000 	strb.w	r3, [sl]
 8007a52:	e5b9      	b.n	80075c8 <_dtoa_r+0x698>
 8007a54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ab4 <_dtoa_r+0xb84>
 8007a5a:	b11b      	cbz	r3, 8007a64 <_dtoa_r+0xb34>
 8007a5c:	f10a 0308 	add.w	r3, sl, #8
 8007a60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	4650      	mov	r0, sl
 8007a66:	b019      	add	sp, #100	@ 0x64
 8007a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	f77f ae37 	ble.w	80076e2 <_dtoa_r+0x7b2>
 8007a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a78:	2001      	movs	r0, #1
 8007a7a:	e655      	b.n	8007728 <_dtoa_r+0x7f8>
 8007a7c:	9b00      	ldr	r3, [sp, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f77f aed6 	ble.w	8007830 <_dtoa_r+0x900>
 8007a84:	4656      	mov	r6, sl
 8007a86:	4621      	mov	r1, r4
 8007a88:	4648      	mov	r0, r9
 8007a8a:	f7ff f9c6 	bl	8006e1a <quorem>
 8007a8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a92:	f806 8b01 	strb.w	r8, [r6], #1
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	eba6 020a 	sub.w	r2, r6, sl
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	ddb3      	ble.n	8007a08 <_dtoa_r+0xad8>
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	f000 f968 	bl	8007d7c <__multadd>
 8007aac:	4681      	mov	r9, r0
 8007aae:	e7ea      	b.n	8007a86 <_dtoa_r+0xb56>
 8007ab0:	08008cd4 	.word	0x08008cd4
 8007ab4:	08008c58 	.word	0x08008c58

08007ab8 <_free_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4605      	mov	r5, r0
 8007abc:	2900      	cmp	r1, #0
 8007abe:	d041      	beq.n	8007b44 <_free_r+0x8c>
 8007ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ac4:	1f0c      	subs	r4, r1, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bfb8      	it	lt
 8007aca:	18e4      	addlt	r4, r4, r3
 8007acc:	f000 f8e8 	bl	8007ca0 <__malloc_lock>
 8007ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b48 <_free_r+0x90>)
 8007ad2:	6813      	ldr	r3, [r2, #0]
 8007ad4:	b933      	cbnz	r3, 8007ae4 <_free_r+0x2c>
 8007ad6:	6063      	str	r3, [r4, #4]
 8007ad8:	6014      	str	r4, [r2, #0]
 8007ada:	4628      	mov	r0, r5
 8007adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae0:	f000 b8e4 	b.w	8007cac <__malloc_unlock>
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	d908      	bls.n	8007afa <_free_r+0x42>
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	1821      	adds	r1, r4, r0
 8007aec:	428b      	cmp	r3, r1
 8007aee:	bf01      	itttt	eq
 8007af0:	6819      	ldreq	r1, [r3, #0]
 8007af2:	685b      	ldreq	r3, [r3, #4]
 8007af4:	1809      	addeq	r1, r1, r0
 8007af6:	6021      	streq	r1, [r4, #0]
 8007af8:	e7ed      	b.n	8007ad6 <_free_r+0x1e>
 8007afa:	461a      	mov	r2, r3
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	b10b      	cbz	r3, 8007b04 <_free_r+0x4c>
 8007b00:	42a3      	cmp	r3, r4
 8007b02:	d9fa      	bls.n	8007afa <_free_r+0x42>
 8007b04:	6811      	ldr	r1, [r2, #0]
 8007b06:	1850      	adds	r0, r2, r1
 8007b08:	42a0      	cmp	r0, r4
 8007b0a:	d10b      	bne.n	8007b24 <_free_r+0x6c>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	4401      	add	r1, r0
 8007b10:	1850      	adds	r0, r2, r1
 8007b12:	4283      	cmp	r3, r0
 8007b14:	6011      	str	r1, [r2, #0]
 8007b16:	d1e0      	bne.n	8007ada <_free_r+0x22>
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	6053      	str	r3, [r2, #4]
 8007b1e:	4408      	add	r0, r1
 8007b20:	6010      	str	r0, [r2, #0]
 8007b22:	e7da      	b.n	8007ada <_free_r+0x22>
 8007b24:	d902      	bls.n	8007b2c <_free_r+0x74>
 8007b26:	230c      	movs	r3, #12
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	e7d6      	b.n	8007ada <_free_r+0x22>
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	1821      	adds	r1, r4, r0
 8007b30:	428b      	cmp	r3, r1
 8007b32:	bf04      	itt	eq
 8007b34:	6819      	ldreq	r1, [r3, #0]
 8007b36:	685b      	ldreq	r3, [r3, #4]
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	bf04      	itt	eq
 8007b3c:	1809      	addeq	r1, r1, r0
 8007b3e:	6021      	streq	r1, [r4, #0]
 8007b40:	6054      	str	r4, [r2, #4]
 8007b42:	e7ca      	b.n	8007ada <_free_r+0x22>
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	200005b0 	.word	0x200005b0

08007b4c <malloc>:
 8007b4c:	4b02      	ldr	r3, [pc, #8]	@ (8007b58 <malloc+0xc>)
 8007b4e:	4601      	mov	r1, r0
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	f000 b825 	b.w	8007ba0 <_malloc_r>
 8007b56:	bf00      	nop
 8007b58:	20000050 	.word	0x20000050

08007b5c <sbrk_aligned>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8007b9c <sbrk_aligned+0x40>)
 8007b60:	460c      	mov	r4, r1
 8007b62:	6831      	ldr	r1, [r6, #0]
 8007b64:	4605      	mov	r5, r0
 8007b66:	b911      	cbnz	r1, 8007b6e <sbrk_aligned+0x12>
 8007b68:	f000 feaa 	bl	80088c0 <_sbrk_r>
 8007b6c:	6030      	str	r0, [r6, #0]
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	f000 fea5 	bl	80088c0 <_sbrk_r>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	d103      	bne.n	8007b82 <sbrk_aligned+0x26>
 8007b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b7e:	4620      	mov	r0, r4
 8007b80:	bd70      	pop	{r4, r5, r6, pc}
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d0f8      	beq.n	8007b7e <sbrk_aligned+0x22>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fe96 	bl	80088c0 <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d1f2      	bne.n	8007b7e <sbrk_aligned+0x22>
 8007b98:	e7ef      	b.n	8007b7a <sbrk_aligned+0x1e>
 8007b9a:	bf00      	nop
 8007b9c:	200005ac 	.word	0x200005ac

08007ba0 <_malloc_r>:
 8007ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba4:	1ccd      	adds	r5, r1, #3
 8007ba6:	f025 0503 	bic.w	r5, r5, #3
 8007baa:	3508      	adds	r5, #8
 8007bac:	2d0c      	cmp	r5, #12
 8007bae:	bf38      	it	cc
 8007bb0:	250c      	movcc	r5, #12
 8007bb2:	2d00      	cmp	r5, #0
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	db01      	blt.n	8007bbc <_malloc_r+0x1c>
 8007bb8:	42a9      	cmp	r1, r5
 8007bba:	d904      	bls.n	8007bc6 <_malloc_r+0x26>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	6033      	str	r3, [r6, #0]
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c9c <_malloc_r+0xfc>
 8007bca:	f000 f869 	bl	8007ca0 <__malloc_lock>
 8007bce:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd2:	461c      	mov	r4, r3
 8007bd4:	bb44      	cbnz	r4, 8007c28 <_malloc_r+0x88>
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7ff ffbf 	bl	8007b5c <sbrk_aligned>
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	4604      	mov	r4, r0
 8007be2:	d158      	bne.n	8007c96 <_malloc_r+0xf6>
 8007be4:	f8d8 4000 	ldr.w	r4, [r8]
 8007be8:	4627      	mov	r7, r4
 8007bea:	2f00      	cmp	r7, #0
 8007bec:	d143      	bne.n	8007c76 <_malloc_r+0xd6>
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	d04b      	beq.n	8007c8a <_malloc_r+0xea>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	eb04 0903 	add.w	r9, r4, r3
 8007bfc:	f000 fe60 	bl	80088c0 <_sbrk_r>
 8007c00:	4581      	cmp	r9, r0
 8007c02:	d142      	bne.n	8007c8a <_malloc_r+0xea>
 8007c04:	6821      	ldr	r1, [r4, #0]
 8007c06:	1a6d      	subs	r5, r5, r1
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7ff ffa6 	bl	8007b5c <sbrk_aligned>
 8007c10:	3001      	adds	r0, #1
 8007c12:	d03a      	beq.n	8007c8a <_malloc_r+0xea>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	442b      	add	r3, r5
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	bb62      	cbnz	r2, 8007c7c <_malloc_r+0xdc>
 8007c22:	f8c8 7000 	str.w	r7, [r8]
 8007c26:	e00f      	b.n	8007c48 <_malloc_r+0xa8>
 8007c28:	6822      	ldr	r2, [r4, #0]
 8007c2a:	1b52      	subs	r2, r2, r5
 8007c2c:	d420      	bmi.n	8007c70 <_malloc_r+0xd0>
 8007c2e:	2a0b      	cmp	r2, #11
 8007c30:	d917      	bls.n	8007c62 <_malloc_r+0xc2>
 8007c32:	1961      	adds	r1, r4, r5
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	6025      	str	r5, [r4, #0]
 8007c38:	bf18      	it	ne
 8007c3a:	6059      	strne	r1, [r3, #4]
 8007c3c:	6863      	ldr	r3, [r4, #4]
 8007c3e:	bf08      	it	eq
 8007c40:	f8c8 1000 	streq.w	r1, [r8]
 8007c44:	5162      	str	r2, [r4, r5]
 8007c46:	604b      	str	r3, [r1, #4]
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f000 f82f 	bl	8007cac <__malloc_unlock>
 8007c4e:	f104 000b 	add.w	r0, r4, #11
 8007c52:	1d23      	adds	r3, r4, #4
 8007c54:	f020 0007 	bic.w	r0, r0, #7
 8007c58:	1ac2      	subs	r2, r0, r3
 8007c5a:	bf1c      	itt	ne
 8007c5c:	1a1b      	subne	r3, r3, r0
 8007c5e:	50a3      	strne	r3, [r4, r2]
 8007c60:	e7af      	b.n	8007bc2 <_malloc_r+0x22>
 8007c62:	6862      	ldr	r2, [r4, #4]
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	bf0c      	ite	eq
 8007c68:	f8c8 2000 	streq.w	r2, [r8]
 8007c6c:	605a      	strne	r2, [r3, #4]
 8007c6e:	e7eb      	b.n	8007c48 <_malloc_r+0xa8>
 8007c70:	4623      	mov	r3, r4
 8007c72:	6864      	ldr	r4, [r4, #4]
 8007c74:	e7ae      	b.n	8007bd4 <_malloc_r+0x34>
 8007c76:	463c      	mov	r4, r7
 8007c78:	687f      	ldr	r7, [r7, #4]
 8007c7a:	e7b6      	b.n	8007bea <_malloc_r+0x4a>
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	d1fb      	bne.n	8007c7c <_malloc_r+0xdc>
 8007c84:	2300      	movs	r3, #0
 8007c86:	6053      	str	r3, [r2, #4]
 8007c88:	e7de      	b.n	8007c48 <_malloc_r+0xa8>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f000 f80c 	bl	8007cac <__malloc_unlock>
 8007c94:	e794      	b.n	8007bc0 <_malloc_r+0x20>
 8007c96:	6005      	str	r5, [r0, #0]
 8007c98:	e7d6      	b.n	8007c48 <_malloc_r+0xa8>
 8007c9a:	bf00      	nop
 8007c9c:	200005b0 	.word	0x200005b0

08007ca0 <__malloc_lock>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	@ (8007ca8 <__malloc_lock+0x8>)
 8007ca2:	f7ff b8b8 	b.w	8006e16 <__retarget_lock_acquire_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	200005a8 	.word	0x200005a8

08007cac <__malloc_unlock>:
 8007cac:	4801      	ldr	r0, [pc, #4]	@ (8007cb4 <__malloc_unlock+0x8>)
 8007cae:	f7ff b8b3 	b.w	8006e18 <__retarget_lock_release_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	200005a8 	.word	0x200005a8

08007cb8 <_Balloc>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	69c6      	ldr	r6, [r0, #28]
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	460d      	mov	r5, r1
 8007cc0:	b976      	cbnz	r6, 8007ce0 <_Balloc+0x28>
 8007cc2:	2010      	movs	r0, #16
 8007cc4:	f7ff ff42 	bl	8007b4c <malloc>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	61e0      	str	r0, [r4, #28]
 8007ccc:	b920      	cbnz	r0, 8007cd8 <_Balloc+0x20>
 8007cce:	4b18      	ldr	r3, [pc, #96]	@ (8007d30 <_Balloc+0x78>)
 8007cd0:	4818      	ldr	r0, [pc, #96]	@ (8007d34 <_Balloc+0x7c>)
 8007cd2:	216b      	movs	r1, #107	@ 0x6b
 8007cd4:	f000 fe12 	bl	80088fc <__assert_func>
 8007cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cdc:	6006      	str	r6, [r0, #0]
 8007cde:	60c6      	str	r6, [r0, #12]
 8007ce0:	69e6      	ldr	r6, [r4, #28]
 8007ce2:	68f3      	ldr	r3, [r6, #12]
 8007ce4:	b183      	cbz	r3, 8007d08 <_Balloc+0x50>
 8007ce6:	69e3      	ldr	r3, [r4, #28]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cee:	b9b8      	cbnz	r0, 8007d20 <_Balloc+0x68>
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	fa01 f605 	lsl.w	r6, r1, r5
 8007cf6:	1d72      	adds	r2, r6, #5
 8007cf8:	0092      	lsls	r2, r2, #2
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 fe1c 	bl	8008938 <_calloc_r>
 8007d00:	b160      	cbz	r0, 8007d1c <_Balloc+0x64>
 8007d02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d06:	e00e      	b.n	8007d26 <_Balloc+0x6e>
 8007d08:	2221      	movs	r2, #33	@ 0x21
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 fe13 	bl	8008938 <_calloc_r>
 8007d12:	69e3      	ldr	r3, [r4, #28]
 8007d14:	60f0      	str	r0, [r6, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e4      	bne.n	8007ce6 <_Balloc+0x2e>
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	6802      	ldr	r2, [r0, #0]
 8007d22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d26:	2300      	movs	r3, #0
 8007d28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d2c:	e7f7      	b.n	8007d1e <_Balloc+0x66>
 8007d2e:	bf00      	nop
 8007d30:	08008c65 	.word	0x08008c65
 8007d34:	08008ce5 	.word	0x08008ce5

08007d38 <_Bfree>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	69c6      	ldr	r6, [r0, #28]
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	b976      	cbnz	r6, 8007d60 <_Bfree+0x28>
 8007d42:	2010      	movs	r0, #16
 8007d44:	f7ff ff02 	bl	8007b4c <malloc>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	61e8      	str	r0, [r5, #28]
 8007d4c:	b920      	cbnz	r0, 8007d58 <_Bfree+0x20>
 8007d4e:	4b09      	ldr	r3, [pc, #36]	@ (8007d74 <_Bfree+0x3c>)
 8007d50:	4809      	ldr	r0, [pc, #36]	@ (8007d78 <_Bfree+0x40>)
 8007d52:	218f      	movs	r1, #143	@ 0x8f
 8007d54:	f000 fdd2 	bl	80088fc <__assert_func>
 8007d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d5c:	6006      	str	r6, [r0, #0]
 8007d5e:	60c6      	str	r6, [r0, #12]
 8007d60:	b13c      	cbz	r4, 8007d72 <_Bfree+0x3a>
 8007d62:	69eb      	ldr	r3, [r5, #28]
 8007d64:	6862      	ldr	r2, [r4, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d6c:	6021      	str	r1, [r4, #0]
 8007d6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d72:	bd70      	pop	{r4, r5, r6, pc}
 8007d74:	08008c65 	.word	0x08008c65
 8007d78:	08008ce5 	.word	0x08008ce5

08007d7c <__multadd>:
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	690d      	ldr	r5, [r1, #16]
 8007d82:	4607      	mov	r7, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	461e      	mov	r6, r3
 8007d88:	f101 0c14 	add.w	ip, r1, #20
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	f8dc 3000 	ldr.w	r3, [ip]
 8007d92:	b299      	uxth	r1, r3
 8007d94:	fb02 6101 	mla	r1, r2, r1, r6
 8007d98:	0c1e      	lsrs	r6, r3, #16
 8007d9a:	0c0b      	lsrs	r3, r1, #16
 8007d9c:	fb02 3306 	mla	r3, r2, r6, r3
 8007da0:	b289      	uxth	r1, r1
 8007da2:	3001      	adds	r0, #1
 8007da4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007da8:	4285      	cmp	r5, r0
 8007daa:	f84c 1b04 	str.w	r1, [ip], #4
 8007dae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007db2:	dcec      	bgt.n	8007d8e <__multadd+0x12>
 8007db4:	b30e      	cbz	r6, 8007dfa <__multadd+0x7e>
 8007db6:	68a3      	ldr	r3, [r4, #8]
 8007db8:	42ab      	cmp	r3, r5
 8007dba:	dc19      	bgt.n	8007df0 <__multadd+0x74>
 8007dbc:	6861      	ldr	r1, [r4, #4]
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	3101      	adds	r1, #1
 8007dc2:	f7ff ff79 	bl	8007cb8 <_Balloc>
 8007dc6:	4680      	mov	r8, r0
 8007dc8:	b928      	cbnz	r0, 8007dd6 <__multadd+0x5a>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <__multadd+0x84>)
 8007dce:	480d      	ldr	r0, [pc, #52]	@ (8007e04 <__multadd+0x88>)
 8007dd0:	21ba      	movs	r1, #186	@ 0xba
 8007dd2:	f000 fd93 	bl	80088fc <__assert_func>
 8007dd6:	6922      	ldr	r2, [r4, #16]
 8007dd8:	3202      	adds	r2, #2
 8007dda:	f104 010c 	add.w	r1, r4, #12
 8007dde:	0092      	lsls	r2, r2, #2
 8007de0:	300c      	adds	r0, #12
 8007de2:	f000 fd7d 	bl	80088e0 <memcpy>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7ff ffa5 	bl	8007d38 <_Bfree>
 8007dee:	4644      	mov	r4, r8
 8007df0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007df4:	3501      	adds	r5, #1
 8007df6:	615e      	str	r6, [r3, #20]
 8007df8:	6125      	str	r5, [r4, #16]
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e00:	08008cd4 	.word	0x08008cd4
 8007e04:	08008ce5 	.word	0x08008ce5

08007e08 <__hi0bits>:
 8007e08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	bf36      	itet	cc
 8007e10:	0403      	lslcc	r3, r0, #16
 8007e12:	2000      	movcs	r0, #0
 8007e14:	2010      	movcc	r0, #16
 8007e16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e1a:	bf3c      	itt	cc
 8007e1c:	021b      	lslcc	r3, r3, #8
 8007e1e:	3008      	addcc	r0, #8
 8007e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e24:	bf3c      	itt	cc
 8007e26:	011b      	lslcc	r3, r3, #4
 8007e28:	3004      	addcc	r0, #4
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2e:	bf3c      	itt	cc
 8007e30:	009b      	lslcc	r3, r3, #2
 8007e32:	3002      	addcc	r0, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	db05      	blt.n	8007e44 <__hi0bits+0x3c>
 8007e38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e3c:	f100 0001 	add.w	r0, r0, #1
 8007e40:	bf08      	it	eq
 8007e42:	2020      	moveq	r0, #32
 8007e44:	4770      	bx	lr

08007e46 <__lo0bits>:
 8007e46:	6803      	ldr	r3, [r0, #0]
 8007e48:	4602      	mov	r2, r0
 8007e4a:	f013 0007 	ands.w	r0, r3, #7
 8007e4e:	d00b      	beq.n	8007e68 <__lo0bits+0x22>
 8007e50:	07d9      	lsls	r1, r3, #31
 8007e52:	d421      	bmi.n	8007e98 <__lo0bits+0x52>
 8007e54:	0798      	lsls	r0, r3, #30
 8007e56:	bf49      	itett	mi
 8007e58:	085b      	lsrmi	r3, r3, #1
 8007e5a:	089b      	lsrpl	r3, r3, #2
 8007e5c:	2001      	movmi	r0, #1
 8007e5e:	6013      	strmi	r3, [r2, #0]
 8007e60:	bf5c      	itt	pl
 8007e62:	6013      	strpl	r3, [r2, #0]
 8007e64:	2002      	movpl	r0, #2
 8007e66:	4770      	bx	lr
 8007e68:	b299      	uxth	r1, r3
 8007e6a:	b909      	cbnz	r1, 8007e70 <__lo0bits+0x2a>
 8007e6c:	0c1b      	lsrs	r3, r3, #16
 8007e6e:	2010      	movs	r0, #16
 8007e70:	b2d9      	uxtb	r1, r3
 8007e72:	b909      	cbnz	r1, 8007e78 <__lo0bits+0x32>
 8007e74:	3008      	adds	r0, #8
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	0719      	lsls	r1, r3, #28
 8007e7a:	bf04      	itt	eq
 8007e7c:	091b      	lsreq	r3, r3, #4
 8007e7e:	3004      	addeq	r0, #4
 8007e80:	0799      	lsls	r1, r3, #30
 8007e82:	bf04      	itt	eq
 8007e84:	089b      	lsreq	r3, r3, #2
 8007e86:	3002      	addeq	r0, #2
 8007e88:	07d9      	lsls	r1, r3, #31
 8007e8a:	d403      	bmi.n	8007e94 <__lo0bits+0x4e>
 8007e8c:	085b      	lsrs	r3, r3, #1
 8007e8e:	f100 0001 	add.w	r0, r0, #1
 8007e92:	d003      	beq.n	8007e9c <__lo0bits+0x56>
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4770      	bx	lr
 8007e98:	2000      	movs	r0, #0
 8007e9a:	4770      	bx	lr
 8007e9c:	2020      	movs	r0, #32
 8007e9e:	4770      	bx	lr

08007ea0 <__i2b>:
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	f7ff ff07 	bl	8007cb8 <_Balloc>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	b928      	cbnz	r0, 8007eba <__i2b+0x1a>
 8007eae:	4b05      	ldr	r3, [pc, #20]	@ (8007ec4 <__i2b+0x24>)
 8007eb0:	4805      	ldr	r0, [pc, #20]	@ (8007ec8 <__i2b+0x28>)
 8007eb2:	f240 1145 	movw	r1, #325	@ 0x145
 8007eb6:	f000 fd21 	bl	80088fc <__assert_func>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	6144      	str	r4, [r0, #20]
 8007ebe:	6103      	str	r3, [r0, #16]
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	bf00      	nop
 8007ec4:	08008cd4 	.word	0x08008cd4
 8007ec8:	08008ce5 	.word	0x08008ce5

08007ecc <__multiply>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	690a      	ldr	r2, [r1, #16]
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	bfa8      	it	ge
 8007eda:	4623      	movge	r3, r4
 8007edc:	460f      	mov	r7, r1
 8007ede:	bfa4      	itt	ge
 8007ee0:	460c      	movge	r4, r1
 8007ee2:	461f      	movge	r7, r3
 8007ee4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ee8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007eec:	68a3      	ldr	r3, [r4, #8]
 8007eee:	6861      	ldr	r1, [r4, #4]
 8007ef0:	eb0a 0609 	add.w	r6, sl, r9
 8007ef4:	42b3      	cmp	r3, r6
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	bfb8      	it	lt
 8007efa:	3101      	addlt	r1, #1
 8007efc:	f7ff fedc 	bl	8007cb8 <_Balloc>
 8007f00:	b930      	cbnz	r0, 8007f10 <__multiply+0x44>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b44      	ldr	r3, [pc, #272]	@ (8008018 <__multiply+0x14c>)
 8007f06:	4845      	ldr	r0, [pc, #276]	@ (800801c <__multiply+0x150>)
 8007f08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f0c:	f000 fcf6 	bl	80088fc <__assert_func>
 8007f10:	f100 0514 	add.w	r5, r0, #20
 8007f14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f18:	462b      	mov	r3, r5
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4543      	cmp	r3, r8
 8007f1e:	d321      	bcc.n	8007f64 <__multiply+0x98>
 8007f20:	f107 0114 	add.w	r1, r7, #20
 8007f24:	f104 0214 	add.w	r2, r4, #20
 8007f28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f30:	9302      	str	r3, [sp, #8]
 8007f32:	1b13      	subs	r3, r2, r4
 8007f34:	3b15      	subs	r3, #21
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	f104 0715 	add.w	r7, r4, #21
 8007f40:	42ba      	cmp	r2, r7
 8007f42:	bf38      	it	cc
 8007f44:	2304      	movcc	r3, #4
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	9b02      	ldr	r3, [sp, #8]
 8007f4a:	9103      	str	r1, [sp, #12]
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	d80c      	bhi.n	8007f6a <__multiply+0x9e>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	dd03      	ble.n	8007f5c <__multiply+0x90>
 8007f54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d05b      	beq.n	8008014 <__multiply+0x148>
 8007f5c:	6106      	str	r6, [r0, #16]
 8007f5e:	b005      	add	sp, #20
 8007f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f64:	f843 2b04 	str.w	r2, [r3], #4
 8007f68:	e7d8      	b.n	8007f1c <__multiply+0x50>
 8007f6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f6e:	f1ba 0f00 	cmp.w	sl, #0
 8007f72:	d024      	beq.n	8007fbe <__multiply+0xf2>
 8007f74:	f104 0e14 	add.w	lr, r4, #20
 8007f78:	46a9      	mov	r9, r5
 8007f7a:	f04f 0c00 	mov.w	ip, #0
 8007f7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f82:	f8d9 3000 	ldr.w	r3, [r9]
 8007f86:	fa1f fb87 	uxth.w	fp, r7
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f94:	f8d9 7000 	ldr.w	r7, [r9]
 8007f98:	4463      	add	r3, ip
 8007f9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007fa2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fac:	4572      	cmp	r2, lr
 8007fae:	f849 3b04 	str.w	r3, [r9], #4
 8007fb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fb6:	d8e2      	bhi.n	8007f7e <__multiply+0xb2>
 8007fb8:	9b01      	ldr	r3, [sp, #4]
 8007fba:	f845 c003 	str.w	ip, [r5, r3]
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fc4:	3104      	adds	r1, #4
 8007fc6:	f1b9 0f00 	cmp.w	r9, #0
 8007fca:	d021      	beq.n	8008010 <__multiply+0x144>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	f104 0c14 	add.w	ip, r4, #20
 8007fd2:	46ae      	mov	lr, r5
 8007fd4:	f04f 0a00 	mov.w	sl, #0
 8007fd8:	f8bc b000 	ldrh.w	fp, [ip]
 8007fdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fe0:	fb09 770b 	mla	r7, r9, fp, r7
 8007fe4:	4457      	add	r7, sl
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fec:	f84e 3b04 	str.w	r3, [lr], #4
 8007ff0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ff4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ff8:	f8be 3000 	ldrh.w	r3, [lr]
 8007ffc:	fb09 330a 	mla	r3, r9, sl, r3
 8008000:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008004:	4562      	cmp	r2, ip
 8008006:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800800a:	d8e5      	bhi.n	8007fd8 <__multiply+0x10c>
 800800c:	9f01      	ldr	r7, [sp, #4]
 800800e:	51eb      	str	r3, [r5, r7]
 8008010:	3504      	adds	r5, #4
 8008012:	e799      	b.n	8007f48 <__multiply+0x7c>
 8008014:	3e01      	subs	r6, #1
 8008016:	e79b      	b.n	8007f50 <__multiply+0x84>
 8008018:	08008cd4 	.word	0x08008cd4
 800801c:	08008ce5 	.word	0x08008ce5

08008020 <__pow5mult>:
 8008020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008024:	4615      	mov	r5, r2
 8008026:	f012 0203 	ands.w	r2, r2, #3
 800802a:	4607      	mov	r7, r0
 800802c:	460e      	mov	r6, r1
 800802e:	d007      	beq.n	8008040 <__pow5mult+0x20>
 8008030:	4c25      	ldr	r4, [pc, #148]	@ (80080c8 <__pow5mult+0xa8>)
 8008032:	3a01      	subs	r2, #1
 8008034:	2300      	movs	r3, #0
 8008036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800803a:	f7ff fe9f 	bl	8007d7c <__multadd>
 800803e:	4606      	mov	r6, r0
 8008040:	10ad      	asrs	r5, r5, #2
 8008042:	d03d      	beq.n	80080c0 <__pow5mult+0xa0>
 8008044:	69fc      	ldr	r4, [r7, #28]
 8008046:	b97c      	cbnz	r4, 8008068 <__pow5mult+0x48>
 8008048:	2010      	movs	r0, #16
 800804a:	f7ff fd7f 	bl	8007b4c <malloc>
 800804e:	4602      	mov	r2, r0
 8008050:	61f8      	str	r0, [r7, #28]
 8008052:	b928      	cbnz	r0, 8008060 <__pow5mult+0x40>
 8008054:	4b1d      	ldr	r3, [pc, #116]	@ (80080cc <__pow5mult+0xac>)
 8008056:	481e      	ldr	r0, [pc, #120]	@ (80080d0 <__pow5mult+0xb0>)
 8008058:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800805c:	f000 fc4e 	bl	80088fc <__assert_func>
 8008060:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008064:	6004      	str	r4, [r0, #0]
 8008066:	60c4      	str	r4, [r0, #12]
 8008068:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800806c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008070:	b94c      	cbnz	r4, 8008086 <__pow5mult+0x66>
 8008072:	f240 2171 	movw	r1, #625	@ 0x271
 8008076:	4638      	mov	r0, r7
 8008078:	f7ff ff12 	bl	8007ea0 <__i2b>
 800807c:	2300      	movs	r3, #0
 800807e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008082:	4604      	mov	r4, r0
 8008084:	6003      	str	r3, [r0, #0]
 8008086:	f04f 0900 	mov.w	r9, #0
 800808a:	07eb      	lsls	r3, r5, #31
 800808c:	d50a      	bpl.n	80080a4 <__pow5mult+0x84>
 800808e:	4631      	mov	r1, r6
 8008090:	4622      	mov	r2, r4
 8008092:	4638      	mov	r0, r7
 8008094:	f7ff ff1a 	bl	8007ecc <__multiply>
 8008098:	4631      	mov	r1, r6
 800809a:	4680      	mov	r8, r0
 800809c:	4638      	mov	r0, r7
 800809e:	f7ff fe4b 	bl	8007d38 <_Bfree>
 80080a2:	4646      	mov	r6, r8
 80080a4:	106d      	asrs	r5, r5, #1
 80080a6:	d00b      	beq.n	80080c0 <__pow5mult+0xa0>
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	b938      	cbnz	r0, 80080bc <__pow5mult+0x9c>
 80080ac:	4622      	mov	r2, r4
 80080ae:	4621      	mov	r1, r4
 80080b0:	4638      	mov	r0, r7
 80080b2:	f7ff ff0b 	bl	8007ecc <__multiply>
 80080b6:	6020      	str	r0, [r4, #0]
 80080b8:	f8c0 9000 	str.w	r9, [r0]
 80080bc:	4604      	mov	r4, r0
 80080be:	e7e4      	b.n	800808a <__pow5mult+0x6a>
 80080c0:	4630      	mov	r0, r6
 80080c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c6:	bf00      	nop
 80080c8:	08008d40 	.word	0x08008d40
 80080cc:	08008c65 	.word	0x08008c65
 80080d0:	08008ce5 	.word	0x08008ce5

080080d4 <__lshift>:
 80080d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	460c      	mov	r4, r1
 80080da:	6849      	ldr	r1, [r1, #4]
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080e2:	68a3      	ldr	r3, [r4, #8]
 80080e4:	4607      	mov	r7, r0
 80080e6:	4691      	mov	r9, r2
 80080e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080ec:	f108 0601 	add.w	r6, r8, #1
 80080f0:	42b3      	cmp	r3, r6
 80080f2:	db0b      	blt.n	800810c <__lshift+0x38>
 80080f4:	4638      	mov	r0, r7
 80080f6:	f7ff fddf 	bl	8007cb8 <_Balloc>
 80080fa:	4605      	mov	r5, r0
 80080fc:	b948      	cbnz	r0, 8008112 <__lshift+0x3e>
 80080fe:	4602      	mov	r2, r0
 8008100:	4b28      	ldr	r3, [pc, #160]	@ (80081a4 <__lshift+0xd0>)
 8008102:	4829      	ldr	r0, [pc, #164]	@ (80081a8 <__lshift+0xd4>)
 8008104:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008108:	f000 fbf8 	bl	80088fc <__assert_func>
 800810c:	3101      	adds	r1, #1
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	e7ee      	b.n	80080f0 <__lshift+0x1c>
 8008112:	2300      	movs	r3, #0
 8008114:	f100 0114 	add.w	r1, r0, #20
 8008118:	f100 0210 	add.w	r2, r0, #16
 800811c:	4618      	mov	r0, r3
 800811e:	4553      	cmp	r3, sl
 8008120:	db33      	blt.n	800818a <__lshift+0xb6>
 8008122:	6920      	ldr	r0, [r4, #16]
 8008124:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008128:	f104 0314 	add.w	r3, r4, #20
 800812c:	f019 091f 	ands.w	r9, r9, #31
 8008130:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008134:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008138:	d02b      	beq.n	8008192 <__lshift+0xbe>
 800813a:	f1c9 0e20 	rsb	lr, r9, #32
 800813e:	468a      	mov	sl, r1
 8008140:	2200      	movs	r2, #0
 8008142:	6818      	ldr	r0, [r3, #0]
 8008144:	fa00 f009 	lsl.w	r0, r0, r9
 8008148:	4310      	orrs	r0, r2
 800814a:	f84a 0b04 	str.w	r0, [sl], #4
 800814e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008152:	459c      	cmp	ip, r3
 8008154:	fa22 f20e 	lsr.w	r2, r2, lr
 8008158:	d8f3      	bhi.n	8008142 <__lshift+0x6e>
 800815a:	ebac 0304 	sub.w	r3, ip, r4
 800815e:	3b15      	subs	r3, #21
 8008160:	f023 0303 	bic.w	r3, r3, #3
 8008164:	3304      	adds	r3, #4
 8008166:	f104 0015 	add.w	r0, r4, #21
 800816a:	4584      	cmp	ip, r0
 800816c:	bf38      	it	cc
 800816e:	2304      	movcc	r3, #4
 8008170:	50ca      	str	r2, [r1, r3]
 8008172:	b10a      	cbz	r2, 8008178 <__lshift+0xa4>
 8008174:	f108 0602 	add.w	r6, r8, #2
 8008178:	3e01      	subs	r6, #1
 800817a:	4638      	mov	r0, r7
 800817c:	612e      	str	r6, [r5, #16]
 800817e:	4621      	mov	r1, r4
 8008180:	f7ff fdda 	bl	8007d38 <_Bfree>
 8008184:	4628      	mov	r0, r5
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	f842 0f04 	str.w	r0, [r2, #4]!
 800818e:	3301      	adds	r3, #1
 8008190:	e7c5      	b.n	800811e <__lshift+0x4a>
 8008192:	3904      	subs	r1, #4
 8008194:	f853 2b04 	ldr.w	r2, [r3], #4
 8008198:	f841 2f04 	str.w	r2, [r1, #4]!
 800819c:	459c      	cmp	ip, r3
 800819e:	d8f9      	bhi.n	8008194 <__lshift+0xc0>
 80081a0:	e7ea      	b.n	8008178 <__lshift+0xa4>
 80081a2:	bf00      	nop
 80081a4:	08008cd4 	.word	0x08008cd4
 80081a8:	08008ce5 	.word	0x08008ce5

080081ac <__mcmp>:
 80081ac:	690a      	ldr	r2, [r1, #16]
 80081ae:	4603      	mov	r3, r0
 80081b0:	6900      	ldr	r0, [r0, #16]
 80081b2:	1a80      	subs	r0, r0, r2
 80081b4:	b530      	push	{r4, r5, lr}
 80081b6:	d10e      	bne.n	80081d6 <__mcmp+0x2a>
 80081b8:	3314      	adds	r3, #20
 80081ba:	3114      	adds	r1, #20
 80081bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081cc:	4295      	cmp	r5, r2
 80081ce:	d003      	beq.n	80081d8 <__mcmp+0x2c>
 80081d0:	d205      	bcs.n	80081de <__mcmp+0x32>
 80081d2:	f04f 30ff 	mov.w	r0, #4294967295
 80081d6:	bd30      	pop	{r4, r5, pc}
 80081d8:	42a3      	cmp	r3, r4
 80081da:	d3f3      	bcc.n	80081c4 <__mcmp+0x18>
 80081dc:	e7fb      	b.n	80081d6 <__mcmp+0x2a>
 80081de:	2001      	movs	r0, #1
 80081e0:	e7f9      	b.n	80081d6 <__mcmp+0x2a>
	...

080081e4 <__mdiff>:
 80081e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	4689      	mov	r9, r1
 80081ea:	4606      	mov	r6, r0
 80081ec:	4611      	mov	r1, r2
 80081ee:	4648      	mov	r0, r9
 80081f0:	4614      	mov	r4, r2
 80081f2:	f7ff ffdb 	bl	80081ac <__mcmp>
 80081f6:	1e05      	subs	r5, r0, #0
 80081f8:	d112      	bne.n	8008220 <__mdiff+0x3c>
 80081fa:	4629      	mov	r1, r5
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7ff fd5b 	bl	8007cb8 <_Balloc>
 8008202:	4602      	mov	r2, r0
 8008204:	b928      	cbnz	r0, 8008212 <__mdiff+0x2e>
 8008206:	4b3f      	ldr	r3, [pc, #252]	@ (8008304 <__mdiff+0x120>)
 8008208:	f240 2137 	movw	r1, #567	@ 0x237
 800820c:	483e      	ldr	r0, [pc, #248]	@ (8008308 <__mdiff+0x124>)
 800820e:	f000 fb75 	bl	80088fc <__assert_func>
 8008212:	2301      	movs	r3, #1
 8008214:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008218:	4610      	mov	r0, r2
 800821a:	b003      	add	sp, #12
 800821c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008220:	bfbc      	itt	lt
 8008222:	464b      	movlt	r3, r9
 8008224:	46a1      	movlt	r9, r4
 8008226:	4630      	mov	r0, r6
 8008228:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800822c:	bfba      	itte	lt
 800822e:	461c      	movlt	r4, r3
 8008230:	2501      	movlt	r5, #1
 8008232:	2500      	movge	r5, #0
 8008234:	f7ff fd40 	bl	8007cb8 <_Balloc>
 8008238:	4602      	mov	r2, r0
 800823a:	b918      	cbnz	r0, 8008244 <__mdiff+0x60>
 800823c:	4b31      	ldr	r3, [pc, #196]	@ (8008304 <__mdiff+0x120>)
 800823e:	f240 2145 	movw	r1, #581	@ 0x245
 8008242:	e7e3      	b.n	800820c <__mdiff+0x28>
 8008244:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008248:	6926      	ldr	r6, [r4, #16]
 800824a:	60c5      	str	r5, [r0, #12]
 800824c:	f109 0310 	add.w	r3, r9, #16
 8008250:	f109 0514 	add.w	r5, r9, #20
 8008254:	f104 0e14 	add.w	lr, r4, #20
 8008258:	f100 0b14 	add.w	fp, r0, #20
 800825c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008260:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	46d9      	mov	r9, fp
 8008268:	f04f 0c00 	mov.w	ip, #0
 800826c:	9b01      	ldr	r3, [sp, #4]
 800826e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008272:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	fa1f f38a 	uxth.w	r3, sl
 800827c:	4619      	mov	r1, r3
 800827e:	b283      	uxth	r3, r0
 8008280:	1acb      	subs	r3, r1, r3
 8008282:	0c00      	lsrs	r0, r0, #16
 8008284:	4463      	add	r3, ip
 8008286:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800828a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800828e:	b29b      	uxth	r3, r3
 8008290:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008294:	4576      	cmp	r6, lr
 8008296:	f849 3b04 	str.w	r3, [r9], #4
 800829a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800829e:	d8e5      	bhi.n	800826c <__mdiff+0x88>
 80082a0:	1b33      	subs	r3, r6, r4
 80082a2:	3b15      	subs	r3, #21
 80082a4:	f023 0303 	bic.w	r3, r3, #3
 80082a8:	3415      	adds	r4, #21
 80082aa:	3304      	adds	r3, #4
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	bf38      	it	cc
 80082b0:	2304      	movcc	r3, #4
 80082b2:	441d      	add	r5, r3
 80082b4:	445b      	add	r3, fp
 80082b6:	461e      	mov	r6, r3
 80082b8:	462c      	mov	r4, r5
 80082ba:	4544      	cmp	r4, r8
 80082bc:	d30e      	bcc.n	80082dc <__mdiff+0xf8>
 80082be:	f108 0103 	add.w	r1, r8, #3
 80082c2:	1b49      	subs	r1, r1, r5
 80082c4:	f021 0103 	bic.w	r1, r1, #3
 80082c8:	3d03      	subs	r5, #3
 80082ca:	45a8      	cmp	r8, r5
 80082cc:	bf38      	it	cc
 80082ce:	2100      	movcc	r1, #0
 80082d0:	440b      	add	r3, r1
 80082d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082d6:	b191      	cbz	r1, 80082fe <__mdiff+0x11a>
 80082d8:	6117      	str	r7, [r2, #16]
 80082da:	e79d      	b.n	8008218 <__mdiff+0x34>
 80082dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80082e0:	46e6      	mov	lr, ip
 80082e2:	0c08      	lsrs	r0, r1, #16
 80082e4:	fa1c fc81 	uxtah	ip, ip, r1
 80082e8:	4471      	add	r1, lr
 80082ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082ee:	b289      	uxth	r1, r1
 80082f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082f4:	f846 1b04 	str.w	r1, [r6], #4
 80082f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082fc:	e7dd      	b.n	80082ba <__mdiff+0xd6>
 80082fe:	3f01      	subs	r7, #1
 8008300:	e7e7      	b.n	80082d2 <__mdiff+0xee>
 8008302:	bf00      	nop
 8008304:	08008cd4 	.word	0x08008cd4
 8008308:	08008ce5 	.word	0x08008ce5

0800830c <__d2b>:
 800830c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008310:	460f      	mov	r7, r1
 8008312:	2101      	movs	r1, #1
 8008314:	ec59 8b10 	vmov	r8, r9, d0
 8008318:	4616      	mov	r6, r2
 800831a:	f7ff fccd 	bl	8007cb8 <_Balloc>
 800831e:	4604      	mov	r4, r0
 8008320:	b930      	cbnz	r0, 8008330 <__d2b+0x24>
 8008322:	4602      	mov	r2, r0
 8008324:	4b23      	ldr	r3, [pc, #140]	@ (80083b4 <__d2b+0xa8>)
 8008326:	4824      	ldr	r0, [pc, #144]	@ (80083b8 <__d2b+0xac>)
 8008328:	f240 310f 	movw	r1, #783	@ 0x30f
 800832c:	f000 fae6 	bl	80088fc <__assert_func>
 8008330:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008334:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008338:	b10d      	cbz	r5, 800833e <__d2b+0x32>
 800833a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	f1b8 0300 	subs.w	r3, r8, #0
 8008344:	d023      	beq.n	800838e <__d2b+0x82>
 8008346:	4668      	mov	r0, sp
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	f7ff fd7c 	bl	8007e46 <__lo0bits>
 800834e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008352:	b1d0      	cbz	r0, 800838a <__d2b+0x7e>
 8008354:	f1c0 0320 	rsb	r3, r0, #32
 8008358:	fa02 f303 	lsl.w	r3, r2, r3
 800835c:	430b      	orrs	r3, r1
 800835e:	40c2      	lsrs	r2, r0
 8008360:	6163      	str	r3, [r4, #20]
 8008362:	9201      	str	r2, [sp, #4]
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	61a3      	str	r3, [r4, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	bf0c      	ite	eq
 800836c:	2201      	moveq	r2, #1
 800836e:	2202      	movne	r2, #2
 8008370:	6122      	str	r2, [r4, #16]
 8008372:	b1a5      	cbz	r5, 800839e <__d2b+0x92>
 8008374:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008378:	4405      	add	r5, r0
 800837a:	603d      	str	r5, [r7, #0]
 800837c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008380:	6030      	str	r0, [r6, #0]
 8008382:	4620      	mov	r0, r4
 8008384:	b003      	add	sp, #12
 8008386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800838a:	6161      	str	r1, [r4, #20]
 800838c:	e7ea      	b.n	8008364 <__d2b+0x58>
 800838e:	a801      	add	r0, sp, #4
 8008390:	f7ff fd59 	bl	8007e46 <__lo0bits>
 8008394:	9b01      	ldr	r3, [sp, #4]
 8008396:	6163      	str	r3, [r4, #20]
 8008398:	3020      	adds	r0, #32
 800839a:	2201      	movs	r2, #1
 800839c:	e7e8      	b.n	8008370 <__d2b+0x64>
 800839e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80083a6:	6038      	str	r0, [r7, #0]
 80083a8:	6918      	ldr	r0, [r3, #16]
 80083aa:	f7ff fd2d 	bl	8007e08 <__hi0bits>
 80083ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083b2:	e7e5      	b.n	8008380 <__d2b+0x74>
 80083b4:	08008cd4 	.word	0x08008cd4
 80083b8:	08008ce5 	.word	0x08008ce5

080083bc <__sfputc_r>:
 80083bc:	6893      	ldr	r3, [r2, #8]
 80083be:	3b01      	subs	r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	b410      	push	{r4}
 80083c4:	6093      	str	r3, [r2, #8]
 80083c6:	da08      	bge.n	80083da <__sfputc_r+0x1e>
 80083c8:	6994      	ldr	r4, [r2, #24]
 80083ca:	42a3      	cmp	r3, r4
 80083cc:	db01      	blt.n	80083d2 <__sfputc_r+0x16>
 80083ce:	290a      	cmp	r1, #10
 80083d0:	d103      	bne.n	80083da <__sfputc_r+0x1e>
 80083d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d6:	f000 b9df 	b.w	8008798 <__swbuf_r>
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	1c58      	adds	r0, r3, #1
 80083de:	6010      	str	r0, [r2, #0]
 80083e0:	7019      	strb	r1, [r3, #0]
 80083e2:	4608      	mov	r0, r1
 80083e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <__sfputs_r>:
 80083ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ec:	4606      	mov	r6, r0
 80083ee:	460f      	mov	r7, r1
 80083f0:	4614      	mov	r4, r2
 80083f2:	18d5      	adds	r5, r2, r3
 80083f4:	42ac      	cmp	r4, r5
 80083f6:	d101      	bne.n	80083fc <__sfputs_r+0x12>
 80083f8:	2000      	movs	r0, #0
 80083fa:	e007      	b.n	800840c <__sfputs_r+0x22>
 80083fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008400:	463a      	mov	r2, r7
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff ffda 	bl	80083bc <__sfputc_r>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d1f3      	bne.n	80083f4 <__sfputs_r+0xa>
 800840c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008410 <_vfiprintf_r>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	460d      	mov	r5, r1
 8008416:	b09d      	sub	sp, #116	@ 0x74
 8008418:	4614      	mov	r4, r2
 800841a:	4698      	mov	r8, r3
 800841c:	4606      	mov	r6, r0
 800841e:	b118      	cbz	r0, 8008428 <_vfiprintf_r+0x18>
 8008420:	6a03      	ldr	r3, [r0, #32]
 8008422:	b90b      	cbnz	r3, 8008428 <_vfiprintf_r+0x18>
 8008424:	f7fe fbee 	bl	8006c04 <__sinit>
 8008428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800842a:	07d9      	lsls	r1, r3, #31
 800842c:	d405      	bmi.n	800843a <_vfiprintf_r+0x2a>
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	059a      	lsls	r2, r3, #22
 8008432:	d402      	bmi.n	800843a <_vfiprintf_r+0x2a>
 8008434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008436:	f7fe fcee 	bl	8006e16 <__retarget_lock_acquire_recursive>
 800843a:	89ab      	ldrh	r3, [r5, #12]
 800843c:	071b      	lsls	r3, r3, #28
 800843e:	d501      	bpl.n	8008444 <_vfiprintf_r+0x34>
 8008440:	692b      	ldr	r3, [r5, #16]
 8008442:	b99b      	cbnz	r3, 800846c <_vfiprintf_r+0x5c>
 8008444:	4629      	mov	r1, r5
 8008446:	4630      	mov	r0, r6
 8008448:	f000 f9e4 	bl	8008814 <__swsetup_r>
 800844c:	b170      	cbz	r0, 800846c <_vfiprintf_r+0x5c>
 800844e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008450:	07dc      	lsls	r4, r3, #31
 8008452:	d504      	bpl.n	800845e <_vfiprintf_r+0x4e>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	b01d      	add	sp, #116	@ 0x74
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	0598      	lsls	r0, r3, #22
 8008462:	d4f7      	bmi.n	8008454 <_vfiprintf_r+0x44>
 8008464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008466:	f7fe fcd7 	bl	8006e18 <__retarget_lock_release_recursive>
 800846a:	e7f3      	b.n	8008454 <_vfiprintf_r+0x44>
 800846c:	2300      	movs	r3, #0
 800846e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008470:	2320      	movs	r3, #32
 8008472:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008476:	f8cd 800c 	str.w	r8, [sp, #12]
 800847a:	2330      	movs	r3, #48	@ 0x30
 800847c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800862c <_vfiprintf_r+0x21c>
 8008480:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008484:	f04f 0901 	mov.w	r9, #1
 8008488:	4623      	mov	r3, r4
 800848a:	469a      	mov	sl, r3
 800848c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008490:	b10a      	cbz	r2, 8008496 <_vfiprintf_r+0x86>
 8008492:	2a25      	cmp	r2, #37	@ 0x25
 8008494:	d1f9      	bne.n	800848a <_vfiprintf_r+0x7a>
 8008496:	ebba 0b04 	subs.w	fp, sl, r4
 800849a:	d00b      	beq.n	80084b4 <_vfiprintf_r+0xa4>
 800849c:	465b      	mov	r3, fp
 800849e:	4622      	mov	r2, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	4630      	mov	r0, r6
 80084a4:	f7ff ffa1 	bl	80083ea <__sfputs_r>
 80084a8:	3001      	adds	r0, #1
 80084aa:	f000 80a7 	beq.w	80085fc <_vfiprintf_r+0x1ec>
 80084ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084b0:	445a      	add	r2, fp
 80084b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80084b4:	f89a 3000 	ldrb.w	r3, [sl]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 809f 	beq.w	80085fc <_vfiprintf_r+0x1ec>
 80084be:	2300      	movs	r3, #0
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295
 80084c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c8:	f10a 0a01 	add.w	sl, sl, #1
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	9307      	str	r3, [sp, #28]
 80084d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80084d6:	4654      	mov	r4, sl
 80084d8:	2205      	movs	r2, #5
 80084da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084de:	4853      	ldr	r0, [pc, #332]	@ (800862c <_vfiprintf_r+0x21c>)
 80084e0:	f7f7 fe76 	bl	80001d0 <memchr>
 80084e4:	9a04      	ldr	r2, [sp, #16]
 80084e6:	b9d8      	cbnz	r0, 8008520 <_vfiprintf_r+0x110>
 80084e8:	06d1      	lsls	r1, r2, #27
 80084ea:	bf44      	itt	mi
 80084ec:	2320      	movmi	r3, #32
 80084ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f2:	0713      	lsls	r3, r2, #28
 80084f4:	bf44      	itt	mi
 80084f6:	232b      	movmi	r3, #43	@ 0x2b
 80084f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008500:	2b2a      	cmp	r3, #42	@ 0x2a
 8008502:	d015      	beq.n	8008530 <_vfiprintf_r+0x120>
 8008504:	9a07      	ldr	r2, [sp, #28]
 8008506:	4654      	mov	r4, sl
 8008508:	2000      	movs	r0, #0
 800850a:	f04f 0c0a 	mov.w	ip, #10
 800850e:	4621      	mov	r1, r4
 8008510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008514:	3b30      	subs	r3, #48	@ 0x30
 8008516:	2b09      	cmp	r3, #9
 8008518:	d94b      	bls.n	80085b2 <_vfiprintf_r+0x1a2>
 800851a:	b1b0      	cbz	r0, 800854a <_vfiprintf_r+0x13a>
 800851c:	9207      	str	r2, [sp, #28]
 800851e:	e014      	b.n	800854a <_vfiprintf_r+0x13a>
 8008520:	eba0 0308 	sub.w	r3, r0, r8
 8008524:	fa09 f303 	lsl.w	r3, r9, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	46a2      	mov	sl, r4
 800852e:	e7d2      	b.n	80084d6 <_vfiprintf_r+0xc6>
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	1d19      	adds	r1, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	9103      	str	r1, [sp, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	bfbb      	ittet	lt
 800853c:	425b      	neglt	r3, r3
 800853e:	f042 0202 	orrlt.w	r2, r2, #2
 8008542:	9307      	strge	r3, [sp, #28]
 8008544:	9307      	strlt	r3, [sp, #28]
 8008546:	bfb8      	it	lt
 8008548:	9204      	strlt	r2, [sp, #16]
 800854a:	7823      	ldrb	r3, [r4, #0]
 800854c:	2b2e      	cmp	r3, #46	@ 0x2e
 800854e:	d10a      	bne.n	8008566 <_vfiprintf_r+0x156>
 8008550:	7863      	ldrb	r3, [r4, #1]
 8008552:	2b2a      	cmp	r3, #42	@ 0x2a
 8008554:	d132      	bne.n	80085bc <_vfiprintf_r+0x1ac>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	1d1a      	adds	r2, r3, #4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	9203      	str	r2, [sp, #12]
 800855e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008562:	3402      	adds	r4, #2
 8008564:	9305      	str	r3, [sp, #20]
 8008566:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800863c <_vfiprintf_r+0x22c>
 800856a:	7821      	ldrb	r1, [r4, #0]
 800856c:	2203      	movs	r2, #3
 800856e:	4650      	mov	r0, sl
 8008570:	f7f7 fe2e 	bl	80001d0 <memchr>
 8008574:	b138      	cbz	r0, 8008586 <_vfiprintf_r+0x176>
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	eba0 000a 	sub.w	r0, r0, sl
 800857c:	2240      	movs	r2, #64	@ 0x40
 800857e:	4082      	lsls	r2, r0
 8008580:	4313      	orrs	r3, r2
 8008582:	3401      	adds	r4, #1
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858a:	4829      	ldr	r0, [pc, #164]	@ (8008630 <_vfiprintf_r+0x220>)
 800858c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008590:	2206      	movs	r2, #6
 8008592:	f7f7 fe1d 	bl	80001d0 <memchr>
 8008596:	2800      	cmp	r0, #0
 8008598:	d03f      	beq.n	800861a <_vfiprintf_r+0x20a>
 800859a:	4b26      	ldr	r3, [pc, #152]	@ (8008634 <_vfiprintf_r+0x224>)
 800859c:	bb1b      	cbnz	r3, 80085e6 <_vfiprintf_r+0x1d6>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	3307      	adds	r3, #7
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	3308      	adds	r3, #8
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ac:	443b      	add	r3, r7
 80085ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b0:	e76a      	b.n	8008488 <_vfiprintf_r+0x78>
 80085b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085b6:	460c      	mov	r4, r1
 80085b8:	2001      	movs	r0, #1
 80085ba:	e7a8      	b.n	800850e <_vfiprintf_r+0xfe>
 80085bc:	2300      	movs	r3, #0
 80085be:	3401      	adds	r4, #1
 80085c0:	9305      	str	r3, [sp, #20]
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0c0a 	mov.w	ip, #10
 80085c8:	4620      	mov	r0, r4
 80085ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ce:	3a30      	subs	r2, #48	@ 0x30
 80085d0:	2a09      	cmp	r2, #9
 80085d2:	d903      	bls.n	80085dc <_vfiprintf_r+0x1cc>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0c6      	beq.n	8008566 <_vfiprintf_r+0x156>
 80085d8:	9105      	str	r1, [sp, #20]
 80085da:	e7c4      	b.n	8008566 <_vfiprintf_r+0x156>
 80085dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e0:	4604      	mov	r4, r0
 80085e2:	2301      	movs	r3, #1
 80085e4:	e7f0      	b.n	80085c8 <_vfiprintf_r+0x1b8>
 80085e6:	ab03      	add	r3, sp, #12
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	462a      	mov	r2, r5
 80085ec:	4b12      	ldr	r3, [pc, #72]	@ (8008638 <_vfiprintf_r+0x228>)
 80085ee:	a904      	add	r1, sp, #16
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7fd fec3 	bl	800637c <_printf_float>
 80085f6:	4607      	mov	r7, r0
 80085f8:	1c78      	adds	r0, r7, #1
 80085fa:	d1d6      	bne.n	80085aa <_vfiprintf_r+0x19a>
 80085fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	d405      	bmi.n	800860e <_vfiprintf_r+0x1fe>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d402      	bmi.n	800860e <_vfiprintf_r+0x1fe>
 8008608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800860a:	f7fe fc05 	bl	8006e18 <__retarget_lock_release_recursive>
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	065b      	lsls	r3, r3, #25
 8008612:	f53f af1f 	bmi.w	8008454 <_vfiprintf_r+0x44>
 8008616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008618:	e71e      	b.n	8008458 <_vfiprintf_r+0x48>
 800861a:	ab03      	add	r3, sp, #12
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	462a      	mov	r2, r5
 8008620:	4b05      	ldr	r3, [pc, #20]	@ (8008638 <_vfiprintf_r+0x228>)
 8008622:	a904      	add	r1, sp, #16
 8008624:	4630      	mov	r0, r6
 8008626:	f7fe f941 	bl	80068ac <_printf_i>
 800862a:	e7e4      	b.n	80085f6 <_vfiprintf_r+0x1e6>
 800862c:	08008e40 	.word	0x08008e40
 8008630:	08008e4a 	.word	0x08008e4a
 8008634:	0800637d 	.word	0x0800637d
 8008638:	080083eb 	.word	0x080083eb
 800863c:	08008e46 	.word	0x08008e46

08008640 <__sflush_r>:
 8008640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008648:	0716      	lsls	r6, r2, #28
 800864a:	4605      	mov	r5, r0
 800864c:	460c      	mov	r4, r1
 800864e:	d454      	bmi.n	80086fa <__sflush_r+0xba>
 8008650:	684b      	ldr	r3, [r1, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	dc02      	bgt.n	800865c <__sflush_r+0x1c>
 8008656:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	dd48      	ble.n	80086ee <__sflush_r+0xae>
 800865c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800865e:	2e00      	cmp	r6, #0
 8008660:	d045      	beq.n	80086ee <__sflush_r+0xae>
 8008662:	2300      	movs	r3, #0
 8008664:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008668:	682f      	ldr	r7, [r5, #0]
 800866a:	6a21      	ldr	r1, [r4, #32]
 800866c:	602b      	str	r3, [r5, #0]
 800866e:	d030      	beq.n	80086d2 <__sflush_r+0x92>
 8008670:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	0759      	lsls	r1, r3, #29
 8008676:	d505      	bpl.n	8008684 <__sflush_r+0x44>
 8008678:	6863      	ldr	r3, [r4, #4]
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800867e:	b10b      	cbz	r3, 8008684 <__sflush_r+0x44>
 8008680:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	2300      	movs	r3, #0
 8008686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008688:	6a21      	ldr	r1, [r4, #32]
 800868a:	4628      	mov	r0, r5
 800868c:	47b0      	blx	r6
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	d106      	bne.n	80086a2 <__sflush_r+0x62>
 8008694:	6829      	ldr	r1, [r5, #0]
 8008696:	291d      	cmp	r1, #29
 8008698:	d82b      	bhi.n	80086f2 <__sflush_r+0xb2>
 800869a:	4a2a      	ldr	r2, [pc, #168]	@ (8008744 <__sflush_r+0x104>)
 800869c:	410a      	asrs	r2, r1
 800869e:	07d6      	lsls	r6, r2, #31
 80086a0:	d427      	bmi.n	80086f2 <__sflush_r+0xb2>
 80086a2:	2200      	movs	r2, #0
 80086a4:	6062      	str	r2, [r4, #4]
 80086a6:	04d9      	lsls	r1, r3, #19
 80086a8:	6922      	ldr	r2, [r4, #16]
 80086aa:	6022      	str	r2, [r4, #0]
 80086ac:	d504      	bpl.n	80086b8 <__sflush_r+0x78>
 80086ae:	1c42      	adds	r2, r0, #1
 80086b0:	d101      	bne.n	80086b6 <__sflush_r+0x76>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	b903      	cbnz	r3, 80086b8 <__sflush_r+0x78>
 80086b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80086b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086ba:	602f      	str	r7, [r5, #0]
 80086bc:	b1b9      	cbz	r1, 80086ee <__sflush_r+0xae>
 80086be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086c2:	4299      	cmp	r1, r3
 80086c4:	d002      	beq.n	80086cc <__sflush_r+0x8c>
 80086c6:	4628      	mov	r0, r5
 80086c8:	f7ff f9f6 	bl	8007ab8 <_free_r>
 80086cc:	2300      	movs	r3, #0
 80086ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80086d0:	e00d      	b.n	80086ee <__sflush_r+0xae>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b0      	blx	r6
 80086d8:	4602      	mov	r2, r0
 80086da:	1c50      	adds	r0, r2, #1
 80086dc:	d1c9      	bne.n	8008672 <__sflush_r+0x32>
 80086de:	682b      	ldr	r3, [r5, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0c6      	beq.n	8008672 <__sflush_r+0x32>
 80086e4:	2b1d      	cmp	r3, #29
 80086e6:	d001      	beq.n	80086ec <__sflush_r+0xac>
 80086e8:	2b16      	cmp	r3, #22
 80086ea:	d11e      	bne.n	800872a <__sflush_r+0xea>
 80086ec:	602f      	str	r7, [r5, #0]
 80086ee:	2000      	movs	r0, #0
 80086f0:	e022      	b.n	8008738 <__sflush_r+0xf8>
 80086f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f6:	b21b      	sxth	r3, r3
 80086f8:	e01b      	b.n	8008732 <__sflush_r+0xf2>
 80086fa:	690f      	ldr	r7, [r1, #16]
 80086fc:	2f00      	cmp	r7, #0
 80086fe:	d0f6      	beq.n	80086ee <__sflush_r+0xae>
 8008700:	0793      	lsls	r3, r2, #30
 8008702:	680e      	ldr	r6, [r1, #0]
 8008704:	bf08      	it	eq
 8008706:	694b      	ldreq	r3, [r1, #20]
 8008708:	600f      	str	r7, [r1, #0]
 800870a:	bf18      	it	ne
 800870c:	2300      	movne	r3, #0
 800870e:	eba6 0807 	sub.w	r8, r6, r7
 8008712:	608b      	str	r3, [r1, #8]
 8008714:	f1b8 0f00 	cmp.w	r8, #0
 8008718:	dde9      	ble.n	80086ee <__sflush_r+0xae>
 800871a:	6a21      	ldr	r1, [r4, #32]
 800871c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800871e:	4643      	mov	r3, r8
 8008720:	463a      	mov	r2, r7
 8008722:	4628      	mov	r0, r5
 8008724:	47b0      	blx	r6
 8008726:	2800      	cmp	r0, #0
 8008728:	dc08      	bgt.n	800873c <__sflush_r+0xfc>
 800872a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800872e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873c:	4407      	add	r7, r0
 800873e:	eba8 0800 	sub.w	r8, r8, r0
 8008742:	e7e7      	b.n	8008714 <__sflush_r+0xd4>
 8008744:	dfbffffe 	.word	0xdfbffffe

08008748 <_fflush_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	690b      	ldr	r3, [r1, #16]
 800874c:	4605      	mov	r5, r0
 800874e:	460c      	mov	r4, r1
 8008750:	b913      	cbnz	r3, 8008758 <_fflush_r+0x10>
 8008752:	2500      	movs	r5, #0
 8008754:	4628      	mov	r0, r5
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	b118      	cbz	r0, 8008762 <_fflush_r+0x1a>
 800875a:	6a03      	ldr	r3, [r0, #32]
 800875c:	b90b      	cbnz	r3, 8008762 <_fflush_r+0x1a>
 800875e:	f7fe fa51 	bl	8006c04 <__sinit>
 8008762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0f3      	beq.n	8008752 <_fflush_r+0xa>
 800876a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800876c:	07d0      	lsls	r0, r2, #31
 800876e:	d404      	bmi.n	800877a <_fflush_r+0x32>
 8008770:	0599      	lsls	r1, r3, #22
 8008772:	d402      	bmi.n	800877a <_fflush_r+0x32>
 8008774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008776:	f7fe fb4e 	bl	8006e16 <__retarget_lock_acquire_recursive>
 800877a:	4628      	mov	r0, r5
 800877c:	4621      	mov	r1, r4
 800877e:	f7ff ff5f 	bl	8008640 <__sflush_r>
 8008782:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008784:	07da      	lsls	r2, r3, #31
 8008786:	4605      	mov	r5, r0
 8008788:	d4e4      	bmi.n	8008754 <_fflush_r+0xc>
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	059b      	lsls	r3, r3, #22
 800878e:	d4e1      	bmi.n	8008754 <_fflush_r+0xc>
 8008790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008792:	f7fe fb41 	bl	8006e18 <__retarget_lock_release_recursive>
 8008796:	e7dd      	b.n	8008754 <_fflush_r+0xc>

08008798 <__swbuf_r>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	460e      	mov	r6, r1
 800879c:	4614      	mov	r4, r2
 800879e:	4605      	mov	r5, r0
 80087a0:	b118      	cbz	r0, 80087aa <__swbuf_r+0x12>
 80087a2:	6a03      	ldr	r3, [r0, #32]
 80087a4:	b90b      	cbnz	r3, 80087aa <__swbuf_r+0x12>
 80087a6:	f7fe fa2d 	bl	8006c04 <__sinit>
 80087aa:	69a3      	ldr	r3, [r4, #24]
 80087ac:	60a3      	str	r3, [r4, #8]
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	071a      	lsls	r2, r3, #28
 80087b2:	d501      	bpl.n	80087b8 <__swbuf_r+0x20>
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	b943      	cbnz	r3, 80087ca <__swbuf_r+0x32>
 80087b8:	4621      	mov	r1, r4
 80087ba:	4628      	mov	r0, r5
 80087bc:	f000 f82a 	bl	8008814 <__swsetup_r>
 80087c0:	b118      	cbz	r0, 80087ca <__swbuf_r+0x32>
 80087c2:	f04f 37ff 	mov.w	r7, #4294967295
 80087c6:	4638      	mov	r0, r7
 80087c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	6922      	ldr	r2, [r4, #16]
 80087ce:	1a98      	subs	r0, r3, r2
 80087d0:	6963      	ldr	r3, [r4, #20]
 80087d2:	b2f6      	uxtb	r6, r6
 80087d4:	4283      	cmp	r3, r0
 80087d6:	4637      	mov	r7, r6
 80087d8:	dc05      	bgt.n	80087e6 <__swbuf_r+0x4e>
 80087da:	4621      	mov	r1, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	f7ff ffb3 	bl	8008748 <_fflush_r>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d1ed      	bne.n	80087c2 <__swbuf_r+0x2a>
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	60a3      	str	r3, [r4, #8]
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	6022      	str	r2, [r4, #0]
 80087f2:	701e      	strb	r6, [r3, #0]
 80087f4:	6962      	ldr	r2, [r4, #20]
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d004      	beq.n	8008806 <__swbuf_r+0x6e>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	07db      	lsls	r3, r3, #31
 8008800:	d5e1      	bpl.n	80087c6 <__swbuf_r+0x2e>
 8008802:	2e0a      	cmp	r6, #10
 8008804:	d1df      	bne.n	80087c6 <__swbuf_r+0x2e>
 8008806:	4621      	mov	r1, r4
 8008808:	4628      	mov	r0, r5
 800880a:	f7ff ff9d 	bl	8008748 <_fflush_r>
 800880e:	2800      	cmp	r0, #0
 8008810:	d0d9      	beq.n	80087c6 <__swbuf_r+0x2e>
 8008812:	e7d6      	b.n	80087c2 <__swbuf_r+0x2a>

08008814 <__swsetup_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4b29      	ldr	r3, [pc, #164]	@ (80088bc <__swsetup_r+0xa8>)
 8008818:	4605      	mov	r5, r0
 800881a:	6818      	ldr	r0, [r3, #0]
 800881c:	460c      	mov	r4, r1
 800881e:	b118      	cbz	r0, 8008828 <__swsetup_r+0x14>
 8008820:	6a03      	ldr	r3, [r0, #32]
 8008822:	b90b      	cbnz	r3, 8008828 <__swsetup_r+0x14>
 8008824:	f7fe f9ee 	bl	8006c04 <__sinit>
 8008828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882c:	0719      	lsls	r1, r3, #28
 800882e:	d422      	bmi.n	8008876 <__swsetup_r+0x62>
 8008830:	06da      	lsls	r2, r3, #27
 8008832:	d407      	bmi.n	8008844 <__swsetup_r+0x30>
 8008834:	2209      	movs	r2, #9
 8008836:	602a      	str	r2, [r5, #0]
 8008838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	f04f 30ff 	mov.w	r0, #4294967295
 8008842:	e033      	b.n	80088ac <__swsetup_r+0x98>
 8008844:	0758      	lsls	r0, r3, #29
 8008846:	d512      	bpl.n	800886e <__swsetup_r+0x5a>
 8008848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800884a:	b141      	cbz	r1, 800885e <__swsetup_r+0x4a>
 800884c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008850:	4299      	cmp	r1, r3
 8008852:	d002      	beq.n	800885a <__swsetup_r+0x46>
 8008854:	4628      	mov	r0, r5
 8008856:	f7ff f92f 	bl	8007ab8 <_free_r>
 800885a:	2300      	movs	r3, #0
 800885c:	6363      	str	r3, [r4, #52]	@ 0x34
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	2300      	movs	r3, #0
 8008868:	6063      	str	r3, [r4, #4]
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	f043 0308 	orr.w	r3, r3, #8
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	b94b      	cbnz	r3, 800888e <__swsetup_r+0x7a>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008884:	d003      	beq.n	800888e <__swsetup_r+0x7a>
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	f000 f8c1 	bl	8008a10 <__smakebuf_r>
 800888e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008892:	f013 0201 	ands.w	r2, r3, #1
 8008896:	d00a      	beq.n	80088ae <__swsetup_r+0x9a>
 8008898:	2200      	movs	r2, #0
 800889a:	60a2      	str	r2, [r4, #8]
 800889c:	6962      	ldr	r2, [r4, #20]
 800889e:	4252      	negs	r2, r2
 80088a0:	61a2      	str	r2, [r4, #24]
 80088a2:	6922      	ldr	r2, [r4, #16]
 80088a4:	b942      	cbnz	r2, 80088b8 <__swsetup_r+0xa4>
 80088a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088aa:	d1c5      	bne.n	8008838 <__swsetup_r+0x24>
 80088ac:	bd38      	pop	{r3, r4, r5, pc}
 80088ae:	0799      	lsls	r1, r3, #30
 80088b0:	bf58      	it	pl
 80088b2:	6962      	ldrpl	r2, [r4, #20]
 80088b4:	60a2      	str	r2, [r4, #8]
 80088b6:	e7f4      	b.n	80088a2 <__swsetup_r+0x8e>
 80088b8:	2000      	movs	r0, #0
 80088ba:	e7f7      	b.n	80088ac <__swsetup_r+0x98>
 80088bc:	20000050 	.word	0x20000050

080088c0 <_sbrk_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d06      	ldr	r5, [pc, #24]	@ (80088dc <_sbrk_r+0x1c>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7f8 ffe0 	bl	8001890 <_sbrk>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_sbrk_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_sbrk_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	200005a4 	.word	0x200005a4

080088e0 <memcpy>:
 80088e0:	440a      	add	r2, r1
 80088e2:	4291      	cmp	r1, r2
 80088e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088e8:	d100      	bne.n	80088ec <memcpy+0xc>
 80088ea:	4770      	bx	lr
 80088ec:	b510      	push	{r4, lr}
 80088ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f6:	4291      	cmp	r1, r2
 80088f8:	d1f9      	bne.n	80088ee <memcpy+0xe>
 80088fa:	bd10      	pop	{r4, pc}

080088fc <__assert_func>:
 80088fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088fe:	4614      	mov	r4, r2
 8008900:	461a      	mov	r2, r3
 8008902:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <__assert_func+0x2c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4605      	mov	r5, r0
 8008908:	68d8      	ldr	r0, [r3, #12]
 800890a:	b954      	cbnz	r4, 8008922 <__assert_func+0x26>
 800890c:	4b07      	ldr	r3, [pc, #28]	@ (800892c <__assert_func+0x30>)
 800890e:	461c      	mov	r4, r3
 8008910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008914:	9100      	str	r1, [sp, #0]
 8008916:	462b      	mov	r3, r5
 8008918:	4905      	ldr	r1, [pc, #20]	@ (8008930 <__assert_func+0x34>)
 800891a:	f000 f841 	bl	80089a0 <fiprintf>
 800891e:	f000 f8d5 	bl	8008acc <abort>
 8008922:	4b04      	ldr	r3, [pc, #16]	@ (8008934 <__assert_func+0x38>)
 8008924:	e7f4      	b.n	8008910 <__assert_func+0x14>
 8008926:	bf00      	nop
 8008928:	20000050 	.word	0x20000050
 800892c:	08008e96 	.word	0x08008e96
 8008930:	08008e68 	.word	0x08008e68
 8008934:	08008e5b 	.word	0x08008e5b

08008938 <_calloc_r>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	fba1 5402 	umull	r5, r4, r1, r2
 800893e:	b93c      	cbnz	r4, 8008950 <_calloc_r+0x18>
 8008940:	4629      	mov	r1, r5
 8008942:	f7ff f92d 	bl	8007ba0 <_malloc_r>
 8008946:	4606      	mov	r6, r0
 8008948:	b928      	cbnz	r0, 8008956 <_calloc_r+0x1e>
 800894a:	2600      	movs	r6, #0
 800894c:	4630      	mov	r0, r6
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	220c      	movs	r2, #12
 8008952:	6002      	str	r2, [r0, #0]
 8008954:	e7f9      	b.n	800894a <_calloc_r+0x12>
 8008956:	462a      	mov	r2, r5
 8008958:	4621      	mov	r1, r4
 800895a:	f7fe f9de 	bl	8006d1a <memset>
 800895e:	e7f5      	b.n	800894c <_calloc_r+0x14>

08008960 <__ascii_mbtowc>:
 8008960:	b082      	sub	sp, #8
 8008962:	b901      	cbnz	r1, 8008966 <__ascii_mbtowc+0x6>
 8008964:	a901      	add	r1, sp, #4
 8008966:	b142      	cbz	r2, 800897a <__ascii_mbtowc+0x1a>
 8008968:	b14b      	cbz	r3, 800897e <__ascii_mbtowc+0x1e>
 800896a:	7813      	ldrb	r3, [r2, #0]
 800896c:	600b      	str	r3, [r1, #0]
 800896e:	7812      	ldrb	r2, [r2, #0]
 8008970:	1e10      	subs	r0, r2, #0
 8008972:	bf18      	it	ne
 8008974:	2001      	movne	r0, #1
 8008976:	b002      	add	sp, #8
 8008978:	4770      	bx	lr
 800897a:	4610      	mov	r0, r2
 800897c:	e7fb      	b.n	8008976 <__ascii_mbtowc+0x16>
 800897e:	f06f 0001 	mvn.w	r0, #1
 8008982:	e7f8      	b.n	8008976 <__ascii_mbtowc+0x16>

08008984 <__ascii_wctomb>:
 8008984:	4603      	mov	r3, r0
 8008986:	4608      	mov	r0, r1
 8008988:	b141      	cbz	r1, 800899c <__ascii_wctomb+0x18>
 800898a:	2aff      	cmp	r2, #255	@ 0xff
 800898c:	d904      	bls.n	8008998 <__ascii_wctomb+0x14>
 800898e:	228a      	movs	r2, #138	@ 0x8a
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	4770      	bx	lr
 8008998:	700a      	strb	r2, [r1, #0]
 800899a:	2001      	movs	r0, #1
 800899c:	4770      	bx	lr
	...

080089a0 <fiprintf>:
 80089a0:	b40e      	push	{r1, r2, r3}
 80089a2:	b503      	push	{r0, r1, lr}
 80089a4:	4601      	mov	r1, r0
 80089a6:	ab03      	add	r3, sp, #12
 80089a8:	4805      	ldr	r0, [pc, #20]	@ (80089c0 <fiprintf+0x20>)
 80089aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ae:	6800      	ldr	r0, [r0, #0]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	f7ff fd2d 	bl	8008410 <_vfiprintf_r>
 80089b6:	b002      	add	sp, #8
 80089b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089bc:	b003      	add	sp, #12
 80089be:	4770      	bx	lr
 80089c0:	20000050 	.word	0x20000050

080089c4 <__swhatbuf_r>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	460c      	mov	r4, r1
 80089c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089cc:	2900      	cmp	r1, #0
 80089ce:	b096      	sub	sp, #88	@ 0x58
 80089d0:	4615      	mov	r5, r2
 80089d2:	461e      	mov	r6, r3
 80089d4:	da0d      	bge.n	80089f2 <__swhatbuf_r+0x2e>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089dc:	f04f 0100 	mov.w	r1, #0
 80089e0:	bf14      	ite	ne
 80089e2:	2340      	movne	r3, #64	@ 0x40
 80089e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089e8:	2000      	movs	r0, #0
 80089ea:	6031      	str	r1, [r6, #0]
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	b016      	add	sp, #88	@ 0x58
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	466a      	mov	r2, sp
 80089f4:	f000 f848 	bl	8008a88 <_fstat_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dbec      	blt.n	80089d6 <__swhatbuf_r+0x12>
 80089fc:	9901      	ldr	r1, [sp, #4]
 80089fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a06:	4259      	negs	r1, r3
 8008a08:	4159      	adcs	r1, r3
 8008a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a0e:	e7eb      	b.n	80089e8 <__swhatbuf_r+0x24>

08008a10 <__smakebuf_r>:
 8008a10:	898b      	ldrh	r3, [r1, #12]
 8008a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a14:	079d      	lsls	r5, r3, #30
 8008a16:	4606      	mov	r6, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	d507      	bpl.n	8008a2c <__smakebuf_r+0x1c>
 8008a1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	6123      	str	r3, [r4, #16]
 8008a24:	2301      	movs	r3, #1
 8008a26:	6163      	str	r3, [r4, #20]
 8008a28:	b003      	add	sp, #12
 8008a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a2c:	ab01      	add	r3, sp, #4
 8008a2e:	466a      	mov	r2, sp
 8008a30:	f7ff ffc8 	bl	80089c4 <__swhatbuf_r>
 8008a34:	9f00      	ldr	r7, [sp, #0]
 8008a36:	4605      	mov	r5, r0
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7ff f8b0 	bl	8007ba0 <_malloc_r>
 8008a40:	b948      	cbnz	r0, 8008a56 <__smakebuf_r+0x46>
 8008a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a46:	059a      	lsls	r2, r3, #22
 8008a48:	d4ee      	bmi.n	8008a28 <__smakebuf_r+0x18>
 8008a4a:	f023 0303 	bic.w	r3, r3, #3
 8008a4e:	f043 0302 	orr.w	r3, r3, #2
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	e7e2      	b.n	8008a1c <__smakebuf_r+0xc>
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	6020      	str	r0, [r4, #0]
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a66:	b15b      	cbz	r3, 8008a80 <__smakebuf_r+0x70>
 8008a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f000 f81d 	bl	8008aac <_isatty_r>
 8008a72:	b128      	cbz	r0, 8008a80 <__smakebuf_r+0x70>
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	431d      	orrs	r5, r3
 8008a84:	81a5      	strh	r5, [r4, #12]
 8008a86:	e7cf      	b.n	8008a28 <__smakebuf_r+0x18>

08008a88 <_fstat_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d07      	ldr	r5, [pc, #28]	@ (8008aa8 <_fstat_r+0x20>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	4611      	mov	r1, r2
 8008a94:	602b      	str	r3, [r5, #0]
 8008a96:	f7f8 fed3 	bl	8001840 <_fstat>
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d102      	bne.n	8008aa4 <_fstat_r+0x1c>
 8008a9e:	682b      	ldr	r3, [r5, #0]
 8008aa0:	b103      	cbz	r3, 8008aa4 <_fstat_r+0x1c>
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200005a4 	.word	0x200005a4

08008aac <_isatty_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4d06      	ldr	r5, [pc, #24]	@ (8008ac8 <_isatty_r+0x1c>)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	602b      	str	r3, [r5, #0]
 8008ab8:	f7f8 fed2 	bl	8001860 <_isatty>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_isatty_r+0x1a>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_isatty_r+0x1a>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	200005a4 	.word	0x200005a4

08008acc <abort>:
 8008acc:	b508      	push	{r3, lr}
 8008ace:	2006      	movs	r0, #6
 8008ad0:	f000 f82c 	bl	8008b2c <raise>
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	f7f8 fe63 	bl	80017a0 <_exit>

08008ada <_raise_r>:
 8008ada:	291f      	cmp	r1, #31
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4605      	mov	r5, r0
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	d904      	bls.n	8008aee <_raise_r+0x14>
 8008ae4:	2316      	movs	r3, #22
 8008ae6:	6003      	str	r3, [r0, #0]
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	bd38      	pop	{r3, r4, r5, pc}
 8008aee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008af0:	b112      	cbz	r2, 8008af8 <_raise_r+0x1e>
 8008af2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008af6:	b94b      	cbnz	r3, 8008b0c <_raise_r+0x32>
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 f831 	bl	8008b60 <_getpid_r>
 8008afe:	4622      	mov	r2, r4
 8008b00:	4601      	mov	r1, r0
 8008b02:	4628      	mov	r0, r5
 8008b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b08:	f000 b818 	b.w	8008b3c <_kill_r>
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d00a      	beq.n	8008b26 <_raise_r+0x4c>
 8008b10:	1c59      	adds	r1, r3, #1
 8008b12:	d103      	bne.n	8008b1c <_raise_r+0x42>
 8008b14:	2316      	movs	r3, #22
 8008b16:	6003      	str	r3, [r0, #0]
 8008b18:	2001      	movs	r0, #1
 8008b1a:	e7e7      	b.n	8008aec <_raise_r+0x12>
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b22:	4620      	mov	r0, r4
 8008b24:	4798      	blx	r3
 8008b26:	2000      	movs	r0, #0
 8008b28:	e7e0      	b.n	8008aec <_raise_r+0x12>
	...

08008b2c <raise>:
 8008b2c:	4b02      	ldr	r3, [pc, #8]	@ (8008b38 <raise+0xc>)
 8008b2e:	4601      	mov	r1, r0
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	f7ff bfd2 	b.w	8008ada <_raise_r>
 8008b36:	bf00      	nop
 8008b38:	20000050 	.word	0x20000050

08008b3c <_kill_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d07      	ldr	r5, [pc, #28]	@ (8008b5c <_kill_r+0x20>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	f7f8 fe19 	bl	8001780 <_kill>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	d102      	bne.n	8008b58 <_kill_r+0x1c>
 8008b52:	682b      	ldr	r3, [r5, #0]
 8008b54:	b103      	cbz	r3, 8008b58 <_kill_r+0x1c>
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	bd38      	pop	{r3, r4, r5, pc}
 8008b5a:	bf00      	nop
 8008b5c:	200005a4 	.word	0x200005a4

08008b60 <_getpid_r>:
 8008b60:	f7f8 be06 	b.w	8001770 <_getpid>

08008b64 <_init>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	bf00      	nop
 8008b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6a:	bc08      	pop	{r3}
 8008b6c:	469e      	mov	lr, r3
 8008b6e:	4770      	bx	lr

08008b70 <_fini>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr
