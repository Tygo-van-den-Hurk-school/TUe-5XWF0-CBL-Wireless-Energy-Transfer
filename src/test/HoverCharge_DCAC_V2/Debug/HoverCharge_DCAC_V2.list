
HoverCharge_DCAC_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000892c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08008ac0  08008ac0  00009ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e98  08008e98  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e98  08008e98  00009e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ea0  08008ea0  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ea0  08008ea0  00009ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ea4  08008ea4  00009ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008ea8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1e0  2**0
                  CONTENTS
 10 .bss          000002ec  200001e0  200001e0  0000a1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  0000a1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bde  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028fb  00000000  00000000  0001cdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  0001f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d93  00000000  00000000  00020868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0ee  00000000  00000000  000215fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ff3  00000000  00000000  0003f6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3051  00000000  00000000  000556dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010872d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a0c  00000000  00000000  00108770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0010e17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008aa4 	.word	0x08008aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008aa4 	.word	0x08008aa4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFF);
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <__io_putchar+0x20>)
 8000bba:	f004 ff0c 	bl	80059d6 <HAL_UART_Transmit>

	return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200002dc 	.word	0x200002dc

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fdc3 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f89f 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 fa95 	bl	8001108 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bde:	f000 f8f7 	bl	8000dd0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000be2:	f000 f9b5 	bl	8000f50 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000be6:	f000 fa5f 	bl	80010a8 <MX_USART2_UART_Init>
  MX_COMP2_Init();
 8000bea:	f000 f961 	bl	8000eb0 <MX_COMP2_Init>
  MX_DAC2_Init();
 8000bee:	f000 f985 	bl	8000efc <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */
	 PWM_Period = 64000000/(2*PWM_Freq)-1;
 8000bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cec <main+0x120>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf0 <main+0x124>)
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf4 <main+0x128>)
 8000c04:	601a      	str	r2, [r3, #0]
  PWM_PulseWidth = (int)((PWM_Period*PWM_DutyC)/100);
 8000c06:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf4 <main+0x128>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	ee07 3a90 	vmov	s15, r3
 8000c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c12:	4b39      	ldr	r3, [pc, #228]	@ (8000cf8 <main+0x12c>)
 8000c14:	edd3 7a00 	vldr	s15, [r3]
 8000c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c1c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8000cfc <main+0x130>
 8000c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c28:	ee17 2a90 	vmov	r2, s15
 8000c2c:	4b34      	ldr	r3, [pc, #208]	@ (8000d00 <main+0x134>)
 8000c2e:	601a      	str	r2, [r3, #0]

  	  	   __HAL_TIM_SET_AUTORELOAD(&htim1, PWM_Period);					//Timer 1 config
 8000c30:	4b30      	ldr	r3, [pc, #192]	@ (8000cf4 <main+0x128>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <main+0x138>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <main+0x128>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <main+0x138>)
 8000c42:	60da      	str	r2, [r3, #12]

 	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth);	//Tim1 Channel 1 config
 8000c44:	4b2e      	ldr	r3, [pc, #184]	@ (8000d00 <main+0x134>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b2e      	ldr	r3, [pc, #184]	@ (8000d04 <main+0x138>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	635a      	str	r2, [r3, #52]	@ 0x34
 	        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	482c      	ldr	r0, [pc, #176]	@ (8000d04 <main+0x138>)
 8000c52:	f003 fe19 	bl	8004888 <HAL_TIM_PWM_Start>
 	        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c56:	2100      	movs	r1, #0
 8000c58:	482a      	ldr	r0, [pc, #168]	@ (8000d04 <main+0x138>)
 8000c5a:	f004 fcbd 	bl	80055d8 <HAL_TIMEx_PWMN_Start>

 	       HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);				//ADC1 config
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4829      	ldr	r0, [pc, #164]	@ (8000d08 <main+0x13c>)
 8000c62:	f001 f885 	bl	8001d70 <HAL_ADCEx_Calibration_Start>
 	       HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_Buff, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	4928      	ldr	r1, [pc, #160]	@ (8000d0c <main+0x140>)
 8000c6a:	4827      	ldr	r0, [pc, #156]	@ (8000d08 <main+0x13c>)
 8000c6c:	f000 ffa6 	bl	8001bbc <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	 PWM_Period = 64000000/(2*PWM_Freq)-1;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <main+0x120>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf0 <main+0x124>)
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <main+0x128>)
 8000c82:	601a      	str	r2, [r3, #0]
	     PWM_PulseWidth = (int)((PWM_Period*PWM_DutyC)/100);
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <main+0x128>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	ee07 3a90 	vmov	s15, r3
 8000c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <main+0x12c>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c9a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000cfc <main+0x130>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca6:	ee17 2a90 	vmov	r2, s15
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <main+0x134>)
 8000cac:	601a      	str	r2, [r3, #0]

		 __HAL_TIM_SET_COMPARE (&htim1, TIM_CHANNEL_1, PWM_PulseWidth);
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <main+0x134>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <main+0x138>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	635a      	str	r2, [r3, #52]	@ 0x34


		 printf("\r\n I_COIL_CURR= %.2f A  |  Duty Cycle: %.2f", I_COIL_CURR, PWM_DutyC);
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <main+0x144>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fc43 	bl	8000548 <__aeabi_f2d>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <main+0x12c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fc3c 	bl	8000548 <__aeabi_f2d>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	e9cd 2300 	strd	r2, r3, [sp]
 8000cd8:	4622      	mov	r2, r4
 8000cda:	462b      	mov	r3, r5
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <main+0x148>)
 8000cde:	f005 ff67 	bl	8006bb0 <iprintf>
		 HAL_Delay(100);
 8000ce2:	2064      	movs	r0, #100	@ 0x64
 8000ce4:	f000 fda0 	bl	8001828 <HAL_Delay>
	  	 PWM_Period = 64000000/(2*PWM_Freq)-1;
 8000ce8:	bf00      	nop
 8000cea:	e7c1      	b.n	8000c70 <main+0xa4>
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	03d09000 	.word	0x03d09000
 8000cf4:	20000370 	.word	0x20000370
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	42c80000 	.word	0x42c80000
 8000d00:	20000374 	.word	0x20000374
 8000d04:	20000290 	.word	0x20000290
 8000d08:	200001fc 	.word	0x200001fc
 8000d0c:	20000364 	.word	0x20000364
 8000d10:	2000036c 	.word	0x2000036c
 8000d14:	08008ac0 	.word	0x08008ac0

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b096      	sub	sp, #88	@ 0x58
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d22:	2228      	movs	r2, #40	@ 0x28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f005 ff97 	bl	8006c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d50:	2301      	movs	r3, #1
 8000d52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d54:	2310      	movs	r3, #16
 8000d56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d60:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 f93a 	bl	8002fe4 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d76:	f000 fa4f 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2102      	movs	r1, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 f962 	bl	8004060 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000da2:	f000 fa39 	bl	8001218 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000da6:	f44f 5384 	mov.w	r3, #4224	@ 0x1080
 8000daa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000dac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000db0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 fb87 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000dc4:	f000 fa28 	bl	8001218 <Error_Handler>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3758      	adds	r7, #88	@ 0x58
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000df4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000df8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e06:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e0c:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e20:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e4c:	4817      	ldr	r0, [pc, #92]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e4e:	f000 fd23 	bl	8001898 <HAL_ADC_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e58:	f000 f9de 	bl	8001218 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4811      	ldr	r0, [pc, #68]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e68:	f001 fab2 	bl	80023d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e72:	f000 f9d1 	bl	8001218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	@ (8000eac <MX_ADC1_Init+0xdc>)
 8000e94:	f000 ffde 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e9e:	f000 f9bb 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001fc 	.word	0x200001fc

08000eb0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_COMP2_Init+0x44>)
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <MX_COMP2_Init+0x48>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_COMP2_Init+0x44>)
 8000ebc:	2240      	movs	r2, #64	@ 0x40
 8000ebe:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_COMP2_Init+0x44>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <MX_COMP2_Init+0x44>)
 8000ec8:	222a      	movs	r2, #42	@ 0x2a
 8000eca:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_COMP2_Init+0x44>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <MX_COMP2_Init+0x44>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_COMP2_Init+0x44>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_COMP2_Init+0x44>)
 8000ee0:	f001 fc6c 	bl	80027bc <HAL_COMP_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000eea:	f000 f995 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000024c 	.word	0x2000024c
 8000ef8:	40010020 	.word	0x40010020

08000efc <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_DAC2_Init+0x4c>)
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <MX_DAC2_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000f12:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <MX_DAC2_Init+0x4c>)
 8000f14:	f001 fdc3 	bl	8002a9e <HAL_DAC_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 8000f1e:	f000 f97b 	bl	8001218 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 8000f26:	2302      	movs	r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_DAC2_Init+0x4c>)
 8000f32:	f001 fdd7 	bl	8002ae4 <HAL_DAC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8000f3c:	f000 f96c 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2000027c 	.word	0x2000027c
 8000f4c:	40009800 	.word	0x40009800

08000f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09a      	sub	sp, #104	@ 0x68
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	222c      	movs	r2, #44	@ 0x2c
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fe65 	bl	8006c5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f90:	4b43      	ldr	r3, [pc, #268]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000f92:	4a44      	ldr	r2, [pc, #272]	@ (80010a4 <MX_TIM1_Init+0x154>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f96:	4b42      	ldr	r3, [pc, #264]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f9c:	4b40      	ldr	r3, [pc, #256]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000fa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fbc:	4838      	ldr	r0, [pc, #224]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000fbe:	f003 fbab 	bl	8004718 <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fc8:	f000 f926 	bl	8001218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4831      	ldr	r0, [pc, #196]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000fda:	f003 fe55 	bl	8004c88 <HAL_TIM_ConfigClockSource>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fe4:	f000 f918 	bl	8001218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fe8:	482d      	ldr	r0, [pc, #180]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8000fea:	f003 fbec 	bl	80047c6 <HAL_TIM_PWM_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ff4:	f000 f910 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001004:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001008:	4619      	mov	r1, r3
 800100a:	4825      	ldr	r0, [pc, #148]	@ (80010a0 <MX_TIM1_Init+0x150>)
 800100c:	f004 fb8a 	bl	8005724 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001016:	f000 f8ff 	bl	8001218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101a:	2360      	movs	r3, #96	@ 0x60
 800101c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001026:	2300      	movs	r3, #0
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001036:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4818      	ldr	r0, [pc, #96]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8001040:	f003 fd0e 	bl	8004a60 <HAL_TIM_PWM_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800104a:	f000 f8e5 	bl	8001218 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 8;
 800105a:	2308      	movs	r3, #8
 800105c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001066:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8001084:	f004 fbbc 	bl	8005800 <HAL_TIMEx_ConfigBreakDeadTime>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800108e:	f000 f8c3 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001092:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <MX_TIM1_Init+0x150>)
 8001094:	f000 f9b6 	bl	8001404 <HAL_TIM_MspPostInit>

}
 8001098:	bf00      	nop
 800109a:	3768      	adds	r7, #104	@ 0x68
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000290 	.word	0x20000290
 80010a4:	40012c00 	.word	0x40012c00

080010a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010ae:	4a15      	ldr	r2, [pc, #84]	@ (8001104 <MX_USART2_UART_Init+0x5c>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_USART2_UART_Init+0x58>)
 80010ec:	f004 fc25 	bl	800593a <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010f6:	f000 f88f 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200002dc 	.word	0x200002dc
 8001104:	40004400 	.word	0x40004400

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111e:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a28      	ldr	r2, [pc, #160]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b23      	ldr	r3, [pc, #140]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a22      	ldr	r2, [pc, #136]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4a1c      	ldr	r2, [pc, #112]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001158:	6153      	str	r3, [r2, #20]
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_GPIO_Init+0xbc>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_TX2_Pin|D5_TX1_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2141      	movs	r1, #65	@ 0x41
 800116a:	4817      	ldr	r0, [pc, #92]	@ (80011c8 <MX_GPIO_Init+0xc0>)
 800116c:	f001 ff22 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D8_OCP_Pin */
  GPIO_InitStruct.Pin = D8_OCP_Pin;
 8001170:	2301      	movs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D8_OCP_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4812      	ldr	r0, [pc, #72]	@ (80011cc <MX_GPIO_Init+0xc4>)
 8001184:	f001 fda4 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_TX2_Pin D5_TX1_Pin */
  GPIO_InitStruct.Pin = D3_TX2_Pin|D5_TX1_Pin;
 8001188:	2341      	movs	r3, #65	@ 0x41
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <MX_GPIO_Init+0xc0>)
 80011a0:	f001 fd96 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_RX2_Pin D4_RX1_Pin */
  GPIO_InitStruct.Pin = D6_RX2_Pin|D4_RX1_Pin;
 80011a4:	2382      	movs	r3, #130	@ 0x82
 80011a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <MX_GPIO_Init+0xc0>)
 80011b8:	f001 fd8a 	bl	8002cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400
 80011cc:	48001400 	.word	0x48001400

080011d0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

		adc_val_1 = ADC1_Buff[0];
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_ADC_ConvCpltCallback+0x38>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <HAL_ADC_ConvCpltCallback+0x3c>)
 80011de:	6013      	str	r3, [r2, #0]
		I_COIL_CURR = (float)adc_val_1 * Factor_ADC_I_CURR;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_ADC_ConvCpltCallback+0x3c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_ADC_ConvCpltCallback+0x40>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <HAL_ADC_ConvCpltCallback+0x44>)
 80011f8:	edc3 7a00 	vstr	s15, [r3]

}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000364 	.word	0x20000364
 800120c:	20000368 	.word	0x20000368
 8001210:	20000000 	.word	0x20000000
 8001214:	2000036c 	.word	0x2000036c

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <Error_Handler+0x8>

08001224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a0e      	ldr	r2, [pc, #56]	@ (8001268 <HAL_MspInit+0x44>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <HAL_MspInit+0x44>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <HAL_MspInit+0x44>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_MspInit+0x44>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800128c:	d124      	bne.n	80012d8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <HAL_ADC_MspInit+0x74>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <HAL_ADC_MspInit+0x74>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001298:	6153      	str	r3, [r2, #20]
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HAL_ADC_MspInit+0x74>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_ADC_MspInit+0x74>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <HAL_ADC_MspInit+0x74>)
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b0:	6153      	str	r3, [r2, #20]
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_ADC_MspInit+0x74>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = A0_COIL_CURR_Pin;
 80012be:	2301      	movs	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A0_COIL_CURR_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d4:	f001 fcfc 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	@ 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <HAL_COMP_MspInit+0x5c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d118      	bne.n	8001338 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_COMP_MspInit+0x60>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <HAL_COMP_MspInit+0x60>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	6153      	str	r3, [r2, #20]
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HAL_COMP_MspInit+0x60>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PA4     ------> COMP2_INM
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = A3_CAP_NEG_Pin|GPIO_PIN_7;
 800131e:	2390      	movs	r3, #144	@ 0x90
 8001320:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001334:	f001 fccc 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010020 	.word	0x40010020
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a15      	ldr	r2, [pc, #84]	@ (80013bc <HAL_DAC_MspInit+0x74>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d124      	bne.n	80013b4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <HAL_DAC_MspInit+0x78>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <HAL_DAC_MspInit+0x78>)
 8001370:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_DAC_MspInit+0x78>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_DAC_MspInit+0x78>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a0e      	ldr	r2, [pc, #56]	@ (80013c0 <HAL_DAC_MspInit+0x78>)
 8001388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_DAC_MspInit+0x78>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b0:	f001 fc8e 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40009800 	.word	0x40009800
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <HAL_TIM_Base_MspInit+0x38>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10b      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_TIM_Base_MspInit+0x3c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <HAL_TIM_Base_MspInit+0x3c>)
 80013dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_TIM_Base_MspInit+0x3c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_TIM_MspPostInit+0x68>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d11d      	bne.n	8001462 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_TIM_MspPostInit+0x6c>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	4a11      	ldr	r2, [pc, #68]	@ (8001470 <HAL_TIM_MspPostInit+0x6c>)
 800142c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001430:	6153      	str	r3, [r2, #20]
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <HAL_TIM_MspPostInit+0x6c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = D9_PWM_DCAC_1_Pin|D10_PWM_DCAC_2_Pin;
 800143e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001442:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001450:	2306      	movs	r3, #6
 8001452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145e:	f001 fc37 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40012c00 	.word	0x40012c00
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <HAL_UART_MspInit+0x7c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d128      	bne.n	80014e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <HAL_UART_MspInit+0x80>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	4a16      	ldr	r2, [pc, #88]	@ (80014f4 <HAL_UART_MspInit+0x80>)
 800149c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a0:	61d3      	str	r3, [r2, #28]
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_UART_MspInit+0x80>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <HAL_UART_MspInit+0x80>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <HAL_UART_MspInit+0x80>)
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b8:	6153      	str	r3, [r2, #20]
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_UART_MspInit+0x80>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c6:	230c      	movs	r3, #12
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d6:	2307      	movs	r3, #7
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e4:	f001 fbf4 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	@ 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40004400 	.word	0x40004400
 80014f4:	40021000 	.word	0x40021000

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <NMI_Handler+0x4>

08001500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <MemManage_Handler+0x4>

08001510 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <UsageFault_Handler+0x4>

08001520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154e:	f000 f94b 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}

08001556 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_kill>:

int _kill(int pid, int sig)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001570:	f005 fbc6 	bl	8006d00 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	2216      	movs	r2, #22
 8001578:	601a      	str	r2, [r3, #0]
  return -1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_exit>:

void _exit (int status)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800158e:	f04f 31ff 	mov.w	r1, #4294967295
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffe7 	bl	8001566 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <_exit+0x12>

0800159c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00a      	b.n	80015c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ae:	f3af 8000 	nop.w
 80015b2:	4601      	mov	r1, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf0      	blt.n	80015ae <_read+0x12>
  }

  return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e009      	b.n	80015fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fad9 	bl	8000ba8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf1      	blt.n	80015e8 <_write+0x12>
  }
  return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_close>:

int _close(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001636:	605a      	str	r2, [r3, #4]
  return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f005 fb2a 	bl	8006d00 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20003000 	.word	0x20003000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	20000378 	.word	0x20000378
 80016e0:	200004d0 	.word	0x200004d0

080016e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001740 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800170c:	f7ff ffea 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopForever+0x6>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopForever+0xe>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopForever+0x16>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f005 fae9 	bl	8006d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173a:	f7ff fa47 	bl	8000bcc <main>

0800173e <LoopForever>:

LoopForever:
    b LoopForever
 800173e:	e7fe      	b.n	800173e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001740:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800174c:	08008ea8 	.word	0x08008ea8
  ldr r2, =_sbss
 8001750:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001754:	200004cc 	.word	0x200004cc

08001758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC1_2_IRQHandler>
	...

0800175c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_Init+0x28>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <HAL_Init+0x28>)
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f001 f963 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	200f      	movs	r0, #15
 8001774:	f000 f808 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fd54 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40022000 	.word	0x40022000

08001788 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_InitTick+0x54>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_InitTick+0x58>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f96d 	bl	8002a86 <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f001 f943 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <HAL_InitTick+0x5c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000000c 	.word	0x2000000c
 80017e0:	20000014 	.word	0x20000014
 80017e4:	20000010 	.word	0x20000010

080017e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000014 	.word	0x20000014
 800180c:	2000037c 	.word	0x2000037c

08001810 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;  
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2000037c 	.word	0x2000037c

08001828 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000014 	.word	0x20000014

08001870 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b09a      	sub	sp, #104	@ 0x68
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e172      	b.n	8001b9e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d176      	bne.n	80019b8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d152      	bne.n	8001978 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fcbd 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d13b      	bne.n	8001978 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fef5 	bl	80026f0 <ADC_Disable>
 8001906:	4603      	mov	r3, r0
 8001908:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	d12f      	bne.n	8001978 <HAL_ADC_Init+0xe0>
 8001918:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800191c:	2b00      	cmp	r3, #0
 800191e:	d12b      	bne.n	8001978 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001928:	f023 0302 	bic.w	r3, r3, #2
 800192c:	f043 0202 	orr.w	r2, r3, #2
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001942:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001952:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001954:	4b94      	ldr	r3, [pc, #592]	@ (8001ba8 <HAL_ADC_Init+0x310>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a94      	ldr	r2, [pc, #592]	@ (8001bac <HAL_ADC_Init+0x314>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9a      	lsrs	r2, r3, #18
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800196a:	e002      	b.n	8001972 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3b01      	subs	r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f9      	bne.n	800196c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001994:	d110      	bne.n	80019b8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f023 0312 	bic.w	r3, r3, #18
 800199e:	f043 0210 	orr.w	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f040 80df 	bne.w	8001b84 <HAL_ADC_Init+0x2ec>
 80019c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 80da 	bne.w	8001b84 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 80d2 	bne.w	8001b84 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019e8:	f043 0202 	orr.w	r2, r3, #2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f0:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb0 <HAL_ADC_Init+0x318>)
 80019f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019fc:	d102      	bne.n	8001a04 <HAL_ADC_Init+0x16c>
 80019fe:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb4 <HAL_ADC_Init+0x31c>)
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e002      	b.n	8001a0a <HAL_ADC_Init+0x172>
 8001a04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a08:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_ADC_Init+0x192>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Init+0x192>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_ADC_Init+0x194>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d11c      	bne.n	8001a6a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a30:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_ADC_Init+0x1ba>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Init+0x1ba>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_ADC_Init+0x1bc>
 8001a52:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d108      	bne.n	8001a6a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a68:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7e5b      	ldrb	r3, [r3, #25]
 8001a6e:	035b      	lsls	r3, r3, #13
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a74:	2a01      	cmp	r2, #1
 8001a76:	d002      	beq.n	8001a7e <HAL_ADC_Init+0x1e6>
 8001a78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a7c:	e000      	b.n	8001a80 <HAL_ADC_Init+0x1e8>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a90:	4313      	orrs	r3, r2
 8001a92:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7e5b      	ldrb	r3, [r3, #25]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	045a      	lsls	r2, r3, #17
 8001aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ab8:	e00d      	b.n	8001ad6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001ac2:	f043 0220 	orr.w	r2, r3, #32
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d007      	beq.n	8001aee <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001aea:	4313      	orrs	r3, r2
 8001aec:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d114      	bne.n	8001b26 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b0a:	f023 0302 	bic.w	r3, r3, #2
 8001b0e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e1b      	ldrb	r3, [r3, #24]
 8001b14:	039a      	lsls	r2, r3, #14
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b22:	4313      	orrs	r3, r2
 8001b24:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4b22      	ldr	r3, [pc, #136]	@ (8001bb8 <HAL_ADC_Init+0x320>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001b36:	430b      	orrs	r3, r1
 8001b38:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10c      	bne.n	8001b5c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b48:	f023 010f 	bic.w	r1, r3, #15
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5a:	e007      	b.n	8001b6c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 020f 	bic.w	r2, r2, #15
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b82:	e00a      	b.n	8001b9a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f023 0312 	bic.w	r3, r3, #18
 8001b8c:	f043 0210 	orr.w	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b94:	2301      	movs	r3, #1
 8001b96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3768      	adds	r7, #104	@ 0x68
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	431bde83 	.word	0x431bde83
 8001bb0:	50000300 	.word	0x50000300
 8001bb4:	50000100 	.word	0x50000100
 8001bb8:	fff0c007 	.word	0xfff0c007

08001bbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80b9 	bne.w	8001d4e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Start_DMA+0x2e>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e0b4      	b.n	8001d54 <HAL_ADC_Start_DMA+0x198>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d5c <HAL_ADC_Start_DMA+0x1a0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 80a0 	bne.w	8001d40 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fd11 	bl	8002628 <ADC_Enable>
 8001c06:	4603      	mov	r3, r0
 8001c08:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f040 8092 	bne.w	8001d36 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c26:	4b4d      	ldr	r3, [pc, #308]	@ (8001d5c <HAL_ADC_Start_DMA+0x1a0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_Start_DMA+0x80>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c3a:	d115      	bne.n	8001c68 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d027      	beq.n	8001ca6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c66:	e01e      	b.n	8001ca6 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c7c:	d004      	beq.n	8001c88 <HAL_ADC_Start_DMA+0xcc>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a37      	ldr	r2, [pc, #220]	@ (8001d60 <HAL_ADC_Start_DMA+0x1a4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d10e      	bne.n	8001ca6 <HAL_ADC_Start_DMA+0xea>
 8001c88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c9e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb8:	f023 0206 	bic.w	r2, r3, #6
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd4:	4a23      	ldr	r2, [pc, #140]	@ (8001d64 <HAL_ADC_Start_DMA+0x1a8>)
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cdc:	4a22      	ldr	r2, [pc, #136]	@ (8001d68 <HAL_ADC_Start_DMA+0x1ac>)
 8001cde:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce4:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <HAL_ADC_Start_DMA+0x1b0>)
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	221c      	movs	r2, #28
 8001cee:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0210 	orr.w	r2, r2, #16
 8001cfe:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3340      	adds	r3, #64	@ 0x40
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f000 ff48 	bl	8002bb4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0204 	orr.w	r2, r2, #4
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e00d      	b.n	8001d52 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d3e:	e008      	b.n	8001d52 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d4c:	e001      	b.n	8001d52 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	50000300 	.word	0x50000300
 8001d60:	50000100 	.word	0x50000100
 8001d64:	0800255d 	.word	0x0800255d
 8001d68:	080025d7 	.word	0x080025d7
 8001d6c:	080025f3 	.word	0x080025f3

08001d70 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ADCEx_Calibration_Start+0x1c>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e05f      	b.n	8001e4c <HAL_ADCEx_Calibration_Start+0xdc>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fcab 	bl	80026f0 <ADC_Disable>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d14e      	bne.n	8001e42 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001db8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dce:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001dde:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001de0:	f7ff fd16 	bl	8001810 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001de6:	e01c      	b.n	8001e22 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001de8:	f7ff fd12 	bl	8001810 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b0a      	cmp	r3, #10
 8001df4:	d915      	bls.n	8001e22 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e04:	d10d      	bne.n	8001e22 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f023 0312 	bic.w	r3, r3, #18
 8001e0e:	f043 0210 	orr.w	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e014      	b.n	8001e4c <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e30:	d0da      	beq.n	8001de8 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b09b      	sub	sp, #108	@ 0x6c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x22>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e2a1      	b.n	80023ba <HAL_ADC_ConfigChannel+0x566>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f040 8285 	bne.w	8002398 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d81c      	bhi.n	8001ed0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	231f      	movs	r3, #31
 8001eac:	4093      	lsls	r3, r2
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	4019      	ands	r1, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ece:	e063      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	d81e      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	3b1e      	subs	r3, #30
 8001eec:	221f      	movs	r2, #31
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	4019      	ands	r1, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f14:	e040      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b0e      	cmp	r3, #14
 8001f1c:	d81e      	bhi.n	8001f5c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	3b3c      	subs	r3, #60	@ 0x3c
 8001f32:	221f      	movs	r2, #31
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	3b3c      	subs	r3, #60	@ 0x3c
 8001f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f5a:	e01d      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	3b5a      	subs	r3, #90	@ 0x5a
 8001f70:	221f      	movs	r2, #31
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	4019      	ands	r1, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	3b5a      	subs	r3, #90	@ 0x5a
 8001f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 80e5 	bne.w	8002172 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d91c      	bls.n	8001fea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6999      	ldr	r1, [r3, #24]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b1e      	subs	r3, #30
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4019      	ands	r1, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6898      	ldr	r0, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b1e      	subs	r3, #30
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	e019      	b.n	800201e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6959      	ldr	r1, [r3, #20]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	4019      	ands	r1, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6898      	ldr	r0, [r3, #8]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	3b01      	subs	r3, #1
 800203c:	2b03      	cmp	r3, #3
 800203e:	d84f      	bhi.n	80020e0 <HAL_ADC_ConfigChannel+0x28c>
 8002040:	a201      	add	r2, pc, #4	@ (adr r2, 8002048 <HAL_ADC_ConfigChannel+0x1f4>)
 8002042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002046:	bf00      	nop
 8002048:	08002059 	.word	0x08002059
 800204c:	0800207b 	.word	0x0800207b
 8002050:	0800209d 	.word	0x0800209d
 8002054:	080020bf 	.word	0x080020bf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800205e:	4b9c      	ldr	r3, [pc, #624]	@ (80022d0 <HAL_ADC_ConfigChannel+0x47c>)
 8002060:	4013      	ands	r3, r2
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	0691      	lsls	r1, r2, #26
 8002068:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800206a:	430a      	orrs	r2, r1
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002076:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002078:	e07b      	b.n	8002172 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002080:	4b93      	ldr	r3, [pc, #588]	@ (80022d0 <HAL_ADC_ConfigChannel+0x47c>)
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	0691      	lsls	r1, r2, #26
 800208a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800208c:	430a      	orrs	r2, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002098:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800209a:	e06a      	b.n	8002172 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020a2:	4b8b      	ldr	r3, [pc, #556]	@ (80022d0 <HAL_ADC_ConfigChannel+0x47c>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	0691      	lsls	r1, r2, #26
 80020ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020ae:	430a      	orrs	r2, r1
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80020ba:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020bc:	e059      	b.n	8002172 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020c4:	4b82      	ldr	r3, [pc, #520]	@ (80022d0 <HAL_ADC_ConfigChannel+0x47c>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	0691      	lsls	r1, r2, #26
 80020ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020d0:	430a      	orrs	r2, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80020dc:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020de:	e048      	b.n	8002172 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	069b      	lsls	r3, r3, #26
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002102:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800210a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	069b      	lsls	r3, r3, #26
 8002114:	429a      	cmp	r2, r3
 8002116:	d107      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002126:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800212e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	069b      	lsls	r3, r3, #26
 8002138:	429a      	cmp	r2, r3
 800213a:	d107      	bne.n	800214c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800214a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002152:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	069b      	lsls	r3, r3, #26
 800215c:	429a      	cmp	r2, r3
 800215e:	d107      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800216e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002170:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d108      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x33e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x33e>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_ADC_ConfigChannel+0x340>
 8002192:	2300      	movs	r3, #0
 8002194:	2b00      	cmp	r3, #0
 8002196:	f040 810a 	bne.w	80023ae <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d00f      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43da      	mvns	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	400a      	ands	r2, r1
 80021bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80021c0:	e049      	b.n	8002256 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	409a      	lsls	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b09      	cmp	r3, #9
 80021e2:	d91c      	bls.n	800221e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6999      	ldr	r1, [r3, #24]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3b1b      	subs	r3, #27
 80021f6:	2207      	movs	r2, #7
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	4019      	ands	r1, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6898      	ldr	r0, [r3, #8]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	3b1b      	subs	r3, #27
 8002210:	fa00 f203 	lsl.w	r2, r0, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	619a      	str	r2, [r3, #24]
 800221c:	e01b      	b.n	8002256 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6959      	ldr	r1, [r3, #20]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	2207      	movs	r2, #7
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	4019      	ands	r1, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6898      	ldr	r0, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	fa00 f203 	lsl.w	r2, r0, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_ADC_ConfigChannel+0x480>)
 8002258:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d105      	bne.n	800226e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002272:	2b11      	cmp	r3, #17
 8002274:	d105      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002286:	2b12      	cmp	r3, #18
 8002288:	f040 8091 	bne.w	80023ae <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800228c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 808a 	bne.w	80023ae <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a2:	d102      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x456>
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <HAL_ADC_ConfigChannel+0x484>)
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x45c>
 80022aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022ae:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10e      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x488>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x488>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e006      	b.n	80022de <HAL_ADC_ConfigChannel+0x48a>
 80022d0:	83fff000 	.word	0x83fff000
 80022d4:	50000300 	.word	0x50000300
 80022d8:	50000100 	.word	0x50000100
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d150      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022e2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x4b0>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x4b0>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_ADC_ConfigChannel+0x4b2>
 8002304:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002306:	2b00      	cmp	r3, #0
 8002308:	d13c      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b10      	cmp	r3, #16
 8002310:	d11d      	bne.n	800234e <HAL_ADC_ConfigChannel+0x4fa>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800231a:	d118      	bne.n	800234e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800231c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002326:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002328:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <HAL_ADC_ConfigChannel+0x574>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a27      	ldr	r2, [pc, #156]	@ (80023cc <HAL_ADC_ConfigChannel+0x578>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9a      	lsrs	r2, r3, #18
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800233e:	e002      	b.n	8002346 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	3b01      	subs	r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800234c:	e02e      	b.n	80023ac <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b11      	cmp	r3, #17
 8002354:	d10b      	bne.n	800236e <HAL_ADC_ConfigChannel+0x51a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235e:	d106      	bne.n	800236e <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800236a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800236c:	e01e      	b.n	80023ac <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b12      	cmp	r3, #18
 8002374:	d11a      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800237e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002380:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002382:	e013      	b.n	80023ac <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002396:	e00a      	b.n	80023ae <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f043 0220 	orr.w	r2, r3, #32
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80023aa:	e000      	b.n	80023ae <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023ac:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	376c      	adds	r7, #108	@ 0x6c
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	2000000c 	.word	0x2000000c
 80023cc:	431bde83 	.word	0x431bde83

080023d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b099      	sub	sp, #100	@ 0x64
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023e8:	d102      	bne.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80023ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002554 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	e002      	b.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80023f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0a2      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800240a:	2302      	movs	r3, #2
 800240c:	e09b      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d17f      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d179      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002430:	4b49      	ldr	r3, [pc, #292]	@ (8002558 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002432:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d040      	beq.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800243c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800244e:	035b      	lsls	r3, r3, #13
 8002450:	430b      	orrs	r3, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002456:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002478:	2300      	movs	r3, #0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d15c      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800249a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800249c:	2b00      	cmp	r3, #0
 800249e:	d14b      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024a8:	f023 030f 	bic.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	6811      	ldr	r1, [r2, #0]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	6892      	ldr	r2, [r2, #8]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	431a      	orrs	r2, r3
 80024b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024bc:	e03c      	b.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d108      	bne.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d123      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800250c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	d112      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002512:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800251a:	f023 030f 	bic.w	r3, r3, #15
 800251e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002520:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002522:	e009      	b.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f043 0220 	orr.w	r2, r3, #32
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002536:	e000      	b.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002538:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002542:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002546:	4618      	mov	r0, r3
 8002548:	3764      	adds	r7, #100	@ 0x64
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	50000100 	.word	0x50000100
 8002558:	50000300 	.word	0x50000300

0800255c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002572:	2b00      	cmp	r3, #0
 8002574:	d126      	bne.n	80025c4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800258c:	2b00      	cmp	r3, #0
 800258e:	d115      	bne.n	80025bc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7fe fe07 	bl	80011d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025c2:	e004      	b.n	80025ce <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff f943 	bl	8001870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002610:	f043 0204 	orr.w	r2, r3, #4
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff f933 	bl	8001884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d108      	bne.n	8002654 <ADC_Enable+0x2c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <ADC_Enable+0x2c>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <ADC_Enable+0x2e>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d143      	bne.n	80026e2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <ADC_Enable+0xc4>)
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00d      	beq.n	8002684 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f043 0210 	orr.w	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e02f      	b.n	80026e4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002694:	f7ff f8bc 	bl	8001810 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800269a:	e01b      	b.n	80026d4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800269c:	f7ff f8b8 	bl	8001810 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d914      	bls.n	80026d4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d00d      	beq.n	80026d4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	f043 0210 	orr.w	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e007      	b.n	80026e4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d1dc      	bne.n	800269c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	8000003f 	.word	0x8000003f

080026f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <ADC_Disable+0x2c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <ADC_Disable+0x2c>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <ADC_Disable+0x2e>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d047      	beq.n	80027b2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030d 	and.w	r3, r3, #13
 800272c:	2b01      	cmp	r3, #1
 800272e:	d10f      	bne.n	8002750 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0202 	orr.w	r2, r2, #2
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2203      	movs	r2, #3
 8002746:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002748:	f7ff f862 	bl	8001810 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800274e:	e029      	b.n	80027a4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	f043 0210 	orr.w	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e023      	b.n	80027b4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800276c:	f7ff f850 	bl	8001810 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d914      	bls.n	80027a4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10d      	bne.n	80027a4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	f043 0210 	orr.w	r2, r3, #16
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e007      	b.n	80027b4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d0dc      	beq.n	800276c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_COMP_Init+0x22>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
 80027e2:	e06b      	b.n	80028bc <HAL_COMP_Init+0x100>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e4:	4b38      	ldr	r3, [pc, #224]	@ (80028c8 <HAL_COMP_Init+0x10c>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a37      	ldr	r2, [pc, #220]	@ (80028c8 <HAL_COMP_Init+0x10c>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b35      	ldr	r3, [pc, #212]	@ (80028c8 <HAL_COMP_Init+0x10c>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fe fd71 	bl	80012e4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b60      	cmp	r3, #96	@ 0x60
 800281c:	d002      	beq.n	8002824 <HAL_COMP_Init+0x68>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	e007      	b.n	8002834 <HAL_COMP_Init+0x78>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <HAL_COMP_Init+0x110>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_COMP_Init+0x76>
 800282e:	2360      	movs	r3, #96	@ 0x60
 8002830:	e000      	b.n	8002834 <HAL_COMP_Init+0x78>
 8002832:	4b27      	ldr	r3, [pc, #156]	@ (80028d0 <HAL_COMP_Init+0x114>)
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6053      	str	r3, [r2, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800284a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6852      	ldr	r2, [r2, #4]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  return status;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010020 	.word	0x40010020
 80028d0:	00400070 	.word	0x00400070

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	@ (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	@ (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	@ 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	@ 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff47 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff5c 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ffb0 	bl	80029f4 <SysTick_Config>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e014      	b.n	8002ada <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	791b      	ldrb	r3, [r3, #4]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7fe fc41 	bl	8001348 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	795b      	ldrb	r3, [r3, #5]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_DAC_ConfigChannel+0x20>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e04e      	b.n	8002ba2 <HAL_DAC_ConfigChannel+0xbe>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <HAL_DAC_ConfigChannel+0xcc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d112      	bne.n	8002b48 <HAL_DAC_ConfigChannel+0x64>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10f      	bne.n	8002b48 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002b28:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4013      	ands	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e00e      	b.n	8002b66 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002b48:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4013      	ands	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	22c0      	movs	r2, #192	@ 0xc0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	400a      	ands	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40007400 	.word	0x40007400

08002bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_DMA_Start_IT+0x20>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e04a      	b.n	8002c6a <HAL_DMA_Start_IT+0xb6>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d13a      	bne.n	8002c5c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f831 	bl	8002c72 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 020e 	orr.w	r2, r2, #14
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e00f      	b.n	8002c4a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 020a 	orr.w	r2, r2, #10
 8002c38:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0204 	bic.w	r2, r2, #4
 8002c48:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e005      	b.n	8002c68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
 8002c66:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d108      	bne.n	8002cb2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cb0:	e007      	b.n	8002cc2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	60da      	str	r2, [r3, #12]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cde:	e14e      	b.n	8002f7e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8140 	beq.w	8002f78 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d005      	beq.n	8002d10 <HAL_GPIO_Init+0x40>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d130      	bne.n	8002d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d46:	2201      	movs	r2, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0201 	and.w	r2, r3, #1
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d017      	beq.n	8002dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2203      	movs	r2, #3
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d123      	bne.n	8002e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	6939      	ldr	r1, [r7, #16]
 8002dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0203 	and.w	r2, r3, #3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 809a 	beq.w	8002f78 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e44:	4b55      	ldr	r3, [pc, #340]	@ (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a54      	ldr	r2, [pc, #336]	@ (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b52      	ldr	r3, [pc, #328]	@ (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e5c:	4a50      	ldr	r2, [pc, #320]	@ (8002fa0 <HAL_GPIO_Init+0x2d0>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	220f      	movs	r2, #15
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e86:	d013      	beq.n	8002eb0 <HAL_GPIO_Init+0x1e0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a46      	ldr	r2, [pc, #280]	@ (8002fa4 <HAL_GPIO_Init+0x2d4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00d      	beq.n	8002eac <HAL_GPIO_Init+0x1dc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a45      	ldr	r2, [pc, #276]	@ (8002fa8 <HAL_GPIO_Init+0x2d8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <HAL_GPIO_Init+0x1d8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a44      	ldr	r2, [pc, #272]	@ (8002fac <HAL_GPIO_Init+0x2dc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_GPIO_Init+0x1d4>
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e006      	b.n	8002eb2 <HAL_GPIO_Init+0x1e2>
 8002ea4:	2305      	movs	r3, #5
 8002ea6:	e004      	b.n	8002eb2 <HAL_GPIO_Init+0x1e2>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e002      	b.n	8002eb2 <HAL_GPIO_Init+0x1e2>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_GPIO_Init+0x1e2>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	f002 0203 	and.w	r2, r2, #3
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	4093      	lsls	r3, r2
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ec2:	4937      	ldr	r1, [pc, #220]	@ (8002fa0 <HAL_GPIO_Init+0x2d0>)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed0:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002efa:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f1e:	4a24      	ldr	r2, [pc, #144]	@ (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f24:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f48:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f4e:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f72:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f47f aea9 	bne.w	8002ce0 <HAL_GPIO_Init+0x10>
  }
}
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	48000400 	.word	0x48000400
 8002fa8:	48000800 	.word	0x48000800
 8002fac:	48000c00 	.word	0x48000c00
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc4:	787b      	ldrb	r3, [r7, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f001 b823 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 817d 	beq.w	800331a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003020:	4bbc      	ldr	r3, [pc, #752]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b04      	cmp	r3, #4
 800302a:	d00c      	beq.n	8003046 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800302c:	4bb9      	ldr	r3, [pc, #740]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d15c      	bne.n	80030f2 <HAL_RCC_OscConfig+0x10e>
 8003038:	4bb6      	ldr	r3, [pc, #728]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d155      	bne.n	80030f2 <HAL_RCC_OscConfig+0x10e>
 8003046:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800304a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800305a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_RCC_OscConfig+0x94>
 8003072:	4ba8      	ldr	r3, [pc, #672]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	e015      	b.n	80030a4 <HAL_RCC_OscConfig+0xc0>
 8003078:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800307c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800308c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003090:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003094:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80030a0:	4b9c      	ldr	r3, [pc, #624]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030a8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80030ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80030b0:	fa92 f2a2 	rbit	r2, r2
 80030b4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80030b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f042 0220 	orr.w	r2, r2, #32
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f002 021f 	and.w	r2, r2, #31
 80030cc:	2101      	movs	r1, #1
 80030ce:	fa01 f202 	lsl.w	r2, r1, r2
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 811f 	beq.w	8003318 <HAL_RCC_OscConfig+0x334>
 80030da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 8116 	bne.w	8003318 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f000 bfaf 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x12e>
 8003104:	4b83      	ldr	r3, [pc, #524]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a82      	ldr	r2, [pc, #520]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e036      	b.n	8003180 <HAL_RCC_OscConfig+0x19c>
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x158>
 8003122:	4b7c      	ldr	r3, [pc, #496]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7b      	ldr	r2, [pc, #492]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b79      	ldr	r3, [pc, #484]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a78      	ldr	r2, [pc, #480]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003134:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e021      	b.n	8003180 <HAL_RCC_OscConfig+0x19c>
 800313c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003140:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x184>
 800314e:	4b71      	ldr	r3, [pc, #452]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a70      	ldr	r2, [pc, #448]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b6e      	ldr	r3, [pc, #440]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6d      	ldr	r2, [pc, #436]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0x19c>
 8003168:	4b6a      	ldr	r3, [pc, #424]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a69      	ldr	r2, [pc, #420]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b67      	ldr	r3, [pc, #412]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a66      	ldr	r2, [pc, #408]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003180:	4b64      	ldr	r3, [pc, #400]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	f023 020f 	bic.w	r2, r3, #15
 8003188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	495f      	ldr	r1, [pc, #380]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003196:	4313      	orrs	r3, r2
 8003198:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800319a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d059      	beq.n	800325e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fe fb31 	bl	8001810 <HAL_GetTick>
 80031ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fb2c 	bl	8001810 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	@ 0x64
 80031c2:	d902      	bls.n	80031ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	f000 bf43 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>
 80031ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031ce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80031de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d102      	bne.n	80031fc <HAL_RCC_OscConfig+0x218>
 80031f6:	4b47      	ldr	r3, [pc, #284]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	e015      	b.n	8003228 <HAL_RCC_OscConfig+0x244>
 80031fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003200:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003214:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003218:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003224:	4b3b      	ldr	r3, [pc, #236]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800322c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003230:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003234:	fa92 f2a2 	rbit	r2, r2
 8003238:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800323c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003240:	fab2 f282 	clz	r2, r2
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	f042 0220 	orr.w	r2, r2, #32
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f002 021f 	and.w	r2, r2, #31
 8003250:	2101      	movs	r1, #1
 8003252:	fa01 f202 	lsl.w	r2, r1, r2
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ab      	beq.n	80031b4 <HAL_RCC_OscConfig+0x1d0>
 800325c:	e05d      	b.n	800331a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fe fad7 	bl	8001810 <HAL_GetTick>
 8003262:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe fad2 	bl	8001810 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b64      	cmp	r3, #100	@ 0x64
 8003276:	d902      	bls.n	800327e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	f000 bee9 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>
 800327e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003282:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003292:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d102      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2cc>
 80032aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e015      	b.n	80032dc <HAL_RCC_OscConfig+0x2f8>
 80032b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032b4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80032c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80032cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80032d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <HAL_RCC_OscConfig+0x330>)
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032e0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80032e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80032e8:	fa92 f2a2 	rbit	r2, r2
 80032ec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80032f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ab      	bne.n	8003268 <HAL_RCC_OscConfig+0x284>
 8003310:	e003      	b.n	800331a <HAL_RCC_OscConfig+0x336>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 817d 	beq.w	800362a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003330:	4ba6      	ldr	r3, [pc, #664]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800333c:	4ba3      	ldr	r3, [pc, #652]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d172      	bne.n	800342e <HAL_RCC_OscConfig+0x44a>
 8003348:	4ba0      	ldr	r3, [pc, #640]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d16c      	bne.n	800342e <HAL_RCC_OscConfig+0x44a>
 8003354:	2302      	movs	r3, #2
 8003356:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003366:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0x3a0>
 800337e:	4b93      	ldr	r3, [pc, #588]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e013      	b.n	80033ac <HAL_RCC_OscConfig+0x3c8>
 8003384:	2302      	movs	r3, #2
 8003386:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003396:	2302      	movs	r3, #2
 8003398:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800339c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80033a8:	4b88      	ldr	r3, [pc, #544]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	2202      	movs	r2, #2
 80033ae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80033b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80033b6:	fa92 f2a2 	rbit	r2, r2
 80033ba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80033be:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80033c2:	fab2 f282 	clz	r2, r2
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f042 0220 	orr.w	r2, r2, #32
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 021f 	and.w	r2, r2, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCC_OscConfig+0x410>
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f000 be2e 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b75      	ldr	r3, [pc, #468]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003400:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	21f8      	movs	r1, #248	@ 0xf8
 800340a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003412:	fa91 f1a1 	rbit	r1, r1
 8003416:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800341a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800341e:	fab1 f181 	clz	r1, r1
 8003422:	b2c9      	uxtb	r1, r1
 8003424:	408b      	lsls	r3, r1
 8003426:	4969      	ldr	r1, [pc, #420]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342c:	e0fd      	b.n	800362a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8088 	beq.w	8003550 <HAL_RCC_OscConfig+0x56c>
 8003440:	2301      	movs	r3, #1
 8003442:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003452:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003460:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	461a      	mov	r2, r3
 8003468:	2301      	movs	r3, #1
 800346a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe f9d0 	bl	8001810 <HAL_GetTick>
 8003470:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003476:	f7fe f9cb 	bl	8001810 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d902      	bls.n	800348c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	f000 bde2 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>
 800348c:	2302      	movs	r3, #2
 800348e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800349e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d102      	bne.n	80034bc <HAL_RCC_OscConfig+0x4d8>
 80034b6:	4b45      	ldr	r3, [pc, #276]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	e013      	b.n	80034e4 <HAL_RCC_OscConfig+0x500>
 80034bc:	2302      	movs	r3, #2
 80034be:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80034ce:	2302      	movs	r3, #2
 80034d0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80034d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80034e0:	4b3a      	ldr	r3, [pc, #232]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	2202      	movs	r2, #2
 80034e6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80034ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80034ee:	fa92 f2a2 	rbit	r2, r2
 80034f2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80034f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80034fa:	fab2 f282 	clz	r2, r2
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f042 0220 	orr.w	r2, r2, #32
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f002 021f 	and.w	r2, r2, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f202 	lsl.w	r2, r1, r2
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0af      	beq.n	8003476 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b2d      	ldr	r3, [pc, #180]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	21f8      	movs	r1, #248	@ 0xf8
 800352c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003534:	fa91 f1a1 	rbit	r1, r1
 8003538:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800353c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003540:	fab1 f181 	clz	r1, r1
 8003544:	b2c9      	uxtb	r1, r1
 8003546:	408b      	lsls	r3, r1
 8003548:	4920      	ldr	r1, [pc, #128]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
 800354e:	e06c      	b.n	800362a <HAL_RCC_OscConfig+0x646>
 8003550:	2301      	movs	r3, #1
 8003552:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003562:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003570:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	461a      	mov	r2, r3
 8003578:	2300      	movs	r3, #0
 800357a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe f948 	bl	8001810 <HAL_GetTick>
 8003580:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003586:	f7fe f943 	bl	8001810 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	f000 bd5a 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>
 800359c:	2302      	movs	r3, #2
 800359e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80035ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d104      	bne.n	80035d0 <HAL_RCC_OscConfig+0x5ec>
 80035c6:	4b01      	ldr	r3, [pc, #4]	@ (80035cc <HAL_RCC_OscConfig+0x5e8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	e015      	b.n	80035f8 <HAL_RCC_OscConfig+0x614>
 80035cc:	40021000 	.word	0x40021000
 80035d0:	2302      	movs	r3, #2
 80035d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80035e2:	2302      	movs	r3, #2
 80035e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80035e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80035f4:	4bc8      	ldr	r3, [pc, #800]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	2202      	movs	r2, #2
 80035fa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80035fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003602:	fa92 f2a2 	rbit	r2, r2
 8003606:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800360a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800360e:	fab2 f282 	clz	r2, r2
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f042 0220 	orr.w	r2, r2, #32
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	f002 021f 	and.w	r2, r2, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f202 	lsl.w	r2, r1, r2
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ad      	bne.n	8003586 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8110 	beq.w	8003860 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003644:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d079      	beq.n	8003744 <HAL_RCC_OscConfig+0x760>
 8003650:	2301      	movs	r3, #1
 8003652:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	4bab      	ldr	r3, [pc, #684]	@ (800391c <HAL_RCC_OscConfig+0x938>)
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	461a      	mov	r2, r3
 8003676:	2301      	movs	r3, #1
 8003678:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367a:	f7fe f8c9 	bl	8001810 <HAL_GetTick>
 800367e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003684:	f7fe f8c4 	bl	8001810 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d902      	bls.n	800369a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	f000 bcdb 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>
 800369a:	2302      	movs	r3, #2
 800369c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036b4:	2202      	movs	r2, #2
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036d8:	2202      	movs	r2, #2
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f2a3 	rbit	r2, r3
 80036ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80036f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f4:	4b88      	ldr	r3, [pc, #544]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 80036f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003700:	2102      	movs	r1, #2
 8003702:	6019      	str	r1, [r3, #0]
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f1a3 	rbit	r1, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003716:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800371a:	6019      	str	r1, [r3, #0]
  return result;
 800371c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003720:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2101      	movs	r1, #1
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0a0      	beq.n	8003684 <HAL_RCC_OscConfig+0x6a0>
 8003742:	e08d      	b.n	8003860 <HAL_RCC_OscConfig+0x87c>
 8003744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003748:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003754:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	fa93 f2a3 	rbit	r2, r3
 800375e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003762:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003766:	601a      	str	r2, [r3, #0]
  return result;
 8003768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003770:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	4b68      	ldr	r3, [pc, #416]	@ (800391c <HAL_RCC_OscConfig+0x938>)
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	461a      	mov	r2, r3
 8003782:	2300      	movs	r3, #0
 8003784:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fe f843 	bl	8001810 <HAL_GetTick>
 800378a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003790:	f7fe f83e 	bl	8001810 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d902      	bls.n	80037a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	f000 bc55 	b.w	8004050 <HAL_RCC_OscConfig+0x106c>
 80037a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037ae:	2202      	movs	r2, #2
 80037b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037d2:	2202      	movs	r2, #2
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fa93 f2a3 	rbit	r2, r3
 80037e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80037f6:	2202      	movs	r2, #2
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	fa93 f2a3 	rbit	r2, r3
 8003808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003810:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003812:	4b41      	ldr	r3, [pc, #260]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 8003814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800381e:	2102      	movs	r1, #2
 8003820:	6019      	str	r1, [r3, #0]
 8003822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003826:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	fa93 f1a3 	rbit	r1, r3
 8003830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003834:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003838:	6019      	str	r1, [r3, #0]
  return result;
 800383a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d197      	bne.n	8003790 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003864:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 81a1 	beq.w	8003bb8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387c:	4b26      	ldr	r3, [pc, #152]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d116      	bne.n	80038b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003888:	4b23      	ldr	r3, [pc, #140]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	4a22      	ldr	r2, [pc, #136]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 800388e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003892:	61d3      	str	r3, [r2, #28]
 8003894:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800389c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80038ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003920 <HAL_RCC_OscConfig+0x93c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d11a      	bne.n	80038f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c2:	4b17      	ldr	r3, [pc, #92]	@ (8003920 <HAL_RCC_OscConfig+0x93c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a16      	ldr	r2, [pc, #88]	@ (8003920 <HAL_RCC_OscConfig+0x93c>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fd ff9f 	bl	8001810 <HAL_GetTick>
 80038d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d6:	e009      	b.n	80038ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d8:	f7fd ff9a 	bl	8001810 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b64      	cmp	r3, #100	@ 0x64
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e3b1      	b.n	8004050 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <HAL_RCC_OscConfig+0x93c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ef      	beq.n	80038d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d10d      	bne.n	8003924 <HAL_RCC_OscConfig+0x940>
 8003908:	4b03      	ldr	r3, [pc, #12]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4a02      	ldr	r2, [pc, #8]	@ (8003918 <HAL_RCC_OscConfig+0x934>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6213      	str	r3, [r2, #32]
 8003914:	e03c      	b.n	8003990 <HAL_RCC_OscConfig+0x9ac>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	10908120 	.word	0x10908120
 8003920:	40007000 	.word	0x40007000
 8003924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003928:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10c      	bne.n	800394e <HAL_RCC_OscConfig+0x96a>
 8003934:	4bc1      	ldr	r3, [pc, #772]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4ac0      	ldr	r2, [pc, #768]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	6213      	str	r3, [r2, #32]
 8003940:	4bbe      	ldr	r3, [pc, #760]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4abd      	ldr	r2, [pc, #756]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003946:	f023 0304 	bic.w	r3, r3, #4
 800394a:	6213      	str	r3, [r2, #32]
 800394c:	e020      	b.n	8003990 <HAL_RCC_OscConfig+0x9ac>
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b05      	cmp	r3, #5
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x994>
 800395e:	4bb7      	ldr	r3, [pc, #732]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	4ab6      	ldr	r2, [pc, #728]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	6213      	str	r3, [r2, #32]
 800396a:	4bb4      	ldr	r3, [pc, #720]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4ab3      	ldr	r2, [pc, #716]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6213      	str	r3, [r2, #32]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0x9ac>
 8003978:	4bb0      	ldr	r3, [pc, #704]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4aaf      	ldr	r2, [pc, #700]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	6213      	str	r3, [r2, #32]
 8003984:	4bad      	ldr	r3, [pc, #692]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4aac      	ldr	r2, [pc, #688]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 800398a:	f023 0304 	bic.w	r3, r3, #4
 800398e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8081 	beq.w	8003aa4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fd ff35 	bl	8001810 <HAL_GetTick>
 80039a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fd ff30 	bl	8001810 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e345      	b.n	8004050 <HAL_RCC_OscConfig+0x106c>
 80039c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039cc:	2202      	movs	r2, #2
 80039ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f2a3 	rbit	r2, r3
 80039de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80039f0:	2202      	movs	r2, #2
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	fa93 f2a3 	rbit	r2, r3
 8003a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a06:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a0a:	601a      	str	r2, [r3, #0]
  return result;
 8003a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a10:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d102      	bne.n	8003a30 <HAL_RCC_OscConfig+0xa4c>
 8003a2a:	4b84      	ldr	r3, [pc, #528]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	e013      	b.n	8003a58 <HAL_RCC_OscConfig+0xa74>
 8003a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a38:	2202      	movs	r2, #2
 8003a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a40:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	fa93 f2a3 	rbit	r2, r3
 8003a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	4b79      	ldr	r3, [pc, #484]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a5c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a60:	2102      	movs	r1, #2
 8003a62:	6011      	str	r1, [r2, #0]
 8003a64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a68:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	fa92 f1a2 	rbit	r1, r2
 8003a72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a76:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a7a:	6011      	str	r1, [r2, #0]
  return result;
 8003a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a80:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	fab2 f282 	clz	r2, r2
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	f002 021f 	and.w	r2, r2, #31
 8003a96:	2101      	movs	r1, #1
 8003a98:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d084      	beq.n	80039ac <HAL_RCC_OscConfig+0x9c8>
 8003aa2:	e07f      	b.n	8003ba4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa4:	f7fd feb4 	bl	8001810 <HAL_GetTick>
 8003aa8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd feaf 	bl	8001810 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e2c4      	b.n	8004050 <HAL_RCC_OscConfig+0x106c>
 8003ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ace:	2202      	movs	r2, #2
 8003ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003af2:	2202      	movs	r2, #2
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	fa93 f2a3 	rbit	r2, r3
 8003b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b0c:	601a      	str	r2, [r3, #0]
  return result;
 8003b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b12:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d102      	bne.n	8003b32 <HAL_RCC_OscConfig+0xb4e>
 8003b2c:	4b43      	ldr	r3, [pc, #268]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	e013      	b.n	8003b5a <HAL_RCC_OscConfig+0xb76>
 8003b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b36:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b42:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	fa93 f2a3 	rbit	r2, r3
 8003b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b50:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	4b39      	ldr	r3, [pc, #228]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b5e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b62:	2102      	movs	r1, #2
 8003b64:	6011      	str	r1, [r2, #0]
 8003b66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b6a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	fa92 f1a2 	rbit	r1, r2
 8003b74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b78:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b7c:	6011      	str	r1, [r2, #0]
  return result;
 8003b7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b82:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	fab2 f282 	clz	r2, r2
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f002 021f 	and.w	r2, r2, #31
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d184      	bne.n	8003aae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ba4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bac:	4b23      	ldr	r3, [pc, #140]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	4a22      	ldr	r2, [pc, #136]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8242 	beq.w	800404e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bca:	4b1c      	ldr	r3, [pc, #112]	@ (8003c3c <HAL_RCC_OscConfig+0xc58>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	f000 8213 	beq.w	8003ffe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	f040 8162 	bne.w	8003eae <HAL_RCC_OscConfig+0xeca>
 8003bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003bf2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	fa93 f2a3 	rbit	r2, r3
 8003c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c0e:	601a      	str	r2, [r3, #0]
  return result;
 8003c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c14:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fd fdee 	bl	8001810 <HAL_GetTick>
 8003c34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c38:	e00c      	b.n	8003c54 <HAL_RCC_OscConfig+0xc70>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fd fde6 	bl	8001810 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1fd      	b.n	8004050 <HAL_RCC_OscConfig+0x106c>
 8003c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c58:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	fa93 f2a3 	rbit	r2, r3
 8003c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c78:	601a      	str	r2, [r3, #0]
  return result;
 8003c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d102      	bne.n	8003c9e <HAL_RCC_OscConfig+0xcba>
 8003c98:	4bb0      	ldr	r3, [pc, #704]	@ (8003f5c <HAL_RCC_OscConfig+0xf78>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	e027      	b.n	8003cee <HAL_RCC_OscConfig+0xd0a>
 8003c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ca6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	fa93 f2a3 	rbit	r2, r3
 8003cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ccc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	fa93 f2a3 	rbit	r2, r3
 8003ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	4b9c      	ldr	r3, [pc, #624]	@ (8003f5c <HAL_RCC_OscConfig+0xf78>)
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cf2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003cf6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003cfa:	6011      	str	r1, [r2, #0]
 8003cfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d00:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	fa92 f1a2 	rbit	r1, r2
 8003d0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d0e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d12:	6011      	str	r1, [r2, #0]
  return result;
 8003d14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d18:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	fab2 f282 	clz	r2, r2
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	f042 0220 	orr.w	r2, r2, #32
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f002 021f 	and.w	r2, r2, #31
 8003d2e:	2101      	movs	r1, #1
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d182      	bne.n	8003c40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d3a:	4b88      	ldr	r3, [pc, #544]	@ (8003f5c <HAL_RCC_OscConfig+0xf78>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	497f      	ldr	r1, [pc, #508]	@ (8003f5c <HAL_RCC_OscConfig+0xf78>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
 8003d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d66:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d74:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	fa93 f2a3 	rbit	r2, r3
 8003d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d86:	601a      	str	r2, [r3, #0]
  return result;
 8003d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	461a      	mov	r2, r3
 8003da4:	2301      	movs	r3, #1
 8003da6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd fd32 	bl	8001810 <HAL_GetTick>
 8003dac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db0:	e009      	b.n	8003dc6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fd fd2d 	bl	8001810 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e144      	b.n	8004050 <HAL_RCC_OscConfig+0x106c>
 8003dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003dce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	fa93 f2a3 	rbit	r2, r3
 8003de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003dea:	601a      	str	r2, [r3, #0]
  return result;
 8003dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003df4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HAL_RCC_OscConfig+0xe2c>
 8003e0a:	4b54      	ldr	r3, [pc, #336]	@ (8003f5c <HAL_RCC_OscConfig+0xf78>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	e027      	b.n	8003e60 <HAL_RCC_OscConfig+0xe7c>
 8003e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e14:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003e18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e22:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	fa93 f2a3 	rbit	r2, r3
 8003e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e48:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fa93 f2a3 	rbit	r2, r3
 8003e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e56:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f5c <HAL_RCC_OscConfig+0xf78>)
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e64:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e6c:	6011      	str	r1, [r2, #0]
 8003e6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e72:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	fa92 f1a2 	rbit	r1, r2
 8003e7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e80:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e84:	6011      	str	r1, [r2, #0]
  return result;
 8003e86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e8a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	fab2 f282 	clz	r2, r2
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	f042 0220 	orr.w	r2, r2, #32
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	f002 021f 	and.w	r2, r2, #31
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d082      	beq.n	8003db2 <HAL_RCC_OscConfig+0xdce>
 8003eac:	e0cf      	b.n	800404e <HAL_RCC_OscConfig+0x106a>
 8003eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003eb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	fa93 f2a3 	rbit	r2, r3
 8003eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ece:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ed2:	601a      	str	r2, [r3, #0]
  return result;
 8003ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003edc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ede:	fab3 f383 	clz	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ee8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fc8c 	bl	8001810 <HAL_GetTick>
 8003ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efc:	e009      	b.n	8003f12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efe:	f7fd fc87 	bl	8001810 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e09e      	b.n	8004050 <HAL_RCC_OscConfig+0x106c>
 8003f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f24:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	fa93 f2a3 	rbit	r2, r3
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f36:	601a      	str	r2, [r3, #0]
  return result;
 8003f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d104      	bne.n	8003f60 <HAL_RCC_OscConfig+0xf7c>
 8003f56:	4b01      	ldr	r3, [pc, #4]	@ (8003f5c <HAL_RCC_OscConfig+0xf78>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	e029      	b.n	8003fb0 <HAL_RCC_OscConfig+0xfcc>
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f64:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f80:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f98:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	fa93 f2a3 	rbit	r2, r3
 8003fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	4b2b      	ldr	r3, [pc, #172]	@ (800405c <HAL_RCC_OscConfig+0x1078>)
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fb4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003fb8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003fbc:	6011      	str	r1, [r2, #0]
 8003fbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fc2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	fa92 f1a2 	rbit	r1, r2
 8003fcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fd0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003fd4:	6011      	str	r1, [r2, #0]
  return result;
 8003fd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fda:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	fab2 f282 	clz	r2, r2
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	f042 0220 	orr.w	r2, r2, #32
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	f002 021f 	and.w	r2, r2, #31
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d180      	bne.n	8003efe <HAL_RCC_OscConfig+0xf1a>
 8003ffc:	e027      	b.n	800404e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004002:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e01e      	b.n	8004050 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004012:	4b12      	ldr	r3, [pc, #72]	@ (800405c <HAL_RCC_OscConfig+0x1078>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800401a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800401e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004026:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	429a      	cmp	r2, r3
 8004030:	d10b      	bne.n	800404a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004032:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004036:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800403a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004046:	429a      	cmp	r2, r3
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000

08004060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b09e      	sub	sp, #120	@ 0x78
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e162      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b90      	ldr	r3, [pc, #576]	@ (80042bc <HAL_RCC_ClockConfig+0x25c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d910      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b8d      	ldr	r3, [pc, #564]	@ (80042bc <HAL_RCC_ClockConfig+0x25c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	498b      	ldr	r1, [pc, #556]	@ (80042bc <HAL_RCC_ClockConfig+0x25c>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b89      	ldr	r3, [pc, #548]	@ (80042bc <HAL_RCC_ClockConfig+0x25c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e14a      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b82      	ldr	r3, [pc, #520]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	497f      	ldr	r1, [pc, #508]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80dc 	beq.w	800428c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d13c      	bne.n	8004156 <HAL_RCC_ClockConfig+0xf6>
 80040dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d102      	bne.n	8004106 <HAL_RCC_ClockConfig+0xa6>
 8004100:	4b6f      	ldr	r3, [pc, #444]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	e00f      	b.n	8004126 <HAL_RCC_ClockConfig+0xc6>
 8004106:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800410a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	667b      	str	r3, [r7, #100]	@ 0x64
 8004114:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004118:	663b      	str	r3, [r7, #96]	@ 0x60
 800411a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004122:	4b67      	ldr	r3, [pc, #412]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800412a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800412c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800412e:	fa92 f2a2 	rbit	r2, r2
 8004132:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004134:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004136:	fab2 f282 	clz	r2, r2
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	f042 0220 	orr.w	r2, r2, #32
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	f002 021f 	and.w	r2, r2, #31
 8004146:	2101      	movs	r1, #1
 8004148:	fa01 f202 	lsl.w	r2, r1, r2
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d17b      	bne.n	800424a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0f3      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d13c      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x178>
 800415e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004162:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800416c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_RCC_ClockConfig+0x128>
 8004182:	4b4f      	ldr	r3, [pc, #316]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e00f      	b.n	80041a8 <HAL_RCC_ClockConfig+0x148>
 8004188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
 8004196:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800419a:	643b      	str	r3, [r7, #64]	@ 0x40
 800419c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041a4:	4b46      	ldr	r3, [pc, #280]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041ac:	63ba      	str	r2, [r7, #56]	@ 0x38
 80041ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041b0:	fa92 f2a2 	rbit	r2, r2
 80041b4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80041b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041b8:	fab2 f282 	clz	r2, r2
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	f042 0220 	orr.w	r2, r2, #32
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	f002 021f 	and.w	r2, r2, #31
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f202 	lsl.w	r2, r1, r2
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d13a      	bne.n	800424a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0b2      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
 80041d8:	2302      	movs	r3, #2
 80041da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80041e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
 80041fa:	4b31      	ldr	r3, [pc, #196]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	e00d      	b.n	800421c <HAL_RCC_ClockConfig+0x1bc>
 8004200:	2302      	movs	r3, #2
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
 800420c:	2302      	movs	r3, #2
 800420e:	623b      	str	r3, [r7, #32]
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	2202      	movs	r2, #2
 800421e:	61ba      	str	r2, [r7, #24]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	fa92 f2a2 	rbit	r2, r2
 8004226:	617a      	str	r2, [r7, #20]
  return result;
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	fab2 f282 	clz	r2, r2
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	f042 0220 	orr.w	r2, r2, #32
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	f002 021f 	and.w	r2, r2, #31
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f202 	lsl.w	r2, r1, r2
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e079      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424a:	4b1d      	ldr	r3, [pc, #116]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	491a      	ldr	r1, [pc, #104]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800425c:	f7fd fad8 	bl	8001810 <HAL_GetTick>
 8004260:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fd fad4 	bl	8001810 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e061      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <HAL_RCC_ClockConfig+0x260>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 020c 	and.w	r2, r3, #12
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	429a      	cmp	r2, r3
 800428a:	d1eb      	bne.n	8004264 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <HAL_RCC_ClockConfig+0x25c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d214      	bcs.n	80042c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <HAL_RCC_ClockConfig+0x25c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 0207 	bic.w	r2, r3, #7
 80042a2:	4906      	ldr	r1, [pc, #24]	@ (80042bc <HAL_RCC_ClockConfig+0x25c>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <HAL_RCC_ClockConfig+0x25c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e040      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
 80042bc:	40022000 	.word	0x40022000
 80042c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	491a      	ldr	r1, [pc, #104]	@ (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ee:	4b16      	ldr	r3, [pc, #88]	@ (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4912      	ldr	r1, [pc, #72]	@ (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004302:	f000 f829 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004306:	4601      	mov	r1, r0
 8004308:	4b0f      	ldr	r3, [pc, #60]	@ (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004310:	22f0      	movs	r2, #240	@ 0xf0
 8004312:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	fa92 f2a2 	rbit	r2, r2
 800431a:	60fa      	str	r2, [r7, #12]
  return result;
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	fab2 f282 	clz	r2, r2
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	40d3      	lsrs	r3, r2
 8004326:	4a09      	ldr	r2, [pc, #36]	@ (800434c <HAL_RCC_ClockConfig+0x2ec>)
 8004328:	5cd3      	ldrb	r3, [r2, r3]
 800432a:	fa21 f303 	lsr.w	r3, r1, r3
 800432e:	4a08      	ldr	r2, [pc, #32]	@ (8004350 <HAL_RCC_ClockConfig+0x2f0>)
 8004330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004332:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <HAL_RCC_ClockConfig+0x2f4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fa26 	bl	8001788 <HAL_InitTick>
  
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3778      	adds	r7, #120	@ 0x78
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	08008aec 	.word	0x08008aec
 8004350:	2000000c 	.word	0x2000000c
 8004354:	20000010 	.word	0x20000010

08004358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b08b      	sub	sp, #44	@ 0x2c
 800435c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	2300      	movs	r3, #0
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004372:	4b29      	ldr	r3, [pc, #164]	@ (8004418 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d002      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x30>
 8004382:	2b08      	cmp	r3, #8
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x36>
 8004386:	e03c      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004388:	4b24      	ldr	r3, [pc, #144]	@ (800441c <HAL_RCC_GetSysClockFreq+0xc4>)
 800438a:	623b      	str	r3, [r7, #32]
      break;
 800438c:	e03c      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004394:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004398:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	fa92 f2a2 	rbit	r2, r2
 80043a0:	607a      	str	r2, [r7, #4]
  return result;
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	fab2 f282 	clz	r2, r2
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	40d3      	lsrs	r3, r2
 80043ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004420 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043b2:	4b19      	ldr	r3, [pc, #100]	@ (8004418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	220f      	movs	r2, #15
 80043bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	fa92 f2a2 	rbit	r2, r2
 80043c4:	60fa      	str	r2, [r7, #12]
  return result;
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	fab2 f282 	clz	r2, r2
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	40d3      	lsrs	r3, r2
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xcc>)
 80043d2:	5cd3      	ldrb	r3, [r2, r3]
 80043d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043e0:	4a0e      	ldr	r2, [pc, #56]	@ (800441c <HAL_RCC_GetSysClockFreq+0xc4>)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f0:	e004      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	623b      	str	r3, [r7, #32]
      break;
 8004400:	e002      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004404:	623b      	str	r3, [r7, #32]
      break;
 8004406:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004408:	6a3b      	ldr	r3, [r7, #32]
}
 800440a:	4618      	mov	r0, r3
 800440c:	372c      	adds	r7, #44	@ 0x2c
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	007a1200 	.word	0x007a1200
 8004420:	08008b04 	.word	0x08008b04
 8004424:	08008b14 	.word	0x08008b14
 8004428:	003d0900 	.word	0x003d0900

0800442c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_RCC_GetHCLKFreq+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	2000000c 	.word	0x2000000c

08004444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800444a:	f7ff ffef 	bl	800442c <HAL_RCC_GetHCLKFreq>
 800444e:	4601      	mov	r1, r0
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004458:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800445c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	fa92 f2a2 	rbit	r2, r2
 8004464:	603a      	str	r2, [r7, #0]
  return result;
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	fab2 f282 	clz	r2, r2
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	40d3      	lsrs	r3, r2
 8004470:	4a04      	ldr	r2, [pc, #16]	@ (8004484 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004472:	5cd3      	ldrb	r3, [r2, r3]
 8004474:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	08008afc 	.word	0x08008afc

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800448e:	f7ff ffcd 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004492:	4601      	mov	r1, r0
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800449c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80044a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	fa92 f2a2 	rbit	r2, r2
 80044a8:	603a      	str	r2, [r7, #0]
  return result;
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	fab2 f282 	clz	r2, r2
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	40d3      	lsrs	r3, r2
 80044b4:	4a04      	ldr	r2, [pc, #16]	@ (80044c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	08008afc 	.word	0x08008afc

080044cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b092      	sub	sp, #72	@ 0x48
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80cd 	beq.w	800468a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f0:	4b86      	ldr	r3, [pc, #536]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10e      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fc:	4b83      	ldr	r3, [pc, #524]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	4a82      	ldr	r2, [pc, #520]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004506:	61d3      	str	r3, [r2, #28]
 8004508:	4b80      	ldr	r3, [pc, #512]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b7d      	ldr	r3, [pc, #500]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004526:	4b7a      	ldr	r3, [pc, #488]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a79      	ldr	r2, [pc, #484]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004530:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fd f96d 	bl	8001810 <HAL_GetTick>
 8004536:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fd f969 	bl	8001810 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	@ 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0db      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b70      	ldr	r3, [pc, #448]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004558:	4b6c      	ldr	r3, [pc, #432]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004560:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d07d      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004570:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004572:	429a      	cmp	r2, r3
 8004574:	d076      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004576:	4b65      	ldr	r3, [pc, #404]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004580:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004584:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	4b5e      	ldr	r3, [pc, #376]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	461a      	mov	r2, r3
 80045a0:	2301      	movs	r3, #1
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80045b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b4:	fab3 f383 	clz	r3, r3
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b55      	ldr	r3, [pc, #340]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	461a      	mov	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045c8:	4a50      	ldr	r2, [pc, #320]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d045      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fd f91a 	bl	8001810 <HAL_GetTick>
 80045dc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045de:	e00a      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e0:	f7fd f916 	bl	8001810 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e086      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80045f6:	2302      	movs	r3, #2
 80045f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	fa93 f3a3 	rbit	r3, r3
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24
 8004602:	2302      	movs	r3, #2
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	61fb      	str	r3, [r7, #28]
  return result;
 800460e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f043 0302 	orr.w	r3, r3, #2
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d102      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004624:	4b39      	ldr	r3, [pc, #228]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	e007      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800462a:	2302      	movs	r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	4b35      	ldr	r3, [pc, #212]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	2202      	movs	r2, #2
 800463c:	613a      	str	r2, [r7, #16]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	60fa      	str	r2, [r7, #12]
  return result;
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	f002 021f 	and.w	r2, r2, #31
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f202 	lsl.w	r2, r1, r2
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0bd      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004664:	4b29      	ldr	r3, [pc, #164]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4926      	ldr	r1, [pc, #152]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004672:	4313      	orrs	r3, r2
 8004674:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004676:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800467a:	2b01      	cmp	r3, #1
 800467c:	d105      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467e:	4b23      	ldr	r3, [pc, #140]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	4a22      	ldr	r2, [pc, #136]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004688:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004696:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	491a      	ldr	r1, [pc, #104]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b4:	4b15      	ldr	r3, [pc, #84]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b8:	f023 0210 	bic.w	r2, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4912      	ldr	r1, [pc, #72]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046d2:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	490b      	ldr	r1, [pc, #44]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	4903      	ldr	r1, [pc, #12]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3748      	adds	r7, #72	@ 0x48
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	40007000 	.word	0x40007000
 8004714:	10908100 	.word	0x10908100

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e049      	b.n	80047be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fe40 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fb60 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e049      	b.n	800486c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f841 	bl	8004874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f000 fb09 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_TIM_PWM_Start+0x24>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e03c      	b.n	8004926 <HAL_TIM_PWM_Start+0x9e>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d109      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x3e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	e02f      	b.n	8004926 <HAL_TIM_PWM_Start+0x9e>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d109      	bne.n	80048e0 <HAL_TIM_PWM_Start+0x58>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e022      	b.n	8004926 <HAL_TIM_PWM_Start+0x9e>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	d109      	bne.n	80048fa <HAL_TIM_PWM_Start+0x72>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	e015      	b.n	8004926 <HAL_TIM_PWM_Start+0x9e>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d109      	bne.n	8004914 <HAL_TIM_PWM_Start+0x8c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e008      	b.n	8004926 <HAL_TIM_PWM_Start+0x9e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e088      	b.n	8004a40 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d104      	bne.n	800493e <HAL_TIM_PWM_Start+0xb6>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800493c:	e023      	b.n	8004986 <HAL_TIM_PWM_Start+0xfe>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Start+0xc6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800494c:	e01b      	b.n	8004986 <HAL_TIM_PWM_Start+0xfe>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start+0xd6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800495c:	e013      	b.n	8004986 <HAL_TIM_PWM_Start+0xfe>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b0c      	cmp	r3, #12
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Start+0xe6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800496c:	e00b      	b.n	8004986 <HAL_TIM_PWM_Start+0xfe>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b10      	cmp	r3, #16
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Start+0xf6>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800497c:	e003      	b.n	8004986 <HAL_TIM_PWM_Start+0xfe>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fdfc 	bl	800558c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2b      	ldr	r2, [pc, #172]	@ (8004a48 <HAL_TIM_PWM_Start+0x1c0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_TIM_PWM_Start+0x134>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a4c <HAL_TIM_PWM_Start+0x1c4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_TIM_PWM_Start+0x134>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a28      	ldr	r2, [pc, #160]	@ (8004a50 <HAL_TIM_PWM_Start+0x1c8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_TIM_PWM_Start+0x134>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a27      	ldr	r2, [pc, #156]	@ (8004a54 <HAL_TIM_PWM_Start+0x1cc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d101      	bne.n	80049c0 <HAL_TIM_PWM_Start+0x138>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_TIM_PWM_Start+0x13a>
 80049c0:	2300      	movs	r3, #0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1b      	ldr	r2, [pc, #108]	@ (8004a48 <HAL_TIM_PWM_Start+0x1c0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIM_PWM_Start+0x176>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e8:	d009      	beq.n	80049fe <HAL_TIM_PWM_Start+0x176>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004a58 <HAL_TIM_PWM_Start+0x1d0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIM_PWM_Start+0x176>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <HAL_TIM_PWM_Start+0x1c4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d115      	bne.n	8004a2a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	4b15      	ldr	r3, [pc, #84]	@ (8004a5c <HAL_TIM_PWM_Start+0x1d4>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b06      	cmp	r3, #6
 8004a0e:	d015      	beq.n	8004a3c <HAL_TIM_PWM_Start+0x1b4>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a16:	d011      	beq.n	8004a3c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a28:	e008      	b.n	8004a3c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e000      	b.n	8004a3e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	00010007 	.word	0x00010007

08004a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e0ff      	b.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b14      	cmp	r3, #20
 8004a8a:	f200 80f0 	bhi.w	8004c6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004ae9 	.word	0x08004ae9
 8004a98:	08004c6f 	.word	0x08004c6f
 8004a9c:	08004c6f 	.word	0x08004c6f
 8004aa0:	08004c6f 	.word	0x08004c6f
 8004aa4:	08004b29 	.word	0x08004b29
 8004aa8:	08004c6f 	.word	0x08004c6f
 8004aac:	08004c6f 	.word	0x08004c6f
 8004ab0:	08004c6f 	.word	0x08004c6f
 8004ab4:	08004b6b 	.word	0x08004b6b
 8004ab8:	08004c6f 	.word	0x08004c6f
 8004abc:	08004c6f 	.word	0x08004c6f
 8004ac0:	08004c6f 	.word	0x08004c6f
 8004ac4:	08004bab 	.word	0x08004bab
 8004ac8:	08004c6f 	.word	0x08004c6f
 8004acc:	08004c6f 	.word	0x08004c6f
 8004ad0:	08004c6f 	.word	0x08004c6f
 8004ad4:	08004bed 	.word	0x08004bed
 8004ad8:	08004c6f 	.word	0x08004c6f
 8004adc:	08004c6f 	.word	0x08004c6f
 8004ae0:	08004c6f 	.word	0x08004c6f
 8004ae4:	08004c2d 	.word	0x08004c2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fa0c 	bl	8004f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	619a      	str	r2, [r3, #24]
      break;
 8004b26:	e0a5      	b.n	8004c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fa72 	bl	8005018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6999      	ldr	r1, [r3, #24]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	619a      	str	r2, [r3, #24]
      break;
 8004b68:	e084      	b.n	8004c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fad1 	bl	8005118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0208 	orr.w	r2, r2, #8
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0204 	bic.w	r2, r2, #4
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
      break;
 8004ba8:	e064      	b.n	8004c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fb2f 	bl	8005214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	61da      	str	r2, [r3, #28]
      break;
 8004bea:	e043      	b.n	8004c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fb72 	bl	80052dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0208 	orr.w	r2, r2, #8
 8004c06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0204 	bic.w	r2, r2, #4
 8004c16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c2a:	e023      	b.n	8004c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fbb0 	bl	8005398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c6c:	e002      	b.n	8004c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
      break;
 8004c72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop

08004c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0b6      	b.n	8004e12 <HAL_TIM_ConfigClockSource+0x18a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce0:	d03e      	beq.n	8004d60 <HAL_TIM_ConfigClockSource+0xd8>
 8004ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce6:	f200 8087 	bhi.w	8004df8 <HAL_TIM_ConfigClockSource+0x170>
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cee:	f000 8086 	beq.w	8004dfe <HAL_TIM_ConfigClockSource+0x176>
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf6:	d87f      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x170>
 8004cf8:	2b70      	cmp	r3, #112	@ 0x70
 8004cfa:	d01a      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xaa>
 8004cfc:	2b70      	cmp	r3, #112	@ 0x70
 8004cfe:	d87b      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x170>
 8004d00:	2b60      	cmp	r3, #96	@ 0x60
 8004d02:	d050      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x11e>
 8004d04:	2b60      	cmp	r3, #96	@ 0x60
 8004d06:	d877      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x170>
 8004d08:	2b50      	cmp	r3, #80	@ 0x50
 8004d0a:	d03c      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0xfe>
 8004d0c:	2b50      	cmp	r3, #80	@ 0x50
 8004d0e:	d873      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x170>
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d058      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x13e>
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d86f      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x170>
 8004d18:	2b30      	cmp	r3, #48	@ 0x30
 8004d1a:	d064      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15e>
 8004d1c:	2b30      	cmp	r3, #48	@ 0x30
 8004d1e:	d86b      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x170>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d060      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15e>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d867      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x170>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d05c      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15e>
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d05a      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15e>
 8004d30:	e062      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d42:	f000 fc03 	bl	800554c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	609a      	str	r2, [r3, #8]
      break;
 8004d5e:	e04f      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d70:	f000 fbec 	bl	800554c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d82:	609a      	str	r2, [r3, #8]
      break;
 8004d84:	e03c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	461a      	mov	r2, r3
 8004d94:	f000 fb60 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2150      	movs	r1, #80	@ 0x50
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fbb9 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8004da4:	e02c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 fb7f 	bl	80054b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2160      	movs	r1, #96	@ 0x60
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fba9 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e01c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 fb40 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2140      	movs	r1, #64	@ 0x40
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fb99 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8004de4:	e00c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f000 fb90 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8004df6:	e003      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfc:	e000      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ef8 <TIM_Base_SetConfig+0xdc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x28>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x28>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004efc <TIM_Base_SetConfig+0xe0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a27      	ldr	r2, [pc, #156]	@ (8004ef8 <TIM_Base_SetConfig+0xdc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <TIM_Base_SetConfig+0x6a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e64:	d00f      	beq.n	8004e86 <TIM_Base_SetConfig+0x6a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a24      	ldr	r2, [pc, #144]	@ (8004efc <TIM_Base_SetConfig+0xe0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_Base_SetConfig+0x6a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a23      	ldr	r2, [pc, #140]	@ (8004f00 <TIM_Base_SetConfig+0xe4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0x6a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a22      	ldr	r2, [pc, #136]	@ (8004f04 <TIM_Base_SetConfig+0xe8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0x6a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a21      	ldr	r2, [pc, #132]	@ (8004f08 <TIM_Base_SetConfig+0xec>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef8 <TIM_Base_SetConfig+0xdc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <TIM_Base_SetConfig+0xc0>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8004f00 <TIM_Base_SetConfig+0xe4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <TIM_Base_SetConfig+0xc0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0d      	ldr	r2, [pc, #52]	@ (8004f04 <TIM_Base_SetConfig+0xe8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_Base_SetConfig+0xc0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8004f08 <TIM_Base_SetConfig+0xec>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d103      	bne.n	8004ee4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	615a      	str	r2, [r3, #20]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40000400 	.word	0x40000400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800

08004f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	f023 0201 	bic.w	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0302 	bic.w	r3, r3, #2
 8004f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a28      	ldr	r2, [pc, #160]	@ (8005008 <TIM_OC1_SetConfig+0xfc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_OC1_SetConfig+0x78>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a27      	ldr	r2, [pc, #156]	@ (800500c <TIM_OC1_SetConfig+0x100>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_OC1_SetConfig+0x78>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a26      	ldr	r2, [pc, #152]	@ (8005010 <TIM_OC1_SetConfig+0x104>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_OC1_SetConfig+0x78>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a25      	ldr	r2, [pc, #148]	@ (8005014 <TIM_OC1_SetConfig+0x108>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d10c      	bne.n	8004f9e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f023 0308 	bic.w	r3, r3, #8
 8004f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f023 0304 	bic.w	r3, r3, #4
 8004f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <TIM_OC1_SetConfig+0xfc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00b      	beq.n	8004fbe <TIM_OC1_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a18      	ldr	r2, [pc, #96]	@ (800500c <TIM_OC1_SetConfig+0x100>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_OC1_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a17      	ldr	r2, [pc, #92]	@ (8005010 <TIM_OC1_SetConfig+0x104>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_OC1_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	@ (8005014 <TIM_OC1_SetConfig+0x108>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d111      	bne.n	8004fe2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	621a      	str	r2, [r3, #32]
}
 8004ffc:	bf00      	nop
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40014000 	.word	0x40014000
 8005010:	40014400 	.word	0x40014400
 8005014:	40014800 	.word	0x40014800

08005018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f023 0210 	bic.w	r2, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a24      	ldr	r2, [pc, #144]	@ (8005108 <TIM_OC2_SetConfig+0xf0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10d      	bne.n	8005098 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <TIM_OC2_SetConfig+0xf0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_OC2_SetConfig+0xa0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a1a      	ldr	r2, [pc, #104]	@ (800510c <TIM_OC2_SetConfig+0xf4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_OC2_SetConfig+0xa0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a19      	ldr	r2, [pc, #100]	@ (8005110 <TIM_OC2_SetConfig+0xf8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC2_SetConfig+0xa0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a18      	ldr	r2, [pc, #96]	@ (8005114 <TIM_OC2_SetConfig+0xfc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d113      	bne.n	80050e0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050be:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050c6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40014000 	.word	0x40014000
 8005110:	40014400 	.word	0x40014400
 8005114:	40014800 	.word	0x40014800

08005118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a23      	ldr	r2, [pc, #140]	@ (8005204 <TIM_OC3_SetConfig+0xec>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10d      	bne.n	8005196 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005194:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <TIM_OC3_SetConfig+0xec>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_OC3_SetConfig+0x9e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <TIM_OC3_SetConfig+0xf0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_OC3_SetConfig+0x9e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a18      	ldr	r2, [pc, #96]	@ (800520c <TIM_OC3_SetConfig+0xf4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC3_SetConfig+0x9e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <TIM_OC3_SetConfig+0xf8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d113      	bne.n	80051de <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800

08005214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a16      	ldr	r2, [pc, #88]	@ (80052cc <TIM_OC4_SetConfig+0xb8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00b      	beq.n	8005290 <TIM_OC4_SetConfig+0x7c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a15      	ldr	r2, [pc, #84]	@ (80052d0 <TIM_OC4_SetConfig+0xbc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_OC4_SetConfig+0x7c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a14      	ldr	r2, [pc, #80]	@ (80052d4 <TIM_OC4_SetConfig+0xc0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_OC4_SetConfig+0x7c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a13      	ldr	r2, [pc, #76]	@ (80052d8 <TIM_OC4_SetConfig+0xc4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d109      	bne.n	80052a4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	019b      	lsls	r3, r3, #6
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400
 80052d8:	40014800 	.word	0x40014800

080052dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800530a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005320:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	041b      	lsls	r3, r3, #16
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	@ (8005388 <TIM_OC5_SetConfig+0xac>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00b      	beq.n	800534e <TIM_OC5_SetConfig+0x72>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a14      	ldr	r2, [pc, #80]	@ (800538c <TIM_OC5_SetConfig+0xb0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <TIM_OC5_SetConfig+0x72>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a13      	ldr	r2, [pc, #76]	@ (8005390 <TIM_OC5_SetConfig+0xb4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_OC5_SetConfig+0x72>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a12      	ldr	r2, [pc, #72]	@ (8005394 <TIM_OC5_SetConfig+0xb8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d109      	bne.n	8005362 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005354:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40014000 	.word	0x40014000
 8005390:	40014400 	.word	0x40014400
 8005394:	40014800 	.word	0x40014800

08005398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	051b      	lsls	r3, r3, #20
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <TIM_OC6_SetConfig+0xb0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00b      	beq.n	800540c <TIM_OC6_SetConfig+0x74>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a15      	ldr	r2, [pc, #84]	@ (800544c <TIM_OC6_SetConfig+0xb4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_OC6_SetConfig+0x74>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <TIM_OC6_SetConfig+0xb8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_OC6_SetConfig+0x74>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <TIM_OC6_SetConfig+0xbc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d109      	bne.n	8005420 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005412:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	029b      	lsls	r3, r3, #10
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0201 	bic.w	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 030a 	bic.w	r3, r3, #10
 8005494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b087      	sub	sp, #28
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f023 0210 	bic.w	r2, r3, #16
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	031b      	lsls	r3, r3, #12
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	f043 0307 	orr.w	r3, r3, #7
 8005538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	021a      	lsls	r2, r3, #8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	431a      	orrs	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	bf00      	nop
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	2201      	movs	r2, #1
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1a      	ldr	r2, [r3, #32]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	401a      	ands	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_TIMEx_PWMN_Start+0x24>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e022      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0x6a>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d109      	bne.n	8005616 <HAL_TIMEx_PWMN_Start+0x3e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b01      	cmp	r3, #1
 800560c:	bf14      	ite	ne
 800560e:	2301      	movne	r3, #1
 8005610:	2300      	moveq	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	e015      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0x6a>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d109      	bne.n	8005630 <HAL_TIMEx_PWMN_Start+0x58>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e008      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0x6a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e05f      	b.n	800570a <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <HAL_TIMEx_PWMN_Start+0x82>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005658:	e013      	b.n	8005682 <HAL_TIMEx_PWMN_Start+0xaa>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d104      	bne.n	800566a <HAL_TIMEx_PWMN_Start+0x92>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005668:	e00b      	b.n	8005682 <HAL_TIMEx_PWMN_Start+0xaa>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d104      	bne.n	800567a <HAL_TIMEx_PWMN_Start+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005678:	e003      	b.n	8005682 <HAL_TIMEx_PWMN_Start+0xaa>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2204      	movs	r2, #4
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f930 	bl	80058f0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800569e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005714 <HAL_TIMEx_PWMN_Start+0x13c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <HAL_TIMEx_PWMN_Start+0xf0>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b2:	d009      	beq.n	80056c8 <HAL_TIMEx_PWMN_Start+0xf0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a17      	ldr	r2, [pc, #92]	@ (8005718 <HAL_TIMEx_PWMN_Start+0x140>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_TIMEx_PWMN_Start+0xf0>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a16      	ldr	r2, [pc, #88]	@ (800571c <HAL_TIMEx_PWMN_Start+0x144>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d115      	bne.n	80056f4 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <HAL_TIMEx_PWMN_Start+0x148>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b06      	cmp	r3, #6
 80056d8:	d015      	beq.n	8005706 <HAL_TIMEx_PWMN_Start+0x12e>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e0:	d011      	beq.n	8005706 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	e008      	b.n	8005706 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e000      	b.n	8005708 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40000400 	.word	0x40000400
 800571c:	40014000 	.word	0x40014000
 8005720:	00010007 	.word	0x00010007

08005724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005738:	2302      	movs	r3, #2
 800573a:	e054      	b.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a24      	ldr	r2, [pc, #144]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d108      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800576c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a17      	ldr	r2, [pc, #92]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a4:	d009      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a13      	ldr	r2, [pc, #76]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a11      	ldr	r2, [pc, #68]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10c      	bne.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40014000 	.word	0x40014000

08005800 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005818:	2302      	movs	r3, #2
 800581a:	e060      	b.n	80058de <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d115      	bne.n	80058cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	051b      	lsls	r3, r3, #20
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00

080058f0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2204      	movs	r2, #4
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e040      	b.n	80059ce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7fb fd89 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2224      	movs	r2, #36	@ 0x24
 8005966:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f8b5 	bl	8005ae8 <UART_SetConfig>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e022      	b.n	80059ce <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f9df 	bl	8005d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fa66 	bl	8005e98 <UART_CheckIdleState>
 80059cc:	4603      	mov	r3, r0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b08a      	sub	sp, #40	@ 0x28
 80059da:	af02      	add	r7, sp, #8
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d177      	bne.n	8005ade <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_UART_Transmit+0x24>
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e070      	b.n	8005ae0 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2221      	movs	r2, #33	@ 0x21
 8005a0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a0c:	f7fb ff00 	bl	8001810 <HAL_GetTick>
 8005a10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2a:	d108      	bne.n	8005a3e <HAL_UART_Transmit+0x68>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	e003      	b.n	8005a46 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a46:	e02f      	b.n	8005aa8 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2180      	movs	r1, #128	@ 0x80
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fac8 	bl	8005fe8 <UART_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e03b      	b.n	8005ae0 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	3302      	adds	r3, #2
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	e007      	b.n	8005a96 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	781a      	ldrb	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	3301      	adds	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1c9      	bne.n	8005a48 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2200      	movs	r2, #0
 8005abc:	2140      	movs	r1, #64	@ 0x40
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fa92 	bl	8005fe8 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e005      	b.n	8005ae0 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b8a      	ldr	r3, [pc, #552]	@ (8005d3c <UART_SetConfig+0x254>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	6979      	ldr	r1, [r7, #20]
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a78      	ldr	r2, [pc, #480]	@ (8005d40 <UART_SetConfig+0x258>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d120      	bne.n	8005ba6 <UART_SetConfig+0xbe>
 8005b64:	4b77      	ldr	r3, [pc, #476]	@ (8005d44 <UART_SetConfig+0x25c>)
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d817      	bhi.n	8005ba0 <UART_SetConfig+0xb8>
 8005b70:	a201      	add	r2, pc, #4	@ (adr r2, 8005b78 <UART_SetConfig+0x90>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005b95 	.word	0x08005b95
 8005b80:	08005b9b 	.word	0x08005b9b
 8005b84:	08005b8f 	.word	0x08005b8f
 8005b88:	2300      	movs	r3, #0
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e01d      	b.n	8005bca <UART_SetConfig+0xe2>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e01a      	b.n	8005bca <UART_SetConfig+0xe2>
 8005b94:	2304      	movs	r3, #4
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e017      	b.n	8005bca <UART_SetConfig+0xe2>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e014      	b.n	8005bca <UART_SetConfig+0xe2>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e011      	b.n	8005bca <UART_SetConfig+0xe2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a67      	ldr	r2, [pc, #412]	@ (8005d48 <UART_SetConfig+0x260>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d102      	bne.n	8005bb6 <UART_SetConfig+0xce>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e009      	b.n	8005bca <UART_SetConfig+0xe2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a64      	ldr	r2, [pc, #400]	@ (8005d4c <UART_SetConfig+0x264>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d102      	bne.n	8005bc6 <UART_SetConfig+0xde>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e001      	b.n	8005bca <UART_SetConfig+0xe2>
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd2:	d15a      	bne.n	8005c8a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005bd4:	7ffb      	ldrb	r3, [r7, #31]
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d827      	bhi.n	8005c2a <UART_SetConfig+0x142>
 8005bda:	a201      	add	r2, pc, #4	@ (adr r2, 8005be0 <UART_SetConfig+0xf8>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c2b 	.word	0x08005c2b
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c2b 	.word	0x08005c2b
 8005bf8:	08005c2b 	.word	0x08005c2b
 8005bfc:	08005c2b 	.word	0x08005c2b
 8005c00:	08005c23 	.word	0x08005c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fe fc1e 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005c08:	61b8      	str	r0, [r7, #24]
        break;
 8005c0a:	e013      	b.n	8005c34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0c:	f7fe fc3c 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8005c10:	61b8      	str	r0, [r7, #24]
        break;
 8005c12:	e00f      	b.n	8005c34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c14:	4b4e      	ldr	r3, [pc, #312]	@ (8005d50 <UART_SetConfig+0x268>)
 8005c16:	61bb      	str	r3, [r7, #24]
        break;
 8005c18:	e00c      	b.n	8005c34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7fe fb9d 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8005c1e:	61b8      	str	r0, [r7, #24]
        break;
 8005c20:	e008      	b.n	8005c34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c26:	61bb      	str	r3, [r7, #24]
        break;
 8005c28:	e004      	b.n	8005c34 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	77bb      	strb	r3, [r7, #30]
        break;
 8005c32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d074      	beq.n	8005d24 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	005a      	lsls	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	441a      	add	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	d916      	bls.n	8005c84 <UART_SetConfig+0x19c>
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c5c:	d212      	bcs.n	8005c84 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f023 030f 	bic.w	r3, r3, #15
 8005c66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	89fb      	ldrh	r3, [r7, #14]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	89fa      	ldrh	r2, [r7, #14]
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	e04f      	b.n	8005d24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	77bb      	strb	r3, [r7, #30]
 8005c88:	e04c      	b.n	8005d24 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c8a:	7ffb      	ldrb	r3, [r7, #31]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d828      	bhi.n	8005ce2 <UART_SetConfig+0x1fa>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <UART_SetConfig+0x1b0>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	08005ce3 	.word	0x08005ce3
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005ce3 	.word	0x08005ce3
 8005cb0:	08005ce3 	.word	0x08005ce3
 8005cb4:	08005ce3 	.word	0x08005ce3
 8005cb8:	08005cdb 	.word	0x08005cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cbc:	f7fe fbc2 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005cc0:	61b8      	str	r0, [r7, #24]
        break;
 8005cc2:	e013      	b.n	8005cec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc4:	f7fe fbe0 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8005cc8:	61b8      	str	r0, [r7, #24]
        break;
 8005cca:	e00f      	b.n	8005cec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ccc:	4b20      	ldr	r3, [pc, #128]	@ (8005d50 <UART_SetConfig+0x268>)
 8005cce:	61bb      	str	r3, [r7, #24]
        break;
 8005cd0:	e00c      	b.n	8005cec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd2:	f7fe fb41 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8005cd6:	61b8      	str	r0, [r7, #24]
        break;
 8005cd8:	e008      	b.n	8005cec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cde:	61bb      	str	r3, [r7, #24]
        break;
 8005ce0:	e004      	b.n	8005cec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cea:	bf00      	nop
    }

    if (pclk != 0U)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	085a      	lsrs	r2, r3, #1
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	441a      	add	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b0f      	cmp	r3, #15
 8005d0a:	d909      	bls.n	8005d20 <UART_SetConfig+0x238>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d12:	d205      	bcs.n	8005d20 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	e001      	b.n	8005d24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d30:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	efff69f3 	.word	0xefff69f3
 8005d40:	40013800 	.word	0x40013800
 8005d44:	40021000 	.word	0x40021000
 8005d48:	40004400 	.word	0x40004400
 8005d4c:	40004800 	.word	0x40004800
 8005d50:	007a1200 	.word	0x007a1200

08005d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e52:	d10a      	bne.n	8005e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b098      	sub	sp, #96	@ 0x60
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ea8:	f7fb fcb2 	bl	8001810 <HAL_GetTick>
 8005eac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d12e      	bne.n	8005f1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ebc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f88c 	bl	8005fe8 <UART_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d021      	beq.n	8005f1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ef6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005efa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e6      	bne.n	8005ed6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e062      	b.n	8005fe0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d149      	bne.n	8005fbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f30:	2200      	movs	r2, #0
 8005f32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f856 	bl	8005fe8 <UART_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d03c      	beq.n	8005fbc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e6      	bne.n	8005f42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3308      	adds	r3, #8
 8005f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f94:	61fa      	str	r2, [r7, #28]
 8005f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	69b9      	ldr	r1, [r7, #24]
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e5      	bne.n	8005f74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e011      	b.n	8005fe0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3758      	adds	r7, #88	@ 0x58
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff8:	e049      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006000:	d045      	beq.n	800608e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006002:	f7fb fc05 	bl	8001810 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	429a      	cmp	r2, r3
 8006010:	d302      	bcc.n	8006018 <UART_WaitOnFlagUntilTimeout+0x30>
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e048      	b.n	80060ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d031      	beq.n	800608e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b08      	cmp	r3, #8
 8006036:	d110      	bne.n	800605a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2208      	movs	r2, #8
 800603e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f838 	bl	80060b6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2208      	movs	r2, #8
 800604a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e029      	b.n	80060ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006068:	d111      	bne.n	800608e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006072:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f81e 	bl	80060b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e00f      	b.n	80060ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4013      	ands	r3, r2
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	429a      	cmp	r2, r3
 800609c:	bf0c      	ite	eq
 800609e:	2301      	moveq	r3, #1
 80060a0:	2300      	movne	r3, #0
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d0a6      	beq.n	8005ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b095      	sub	sp, #84	@ 0x54
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80060de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e6      	bne.n	80060be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f023 0301 	bic.w	r3, r3, #1
 8006106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006110:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006112:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e5      	bne.n	80060f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006128:	2b01      	cmp	r3, #1
 800612a:	d118      	bne.n	800615e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	60bb      	str	r3, [r7, #8]
   return(result);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f023 0310 	bic.w	r3, r3, #16
 8006140:	647b      	str	r3, [r7, #68]	@ 0x44
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6979      	ldr	r1, [r7, #20]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	613b      	str	r3, [r7, #16]
   return(result);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e6      	bne.n	800612c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006172:	bf00      	nop
 8006174:	3754      	adds	r7, #84	@ 0x54
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <__cvt>:
 800617e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006182:	ec57 6b10 	vmov	r6, r7, d0
 8006186:	2f00      	cmp	r7, #0
 8006188:	460c      	mov	r4, r1
 800618a:	4619      	mov	r1, r3
 800618c:	463b      	mov	r3, r7
 800618e:	bfbb      	ittet	lt
 8006190:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006194:	461f      	movlt	r7, r3
 8006196:	2300      	movge	r3, #0
 8006198:	232d      	movlt	r3, #45	@ 0x2d
 800619a:	700b      	strb	r3, [r1, #0]
 800619c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800619e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061a2:	4691      	mov	r9, r2
 80061a4:	f023 0820 	bic.w	r8, r3, #32
 80061a8:	bfbc      	itt	lt
 80061aa:	4632      	movlt	r2, r6
 80061ac:	4616      	movlt	r6, r2
 80061ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061b2:	d005      	beq.n	80061c0 <__cvt+0x42>
 80061b4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061b8:	d100      	bne.n	80061bc <__cvt+0x3e>
 80061ba:	3401      	adds	r4, #1
 80061bc:	2102      	movs	r1, #2
 80061be:	e000      	b.n	80061c2 <__cvt+0x44>
 80061c0:	2103      	movs	r1, #3
 80061c2:	ab03      	add	r3, sp, #12
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	ab02      	add	r3, sp, #8
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	ec47 6b10 	vmov	d0, r6, r7
 80061ce:	4653      	mov	r3, sl
 80061d0:	4622      	mov	r2, r4
 80061d2:	f000 fe4d 	bl	8006e70 <_dtoa_r>
 80061d6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80061da:	4605      	mov	r5, r0
 80061dc:	d119      	bne.n	8006212 <__cvt+0x94>
 80061de:	f019 0f01 	tst.w	r9, #1
 80061e2:	d00e      	beq.n	8006202 <__cvt+0x84>
 80061e4:	eb00 0904 	add.w	r9, r0, r4
 80061e8:	2200      	movs	r2, #0
 80061ea:	2300      	movs	r3, #0
 80061ec:	4630      	mov	r0, r6
 80061ee:	4639      	mov	r1, r7
 80061f0:	f7fa fc6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80061f4:	b108      	cbz	r0, 80061fa <__cvt+0x7c>
 80061f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80061fa:	2230      	movs	r2, #48	@ 0x30
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	454b      	cmp	r3, r9
 8006200:	d31e      	bcc.n	8006240 <__cvt+0xc2>
 8006202:	9b03      	ldr	r3, [sp, #12]
 8006204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006206:	1b5b      	subs	r3, r3, r5
 8006208:	4628      	mov	r0, r5
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	b004      	add	sp, #16
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006216:	eb00 0904 	add.w	r9, r0, r4
 800621a:	d1e5      	bne.n	80061e8 <__cvt+0x6a>
 800621c:	7803      	ldrb	r3, [r0, #0]
 800621e:	2b30      	cmp	r3, #48	@ 0x30
 8006220:	d10a      	bne.n	8006238 <__cvt+0xba>
 8006222:	2200      	movs	r2, #0
 8006224:	2300      	movs	r3, #0
 8006226:	4630      	mov	r0, r6
 8006228:	4639      	mov	r1, r7
 800622a:	f7fa fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800622e:	b918      	cbnz	r0, 8006238 <__cvt+0xba>
 8006230:	f1c4 0401 	rsb	r4, r4, #1
 8006234:	f8ca 4000 	str.w	r4, [sl]
 8006238:	f8da 3000 	ldr.w	r3, [sl]
 800623c:	4499      	add	r9, r3
 800623e:	e7d3      	b.n	80061e8 <__cvt+0x6a>
 8006240:	1c59      	adds	r1, r3, #1
 8006242:	9103      	str	r1, [sp, #12]
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e7d9      	b.n	80061fc <__cvt+0x7e>

08006248 <__exponent>:
 8006248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800624a:	2900      	cmp	r1, #0
 800624c:	bfba      	itte	lt
 800624e:	4249      	neglt	r1, r1
 8006250:	232d      	movlt	r3, #45	@ 0x2d
 8006252:	232b      	movge	r3, #43	@ 0x2b
 8006254:	2909      	cmp	r1, #9
 8006256:	7002      	strb	r2, [r0, #0]
 8006258:	7043      	strb	r3, [r0, #1]
 800625a:	dd29      	ble.n	80062b0 <__exponent+0x68>
 800625c:	f10d 0307 	add.w	r3, sp, #7
 8006260:	461d      	mov	r5, r3
 8006262:	270a      	movs	r7, #10
 8006264:	461a      	mov	r2, r3
 8006266:	fbb1 f6f7 	udiv	r6, r1, r7
 800626a:	fb07 1416 	mls	r4, r7, r6, r1
 800626e:	3430      	adds	r4, #48	@ 0x30
 8006270:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006274:	460c      	mov	r4, r1
 8006276:	2c63      	cmp	r4, #99	@ 0x63
 8006278:	f103 33ff 	add.w	r3, r3, #4294967295
 800627c:	4631      	mov	r1, r6
 800627e:	dcf1      	bgt.n	8006264 <__exponent+0x1c>
 8006280:	3130      	adds	r1, #48	@ 0x30
 8006282:	1e94      	subs	r4, r2, #2
 8006284:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006288:	1c41      	adds	r1, r0, #1
 800628a:	4623      	mov	r3, r4
 800628c:	42ab      	cmp	r3, r5
 800628e:	d30a      	bcc.n	80062a6 <__exponent+0x5e>
 8006290:	f10d 0309 	add.w	r3, sp, #9
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	42ac      	cmp	r4, r5
 8006298:	bf88      	it	hi
 800629a:	2300      	movhi	r3, #0
 800629c:	3302      	adds	r3, #2
 800629e:	4403      	add	r3, r0
 80062a0:	1a18      	subs	r0, r3, r0
 80062a2:	b003      	add	sp, #12
 80062a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062ae:	e7ed      	b.n	800628c <__exponent+0x44>
 80062b0:	2330      	movs	r3, #48	@ 0x30
 80062b2:	3130      	adds	r1, #48	@ 0x30
 80062b4:	7083      	strb	r3, [r0, #2]
 80062b6:	70c1      	strb	r1, [r0, #3]
 80062b8:	1d03      	adds	r3, r0, #4
 80062ba:	e7f1      	b.n	80062a0 <__exponent+0x58>

080062bc <_printf_float>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	b08d      	sub	sp, #52	@ 0x34
 80062c2:	460c      	mov	r4, r1
 80062c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80062c8:	4616      	mov	r6, r2
 80062ca:	461f      	mov	r7, r3
 80062cc:	4605      	mov	r5, r0
 80062ce:	f000 fccd 	bl	8006c6c <_localeconv_r>
 80062d2:	6803      	ldr	r3, [r0, #0]
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7f9 ffca 	bl	8000270 <strlen>
 80062dc:	2300      	movs	r3, #0
 80062de:	930a      	str	r3, [sp, #40]	@ 0x28
 80062e0:	f8d8 3000 	ldr.w	r3, [r8]
 80062e4:	9005      	str	r0, [sp, #20]
 80062e6:	3307      	adds	r3, #7
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	f103 0208 	add.w	r2, r3, #8
 80062f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062f4:	f8d4 b000 	ldr.w	fp, [r4]
 80062f8:	f8c8 2000 	str.w	r2, [r8]
 80062fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006300:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006304:	9307      	str	r3, [sp, #28]
 8006306:	f8cd 8018 	str.w	r8, [sp, #24]
 800630a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800630e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006312:	4b9c      	ldr	r3, [pc, #624]	@ (8006584 <_printf_float+0x2c8>)
 8006314:	f04f 32ff 	mov.w	r2, #4294967295
 8006318:	f7fa fc08 	bl	8000b2c <__aeabi_dcmpun>
 800631c:	bb70      	cbnz	r0, 800637c <_printf_float+0xc0>
 800631e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006322:	4b98      	ldr	r3, [pc, #608]	@ (8006584 <_printf_float+0x2c8>)
 8006324:	f04f 32ff 	mov.w	r2, #4294967295
 8006328:	f7fa fbe2 	bl	8000af0 <__aeabi_dcmple>
 800632c:	bb30      	cbnz	r0, 800637c <_printf_float+0xc0>
 800632e:	2200      	movs	r2, #0
 8006330:	2300      	movs	r3, #0
 8006332:	4640      	mov	r0, r8
 8006334:	4649      	mov	r1, r9
 8006336:	f7fa fbd1 	bl	8000adc <__aeabi_dcmplt>
 800633a:	b110      	cbz	r0, 8006342 <_printf_float+0x86>
 800633c:	232d      	movs	r3, #45	@ 0x2d
 800633e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006342:	4a91      	ldr	r2, [pc, #580]	@ (8006588 <_printf_float+0x2cc>)
 8006344:	4b91      	ldr	r3, [pc, #580]	@ (800658c <_printf_float+0x2d0>)
 8006346:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800634a:	bf94      	ite	ls
 800634c:	4690      	movls	r8, r2
 800634e:	4698      	movhi	r8, r3
 8006350:	2303      	movs	r3, #3
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	f02b 0304 	bic.w	r3, fp, #4
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	f04f 0900 	mov.w	r9, #0
 800635e:	9700      	str	r7, [sp, #0]
 8006360:	4633      	mov	r3, r6
 8006362:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f9d2 	bl	8006710 <_printf_common>
 800636c:	3001      	adds	r0, #1
 800636e:	f040 808d 	bne.w	800648c <_printf_float+0x1d0>
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	b00d      	add	sp, #52	@ 0x34
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7fa fbd2 	bl	8000b2c <__aeabi_dcmpun>
 8006388:	b140      	cbz	r0, 800639c <_printf_float+0xe0>
 800638a:	464b      	mov	r3, r9
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfbc      	itt	lt
 8006390:	232d      	movlt	r3, #45	@ 0x2d
 8006392:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006396:	4a7e      	ldr	r2, [pc, #504]	@ (8006590 <_printf_float+0x2d4>)
 8006398:	4b7e      	ldr	r3, [pc, #504]	@ (8006594 <_printf_float+0x2d8>)
 800639a:	e7d4      	b.n	8006346 <_printf_float+0x8a>
 800639c:	6863      	ldr	r3, [r4, #4]
 800639e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063a2:	9206      	str	r2, [sp, #24]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	d13b      	bne.n	8006420 <_printf_float+0x164>
 80063a8:	2306      	movs	r3, #6
 80063aa:	6063      	str	r3, [r4, #4]
 80063ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80063b0:	2300      	movs	r3, #0
 80063b2:	6022      	str	r2, [r4, #0]
 80063b4:	9303      	str	r3, [sp, #12]
 80063b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80063b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80063bc:	ab09      	add	r3, sp, #36	@ 0x24
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	ec49 8b10 	vmov	d0, r8, r9
 80063c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80063ca:	4628      	mov	r0, r5
 80063cc:	f7ff fed7 	bl	800617e <__cvt>
 80063d0:	9b06      	ldr	r3, [sp, #24]
 80063d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063d4:	2b47      	cmp	r3, #71	@ 0x47
 80063d6:	4680      	mov	r8, r0
 80063d8:	d129      	bne.n	800642e <_printf_float+0x172>
 80063da:	1cc8      	adds	r0, r1, #3
 80063dc:	db02      	blt.n	80063e4 <_printf_float+0x128>
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	4299      	cmp	r1, r3
 80063e2:	dd41      	ble.n	8006468 <_printf_float+0x1ac>
 80063e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80063e8:	fa5f fa8a 	uxtb.w	sl, sl
 80063ec:	3901      	subs	r1, #1
 80063ee:	4652      	mov	r2, sl
 80063f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80063f6:	f7ff ff27 	bl	8006248 <__exponent>
 80063fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063fc:	1813      	adds	r3, r2, r0
 80063fe:	2a01      	cmp	r2, #1
 8006400:	4681      	mov	r9, r0
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	dc02      	bgt.n	800640c <_printf_float+0x150>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	07d2      	lsls	r2, r2, #31
 800640a:	d501      	bpl.n	8006410 <_printf_float+0x154>
 800640c:	3301      	adds	r3, #1
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0a2      	beq.n	800635e <_printf_float+0xa2>
 8006418:	232d      	movs	r3, #45	@ 0x2d
 800641a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800641e:	e79e      	b.n	800635e <_printf_float+0xa2>
 8006420:	9a06      	ldr	r2, [sp, #24]
 8006422:	2a47      	cmp	r2, #71	@ 0x47
 8006424:	d1c2      	bne.n	80063ac <_printf_float+0xf0>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1c0      	bne.n	80063ac <_printf_float+0xf0>
 800642a:	2301      	movs	r3, #1
 800642c:	e7bd      	b.n	80063aa <_printf_float+0xee>
 800642e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006432:	d9db      	bls.n	80063ec <_printf_float+0x130>
 8006434:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006438:	d118      	bne.n	800646c <_printf_float+0x1b0>
 800643a:	2900      	cmp	r1, #0
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	dd0b      	ble.n	8006458 <_printf_float+0x19c>
 8006440:	6121      	str	r1, [r4, #16]
 8006442:	b913      	cbnz	r3, 800644a <_printf_float+0x18e>
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	07d0      	lsls	r0, r2, #31
 8006448:	d502      	bpl.n	8006450 <_printf_float+0x194>
 800644a:	3301      	adds	r3, #1
 800644c:	440b      	add	r3, r1
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006452:	f04f 0900 	mov.w	r9, #0
 8006456:	e7db      	b.n	8006410 <_printf_float+0x154>
 8006458:	b913      	cbnz	r3, 8006460 <_printf_float+0x1a4>
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	07d2      	lsls	r2, r2, #31
 800645e:	d501      	bpl.n	8006464 <_printf_float+0x1a8>
 8006460:	3302      	adds	r3, #2
 8006462:	e7f4      	b.n	800644e <_printf_float+0x192>
 8006464:	2301      	movs	r3, #1
 8006466:	e7f2      	b.n	800644e <_printf_float+0x192>
 8006468:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800646c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800646e:	4299      	cmp	r1, r3
 8006470:	db05      	blt.n	800647e <_printf_float+0x1c2>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	6121      	str	r1, [r4, #16]
 8006476:	07d8      	lsls	r0, r3, #31
 8006478:	d5ea      	bpl.n	8006450 <_printf_float+0x194>
 800647a:	1c4b      	adds	r3, r1, #1
 800647c:	e7e7      	b.n	800644e <_printf_float+0x192>
 800647e:	2900      	cmp	r1, #0
 8006480:	bfd4      	ite	le
 8006482:	f1c1 0202 	rsble	r2, r1, #2
 8006486:	2201      	movgt	r2, #1
 8006488:	4413      	add	r3, r2
 800648a:	e7e0      	b.n	800644e <_printf_float+0x192>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	055a      	lsls	r2, r3, #21
 8006490:	d407      	bmi.n	80064a2 <_printf_float+0x1e6>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	4642      	mov	r2, r8
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d12b      	bne.n	80064f8 <_printf_float+0x23c>
 80064a0:	e767      	b.n	8006372 <_printf_float+0xb6>
 80064a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064a6:	f240 80dd 	bls.w	8006664 <_printf_float+0x3a8>
 80064aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	f7fa fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d033      	beq.n	8006522 <_printf_float+0x266>
 80064ba:	4a37      	ldr	r2, [pc, #220]	@ (8006598 <_printf_float+0x2dc>)
 80064bc:	2301      	movs	r3, #1
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	f43f af54 	beq.w	8006372 <_printf_float+0xb6>
 80064ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80064ce:	4543      	cmp	r3, r8
 80064d0:	db02      	blt.n	80064d8 <_printf_float+0x21c>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	07d8      	lsls	r0, r3, #31
 80064d6:	d50f      	bpl.n	80064f8 <_printf_float+0x23c>
 80064d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af45 	beq.w	8006372 <_printf_float+0xb6>
 80064e8:	f04f 0900 	mov.w	r9, #0
 80064ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80064f0:	f104 0a1a 	add.w	sl, r4, #26
 80064f4:	45c8      	cmp	r8, r9
 80064f6:	dc09      	bgt.n	800650c <_printf_float+0x250>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	079b      	lsls	r3, r3, #30
 80064fc:	f100 8103 	bmi.w	8006706 <_printf_float+0x44a>
 8006500:	68e0      	ldr	r0, [r4, #12]
 8006502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006504:	4298      	cmp	r0, r3
 8006506:	bfb8      	it	lt
 8006508:	4618      	movlt	r0, r3
 800650a:	e734      	b.n	8006376 <_printf_float+0xba>
 800650c:	2301      	movs	r3, #1
 800650e:	4652      	mov	r2, sl
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af2b 	beq.w	8006372 <_printf_float+0xb6>
 800651c:	f109 0901 	add.w	r9, r9, #1
 8006520:	e7e8      	b.n	80064f4 <_printf_float+0x238>
 8006522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	dc39      	bgt.n	800659c <_printf_float+0x2e0>
 8006528:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <_printf_float+0x2dc>)
 800652a:	2301      	movs	r3, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f af1d 	beq.w	8006372 <_printf_float+0xb6>
 8006538:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800653c:	ea59 0303 	orrs.w	r3, r9, r3
 8006540:	d102      	bne.n	8006548 <_printf_float+0x28c>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	07d9      	lsls	r1, r3, #31
 8006546:	d5d7      	bpl.n	80064f8 <_printf_float+0x23c>
 8006548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af0d 	beq.w	8006372 <_printf_float+0xb6>
 8006558:	f04f 0a00 	mov.w	sl, #0
 800655c:	f104 0b1a 	add.w	fp, r4, #26
 8006560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006562:	425b      	negs	r3, r3
 8006564:	4553      	cmp	r3, sl
 8006566:	dc01      	bgt.n	800656c <_printf_float+0x2b0>
 8006568:	464b      	mov	r3, r9
 800656a:	e793      	b.n	8006494 <_printf_float+0x1d8>
 800656c:	2301      	movs	r3, #1
 800656e:	465a      	mov	r2, fp
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f aefb 	beq.w	8006372 <_printf_float+0xb6>
 800657c:	f10a 0a01 	add.w	sl, sl, #1
 8006580:	e7ee      	b.n	8006560 <_printf_float+0x2a4>
 8006582:	bf00      	nop
 8006584:	7fefffff 	.word	0x7fefffff
 8006588:	08008b24 	.word	0x08008b24
 800658c:	08008b28 	.word	0x08008b28
 8006590:	08008b2c 	.word	0x08008b2c
 8006594:	08008b30 	.word	0x08008b30
 8006598:	08008b34 	.word	0x08008b34
 800659c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800659e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065a2:	4553      	cmp	r3, sl
 80065a4:	bfa8      	it	ge
 80065a6:	4653      	movge	r3, sl
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	4699      	mov	r9, r3
 80065ac:	dc36      	bgt.n	800661c <_printf_float+0x360>
 80065ae:	f04f 0b00 	mov.w	fp, #0
 80065b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b6:	f104 021a 	add.w	r2, r4, #26
 80065ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065bc:	9306      	str	r3, [sp, #24]
 80065be:	eba3 0309 	sub.w	r3, r3, r9
 80065c2:	455b      	cmp	r3, fp
 80065c4:	dc31      	bgt.n	800662a <_printf_float+0x36e>
 80065c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c8:	459a      	cmp	sl, r3
 80065ca:	dc3a      	bgt.n	8006642 <_printf_float+0x386>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07da      	lsls	r2, r3, #31
 80065d0:	d437      	bmi.n	8006642 <_printf_float+0x386>
 80065d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d4:	ebaa 0903 	sub.w	r9, sl, r3
 80065d8:	9b06      	ldr	r3, [sp, #24]
 80065da:	ebaa 0303 	sub.w	r3, sl, r3
 80065de:	4599      	cmp	r9, r3
 80065e0:	bfa8      	it	ge
 80065e2:	4699      	movge	r9, r3
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	dc33      	bgt.n	8006652 <_printf_float+0x396>
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065f2:	f104 0b1a 	add.w	fp, r4, #26
 80065f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f8:	ebaa 0303 	sub.w	r3, sl, r3
 80065fc:	eba3 0309 	sub.w	r3, r3, r9
 8006600:	4543      	cmp	r3, r8
 8006602:	f77f af79 	ble.w	80064f8 <_printf_float+0x23c>
 8006606:	2301      	movs	r3, #1
 8006608:	465a      	mov	r2, fp
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f aeae 	beq.w	8006372 <_printf_float+0xb6>
 8006616:	f108 0801 	add.w	r8, r8, #1
 800661a:	e7ec      	b.n	80065f6 <_printf_float+0x33a>
 800661c:	4642      	mov	r2, r8
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	d1c2      	bne.n	80065ae <_printf_float+0x2f2>
 8006628:	e6a3      	b.n	8006372 <_printf_float+0xb6>
 800662a:	2301      	movs	r3, #1
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	9206      	str	r2, [sp, #24]
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae9c 	beq.w	8006372 <_printf_float+0xb6>
 800663a:	9a06      	ldr	r2, [sp, #24]
 800663c:	f10b 0b01 	add.w	fp, fp, #1
 8006640:	e7bb      	b.n	80065ba <_printf_float+0x2fe>
 8006642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	d1c0      	bne.n	80065d2 <_printf_float+0x316>
 8006650:	e68f      	b.n	8006372 <_printf_float+0xb6>
 8006652:	9a06      	ldr	r2, [sp, #24]
 8006654:	464b      	mov	r3, r9
 8006656:	4442      	add	r2, r8
 8006658:	4631      	mov	r1, r6
 800665a:	4628      	mov	r0, r5
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	d1c3      	bne.n	80065ea <_printf_float+0x32e>
 8006662:	e686      	b.n	8006372 <_printf_float+0xb6>
 8006664:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006668:	f1ba 0f01 	cmp.w	sl, #1
 800666c:	dc01      	bgt.n	8006672 <_printf_float+0x3b6>
 800666e:	07db      	lsls	r3, r3, #31
 8006670:	d536      	bpl.n	80066e0 <_printf_float+0x424>
 8006672:	2301      	movs	r3, #1
 8006674:	4642      	mov	r2, r8
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	f43f ae78 	beq.w	8006372 <_printf_float+0xb6>
 8006682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae70 	beq.w	8006372 <_printf_float+0xb6>
 8006692:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006696:	2200      	movs	r2, #0
 8006698:	2300      	movs	r3, #0
 800669a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800669e:	f7fa fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a2:	b9c0      	cbnz	r0, 80066d6 <_printf_float+0x41a>
 80066a4:	4653      	mov	r3, sl
 80066a6:	f108 0201 	add.w	r2, r8, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	d10c      	bne.n	80066ce <_printf_float+0x412>
 80066b4:	e65d      	b.n	8006372 <_printf_float+0xb6>
 80066b6:	2301      	movs	r3, #1
 80066b8:	465a      	mov	r2, fp
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f ae56 	beq.w	8006372 <_printf_float+0xb6>
 80066c6:	f108 0801 	add.w	r8, r8, #1
 80066ca:	45d0      	cmp	r8, sl
 80066cc:	dbf3      	blt.n	80066b6 <_printf_float+0x3fa>
 80066ce:	464b      	mov	r3, r9
 80066d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066d4:	e6df      	b.n	8006496 <_printf_float+0x1da>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	f104 0b1a 	add.w	fp, r4, #26
 80066de:	e7f4      	b.n	80066ca <_printf_float+0x40e>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4642      	mov	r2, r8
 80066e4:	e7e1      	b.n	80066aa <_printf_float+0x3ee>
 80066e6:	2301      	movs	r3, #1
 80066e8:	464a      	mov	r2, r9
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f ae3e 	beq.w	8006372 <_printf_float+0xb6>
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	4543      	cmp	r3, r8
 8006702:	dcf0      	bgt.n	80066e6 <_printf_float+0x42a>
 8006704:	e6fc      	b.n	8006500 <_printf_float+0x244>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	f104 0919 	add.w	r9, r4, #25
 800670e:	e7f4      	b.n	80066fa <_printf_float+0x43e>

08006710 <_printf_common>:
 8006710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	4616      	mov	r6, r2
 8006716:	4698      	mov	r8, r3
 8006718:	688a      	ldr	r2, [r1, #8]
 800671a:	690b      	ldr	r3, [r1, #16]
 800671c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006720:	4293      	cmp	r3, r2
 8006722:	bfb8      	it	lt
 8006724:	4613      	movlt	r3, r2
 8006726:	6033      	str	r3, [r6, #0]
 8006728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800672c:	4607      	mov	r7, r0
 800672e:	460c      	mov	r4, r1
 8006730:	b10a      	cbz	r2, 8006736 <_printf_common+0x26>
 8006732:	3301      	adds	r3, #1
 8006734:	6033      	str	r3, [r6, #0]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	0699      	lsls	r1, r3, #26
 800673a:	bf42      	ittt	mi
 800673c:	6833      	ldrmi	r3, [r6, #0]
 800673e:	3302      	addmi	r3, #2
 8006740:	6033      	strmi	r3, [r6, #0]
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	f015 0506 	ands.w	r5, r5, #6
 8006748:	d106      	bne.n	8006758 <_printf_common+0x48>
 800674a:	f104 0a19 	add.w	sl, r4, #25
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	6832      	ldr	r2, [r6, #0]
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	42ab      	cmp	r3, r5
 8006756:	dc26      	bgt.n	80067a6 <_printf_common+0x96>
 8006758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	3b00      	subs	r3, #0
 8006760:	bf18      	it	ne
 8006762:	2301      	movne	r3, #1
 8006764:	0692      	lsls	r2, r2, #26
 8006766:	d42b      	bmi.n	80067c0 <_printf_common+0xb0>
 8006768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800676c:	4641      	mov	r1, r8
 800676e:	4638      	mov	r0, r7
 8006770:	47c8      	blx	r9
 8006772:	3001      	adds	r0, #1
 8006774:	d01e      	beq.n	80067b4 <_printf_common+0xa4>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	f003 0306 	and.w	r3, r3, #6
 800677e:	2b04      	cmp	r3, #4
 8006780:	bf02      	ittt	eq
 8006782:	68e5      	ldreq	r5, [r4, #12]
 8006784:	6833      	ldreq	r3, [r6, #0]
 8006786:	1aed      	subeq	r5, r5, r3
 8006788:	68a3      	ldr	r3, [r4, #8]
 800678a:	bf0c      	ite	eq
 800678c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006790:	2500      	movne	r5, #0
 8006792:	4293      	cmp	r3, r2
 8006794:	bfc4      	itt	gt
 8006796:	1a9b      	subgt	r3, r3, r2
 8006798:	18ed      	addgt	r5, r5, r3
 800679a:	2600      	movs	r6, #0
 800679c:	341a      	adds	r4, #26
 800679e:	42b5      	cmp	r5, r6
 80067a0:	d11a      	bne.n	80067d8 <_printf_common+0xc8>
 80067a2:	2000      	movs	r0, #0
 80067a4:	e008      	b.n	80067b8 <_printf_common+0xa8>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4652      	mov	r2, sl
 80067aa:	4641      	mov	r1, r8
 80067ac:	4638      	mov	r0, r7
 80067ae:	47c8      	blx	r9
 80067b0:	3001      	adds	r0, #1
 80067b2:	d103      	bne.n	80067bc <_printf_common+0xac>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067bc:	3501      	adds	r5, #1
 80067be:	e7c6      	b.n	800674e <_printf_common+0x3e>
 80067c0:	18e1      	adds	r1, r4, r3
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	2030      	movs	r0, #48	@ 0x30
 80067c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067ca:	4422      	add	r2, r4
 80067cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067d4:	3302      	adds	r3, #2
 80067d6:	e7c7      	b.n	8006768 <_printf_common+0x58>
 80067d8:	2301      	movs	r3, #1
 80067da:	4622      	mov	r2, r4
 80067dc:	4641      	mov	r1, r8
 80067de:	4638      	mov	r0, r7
 80067e0:	47c8      	blx	r9
 80067e2:	3001      	adds	r0, #1
 80067e4:	d0e6      	beq.n	80067b4 <_printf_common+0xa4>
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7d9      	b.n	800679e <_printf_common+0x8e>
	...

080067ec <_printf_i>:
 80067ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	7e0f      	ldrb	r7, [r1, #24]
 80067f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067f4:	2f78      	cmp	r7, #120	@ 0x78
 80067f6:	4691      	mov	r9, r2
 80067f8:	4680      	mov	r8, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	469a      	mov	sl, r3
 80067fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006802:	d807      	bhi.n	8006814 <_printf_i+0x28>
 8006804:	2f62      	cmp	r7, #98	@ 0x62
 8006806:	d80a      	bhi.n	800681e <_printf_i+0x32>
 8006808:	2f00      	cmp	r7, #0
 800680a:	f000 80d2 	beq.w	80069b2 <_printf_i+0x1c6>
 800680e:	2f58      	cmp	r7, #88	@ 0x58
 8006810:	f000 80b9 	beq.w	8006986 <_printf_i+0x19a>
 8006814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800681c:	e03a      	b.n	8006894 <_printf_i+0xa8>
 800681e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006822:	2b15      	cmp	r3, #21
 8006824:	d8f6      	bhi.n	8006814 <_printf_i+0x28>
 8006826:	a101      	add	r1, pc, #4	@ (adr r1, 800682c <_printf_i+0x40>)
 8006828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800682c:	08006885 	.word	0x08006885
 8006830:	08006899 	.word	0x08006899
 8006834:	08006815 	.word	0x08006815
 8006838:	08006815 	.word	0x08006815
 800683c:	08006815 	.word	0x08006815
 8006840:	08006815 	.word	0x08006815
 8006844:	08006899 	.word	0x08006899
 8006848:	08006815 	.word	0x08006815
 800684c:	08006815 	.word	0x08006815
 8006850:	08006815 	.word	0x08006815
 8006854:	08006815 	.word	0x08006815
 8006858:	08006999 	.word	0x08006999
 800685c:	080068c3 	.word	0x080068c3
 8006860:	08006953 	.word	0x08006953
 8006864:	08006815 	.word	0x08006815
 8006868:	08006815 	.word	0x08006815
 800686c:	080069bb 	.word	0x080069bb
 8006870:	08006815 	.word	0x08006815
 8006874:	080068c3 	.word	0x080068c3
 8006878:	08006815 	.word	0x08006815
 800687c:	08006815 	.word	0x08006815
 8006880:	0800695b 	.word	0x0800695b
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6032      	str	r2, [r6, #0]
 800688c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006894:	2301      	movs	r3, #1
 8006896:	e09d      	b.n	80069d4 <_printf_i+0x1e8>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	6820      	ldr	r0, [r4, #0]
 800689c:	1d19      	adds	r1, r3, #4
 800689e:	6031      	str	r1, [r6, #0]
 80068a0:	0606      	lsls	r6, r0, #24
 80068a2:	d501      	bpl.n	80068a8 <_printf_i+0xbc>
 80068a4:	681d      	ldr	r5, [r3, #0]
 80068a6:	e003      	b.n	80068b0 <_printf_i+0xc4>
 80068a8:	0645      	lsls	r5, r0, #25
 80068aa:	d5fb      	bpl.n	80068a4 <_printf_i+0xb8>
 80068ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	da03      	bge.n	80068bc <_printf_i+0xd0>
 80068b4:	232d      	movs	r3, #45	@ 0x2d
 80068b6:	426d      	negs	r5, r5
 80068b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068bc:	4859      	ldr	r0, [pc, #356]	@ (8006a24 <_printf_i+0x238>)
 80068be:	230a      	movs	r3, #10
 80068c0:	e011      	b.n	80068e6 <_printf_i+0xfa>
 80068c2:	6821      	ldr	r1, [r4, #0]
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	0608      	lsls	r0, r1, #24
 80068c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068cc:	d402      	bmi.n	80068d4 <_printf_i+0xe8>
 80068ce:	0649      	lsls	r1, r1, #25
 80068d0:	bf48      	it	mi
 80068d2:	b2ad      	uxthmi	r5, r5
 80068d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068d6:	4853      	ldr	r0, [pc, #332]	@ (8006a24 <_printf_i+0x238>)
 80068d8:	6033      	str	r3, [r6, #0]
 80068da:	bf14      	ite	ne
 80068dc:	230a      	movne	r3, #10
 80068de:	2308      	moveq	r3, #8
 80068e0:	2100      	movs	r1, #0
 80068e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068e6:	6866      	ldr	r6, [r4, #4]
 80068e8:	60a6      	str	r6, [r4, #8]
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	bfa2      	ittt	ge
 80068ee:	6821      	ldrge	r1, [r4, #0]
 80068f0:	f021 0104 	bicge.w	r1, r1, #4
 80068f4:	6021      	strge	r1, [r4, #0]
 80068f6:	b90d      	cbnz	r5, 80068fc <_printf_i+0x110>
 80068f8:	2e00      	cmp	r6, #0
 80068fa:	d04b      	beq.n	8006994 <_printf_i+0x1a8>
 80068fc:	4616      	mov	r6, r2
 80068fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006902:	fb03 5711 	mls	r7, r3, r1, r5
 8006906:	5dc7      	ldrb	r7, [r0, r7]
 8006908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800690c:	462f      	mov	r7, r5
 800690e:	42bb      	cmp	r3, r7
 8006910:	460d      	mov	r5, r1
 8006912:	d9f4      	bls.n	80068fe <_printf_i+0x112>
 8006914:	2b08      	cmp	r3, #8
 8006916:	d10b      	bne.n	8006930 <_printf_i+0x144>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	07df      	lsls	r7, r3, #31
 800691c:	d508      	bpl.n	8006930 <_printf_i+0x144>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	6861      	ldr	r1, [r4, #4]
 8006922:	4299      	cmp	r1, r3
 8006924:	bfde      	ittt	le
 8006926:	2330      	movle	r3, #48	@ 0x30
 8006928:	f806 3c01 	strble.w	r3, [r6, #-1]
 800692c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006930:	1b92      	subs	r2, r2, r6
 8006932:	6122      	str	r2, [r4, #16]
 8006934:	f8cd a000 	str.w	sl, [sp]
 8006938:	464b      	mov	r3, r9
 800693a:	aa03      	add	r2, sp, #12
 800693c:	4621      	mov	r1, r4
 800693e:	4640      	mov	r0, r8
 8006940:	f7ff fee6 	bl	8006710 <_printf_common>
 8006944:	3001      	adds	r0, #1
 8006946:	d14a      	bne.n	80069de <_printf_i+0x1f2>
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	b004      	add	sp, #16
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f043 0320 	orr.w	r3, r3, #32
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	4833      	ldr	r0, [pc, #204]	@ (8006a28 <_printf_i+0x23c>)
 800695c:	2778      	movs	r7, #120	@ 0x78
 800695e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	6831      	ldr	r1, [r6, #0]
 8006966:	061f      	lsls	r7, r3, #24
 8006968:	f851 5b04 	ldr.w	r5, [r1], #4
 800696c:	d402      	bmi.n	8006974 <_printf_i+0x188>
 800696e:	065f      	lsls	r7, r3, #25
 8006970:	bf48      	it	mi
 8006972:	b2ad      	uxthmi	r5, r5
 8006974:	6031      	str	r1, [r6, #0]
 8006976:	07d9      	lsls	r1, r3, #31
 8006978:	bf44      	itt	mi
 800697a:	f043 0320 	orrmi.w	r3, r3, #32
 800697e:	6023      	strmi	r3, [r4, #0]
 8006980:	b11d      	cbz	r5, 800698a <_printf_i+0x19e>
 8006982:	2310      	movs	r3, #16
 8006984:	e7ac      	b.n	80068e0 <_printf_i+0xf4>
 8006986:	4827      	ldr	r0, [pc, #156]	@ (8006a24 <_printf_i+0x238>)
 8006988:	e7e9      	b.n	800695e <_printf_i+0x172>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	f023 0320 	bic.w	r3, r3, #32
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	e7f6      	b.n	8006982 <_printf_i+0x196>
 8006994:	4616      	mov	r6, r2
 8006996:	e7bd      	b.n	8006914 <_printf_i+0x128>
 8006998:	6833      	ldr	r3, [r6, #0]
 800699a:	6825      	ldr	r5, [r4, #0]
 800699c:	6961      	ldr	r1, [r4, #20]
 800699e:	1d18      	adds	r0, r3, #4
 80069a0:	6030      	str	r0, [r6, #0]
 80069a2:	062e      	lsls	r6, r5, #24
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	d501      	bpl.n	80069ac <_printf_i+0x1c0>
 80069a8:	6019      	str	r1, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <_printf_i+0x1c6>
 80069ac:	0668      	lsls	r0, r5, #25
 80069ae:	d5fb      	bpl.n	80069a8 <_printf_i+0x1bc>
 80069b0:	8019      	strh	r1, [r3, #0]
 80069b2:	2300      	movs	r3, #0
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	4616      	mov	r6, r2
 80069b8:	e7bc      	b.n	8006934 <_printf_i+0x148>
 80069ba:	6833      	ldr	r3, [r6, #0]
 80069bc:	1d1a      	adds	r2, r3, #4
 80069be:	6032      	str	r2, [r6, #0]
 80069c0:	681e      	ldr	r6, [r3, #0]
 80069c2:	6862      	ldr	r2, [r4, #4]
 80069c4:	2100      	movs	r1, #0
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7f9 fc02 	bl	80001d0 <memchr>
 80069cc:	b108      	cbz	r0, 80069d2 <_printf_i+0x1e6>
 80069ce:	1b80      	subs	r0, r0, r6
 80069d0:	6060      	str	r0, [r4, #4]
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	2300      	movs	r3, #0
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069dc:	e7aa      	b.n	8006934 <_printf_i+0x148>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	4632      	mov	r2, r6
 80069e2:	4649      	mov	r1, r9
 80069e4:	4640      	mov	r0, r8
 80069e6:	47d0      	blx	sl
 80069e8:	3001      	adds	r0, #1
 80069ea:	d0ad      	beq.n	8006948 <_printf_i+0x15c>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	079b      	lsls	r3, r3, #30
 80069f0:	d413      	bmi.n	8006a1a <_printf_i+0x22e>
 80069f2:	68e0      	ldr	r0, [r4, #12]
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	4298      	cmp	r0, r3
 80069f8:	bfb8      	it	lt
 80069fa:	4618      	movlt	r0, r3
 80069fc:	e7a6      	b.n	800694c <_printf_i+0x160>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4632      	mov	r2, r6
 8006a02:	4649      	mov	r1, r9
 8006a04:	4640      	mov	r0, r8
 8006a06:	47d0      	blx	sl
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d09d      	beq.n	8006948 <_printf_i+0x15c>
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	9903      	ldr	r1, [sp, #12]
 8006a12:	1a5b      	subs	r3, r3, r1
 8006a14:	42ab      	cmp	r3, r5
 8006a16:	dcf2      	bgt.n	80069fe <_printf_i+0x212>
 8006a18:	e7eb      	b.n	80069f2 <_printf_i+0x206>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	f104 0619 	add.w	r6, r4, #25
 8006a20:	e7f5      	b.n	8006a0e <_printf_i+0x222>
 8006a22:	bf00      	nop
 8006a24:	08008b36 	.word	0x08008b36
 8006a28:	08008b47 	.word	0x08008b47

08006a2c <std>:
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	b510      	push	{r4, lr}
 8006a30:	4604      	mov	r4, r0
 8006a32:	e9c0 3300 	strd	r3, r3, [r0]
 8006a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a3a:	6083      	str	r3, [r0, #8]
 8006a3c:	8181      	strh	r1, [r0, #12]
 8006a3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a40:	81c2      	strh	r2, [r0, #14]
 8006a42:	6183      	str	r3, [r0, #24]
 8006a44:	4619      	mov	r1, r3
 8006a46:	2208      	movs	r2, #8
 8006a48:	305c      	adds	r0, #92	@ 0x5c
 8006a4a:	f000 f906 	bl	8006c5a <memset>
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <std+0x58>)
 8006a50:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <std+0x5c>)
 8006a54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <std+0x60>)
 8006a58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x64>)
 8006a5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x68>)
 8006a60:	6224      	str	r4, [r4, #32]
 8006a62:	429c      	cmp	r4, r3
 8006a64:	d006      	beq.n	8006a74 <std+0x48>
 8006a66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a6a:	4294      	cmp	r4, r2
 8006a6c:	d002      	beq.n	8006a74 <std+0x48>
 8006a6e:	33d0      	adds	r3, #208	@ 0xd0
 8006a70:	429c      	cmp	r4, r3
 8006a72:	d105      	bne.n	8006a80 <std+0x54>
 8006a74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7c:	f000 b96a 	b.w	8006d54 <__retarget_lock_init_recursive>
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	08006bd5 	.word	0x08006bd5
 8006a88:	08006bf7 	.word	0x08006bf7
 8006a8c:	08006c2f 	.word	0x08006c2f
 8006a90:	08006c53 	.word	0x08006c53
 8006a94:	20000380 	.word	0x20000380

08006a98 <stdio_exit_handler>:
 8006a98:	4a02      	ldr	r2, [pc, #8]	@ (8006aa4 <stdio_exit_handler+0xc>)
 8006a9a:	4903      	ldr	r1, [pc, #12]	@ (8006aa8 <stdio_exit_handler+0x10>)
 8006a9c:	4803      	ldr	r0, [pc, #12]	@ (8006aac <stdio_exit_handler+0x14>)
 8006a9e:	f000 b869 	b.w	8006b74 <_fwalk_sglue>
 8006aa2:	bf00      	nop
 8006aa4:	20000018 	.word	0x20000018
 8006aa8:	08008689 	.word	0x08008689
 8006aac:	20000028 	.word	0x20000028

08006ab0 <cleanup_stdio>:
 8006ab0:	6841      	ldr	r1, [r0, #4]
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <cleanup_stdio+0x34>)
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	d001      	beq.n	8006ac0 <cleanup_stdio+0x10>
 8006abc:	f001 fde4 	bl	8008688 <_fflush_r>
 8006ac0:	68a1      	ldr	r1, [r4, #8]
 8006ac2:	4b09      	ldr	r3, [pc, #36]	@ (8006ae8 <cleanup_stdio+0x38>)
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	d002      	beq.n	8006ace <cleanup_stdio+0x1e>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f001 fddd 	bl	8008688 <_fflush_r>
 8006ace:	68e1      	ldr	r1, [r4, #12]
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <cleanup_stdio+0x3c>)
 8006ad2:	4299      	cmp	r1, r3
 8006ad4:	d004      	beq.n	8006ae0 <cleanup_stdio+0x30>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f001 bdd4 	b.w	8008688 <_fflush_r>
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000380 	.word	0x20000380
 8006ae8:	200003e8 	.word	0x200003e8
 8006aec:	20000450 	.word	0x20000450

08006af0 <global_stdio_init.part.0>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <global_stdio_init.part.0+0x30>)
 8006af4:	4c0b      	ldr	r4, [pc, #44]	@ (8006b24 <global_stdio_init.part.0+0x34>)
 8006af6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b28 <global_stdio_init.part.0+0x38>)
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	4620      	mov	r0, r4
 8006afc:	2200      	movs	r2, #0
 8006afe:	2104      	movs	r1, #4
 8006b00:	f7ff ff94 	bl	8006a2c <std>
 8006b04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b08:	2201      	movs	r2, #1
 8006b0a:	2109      	movs	r1, #9
 8006b0c:	f7ff ff8e 	bl	8006a2c <std>
 8006b10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b14:	2202      	movs	r2, #2
 8006b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b1a:	2112      	movs	r1, #18
 8006b1c:	f7ff bf86 	b.w	8006a2c <std>
 8006b20:	200004b8 	.word	0x200004b8
 8006b24:	20000380 	.word	0x20000380
 8006b28:	08006a99 	.word	0x08006a99

08006b2c <__sfp_lock_acquire>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	@ (8006b34 <__sfp_lock_acquire+0x8>)
 8006b2e:	f000 b912 	b.w	8006d56 <__retarget_lock_acquire_recursive>
 8006b32:	bf00      	nop
 8006b34:	200004c1 	.word	0x200004c1

08006b38 <__sfp_lock_release>:
 8006b38:	4801      	ldr	r0, [pc, #4]	@ (8006b40 <__sfp_lock_release+0x8>)
 8006b3a:	f000 b90d 	b.w	8006d58 <__retarget_lock_release_recursive>
 8006b3e:	bf00      	nop
 8006b40:	200004c1 	.word	0x200004c1

08006b44 <__sinit>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	4604      	mov	r4, r0
 8006b48:	f7ff fff0 	bl	8006b2c <__sfp_lock_acquire>
 8006b4c:	6a23      	ldr	r3, [r4, #32]
 8006b4e:	b11b      	cbz	r3, 8006b58 <__sinit+0x14>
 8006b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b54:	f7ff bff0 	b.w	8006b38 <__sfp_lock_release>
 8006b58:	4b04      	ldr	r3, [pc, #16]	@ (8006b6c <__sinit+0x28>)
 8006b5a:	6223      	str	r3, [r4, #32]
 8006b5c:	4b04      	ldr	r3, [pc, #16]	@ (8006b70 <__sinit+0x2c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1f5      	bne.n	8006b50 <__sinit+0xc>
 8006b64:	f7ff ffc4 	bl	8006af0 <global_stdio_init.part.0>
 8006b68:	e7f2      	b.n	8006b50 <__sinit+0xc>
 8006b6a:	bf00      	nop
 8006b6c:	08006ab1 	.word	0x08006ab1
 8006b70:	200004b8 	.word	0x200004b8

08006b74 <_fwalk_sglue>:
 8006b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b78:	4607      	mov	r7, r0
 8006b7a:	4688      	mov	r8, r1
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	2600      	movs	r6, #0
 8006b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b84:	f1b9 0901 	subs.w	r9, r9, #1
 8006b88:	d505      	bpl.n	8006b96 <_fwalk_sglue+0x22>
 8006b8a:	6824      	ldr	r4, [r4, #0]
 8006b8c:	2c00      	cmp	r4, #0
 8006b8e:	d1f7      	bne.n	8006b80 <_fwalk_sglue+0xc>
 8006b90:	4630      	mov	r0, r6
 8006b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b96:	89ab      	ldrh	r3, [r5, #12]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d907      	bls.n	8006bac <_fwalk_sglue+0x38>
 8006b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	d003      	beq.n	8006bac <_fwalk_sglue+0x38>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	47c0      	blx	r8
 8006baa:	4306      	orrs	r6, r0
 8006bac:	3568      	adds	r5, #104	@ 0x68
 8006bae:	e7e9      	b.n	8006b84 <_fwalk_sglue+0x10>

08006bb0 <iprintf>:
 8006bb0:	b40f      	push	{r0, r1, r2, r3}
 8006bb2:	b507      	push	{r0, r1, r2, lr}
 8006bb4:	4906      	ldr	r1, [pc, #24]	@ (8006bd0 <iprintf+0x20>)
 8006bb6:	ab04      	add	r3, sp, #16
 8006bb8:	6808      	ldr	r0, [r1, #0]
 8006bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bbe:	6881      	ldr	r1, [r0, #8]
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	f001 fbc5 	bl	8008350 <_vfiprintf_r>
 8006bc6:	b003      	add	sp, #12
 8006bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bcc:	b004      	add	sp, #16
 8006bce:	4770      	bx	lr
 8006bd0:	20000024 	.word	0x20000024

08006bd4 <__sread>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bdc:	f000 f86c 	bl	8006cb8 <_read_r>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	bfab      	itete	ge
 8006be4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006be6:	89a3      	ldrhlt	r3, [r4, #12]
 8006be8:	181b      	addge	r3, r3, r0
 8006bea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bee:	bfac      	ite	ge
 8006bf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bf2:	81a3      	strhlt	r3, [r4, #12]
 8006bf4:	bd10      	pop	{r4, pc}

08006bf6 <__swrite>:
 8006bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfa:	461f      	mov	r7, r3
 8006bfc:	898b      	ldrh	r3, [r1, #12]
 8006bfe:	05db      	lsls	r3, r3, #23
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	4616      	mov	r6, r2
 8006c06:	d505      	bpl.n	8006c14 <__swrite+0x1e>
 8006c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f000 f840 	bl	8006c94 <_lseek_r>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	4632      	mov	r2, r6
 8006c22:	463b      	mov	r3, r7
 8006c24:	4628      	mov	r0, r5
 8006c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2a:	f000 b857 	b.w	8006cdc <_write_r>

08006c2e <__sseek>:
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	460c      	mov	r4, r1
 8006c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c36:	f000 f82d 	bl	8006c94 <_lseek_r>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	bf15      	itete	ne
 8006c40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c4a:	81a3      	strheq	r3, [r4, #12]
 8006c4c:	bf18      	it	ne
 8006c4e:	81a3      	strhne	r3, [r4, #12]
 8006c50:	bd10      	pop	{r4, pc}

08006c52 <__sclose>:
 8006c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c56:	f000 b80d 	b.w	8006c74 <_close_r>

08006c5a <memset>:
 8006c5a:	4402      	add	r2, r0
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d100      	bne.n	8006c64 <memset+0xa>
 8006c62:	4770      	bx	lr
 8006c64:	f803 1b01 	strb.w	r1, [r3], #1
 8006c68:	e7f9      	b.n	8006c5e <memset+0x4>
	...

08006c6c <_localeconv_r>:
 8006c6c:	4800      	ldr	r0, [pc, #0]	@ (8006c70 <_localeconv_r+0x4>)
 8006c6e:	4770      	bx	lr
 8006c70:	20000164 	.word	0x20000164

08006c74 <_close_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d06      	ldr	r5, [pc, #24]	@ (8006c90 <_close_r+0x1c>)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	f7fa fcc5 	bl	800160e <_close>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_close_r+0x1a>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_close_r+0x1a>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	200004bc 	.word	0x200004bc

08006c94 <_lseek_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	@ (8006cb4 <_lseek_r+0x20>)
 8006c98:	4604      	mov	r4, r0
 8006c9a:	4608      	mov	r0, r1
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	602a      	str	r2, [r5, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f7fa fcda 	bl	800165c <_lseek>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_lseek_r+0x1e>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_lseek_r+0x1e>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	200004bc 	.word	0x200004bc

08006cb8 <_read_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	@ (8006cd8 <_read_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fa fc68 	bl	800159c <_read>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_read_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_read_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	200004bc 	.word	0x200004bc

08006cdc <_write_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d07      	ldr	r5, [pc, #28]	@ (8006cfc <_write_r+0x20>)
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	4608      	mov	r0, r1
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	602a      	str	r2, [r5, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f7fa fc73 	bl	80015d6 <_write>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_write_r+0x1e>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_write_r+0x1e>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	200004bc 	.word	0x200004bc

08006d00 <__errno>:
 8006d00:	4b01      	ldr	r3, [pc, #4]	@ (8006d08 <__errno+0x8>)
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000024 	.word	0x20000024

08006d0c <__libc_init_array>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006d44 <__libc_init_array+0x38>)
 8006d10:	4c0d      	ldr	r4, [pc, #52]	@ (8006d48 <__libc_init_array+0x3c>)
 8006d12:	1b64      	subs	r4, r4, r5
 8006d14:	10a4      	asrs	r4, r4, #2
 8006d16:	2600      	movs	r6, #0
 8006d18:	42a6      	cmp	r6, r4
 8006d1a:	d109      	bne.n	8006d30 <__libc_init_array+0x24>
 8006d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d4c <__libc_init_array+0x40>)
 8006d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006d50 <__libc_init_array+0x44>)
 8006d20:	f001 fec0 	bl	8008aa4 <_init>
 8006d24:	1b64      	subs	r4, r4, r5
 8006d26:	10a4      	asrs	r4, r4, #2
 8006d28:	2600      	movs	r6, #0
 8006d2a:	42a6      	cmp	r6, r4
 8006d2c:	d105      	bne.n	8006d3a <__libc_init_array+0x2e>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d34:	4798      	blx	r3
 8006d36:	3601      	adds	r6, #1
 8006d38:	e7ee      	b.n	8006d18 <__libc_init_array+0xc>
 8006d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3e:	4798      	blx	r3
 8006d40:	3601      	adds	r6, #1
 8006d42:	e7f2      	b.n	8006d2a <__libc_init_array+0x1e>
 8006d44:	08008ea0 	.word	0x08008ea0
 8006d48:	08008ea0 	.word	0x08008ea0
 8006d4c:	08008ea0 	.word	0x08008ea0
 8006d50:	08008ea4 	.word	0x08008ea4

08006d54 <__retarget_lock_init_recursive>:
 8006d54:	4770      	bx	lr

08006d56 <__retarget_lock_acquire_recursive>:
 8006d56:	4770      	bx	lr

08006d58 <__retarget_lock_release_recursive>:
 8006d58:	4770      	bx	lr

08006d5a <quorem>:
 8006d5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5e:	6903      	ldr	r3, [r0, #16]
 8006d60:	690c      	ldr	r4, [r1, #16]
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	4607      	mov	r7, r0
 8006d66:	db7e      	blt.n	8006e66 <quorem+0x10c>
 8006d68:	3c01      	subs	r4, #1
 8006d6a:	f101 0814 	add.w	r8, r1, #20
 8006d6e:	00a3      	lsls	r3, r4, #2
 8006d70:	f100 0514 	add.w	r5, r0, #20
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d84:	3301      	adds	r3, #1
 8006d86:	429a      	cmp	r2, r3
 8006d88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d90:	d32e      	bcc.n	8006df0 <quorem+0x96>
 8006d92:	f04f 0a00 	mov.w	sl, #0
 8006d96:	46c4      	mov	ip, r8
 8006d98:	46ae      	mov	lr, r5
 8006d9a:	46d3      	mov	fp, sl
 8006d9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006da0:	b298      	uxth	r0, r3
 8006da2:	fb06 a000 	mla	r0, r6, r0, sl
 8006da6:	0c02      	lsrs	r2, r0, #16
 8006da8:	0c1b      	lsrs	r3, r3, #16
 8006daa:	fb06 2303 	mla	r3, r6, r3, r2
 8006dae:	f8de 2000 	ldr.w	r2, [lr]
 8006db2:	b280      	uxth	r0, r0
 8006db4:	b292      	uxth	r2, r2
 8006db6:	1a12      	subs	r2, r2, r0
 8006db8:	445a      	add	r2, fp
 8006dba:	f8de 0000 	ldr.w	r0, [lr]
 8006dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006dc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dd2:	45e1      	cmp	r9, ip
 8006dd4:	f84e 2b04 	str.w	r2, [lr], #4
 8006dd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ddc:	d2de      	bcs.n	8006d9c <quorem+0x42>
 8006dde:	9b00      	ldr	r3, [sp, #0]
 8006de0:	58eb      	ldr	r3, [r5, r3]
 8006de2:	b92b      	cbnz	r3, 8006df0 <quorem+0x96>
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	3b04      	subs	r3, #4
 8006de8:	429d      	cmp	r5, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	d32f      	bcc.n	8006e4e <quorem+0xf4>
 8006dee:	613c      	str	r4, [r7, #16]
 8006df0:	4638      	mov	r0, r7
 8006df2:	f001 f97b 	bl	80080ec <__mcmp>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	db25      	blt.n	8006e46 <quorem+0xec>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e02:	f8d1 c000 	ldr.w	ip, [r1]
 8006e06:	fa1f fe82 	uxth.w	lr, r2
 8006e0a:	fa1f f38c 	uxth.w	r3, ip
 8006e0e:	eba3 030e 	sub.w	r3, r3, lr
 8006e12:	4403      	add	r3, r0
 8006e14:	0c12      	lsrs	r2, r2, #16
 8006e16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e24:	45c1      	cmp	r9, r8
 8006e26:	f841 3b04 	str.w	r3, [r1], #4
 8006e2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e2e:	d2e6      	bcs.n	8006dfe <quorem+0xa4>
 8006e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e38:	b922      	cbnz	r2, 8006e44 <quorem+0xea>
 8006e3a:	3b04      	subs	r3, #4
 8006e3c:	429d      	cmp	r5, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	d30b      	bcc.n	8006e5a <quorem+0x100>
 8006e42:	613c      	str	r4, [r7, #16]
 8006e44:	3601      	adds	r6, #1
 8006e46:	4630      	mov	r0, r6
 8006e48:	b003      	add	sp, #12
 8006e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d1cb      	bne.n	8006dee <quorem+0x94>
 8006e56:	3c01      	subs	r4, #1
 8006e58:	e7c6      	b.n	8006de8 <quorem+0x8e>
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	d1ef      	bne.n	8006e42 <quorem+0xe8>
 8006e62:	3c01      	subs	r4, #1
 8006e64:	e7ea      	b.n	8006e3c <quorem+0xe2>
 8006e66:	2000      	movs	r0, #0
 8006e68:	e7ee      	b.n	8006e48 <quorem+0xee>
 8006e6a:	0000      	movs	r0, r0
 8006e6c:	0000      	movs	r0, r0
	...

08006e70 <_dtoa_r>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	69c7      	ldr	r7, [r0, #28]
 8006e76:	b099      	sub	sp, #100	@ 0x64
 8006e78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e7c:	ec55 4b10 	vmov	r4, r5, d0
 8006e80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e82:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e84:	4683      	mov	fp, r0
 8006e86:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e8a:	b97f      	cbnz	r7, 8006eac <_dtoa_r+0x3c>
 8006e8c:	2010      	movs	r0, #16
 8006e8e:	f000 fdfd 	bl	8007a8c <malloc>
 8006e92:	4602      	mov	r2, r0
 8006e94:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e98:	b920      	cbnz	r0, 8006ea4 <_dtoa_r+0x34>
 8006e9a:	4ba7      	ldr	r3, [pc, #668]	@ (8007138 <_dtoa_r+0x2c8>)
 8006e9c:	21ef      	movs	r1, #239	@ 0xef
 8006e9e:	48a7      	ldr	r0, [pc, #668]	@ (800713c <_dtoa_r+0x2cc>)
 8006ea0:	f001 fccc 	bl	800883c <__assert_func>
 8006ea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ea8:	6007      	str	r7, [r0, #0]
 8006eaa:	60c7      	str	r7, [r0, #12]
 8006eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	b159      	cbz	r1, 8006ecc <_dtoa_r+0x5c>
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	604a      	str	r2, [r1, #4]
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4093      	lsls	r3, r2
 8006ebc:	608b      	str	r3, [r1, #8]
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f000 feda 	bl	8007c78 <_Bfree>
 8006ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	1e2b      	subs	r3, r5, #0
 8006ece:	bfb9      	ittee	lt
 8006ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ed4:	9303      	strlt	r3, [sp, #12]
 8006ed6:	2300      	movge	r3, #0
 8006ed8:	6033      	strge	r3, [r6, #0]
 8006eda:	9f03      	ldr	r7, [sp, #12]
 8006edc:	4b98      	ldr	r3, [pc, #608]	@ (8007140 <_dtoa_r+0x2d0>)
 8006ede:	bfbc      	itt	lt
 8006ee0:	2201      	movlt	r2, #1
 8006ee2:	6032      	strlt	r2, [r6, #0]
 8006ee4:	43bb      	bics	r3, r7
 8006ee6:	d112      	bne.n	8006f0e <_dtoa_r+0x9e>
 8006ee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006eea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ef4:	4323      	orrs	r3, r4
 8006ef6:	f000 854d 	beq.w	8007994 <_dtoa_r+0xb24>
 8006efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006efc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007154 <_dtoa_r+0x2e4>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 854f 	beq.w	80079a4 <_dtoa_r+0xb34>
 8006f06:	f10a 0303 	add.w	r3, sl, #3
 8006f0a:	f000 bd49 	b.w	80079a0 <_dtoa_r+0xb30>
 8006f0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	ec51 0b17 	vmov	r0, r1, d7
 8006f18:	2300      	movs	r3, #0
 8006f1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f1e:	f7f9 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f22:	4680      	mov	r8, r0
 8006f24:	b158      	cbz	r0, 8006f3e <_dtoa_r+0xce>
 8006f26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f28:	2301      	movs	r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f2e:	b113      	cbz	r3, 8006f36 <_dtoa_r+0xc6>
 8006f30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f32:	4b84      	ldr	r3, [pc, #528]	@ (8007144 <_dtoa_r+0x2d4>)
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007158 <_dtoa_r+0x2e8>
 8006f3a:	f000 bd33 	b.w	80079a4 <_dtoa_r+0xb34>
 8006f3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f42:	aa16      	add	r2, sp, #88	@ 0x58
 8006f44:	a917      	add	r1, sp, #92	@ 0x5c
 8006f46:	4658      	mov	r0, fp
 8006f48:	f001 f980 	bl	800824c <__d2b>
 8006f4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f50:	4681      	mov	r9, r0
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	d077      	beq.n	8007046 <_dtoa_r+0x1d6>
 8006f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f70:	4619      	mov	r1, r3
 8006f72:	2200      	movs	r2, #0
 8006f74:	4b74      	ldr	r3, [pc, #464]	@ (8007148 <_dtoa_r+0x2d8>)
 8006f76:	f7f9 f987 	bl	8000288 <__aeabi_dsub>
 8006f7a:	a369      	add	r3, pc, #420	@ (adr r3, 8007120 <_dtoa_r+0x2b0>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8006f84:	a368      	add	r3, pc, #416	@ (adr r3, 8007128 <_dtoa_r+0x2b8>)
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	f7f9 f97f 	bl	800028c <__adddf3>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4630      	mov	r0, r6
 8006f92:	460d      	mov	r5, r1
 8006f94:	f7f9 fac6 	bl	8000524 <__aeabi_i2d>
 8006f98:	a365      	add	r3, pc, #404	@ (adr r3, 8007130 <_dtoa_r+0x2c0>)
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	f7f9 fb2b 	bl	80005f8 <__aeabi_dmul>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 f96f 	bl	800028c <__adddf3>
 8006fae:	4604      	mov	r4, r0
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	f7f9 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4607      	mov	r7, r0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7f9 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8006fc4:	b140      	cbz	r0, 8006fd8 <_dtoa_r+0x168>
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	f7f9 faac 	bl	8000524 <__aeabi_i2d>
 8006fcc:	4622      	mov	r2, r4
 8006fce:	462b      	mov	r3, r5
 8006fd0:	f7f9 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fd4:	b900      	cbnz	r0, 8006fd8 <_dtoa_r+0x168>
 8006fd6:	3f01      	subs	r7, #1
 8006fd8:	2f16      	cmp	r7, #22
 8006fda:	d851      	bhi.n	8007080 <_dtoa_r+0x210>
 8006fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800714c <_dtoa_r+0x2dc>)
 8006fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fea:	f7f9 fd77 	bl	8000adc <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d048      	beq.n	8007084 <_dtoa_r+0x214>
 8006ff2:	3f01      	subs	r7, #1
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ffa:	1b9b      	subs	r3, r3, r6
 8006ffc:	1e5a      	subs	r2, r3, #1
 8006ffe:	bf44      	itt	mi
 8007000:	f1c3 0801 	rsbmi	r8, r3, #1
 8007004:	2300      	movmi	r3, #0
 8007006:	9208      	str	r2, [sp, #32]
 8007008:	bf54      	ite	pl
 800700a:	f04f 0800 	movpl.w	r8, #0
 800700e:	9308      	strmi	r3, [sp, #32]
 8007010:	2f00      	cmp	r7, #0
 8007012:	db39      	blt.n	8007088 <_dtoa_r+0x218>
 8007014:	9b08      	ldr	r3, [sp, #32]
 8007016:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007018:	443b      	add	r3, r7
 800701a:	9308      	str	r3, [sp, #32]
 800701c:	2300      	movs	r3, #0
 800701e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007022:	2b09      	cmp	r3, #9
 8007024:	d864      	bhi.n	80070f0 <_dtoa_r+0x280>
 8007026:	2b05      	cmp	r3, #5
 8007028:	bfc4      	itt	gt
 800702a:	3b04      	subgt	r3, #4
 800702c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800702e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007030:	f1a3 0302 	sub.w	r3, r3, #2
 8007034:	bfcc      	ite	gt
 8007036:	2400      	movgt	r4, #0
 8007038:	2401      	movle	r4, #1
 800703a:	2b03      	cmp	r3, #3
 800703c:	d863      	bhi.n	8007106 <_dtoa_r+0x296>
 800703e:	e8df f003 	tbb	[pc, r3]
 8007042:	372a      	.short	0x372a
 8007044:	5535      	.short	0x5535
 8007046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800704a:	441e      	add	r6, r3
 800704c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007050:	2b20      	cmp	r3, #32
 8007052:	bfc1      	itttt	gt
 8007054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007058:	409f      	lslgt	r7, r3
 800705a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800705e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007062:	bfd6      	itet	le
 8007064:	f1c3 0320 	rsble	r3, r3, #32
 8007068:	ea47 0003 	orrgt.w	r0, r7, r3
 800706c:	fa04 f003 	lslle.w	r0, r4, r3
 8007070:	f7f9 fa48 	bl	8000504 <__aeabi_ui2d>
 8007074:	2201      	movs	r2, #1
 8007076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800707a:	3e01      	subs	r6, #1
 800707c:	9214      	str	r2, [sp, #80]	@ 0x50
 800707e:	e777      	b.n	8006f70 <_dtoa_r+0x100>
 8007080:	2301      	movs	r3, #1
 8007082:	e7b8      	b.n	8006ff6 <_dtoa_r+0x186>
 8007084:	9012      	str	r0, [sp, #72]	@ 0x48
 8007086:	e7b7      	b.n	8006ff8 <_dtoa_r+0x188>
 8007088:	427b      	negs	r3, r7
 800708a:	930a      	str	r3, [sp, #40]	@ 0x28
 800708c:	2300      	movs	r3, #0
 800708e:	eba8 0807 	sub.w	r8, r8, r7
 8007092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007094:	e7c4      	b.n	8007020 <_dtoa_r+0x1b0>
 8007096:	2300      	movs	r3, #0
 8007098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800709a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	dc35      	bgt.n	800710c <_dtoa_r+0x29c>
 80070a0:	2301      	movs	r3, #1
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	9307      	str	r3, [sp, #28]
 80070a6:	461a      	mov	r2, r3
 80070a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80070aa:	e00b      	b.n	80070c4 <_dtoa_r+0x254>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e7f3      	b.n	8007098 <_dtoa_r+0x228>
 80070b0:	2300      	movs	r3, #0
 80070b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	2b01      	cmp	r3, #1
 80070be:	9307      	str	r3, [sp, #28]
 80070c0:	bfb8      	it	lt
 80070c2:	2301      	movlt	r3, #1
 80070c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070c8:	2100      	movs	r1, #0
 80070ca:	2204      	movs	r2, #4
 80070cc:	f102 0514 	add.w	r5, r2, #20
 80070d0:	429d      	cmp	r5, r3
 80070d2:	d91f      	bls.n	8007114 <_dtoa_r+0x2a4>
 80070d4:	6041      	str	r1, [r0, #4]
 80070d6:	4658      	mov	r0, fp
 80070d8:	f000 fd8e 	bl	8007bf8 <_Balloc>
 80070dc:	4682      	mov	sl, r0
 80070de:	2800      	cmp	r0, #0
 80070e0:	d13c      	bne.n	800715c <_dtoa_r+0x2ec>
 80070e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <_dtoa_r+0x2e0>)
 80070e4:	4602      	mov	r2, r0
 80070e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80070ea:	e6d8      	b.n	8006e9e <_dtoa_r+0x2e>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e7e0      	b.n	80070b2 <_dtoa_r+0x242>
 80070f0:	2401      	movs	r4, #1
 80070f2:	2300      	movs	r3, #0
 80070f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070f8:	f04f 33ff 	mov.w	r3, #4294967295
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	2200      	movs	r2, #0
 8007102:	2312      	movs	r3, #18
 8007104:	e7d0      	b.n	80070a8 <_dtoa_r+0x238>
 8007106:	2301      	movs	r3, #1
 8007108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800710a:	e7f5      	b.n	80070f8 <_dtoa_r+0x288>
 800710c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	9307      	str	r3, [sp, #28]
 8007112:	e7d7      	b.n	80070c4 <_dtoa_r+0x254>
 8007114:	3101      	adds	r1, #1
 8007116:	0052      	lsls	r2, r2, #1
 8007118:	e7d8      	b.n	80070cc <_dtoa_r+0x25c>
 800711a:	bf00      	nop
 800711c:	f3af 8000 	nop.w
 8007120:	636f4361 	.word	0x636f4361
 8007124:	3fd287a7 	.word	0x3fd287a7
 8007128:	8b60c8b3 	.word	0x8b60c8b3
 800712c:	3fc68a28 	.word	0x3fc68a28
 8007130:	509f79fb 	.word	0x509f79fb
 8007134:	3fd34413 	.word	0x3fd34413
 8007138:	08008b65 	.word	0x08008b65
 800713c:	08008b7c 	.word	0x08008b7c
 8007140:	7ff00000 	.word	0x7ff00000
 8007144:	08008b35 	.word	0x08008b35
 8007148:	3ff80000 	.word	0x3ff80000
 800714c:	08008c78 	.word	0x08008c78
 8007150:	08008bd4 	.word	0x08008bd4
 8007154:	08008b61 	.word	0x08008b61
 8007158:	08008b34 	.word	0x08008b34
 800715c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007160:	6018      	str	r0, [r3, #0]
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	2b0e      	cmp	r3, #14
 8007166:	f200 80a4 	bhi.w	80072b2 <_dtoa_r+0x442>
 800716a:	2c00      	cmp	r4, #0
 800716c:	f000 80a1 	beq.w	80072b2 <_dtoa_r+0x442>
 8007170:	2f00      	cmp	r7, #0
 8007172:	dd33      	ble.n	80071dc <_dtoa_r+0x36c>
 8007174:	4bad      	ldr	r3, [pc, #692]	@ (800742c <_dtoa_r+0x5bc>)
 8007176:	f007 020f 	and.w	r2, r7, #15
 800717a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800717e:	ed93 7b00 	vldr	d7, [r3]
 8007182:	05f8      	lsls	r0, r7, #23
 8007184:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800718c:	d516      	bpl.n	80071bc <_dtoa_r+0x34c>
 800718e:	4ba8      	ldr	r3, [pc, #672]	@ (8007430 <_dtoa_r+0x5c0>)
 8007190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007198:	f7f9 fb58 	bl	800084c <__aeabi_ddiv>
 800719c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071a0:	f004 040f 	and.w	r4, r4, #15
 80071a4:	2603      	movs	r6, #3
 80071a6:	4da2      	ldr	r5, [pc, #648]	@ (8007430 <_dtoa_r+0x5c0>)
 80071a8:	b954      	cbnz	r4, 80071c0 <_dtoa_r+0x350>
 80071aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071b2:	f7f9 fb4b 	bl	800084c <__aeabi_ddiv>
 80071b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ba:	e028      	b.n	800720e <_dtoa_r+0x39e>
 80071bc:	2602      	movs	r6, #2
 80071be:	e7f2      	b.n	80071a6 <_dtoa_r+0x336>
 80071c0:	07e1      	lsls	r1, r4, #31
 80071c2:	d508      	bpl.n	80071d6 <_dtoa_r+0x366>
 80071c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071cc:	f7f9 fa14 	bl	80005f8 <__aeabi_dmul>
 80071d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071d4:	3601      	adds	r6, #1
 80071d6:	1064      	asrs	r4, r4, #1
 80071d8:	3508      	adds	r5, #8
 80071da:	e7e5      	b.n	80071a8 <_dtoa_r+0x338>
 80071dc:	f000 80d2 	beq.w	8007384 <_dtoa_r+0x514>
 80071e0:	427c      	negs	r4, r7
 80071e2:	4b92      	ldr	r3, [pc, #584]	@ (800742c <_dtoa_r+0x5bc>)
 80071e4:	4d92      	ldr	r5, [pc, #584]	@ (8007430 <_dtoa_r+0x5c0>)
 80071e6:	f004 020f 	and.w	r2, r4, #15
 80071ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071f6:	f7f9 f9ff 	bl	80005f8 <__aeabi_dmul>
 80071fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071fe:	1124      	asrs	r4, r4, #4
 8007200:	2300      	movs	r3, #0
 8007202:	2602      	movs	r6, #2
 8007204:	2c00      	cmp	r4, #0
 8007206:	f040 80b2 	bne.w	800736e <_dtoa_r+0x4fe>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1d3      	bne.n	80071b6 <_dtoa_r+0x346>
 800720e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80b7 	beq.w	8007388 <_dtoa_r+0x518>
 800721a:	4b86      	ldr	r3, [pc, #536]	@ (8007434 <_dtoa_r+0x5c4>)
 800721c:	2200      	movs	r2, #0
 800721e:	4620      	mov	r0, r4
 8007220:	4629      	mov	r1, r5
 8007222:	f7f9 fc5b 	bl	8000adc <__aeabi_dcmplt>
 8007226:	2800      	cmp	r0, #0
 8007228:	f000 80ae 	beq.w	8007388 <_dtoa_r+0x518>
 800722c:	9b07      	ldr	r3, [sp, #28]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 80aa 	beq.w	8007388 <_dtoa_r+0x518>
 8007234:	9b00      	ldr	r3, [sp, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd37      	ble.n	80072aa <_dtoa_r+0x43a>
 800723a:	1e7b      	subs	r3, r7, #1
 800723c:	9304      	str	r3, [sp, #16]
 800723e:	4620      	mov	r0, r4
 8007240:	4b7d      	ldr	r3, [pc, #500]	@ (8007438 <_dtoa_r+0x5c8>)
 8007242:	2200      	movs	r2, #0
 8007244:	4629      	mov	r1, r5
 8007246:	f7f9 f9d7 	bl	80005f8 <__aeabi_dmul>
 800724a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800724e:	9c00      	ldr	r4, [sp, #0]
 8007250:	3601      	adds	r6, #1
 8007252:	4630      	mov	r0, r6
 8007254:	f7f9 f966 	bl	8000524 <__aeabi_i2d>
 8007258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800725c:	f7f9 f9cc 	bl	80005f8 <__aeabi_dmul>
 8007260:	4b76      	ldr	r3, [pc, #472]	@ (800743c <_dtoa_r+0x5cc>)
 8007262:	2200      	movs	r2, #0
 8007264:	f7f9 f812 	bl	800028c <__adddf3>
 8007268:	4605      	mov	r5, r0
 800726a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800726e:	2c00      	cmp	r4, #0
 8007270:	f040 808d 	bne.w	800738e <_dtoa_r+0x51e>
 8007274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007278:	4b71      	ldr	r3, [pc, #452]	@ (8007440 <_dtoa_r+0x5d0>)
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 f804 	bl	8000288 <__aeabi_dsub>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007288:	462a      	mov	r2, r5
 800728a:	4633      	mov	r3, r6
 800728c:	f7f9 fc44 	bl	8000b18 <__aeabi_dcmpgt>
 8007290:	2800      	cmp	r0, #0
 8007292:	f040 828b 	bne.w	80077ac <_dtoa_r+0x93c>
 8007296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729a:	462a      	mov	r2, r5
 800729c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072a0:	f7f9 fc1c 	bl	8000adc <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 8128 	bne.w	80074fa <_dtoa_r+0x68a>
 80072aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80072ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80072b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f2c0 815a 	blt.w	800756e <_dtoa_r+0x6fe>
 80072ba:	2f0e      	cmp	r7, #14
 80072bc:	f300 8157 	bgt.w	800756e <_dtoa_r+0x6fe>
 80072c0:	4b5a      	ldr	r3, [pc, #360]	@ (800742c <_dtoa_r+0x5bc>)
 80072c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072c6:	ed93 7b00 	vldr	d7, [r3]
 80072ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	ed8d 7b00 	vstr	d7, [sp]
 80072d2:	da03      	bge.n	80072dc <_dtoa_r+0x46c>
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f340 8101 	ble.w	80074de <_dtoa_r+0x66e>
 80072dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072e0:	4656      	mov	r6, sl
 80072e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072e6:	4620      	mov	r0, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f9 faaf 	bl	800084c <__aeabi_ddiv>
 80072ee:	f7f9 fc33 	bl	8000b58 <__aeabi_d2iz>
 80072f2:	4680      	mov	r8, r0
 80072f4:	f7f9 f916 	bl	8000524 <__aeabi_i2d>
 80072f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072fc:	f7f9 f97c 	bl	80005f8 <__aeabi_dmul>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800730c:	f7f8 ffbc 	bl	8000288 <__aeabi_dsub>
 8007310:	f806 4b01 	strb.w	r4, [r6], #1
 8007314:	9d07      	ldr	r5, [sp, #28]
 8007316:	eba6 040a 	sub.w	r4, r6, sl
 800731a:	42a5      	cmp	r5, r4
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	f040 8117 	bne.w	8007552 <_dtoa_r+0x6e2>
 8007324:	f7f8 ffb2 	bl	800028c <__adddf3>
 8007328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	f7f9 fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 8007334:	2800      	cmp	r0, #0
 8007336:	f040 80f9 	bne.w	800752c <_dtoa_r+0x6bc>
 800733a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f9 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007346:	b118      	cbz	r0, 8007350 <_dtoa_r+0x4e0>
 8007348:	f018 0f01 	tst.w	r8, #1
 800734c:	f040 80ee 	bne.w	800752c <_dtoa_r+0x6bc>
 8007350:	4649      	mov	r1, r9
 8007352:	4658      	mov	r0, fp
 8007354:	f000 fc90 	bl	8007c78 <_Bfree>
 8007358:	2300      	movs	r3, #0
 800735a:	7033      	strb	r3, [r6, #0]
 800735c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800735e:	3701      	adds	r7, #1
 8007360:	601f      	str	r7, [r3, #0]
 8007362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 831d 	beq.w	80079a4 <_dtoa_r+0xb34>
 800736a:	601e      	str	r6, [r3, #0]
 800736c:	e31a      	b.n	80079a4 <_dtoa_r+0xb34>
 800736e:	07e2      	lsls	r2, r4, #31
 8007370:	d505      	bpl.n	800737e <_dtoa_r+0x50e>
 8007372:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007376:	f7f9 f93f 	bl	80005f8 <__aeabi_dmul>
 800737a:	3601      	adds	r6, #1
 800737c:	2301      	movs	r3, #1
 800737e:	1064      	asrs	r4, r4, #1
 8007380:	3508      	adds	r5, #8
 8007382:	e73f      	b.n	8007204 <_dtoa_r+0x394>
 8007384:	2602      	movs	r6, #2
 8007386:	e742      	b.n	800720e <_dtoa_r+0x39e>
 8007388:	9c07      	ldr	r4, [sp, #28]
 800738a:	9704      	str	r7, [sp, #16]
 800738c:	e761      	b.n	8007252 <_dtoa_r+0x3e2>
 800738e:	4b27      	ldr	r3, [pc, #156]	@ (800742c <_dtoa_r+0x5bc>)
 8007390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800739a:	4454      	add	r4, sl
 800739c:	2900      	cmp	r1, #0
 800739e:	d053      	beq.n	8007448 <_dtoa_r+0x5d8>
 80073a0:	4928      	ldr	r1, [pc, #160]	@ (8007444 <_dtoa_r+0x5d4>)
 80073a2:	2000      	movs	r0, #0
 80073a4:	f7f9 fa52 	bl	800084c <__aeabi_ddiv>
 80073a8:	4633      	mov	r3, r6
 80073aa:	462a      	mov	r2, r5
 80073ac:	f7f8 ff6c 	bl	8000288 <__aeabi_dsub>
 80073b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073b4:	4656      	mov	r6, sl
 80073b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ba:	f7f9 fbcd 	bl	8000b58 <__aeabi_d2iz>
 80073be:	4605      	mov	r5, r0
 80073c0:	f7f9 f8b0 	bl	8000524 <__aeabi_i2d>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073cc:	f7f8 ff5c 	bl	8000288 <__aeabi_dsub>
 80073d0:	3530      	adds	r5, #48	@ 0x30
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073da:	f806 5b01 	strb.w	r5, [r6], #1
 80073de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073e2:	f7f9 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d171      	bne.n	80074ce <_dtoa_r+0x65e>
 80073ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073ee:	4911      	ldr	r1, [pc, #68]	@ (8007434 <_dtoa_r+0x5c4>)
 80073f0:	2000      	movs	r0, #0
 80073f2:	f7f8 ff49 	bl	8000288 <__aeabi_dsub>
 80073f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073fa:	f7f9 fb6f 	bl	8000adc <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	f040 8095 	bne.w	800752e <_dtoa_r+0x6be>
 8007404:	42a6      	cmp	r6, r4
 8007406:	f43f af50 	beq.w	80072aa <_dtoa_r+0x43a>
 800740a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800740e:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <_dtoa_r+0x5c8>)
 8007410:	2200      	movs	r2, #0
 8007412:	f7f9 f8f1 	bl	80005f8 <__aeabi_dmul>
 8007416:	4b08      	ldr	r3, [pc, #32]	@ (8007438 <_dtoa_r+0x5c8>)
 8007418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800741c:	2200      	movs	r2, #0
 800741e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007422:	f7f9 f8e9 	bl	80005f8 <__aeabi_dmul>
 8007426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800742a:	e7c4      	b.n	80073b6 <_dtoa_r+0x546>
 800742c:	08008c78 	.word	0x08008c78
 8007430:	08008c50 	.word	0x08008c50
 8007434:	3ff00000 	.word	0x3ff00000
 8007438:	40240000 	.word	0x40240000
 800743c:	401c0000 	.word	0x401c0000
 8007440:	40140000 	.word	0x40140000
 8007444:	3fe00000 	.word	0x3fe00000
 8007448:	4631      	mov	r1, r6
 800744a:	4628      	mov	r0, r5
 800744c:	f7f9 f8d4 	bl	80005f8 <__aeabi_dmul>
 8007450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007454:	9415      	str	r4, [sp, #84]	@ 0x54
 8007456:	4656      	mov	r6, sl
 8007458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800745c:	f7f9 fb7c 	bl	8000b58 <__aeabi_d2iz>
 8007460:	4605      	mov	r5, r0
 8007462:	f7f9 f85f 	bl	8000524 <__aeabi_i2d>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800746e:	f7f8 ff0b 	bl	8000288 <__aeabi_dsub>
 8007472:	3530      	adds	r5, #48	@ 0x30
 8007474:	f806 5b01 	strb.w	r5, [r6], #1
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	42a6      	cmp	r6, r4
 800747e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	d124      	bne.n	80074d2 <_dtoa_r+0x662>
 8007488:	4bac      	ldr	r3, [pc, #688]	@ (800773c <_dtoa_r+0x8cc>)
 800748a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800748e:	f7f8 fefd 	bl	800028c <__adddf3>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749a:	f7f9 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d145      	bne.n	800752e <_dtoa_r+0x6be>
 80074a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074a6:	49a5      	ldr	r1, [pc, #660]	@ (800773c <_dtoa_r+0x8cc>)
 80074a8:	2000      	movs	r0, #0
 80074aa:	f7f8 feed 	bl	8000288 <__aeabi_dsub>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b6:	f7f9 fb11 	bl	8000adc <__aeabi_dcmplt>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f aef5 	beq.w	80072aa <_dtoa_r+0x43a>
 80074c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80074c2:	1e73      	subs	r3, r6, #1
 80074c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80074c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074ca:	2b30      	cmp	r3, #48	@ 0x30
 80074cc:	d0f8      	beq.n	80074c0 <_dtoa_r+0x650>
 80074ce:	9f04      	ldr	r7, [sp, #16]
 80074d0:	e73e      	b.n	8007350 <_dtoa_r+0x4e0>
 80074d2:	4b9b      	ldr	r3, [pc, #620]	@ (8007740 <_dtoa_r+0x8d0>)
 80074d4:	f7f9 f890 	bl	80005f8 <__aeabi_dmul>
 80074d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074dc:	e7bc      	b.n	8007458 <_dtoa_r+0x5e8>
 80074de:	d10c      	bne.n	80074fa <_dtoa_r+0x68a>
 80074e0:	4b98      	ldr	r3, [pc, #608]	@ (8007744 <_dtoa_r+0x8d4>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074e8:	f7f9 f886 	bl	80005f8 <__aeabi_dmul>
 80074ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074f0:	f7f9 fb08 	bl	8000b04 <__aeabi_dcmpge>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	f000 8157 	beq.w	80077a8 <_dtoa_r+0x938>
 80074fa:	2400      	movs	r4, #0
 80074fc:	4625      	mov	r5, r4
 80074fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007500:	43db      	mvns	r3, r3
 8007502:	9304      	str	r3, [sp, #16]
 8007504:	4656      	mov	r6, sl
 8007506:	2700      	movs	r7, #0
 8007508:	4621      	mov	r1, r4
 800750a:	4658      	mov	r0, fp
 800750c:	f000 fbb4 	bl	8007c78 <_Bfree>
 8007510:	2d00      	cmp	r5, #0
 8007512:	d0dc      	beq.n	80074ce <_dtoa_r+0x65e>
 8007514:	b12f      	cbz	r7, 8007522 <_dtoa_r+0x6b2>
 8007516:	42af      	cmp	r7, r5
 8007518:	d003      	beq.n	8007522 <_dtoa_r+0x6b2>
 800751a:	4639      	mov	r1, r7
 800751c:	4658      	mov	r0, fp
 800751e:	f000 fbab 	bl	8007c78 <_Bfree>
 8007522:	4629      	mov	r1, r5
 8007524:	4658      	mov	r0, fp
 8007526:	f000 fba7 	bl	8007c78 <_Bfree>
 800752a:	e7d0      	b.n	80074ce <_dtoa_r+0x65e>
 800752c:	9704      	str	r7, [sp, #16]
 800752e:	4633      	mov	r3, r6
 8007530:	461e      	mov	r6, r3
 8007532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007536:	2a39      	cmp	r2, #57	@ 0x39
 8007538:	d107      	bne.n	800754a <_dtoa_r+0x6da>
 800753a:	459a      	cmp	sl, r3
 800753c:	d1f8      	bne.n	8007530 <_dtoa_r+0x6c0>
 800753e:	9a04      	ldr	r2, [sp, #16]
 8007540:	3201      	adds	r2, #1
 8007542:	9204      	str	r2, [sp, #16]
 8007544:	2230      	movs	r2, #48	@ 0x30
 8007546:	f88a 2000 	strb.w	r2, [sl]
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	3201      	adds	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e7bd      	b.n	80074ce <_dtoa_r+0x65e>
 8007552:	4b7b      	ldr	r3, [pc, #492]	@ (8007740 <_dtoa_r+0x8d0>)
 8007554:	2200      	movs	r2, #0
 8007556:	f7f9 f84f 	bl	80005f8 <__aeabi_dmul>
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	460d      	mov	r5, r1
 8007562:	f7f9 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007566:	2800      	cmp	r0, #0
 8007568:	f43f aebb 	beq.w	80072e2 <_dtoa_r+0x472>
 800756c:	e6f0      	b.n	8007350 <_dtoa_r+0x4e0>
 800756e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007570:	2a00      	cmp	r2, #0
 8007572:	f000 80db 	beq.w	800772c <_dtoa_r+0x8bc>
 8007576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007578:	2a01      	cmp	r2, #1
 800757a:	f300 80bf 	bgt.w	80076fc <_dtoa_r+0x88c>
 800757e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007580:	2a00      	cmp	r2, #0
 8007582:	f000 80b7 	beq.w	80076f4 <_dtoa_r+0x884>
 8007586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800758a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800758c:	4646      	mov	r6, r8
 800758e:	9a08      	ldr	r2, [sp, #32]
 8007590:	2101      	movs	r1, #1
 8007592:	441a      	add	r2, r3
 8007594:	4658      	mov	r0, fp
 8007596:	4498      	add	r8, r3
 8007598:	9208      	str	r2, [sp, #32]
 800759a:	f000 fc21 	bl	8007de0 <__i2b>
 800759e:	4605      	mov	r5, r0
 80075a0:	b15e      	cbz	r6, 80075ba <_dtoa_r+0x74a>
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dd08      	ble.n	80075ba <_dtoa_r+0x74a>
 80075a8:	42b3      	cmp	r3, r6
 80075aa:	9a08      	ldr	r2, [sp, #32]
 80075ac:	bfa8      	it	ge
 80075ae:	4633      	movge	r3, r6
 80075b0:	eba8 0803 	sub.w	r8, r8, r3
 80075b4:	1af6      	subs	r6, r6, r3
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	9308      	str	r3, [sp, #32]
 80075ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075bc:	b1f3      	cbz	r3, 80075fc <_dtoa_r+0x78c>
 80075be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80b7 	beq.w	8007734 <_dtoa_r+0x8c4>
 80075c6:	b18c      	cbz	r4, 80075ec <_dtoa_r+0x77c>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4622      	mov	r2, r4
 80075cc:	4658      	mov	r0, fp
 80075ce:	f000 fcc7 	bl	8007f60 <__pow5mult>
 80075d2:	464a      	mov	r2, r9
 80075d4:	4601      	mov	r1, r0
 80075d6:	4605      	mov	r5, r0
 80075d8:	4658      	mov	r0, fp
 80075da:	f000 fc17 	bl	8007e0c <__multiply>
 80075de:	4649      	mov	r1, r9
 80075e0:	9004      	str	r0, [sp, #16]
 80075e2:	4658      	mov	r0, fp
 80075e4:	f000 fb48 	bl	8007c78 <_Bfree>
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	4699      	mov	r9, r3
 80075ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ee:	1b1a      	subs	r2, r3, r4
 80075f0:	d004      	beq.n	80075fc <_dtoa_r+0x78c>
 80075f2:	4649      	mov	r1, r9
 80075f4:	4658      	mov	r0, fp
 80075f6:	f000 fcb3 	bl	8007f60 <__pow5mult>
 80075fa:	4681      	mov	r9, r0
 80075fc:	2101      	movs	r1, #1
 80075fe:	4658      	mov	r0, fp
 8007600:	f000 fbee 	bl	8007de0 <__i2b>
 8007604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007606:	4604      	mov	r4, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 81cf 	beq.w	80079ac <_dtoa_r+0xb3c>
 800760e:	461a      	mov	r2, r3
 8007610:	4601      	mov	r1, r0
 8007612:	4658      	mov	r0, fp
 8007614:	f000 fca4 	bl	8007f60 <__pow5mult>
 8007618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800761a:	2b01      	cmp	r3, #1
 800761c:	4604      	mov	r4, r0
 800761e:	f300 8095 	bgt.w	800774c <_dtoa_r+0x8dc>
 8007622:	9b02      	ldr	r3, [sp, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8087 	bne.w	8007738 <_dtoa_r+0x8c8>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 8089 	bne.w	8007748 <_dtoa_r+0x8d8>
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800763c:	0d1b      	lsrs	r3, r3, #20
 800763e:	051b      	lsls	r3, r3, #20
 8007640:	b12b      	cbz	r3, 800764e <_dtoa_r+0x7de>
 8007642:	9b08      	ldr	r3, [sp, #32]
 8007644:	3301      	adds	r3, #1
 8007646:	9308      	str	r3, [sp, #32]
 8007648:	f108 0801 	add.w	r8, r8, #1
 800764c:	2301      	movs	r3, #1
 800764e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 81b0 	beq.w	80079b8 <_dtoa_r+0xb48>
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800765e:	6918      	ldr	r0, [r3, #16]
 8007660:	f000 fb72 	bl	8007d48 <__hi0bits>
 8007664:	f1c0 0020 	rsb	r0, r0, #32
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	4418      	add	r0, r3
 800766c:	f010 001f 	ands.w	r0, r0, #31
 8007670:	d077      	beq.n	8007762 <_dtoa_r+0x8f2>
 8007672:	f1c0 0320 	rsb	r3, r0, #32
 8007676:	2b04      	cmp	r3, #4
 8007678:	dd6b      	ble.n	8007752 <_dtoa_r+0x8e2>
 800767a:	9b08      	ldr	r3, [sp, #32]
 800767c:	f1c0 001c 	rsb	r0, r0, #28
 8007680:	4403      	add	r3, r0
 8007682:	4480      	add	r8, r0
 8007684:	4406      	add	r6, r0
 8007686:	9308      	str	r3, [sp, #32]
 8007688:	f1b8 0f00 	cmp.w	r8, #0
 800768c:	dd05      	ble.n	800769a <_dtoa_r+0x82a>
 800768e:	4649      	mov	r1, r9
 8007690:	4642      	mov	r2, r8
 8007692:	4658      	mov	r0, fp
 8007694:	f000 fcbe 	bl	8008014 <__lshift>
 8007698:	4681      	mov	r9, r0
 800769a:	9b08      	ldr	r3, [sp, #32]
 800769c:	2b00      	cmp	r3, #0
 800769e:	dd05      	ble.n	80076ac <_dtoa_r+0x83c>
 80076a0:	4621      	mov	r1, r4
 80076a2:	461a      	mov	r2, r3
 80076a4:	4658      	mov	r0, fp
 80076a6:	f000 fcb5 	bl	8008014 <__lshift>
 80076aa:	4604      	mov	r4, r0
 80076ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d059      	beq.n	8007766 <_dtoa_r+0x8f6>
 80076b2:	4621      	mov	r1, r4
 80076b4:	4648      	mov	r0, r9
 80076b6:	f000 fd19 	bl	80080ec <__mcmp>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	da53      	bge.n	8007766 <_dtoa_r+0x8f6>
 80076be:	1e7b      	subs	r3, r7, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	4649      	mov	r1, r9
 80076c4:	2300      	movs	r3, #0
 80076c6:	220a      	movs	r2, #10
 80076c8:	4658      	mov	r0, fp
 80076ca:	f000 faf7 	bl	8007cbc <__multadd>
 80076ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d0:	4681      	mov	r9, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8172 	beq.w	80079bc <_dtoa_r+0xb4c>
 80076d8:	2300      	movs	r3, #0
 80076da:	4629      	mov	r1, r5
 80076dc:	220a      	movs	r2, #10
 80076de:	4658      	mov	r0, fp
 80076e0:	f000 faec 	bl	8007cbc <__multadd>
 80076e4:	9b00      	ldr	r3, [sp, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	4605      	mov	r5, r0
 80076ea:	dc67      	bgt.n	80077bc <_dtoa_r+0x94c>
 80076ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	dc41      	bgt.n	8007776 <_dtoa_r+0x906>
 80076f2:	e063      	b.n	80077bc <_dtoa_r+0x94c>
 80076f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076fa:	e746      	b.n	800758a <_dtoa_r+0x71a>
 80076fc:	9b07      	ldr	r3, [sp, #28]
 80076fe:	1e5c      	subs	r4, r3, #1
 8007700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007702:	42a3      	cmp	r3, r4
 8007704:	bfbf      	itttt	lt
 8007706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800770a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800770c:	1ae3      	sublt	r3, r4, r3
 800770e:	bfb4      	ite	lt
 8007710:	18d2      	addlt	r2, r2, r3
 8007712:	1b1c      	subge	r4, r3, r4
 8007714:	9b07      	ldr	r3, [sp, #28]
 8007716:	bfbc      	itt	lt
 8007718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800771a:	2400      	movlt	r4, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfb5      	itete	lt
 8007720:	eba8 0603 	sublt.w	r6, r8, r3
 8007724:	9b07      	ldrge	r3, [sp, #28]
 8007726:	2300      	movlt	r3, #0
 8007728:	4646      	movge	r6, r8
 800772a:	e730      	b.n	800758e <_dtoa_r+0x71e>
 800772c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800772e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007730:	4646      	mov	r6, r8
 8007732:	e735      	b.n	80075a0 <_dtoa_r+0x730>
 8007734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007736:	e75c      	b.n	80075f2 <_dtoa_r+0x782>
 8007738:	2300      	movs	r3, #0
 800773a:	e788      	b.n	800764e <_dtoa_r+0x7de>
 800773c:	3fe00000 	.word	0x3fe00000
 8007740:	40240000 	.word	0x40240000
 8007744:	40140000 	.word	0x40140000
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	e780      	b.n	800764e <_dtoa_r+0x7de>
 800774c:	2300      	movs	r3, #0
 800774e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007750:	e782      	b.n	8007658 <_dtoa_r+0x7e8>
 8007752:	d099      	beq.n	8007688 <_dtoa_r+0x818>
 8007754:	9a08      	ldr	r2, [sp, #32]
 8007756:	331c      	adds	r3, #28
 8007758:	441a      	add	r2, r3
 800775a:	4498      	add	r8, r3
 800775c:	441e      	add	r6, r3
 800775e:	9208      	str	r2, [sp, #32]
 8007760:	e792      	b.n	8007688 <_dtoa_r+0x818>
 8007762:	4603      	mov	r3, r0
 8007764:	e7f6      	b.n	8007754 <_dtoa_r+0x8e4>
 8007766:	9b07      	ldr	r3, [sp, #28]
 8007768:	9704      	str	r7, [sp, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	dc20      	bgt.n	80077b0 <_dtoa_r+0x940>
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007772:	2b02      	cmp	r3, #2
 8007774:	dd1e      	ble.n	80077b4 <_dtoa_r+0x944>
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f47f aec0 	bne.w	80074fe <_dtoa_r+0x68e>
 800777e:	4621      	mov	r1, r4
 8007780:	2205      	movs	r2, #5
 8007782:	4658      	mov	r0, fp
 8007784:	f000 fa9a 	bl	8007cbc <__multadd>
 8007788:	4601      	mov	r1, r0
 800778a:	4604      	mov	r4, r0
 800778c:	4648      	mov	r0, r9
 800778e:	f000 fcad 	bl	80080ec <__mcmp>
 8007792:	2800      	cmp	r0, #0
 8007794:	f77f aeb3 	ble.w	80074fe <_dtoa_r+0x68e>
 8007798:	4656      	mov	r6, sl
 800779a:	2331      	movs	r3, #49	@ 0x31
 800779c:	f806 3b01 	strb.w	r3, [r6], #1
 80077a0:	9b04      	ldr	r3, [sp, #16]
 80077a2:	3301      	adds	r3, #1
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	e6ae      	b.n	8007506 <_dtoa_r+0x696>
 80077a8:	9c07      	ldr	r4, [sp, #28]
 80077aa:	9704      	str	r7, [sp, #16]
 80077ac:	4625      	mov	r5, r4
 80077ae:	e7f3      	b.n	8007798 <_dtoa_r+0x928>
 80077b0:	9b07      	ldr	r3, [sp, #28]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8104 	beq.w	80079c4 <_dtoa_r+0xb54>
 80077bc:	2e00      	cmp	r6, #0
 80077be:	dd05      	ble.n	80077cc <_dtoa_r+0x95c>
 80077c0:	4629      	mov	r1, r5
 80077c2:	4632      	mov	r2, r6
 80077c4:	4658      	mov	r0, fp
 80077c6:	f000 fc25 	bl	8008014 <__lshift>
 80077ca:	4605      	mov	r5, r0
 80077cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d05a      	beq.n	8007888 <_dtoa_r+0xa18>
 80077d2:	6869      	ldr	r1, [r5, #4]
 80077d4:	4658      	mov	r0, fp
 80077d6:	f000 fa0f 	bl	8007bf8 <_Balloc>
 80077da:	4606      	mov	r6, r0
 80077dc:	b928      	cbnz	r0, 80077ea <_dtoa_r+0x97a>
 80077de:	4b84      	ldr	r3, [pc, #528]	@ (80079f0 <_dtoa_r+0xb80>)
 80077e0:	4602      	mov	r2, r0
 80077e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077e6:	f7ff bb5a 	b.w	8006e9e <_dtoa_r+0x2e>
 80077ea:	692a      	ldr	r2, [r5, #16]
 80077ec:	3202      	adds	r2, #2
 80077ee:	0092      	lsls	r2, r2, #2
 80077f0:	f105 010c 	add.w	r1, r5, #12
 80077f4:	300c      	adds	r0, #12
 80077f6:	f001 f813 	bl	8008820 <memcpy>
 80077fa:	2201      	movs	r2, #1
 80077fc:	4631      	mov	r1, r6
 80077fe:	4658      	mov	r0, fp
 8007800:	f000 fc08 	bl	8008014 <__lshift>
 8007804:	f10a 0301 	add.w	r3, sl, #1
 8007808:	9307      	str	r3, [sp, #28]
 800780a:	9b00      	ldr	r3, [sp, #0]
 800780c:	4453      	add	r3, sl
 800780e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007810:	9b02      	ldr	r3, [sp, #8]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	462f      	mov	r7, r5
 8007818:	930a      	str	r3, [sp, #40]	@ 0x28
 800781a:	4605      	mov	r5, r0
 800781c:	9b07      	ldr	r3, [sp, #28]
 800781e:	4621      	mov	r1, r4
 8007820:	3b01      	subs	r3, #1
 8007822:	4648      	mov	r0, r9
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	f7ff fa98 	bl	8006d5a <quorem>
 800782a:	4639      	mov	r1, r7
 800782c:	9002      	str	r0, [sp, #8]
 800782e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007832:	4648      	mov	r0, r9
 8007834:	f000 fc5a 	bl	80080ec <__mcmp>
 8007838:	462a      	mov	r2, r5
 800783a:	9008      	str	r0, [sp, #32]
 800783c:	4621      	mov	r1, r4
 800783e:	4658      	mov	r0, fp
 8007840:	f000 fc70 	bl	8008124 <__mdiff>
 8007844:	68c2      	ldr	r2, [r0, #12]
 8007846:	4606      	mov	r6, r0
 8007848:	bb02      	cbnz	r2, 800788c <_dtoa_r+0xa1c>
 800784a:	4601      	mov	r1, r0
 800784c:	4648      	mov	r0, r9
 800784e:	f000 fc4d 	bl	80080ec <__mcmp>
 8007852:	4602      	mov	r2, r0
 8007854:	4631      	mov	r1, r6
 8007856:	4658      	mov	r0, fp
 8007858:	920e      	str	r2, [sp, #56]	@ 0x38
 800785a:	f000 fa0d 	bl	8007c78 <_Bfree>
 800785e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007862:	9e07      	ldr	r6, [sp, #28]
 8007864:	ea43 0102 	orr.w	r1, r3, r2
 8007868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800786a:	4319      	orrs	r1, r3
 800786c:	d110      	bne.n	8007890 <_dtoa_r+0xa20>
 800786e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007872:	d029      	beq.n	80078c8 <_dtoa_r+0xa58>
 8007874:	9b08      	ldr	r3, [sp, #32]
 8007876:	2b00      	cmp	r3, #0
 8007878:	dd02      	ble.n	8007880 <_dtoa_r+0xa10>
 800787a:	9b02      	ldr	r3, [sp, #8]
 800787c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	f883 8000 	strb.w	r8, [r3]
 8007886:	e63f      	b.n	8007508 <_dtoa_r+0x698>
 8007888:	4628      	mov	r0, r5
 800788a:	e7bb      	b.n	8007804 <_dtoa_r+0x994>
 800788c:	2201      	movs	r2, #1
 800788e:	e7e1      	b.n	8007854 <_dtoa_r+0x9e4>
 8007890:	9b08      	ldr	r3, [sp, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	db04      	blt.n	80078a0 <_dtoa_r+0xa30>
 8007896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007898:	430b      	orrs	r3, r1
 800789a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800789c:	430b      	orrs	r3, r1
 800789e:	d120      	bne.n	80078e2 <_dtoa_r+0xa72>
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	dded      	ble.n	8007880 <_dtoa_r+0xa10>
 80078a4:	4649      	mov	r1, r9
 80078a6:	2201      	movs	r2, #1
 80078a8:	4658      	mov	r0, fp
 80078aa:	f000 fbb3 	bl	8008014 <__lshift>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4681      	mov	r9, r0
 80078b2:	f000 fc1b 	bl	80080ec <__mcmp>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	dc03      	bgt.n	80078c2 <_dtoa_r+0xa52>
 80078ba:	d1e1      	bne.n	8007880 <_dtoa_r+0xa10>
 80078bc:	f018 0f01 	tst.w	r8, #1
 80078c0:	d0de      	beq.n	8007880 <_dtoa_r+0xa10>
 80078c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078c6:	d1d8      	bne.n	800787a <_dtoa_r+0xa0a>
 80078c8:	9a00      	ldr	r2, [sp, #0]
 80078ca:	2339      	movs	r3, #57	@ 0x39
 80078cc:	7013      	strb	r3, [r2, #0]
 80078ce:	4633      	mov	r3, r6
 80078d0:	461e      	mov	r6, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078d8:	2a39      	cmp	r2, #57	@ 0x39
 80078da:	d052      	beq.n	8007982 <_dtoa_r+0xb12>
 80078dc:	3201      	adds	r2, #1
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e612      	b.n	8007508 <_dtoa_r+0x698>
 80078e2:	2a00      	cmp	r2, #0
 80078e4:	dd07      	ble.n	80078f6 <_dtoa_r+0xa86>
 80078e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078ea:	d0ed      	beq.n	80078c8 <_dtoa_r+0xa58>
 80078ec:	9a00      	ldr	r2, [sp, #0]
 80078ee:	f108 0301 	add.w	r3, r8, #1
 80078f2:	7013      	strb	r3, [r2, #0]
 80078f4:	e608      	b.n	8007508 <_dtoa_r+0x698>
 80078f6:	9b07      	ldr	r3, [sp, #28]
 80078f8:	9a07      	ldr	r2, [sp, #28]
 80078fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80078fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007900:	4293      	cmp	r3, r2
 8007902:	d028      	beq.n	8007956 <_dtoa_r+0xae6>
 8007904:	4649      	mov	r1, r9
 8007906:	2300      	movs	r3, #0
 8007908:	220a      	movs	r2, #10
 800790a:	4658      	mov	r0, fp
 800790c:	f000 f9d6 	bl	8007cbc <__multadd>
 8007910:	42af      	cmp	r7, r5
 8007912:	4681      	mov	r9, r0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	f04f 020a 	mov.w	r2, #10
 800791c:	4639      	mov	r1, r7
 800791e:	4658      	mov	r0, fp
 8007920:	d107      	bne.n	8007932 <_dtoa_r+0xac2>
 8007922:	f000 f9cb 	bl	8007cbc <__multadd>
 8007926:	4607      	mov	r7, r0
 8007928:	4605      	mov	r5, r0
 800792a:	9b07      	ldr	r3, [sp, #28]
 800792c:	3301      	adds	r3, #1
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	e774      	b.n	800781c <_dtoa_r+0x9ac>
 8007932:	f000 f9c3 	bl	8007cbc <__multadd>
 8007936:	4629      	mov	r1, r5
 8007938:	4607      	mov	r7, r0
 800793a:	2300      	movs	r3, #0
 800793c:	220a      	movs	r2, #10
 800793e:	4658      	mov	r0, fp
 8007940:	f000 f9bc 	bl	8007cbc <__multadd>
 8007944:	4605      	mov	r5, r0
 8007946:	e7f0      	b.n	800792a <_dtoa_r+0xaba>
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfcc      	ite	gt
 800794e:	461e      	movgt	r6, r3
 8007950:	2601      	movle	r6, #1
 8007952:	4456      	add	r6, sl
 8007954:	2700      	movs	r7, #0
 8007956:	4649      	mov	r1, r9
 8007958:	2201      	movs	r2, #1
 800795a:	4658      	mov	r0, fp
 800795c:	f000 fb5a 	bl	8008014 <__lshift>
 8007960:	4621      	mov	r1, r4
 8007962:	4681      	mov	r9, r0
 8007964:	f000 fbc2 	bl	80080ec <__mcmp>
 8007968:	2800      	cmp	r0, #0
 800796a:	dcb0      	bgt.n	80078ce <_dtoa_r+0xa5e>
 800796c:	d102      	bne.n	8007974 <_dtoa_r+0xb04>
 800796e:	f018 0f01 	tst.w	r8, #1
 8007972:	d1ac      	bne.n	80078ce <_dtoa_r+0xa5e>
 8007974:	4633      	mov	r3, r6
 8007976:	461e      	mov	r6, r3
 8007978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800797c:	2a30      	cmp	r2, #48	@ 0x30
 800797e:	d0fa      	beq.n	8007976 <_dtoa_r+0xb06>
 8007980:	e5c2      	b.n	8007508 <_dtoa_r+0x698>
 8007982:	459a      	cmp	sl, r3
 8007984:	d1a4      	bne.n	80078d0 <_dtoa_r+0xa60>
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	3301      	adds	r3, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	2331      	movs	r3, #49	@ 0x31
 800798e:	f88a 3000 	strb.w	r3, [sl]
 8007992:	e5b9      	b.n	8007508 <_dtoa_r+0x698>
 8007994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80079f4 <_dtoa_r+0xb84>
 800799a:	b11b      	cbz	r3, 80079a4 <_dtoa_r+0xb34>
 800799c:	f10a 0308 	add.w	r3, sl, #8
 80079a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4650      	mov	r0, sl
 80079a6:	b019      	add	sp, #100	@ 0x64
 80079a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	f77f ae37 	ble.w	8007622 <_dtoa_r+0x7b2>
 80079b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b8:	2001      	movs	r0, #1
 80079ba:	e655      	b.n	8007668 <_dtoa_r+0x7f8>
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f77f aed6 	ble.w	8007770 <_dtoa_r+0x900>
 80079c4:	4656      	mov	r6, sl
 80079c6:	4621      	mov	r1, r4
 80079c8:	4648      	mov	r0, r9
 80079ca:	f7ff f9c6 	bl	8006d5a <quorem>
 80079ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079d2:	f806 8b01 	strb.w	r8, [r6], #1
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	eba6 020a 	sub.w	r2, r6, sl
 80079dc:	4293      	cmp	r3, r2
 80079de:	ddb3      	ble.n	8007948 <_dtoa_r+0xad8>
 80079e0:	4649      	mov	r1, r9
 80079e2:	2300      	movs	r3, #0
 80079e4:	220a      	movs	r2, #10
 80079e6:	4658      	mov	r0, fp
 80079e8:	f000 f968 	bl	8007cbc <__multadd>
 80079ec:	4681      	mov	r9, r0
 80079ee:	e7ea      	b.n	80079c6 <_dtoa_r+0xb56>
 80079f0:	08008bd4 	.word	0x08008bd4
 80079f4:	08008b58 	.word	0x08008b58

080079f8 <_free_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4605      	mov	r5, r0
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d041      	beq.n	8007a84 <_free_r+0x8c>
 8007a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a04:	1f0c      	subs	r4, r1, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bfb8      	it	lt
 8007a0a:	18e4      	addlt	r4, r4, r3
 8007a0c:	f000 f8e8 	bl	8007be0 <__malloc_lock>
 8007a10:	4a1d      	ldr	r2, [pc, #116]	@ (8007a88 <_free_r+0x90>)
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	b933      	cbnz	r3, 8007a24 <_free_r+0x2c>
 8007a16:	6063      	str	r3, [r4, #4]
 8007a18:	6014      	str	r4, [r2, #0]
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a20:	f000 b8e4 	b.w	8007bec <__malloc_unlock>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d908      	bls.n	8007a3a <_free_r+0x42>
 8007a28:	6820      	ldr	r0, [r4, #0]
 8007a2a:	1821      	adds	r1, r4, r0
 8007a2c:	428b      	cmp	r3, r1
 8007a2e:	bf01      	itttt	eq
 8007a30:	6819      	ldreq	r1, [r3, #0]
 8007a32:	685b      	ldreq	r3, [r3, #4]
 8007a34:	1809      	addeq	r1, r1, r0
 8007a36:	6021      	streq	r1, [r4, #0]
 8007a38:	e7ed      	b.n	8007a16 <_free_r+0x1e>
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	b10b      	cbz	r3, 8007a44 <_free_r+0x4c>
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	d9fa      	bls.n	8007a3a <_free_r+0x42>
 8007a44:	6811      	ldr	r1, [r2, #0]
 8007a46:	1850      	adds	r0, r2, r1
 8007a48:	42a0      	cmp	r0, r4
 8007a4a:	d10b      	bne.n	8007a64 <_free_r+0x6c>
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	4401      	add	r1, r0
 8007a50:	1850      	adds	r0, r2, r1
 8007a52:	4283      	cmp	r3, r0
 8007a54:	6011      	str	r1, [r2, #0]
 8007a56:	d1e0      	bne.n	8007a1a <_free_r+0x22>
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	6053      	str	r3, [r2, #4]
 8007a5e:	4408      	add	r0, r1
 8007a60:	6010      	str	r0, [r2, #0]
 8007a62:	e7da      	b.n	8007a1a <_free_r+0x22>
 8007a64:	d902      	bls.n	8007a6c <_free_r+0x74>
 8007a66:	230c      	movs	r3, #12
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	e7d6      	b.n	8007a1a <_free_r+0x22>
 8007a6c:	6820      	ldr	r0, [r4, #0]
 8007a6e:	1821      	adds	r1, r4, r0
 8007a70:	428b      	cmp	r3, r1
 8007a72:	bf04      	itt	eq
 8007a74:	6819      	ldreq	r1, [r3, #0]
 8007a76:	685b      	ldreq	r3, [r3, #4]
 8007a78:	6063      	str	r3, [r4, #4]
 8007a7a:	bf04      	itt	eq
 8007a7c:	1809      	addeq	r1, r1, r0
 8007a7e:	6021      	streq	r1, [r4, #0]
 8007a80:	6054      	str	r4, [r2, #4]
 8007a82:	e7ca      	b.n	8007a1a <_free_r+0x22>
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	bf00      	nop
 8007a88:	200004c8 	.word	0x200004c8

08007a8c <malloc>:
 8007a8c:	4b02      	ldr	r3, [pc, #8]	@ (8007a98 <malloc+0xc>)
 8007a8e:	4601      	mov	r1, r0
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	f000 b825 	b.w	8007ae0 <_malloc_r>
 8007a96:	bf00      	nop
 8007a98:	20000024 	.word	0x20000024

08007a9c <sbrk_aligned>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8007adc <sbrk_aligned+0x40>)
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	6831      	ldr	r1, [r6, #0]
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	b911      	cbnz	r1, 8007aae <sbrk_aligned+0x12>
 8007aa8:	f000 feaa 	bl	8008800 <_sbrk_r>
 8007aac:	6030      	str	r0, [r6, #0]
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 fea5 	bl	8008800 <_sbrk_r>
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	d103      	bne.n	8007ac2 <sbrk_aligned+0x26>
 8007aba:	f04f 34ff 	mov.w	r4, #4294967295
 8007abe:	4620      	mov	r0, r4
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
 8007ac2:	1cc4      	adds	r4, r0, #3
 8007ac4:	f024 0403 	bic.w	r4, r4, #3
 8007ac8:	42a0      	cmp	r0, r4
 8007aca:	d0f8      	beq.n	8007abe <sbrk_aligned+0x22>
 8007acc:	1a21      	subs	r1, r4, r0
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f000 fe96 	bl	8008800 <_sbrk_r>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d1f2      	bne.n	8007abe <sbrk_aligned+0x22>
 8007ad8:	e7ef      	b.n	8007aba <sbrk_aligned+0x1e>
 8007ada:	bf00      	nop
 8007adc:	200004c4 	.word	0x200004c4

08007ae0 <_malloc_r>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	1ccd      	adds	r5, r1, #3
 8007ae6:	f025 0503 	bic.w	r5, r5, #3
 8007aea:	3508      	adds	r5, #8
 8007aec:	2d0c      	cmp	r5, #12
 8007aee:	bf38      	it	cc
 8007af0:	250c      	movcc	r5, #12
 8007af2:	2d00      	cmp	r5, #0
 8007af4:	4606      	mov	r6, r0
 8007af6:	db01      	blt.n	8007afc <_malloc_r+0x1c>
 8007af8:	42a9      	cmp	r1, r5
 8007afa:	d904      	bls.n	8007b06 <_malloc_r+0x26>
 8007afc:	230c      	movs	r3, #12
 8007afe:	6033      	str	r3, [r6, #0]
 8007b00:	2000      	movs	r0, #0
 8007b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bdc <_malloc_r+0xfc>
 8007b0a:	f000 f869 	bl	8007be0 <__malloc_lock>
 8007b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b12:	461c      	mov	r4, r3
 8007b14:	bb44      	cbnz	r4, 8007b68 <_malloc_r+0x88>
 8007b16:	4629      	mov	r1, r5
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f7ff ffbf 	bl	8007a9c <sbrk_aligned>
 8007b1e:	1c43      	adds	r3, r0, #1
 8007b20:	4604      	mov	r4, r0
 8007b22:	d158      	bne.n	8007bd6 <_malloc_r+0xf6>
 8007b24:	f8d8 4000 	ldr.w	r4, [r8]
 8007b28:	4627      	mov	r7, r4
 8007b2a:	2f00      	cmp	r7, #0
 8007b2c:	d143      	bne.n	8007bb6 <_malloc_r+0xd6>
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	d04b      	beq.n	8007bca <_malloc_r+0xea>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	4639      	mov	r1, r7
 8007b36:	4630      	mov	r0, r6
 8007b38:	eb04 0903 	add.w	r9, r4, r3
 8007b3c:	f000 fe60 	bl	8008800 <_sbrk_r>
 8007b40:	4581      	cmp	r9, r0
 8007b42:	d142      	bne.n	8007bca <_malloc_r+0xea>
 8007b44:	6821      	ldr	r1, [r4, #0]
 8007b46:	1a6d      	subs	r5, r5, r1
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7ff ffa6 	bl	8007a9c <sbrk_aligned>
 8007b50:	3001      	adds	r0, #1
 8007b52:	d03a      	beq.n	8007bca <_malloc_r+0xea>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	442b      	add	r3, r5
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	bb62      	cbnz	r2, 8007bbc <_malloc_r+0xdc>
 8007b62:	f8c8 7000 	str.w	r7, [r8]
 8007b66:	e00f      	b.n	8007b88 <_malloc_r+0xa8>
 8007b68:	6822      	ldr	r2, [r4, #0]
 8007b6a:	1b52      	subs	r2, r2, r5
 8007b6c:	d420      	bmi.n	8007bb0 <_malloc_r+0xd0>
 8007b6e:	2a0b      	cmp	r2, #11
 8007b70:	d917      	bls.n	8007ba2 <_malloc_r+0xc2>
 8007b72:	1961      	adds	r1, r4, r5
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	6025      	str	r5, [r4, #0]
 8007b78:	bf18      	it	ne
 8007b7a:	6059      	strne	r1, [r3, #4]
 8007b7c:	6863      	ldr	r3, [r4, #4]
 8007b7e:	bf08      	it	eq
 8007b80:	f8c8 1000 	streq.w	r1, [r8]
 8007b84:	5162      	str	r2, [r4, r5]
 8007b86:	604b      	str	r3, [r1, #4]
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 f82f 	bl	8007bec <__malloc_unlock>
 8007b8e:	f104 000b 	add.w	r0, r4, #11
 8007b92:	1d23      	adds	r3, r4, #4
 8007b94:	f020 0007 	bic.w	r0, r0, #7
 8007b98:	1ac2      	subs	r2, r0, r3
 8007b9a:	bf1c      	itt	ne
 8007b9c:	1a1b      	subne	r3, r3, r0
 8007b9e:	50a3      	strne	r3, [r4, r2]
 8007ba0:	e7af      	b.n	8007b02 <_malloc_r+0x22>
 8007ba2:	6862      	ldr	r2, [r4, #4]
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	bf0c      	ite	eq
 8007ba8:	f8c8 2000 	streq.w	r2, [r8]
 8007bac:	605a      	strne	r2, [r3, #4]
 8007bae:	e7eb      	b.n	8007b88 <_malloc_r+0xa8>
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	6864      	ldr	r4, [r4, #4]
 8007bb4:	e7ae      	b.n	8007b14 <_malloc_r+0x34>
 8007bb6:	463c      	mov	r4, r7
 8007bb8:	687f      	ldr	r7, [r7, #4]
 8007bba:	e7b6      	b.n	8007b2a <_malloc_r+0x4a>
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	d1fb      	bne.n	8007bbc <_malloc_r+0xdc>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	6053      	str	r3, [r2, #4]
 8007bc8:	e7de      	b.n	8007b88 <_malloc_r+0xa8>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	6033      	str	r3, [r6, #0]
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f000 f80c 	bl	8007bec <__malloc_unlock>
 8007bd4:	e794      	b.n	8007b00 <_malloc_r+0x20>
 8007bd6:	6005      	str	r5, [r0, #0]
 8007bd8:	e7d6      	b.n	8007b88 <_malloc_r+0xa8>
 8007bda:	bf00      	nop
 8007bdc:	200004c8 	.word	0x200004c8

08007be0 <__malloc_lock>:
 8007be0:	4801      	ldr	r0, [pc, #4]	@ (8007be8 <__malloc_lock+0x8>)
 8007be2:	f7ff b8b8 	b.w	8006d56 <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	200004c0 	.word	0x200004c0

08007bec <__malloc_unlock>:
 8007bec:	4801      	ldr	r0, [pc, #4]	@ (8007bf4 <__malloc_unlock+0x8>)
 8007bee:	f7ff b8b3 	b.w	8006d58 <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	200004c0 	.word	0x200004c0

08007bf8 <_Balloc>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	69c6      	ldr	r6, [r0, #28]
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	460d      	mov	r5, r1
 8007c00:	b976      	cbnz	r6, 8007c20 <_Balloc+0x28>
 8007c02:	2010      	movs	r0, #16
 8007c04:	f7ff ff42 	bl	8007a8c <malloc>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	61e0      	str	r0, [r4, #28]
 8007c0c:	b920      	cbnz	r0, 8007c18 <_Balloc+0x20>
 8007c0e:	4b18      	ldr	r3, [pc, #96]	@ (8007c70 <_Balloc+0x78>)
 8007c10:	4818      	ldr	r0, [pc, #96]	@ (8007c74 <_Balloc+0x7c>)
 8007c12:	216b      	movs	r1, #107	@ 0x6b
 8007c14:	f000 fe12 	bl	800883c <__assert_func>
 8007c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c1c:	6006      	str	r6, [r0, #0]
 8007c1e:	60c6      	str	r6, [r0, #12]
 8007c20:	69e6      	ldr	r6, [r4, #28]
 8007c22:	68f3      	ldr	r3, [r6, #12]
 8007c24:	b183      	cbz	r3, 8007c48 <_Balloc+0x50>
 8007c26:	69e3      	ldr	r3, [r4, #28]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c2e:	b9b8      	cbnz	r0, 8007c60 <_Balloc+0x68>
 8007c30:	2101      	movs	r1, #1
 8007c32:	fa01 f605 	lsl.w	r6, r1, r5
 8007c36:	1d72      	adds	r2, r6, #5
 8007c38:	0092      	lsls	r2, r2, #2
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 fe1c 	bl	8008878 <_calloc_r>
 8007c40:	b160      	cbz	r0, 8007c5c <_Balloc+0x64>
 8007c42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c46:	e00e      	b.n	8007c66 <_Balloc+0x6e>
 8007c48:	2221      	movs	r2, #33	@ 0x21
 8007c4a:	2104      	movs	r1, #4
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 fe13 	bl	8008878 <_calloc_r>
 8007c52:	69e3      	ldr	r3, [r4, #28]
 8007c54:	60f0      	str	r0, [r6, #12]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e4      	bne.n	8007c26 <_Balloc+0x2e>
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}
 8007c60:	6802      	ldr	r2, [r0, #0]
 8007c62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c66:	2300      	movs	r3, #0
 8007c68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c6c:	e7f7      	b.n	8007c5e <_Balloc+0x66>
 8007c6e:	bf00      	nop
 8007c70:	08008b65 	.word	0x08008b65
 8007c74:	08008be5 	.word	0x08008be5

08007c78 <_Bfree>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	69c6      	ldr	r6, [r0, #28]
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	b976      	cbnz	r6, 8007ca0 <_Bfree+0x28>
 8007c82:	2010      	movs	r0, #16
 8007c84:	f7ff ff02 	bl	8007a8c <malloc>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	61e8      	str	r0, [r5, #28]
 8007c8c:	b920      	cbnz	r0, 8007c98 <_Bfree+0x20>
 8007c8e:	4b09      	ldr	r3, [pc, #36]	@ (8007cb4 <_Bfree+0x3c>)
 8007c90:	4809      	ldr	r0, [pc, #36]	@ (8007cb8 <_Bfree+0x40>)
 8007c92:	218f      	movs	r1, #143	@ 0x8f
 8007c94:	f000 fdd2 	bl	800883c <__assert_func>
 8007c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c9c:	6006      	str	r6, [r0, #0]
 8007c9e:	60c6      	str	r6, [r0, #12]
 8007ca0:	b13c      	cbz	r4, 8007cb2 <_Bfree+0x3a>
 8007ca2:	69eb      	ldr	r3, [r5, #28]
 8007ca4:	6862      	ldr	r2, [r4, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cac:	6021      	str	r1, [r4, #0]
 8007cae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	08008b65 	.word	0x08008b65
 8007cb8:	08008be5 	.word	0x08008be5

08007cbc <__multadd>:
 8007cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc0:	690d      	ldr	r5, [r1, #16]
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	461e      	mov	r6, r3
 8007cc8:	f101 0c14 	add.w	ip, r1, #20
 8007ccc:	2000      	movs	r0, #0
 8007cce:	f8dc 3000 	ldr.w	r3, [ip]
 8007cd2:	b299      	uxth	r1, r3
 8007cd4:	fb02 6101 	mla	r1, r2, r1, r6
 8007cd8:	0c1e      	lsrs	r6, r3, #16
 8007cda:	0c0b      	lsrs	r3, r1, #16
 8007cdc:	fb02 3306 	mla	r3, r2, r6, r3
 8007ce0:	b289      	uxth	r1, r1
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ce8:	4285      	cmp	r5, r0
 8007cea:	f84c 1b04 	str.w	r1, [ip], #4
 8007cee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cf2:	dcec      	bgt.n	8007cce <__multadd+0x12>
 8007cf4:	b30e      	cbz	r6, 8007d3a <__multadd+0x7e>
 8007cf6:	68a3      	ldr	r3, [r4, #8]
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	dc19      	bgt.n	8007d30 <__multadd+0x74>
 8007cfc:	6861      	ldr	r1, [r4, #4]
 8007cfe:	4638      	mov	r0, r7
 8007d00:	3101      	adds	r1, #1
 8007d02:	f7ff ff79 	bl	8007bf8 <_Balloc>
 8007d06:	4680      	mov	r8, r0
 8007d08:	b928      	cbnz	r0, 8007d16 <__multadd+0x5a>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d40 <__multadd+0x84>)
 8007d0e:	480d      	ldr	r0, [pc, #52]	@ (8007d44 <__multadd+0x88>)
 8007d10:	21ba      	movs	r1, #186	@ 0xba
 8007d12:	f000 fd93 	bl	800883c <__assert_func>
 8007d16:	6922      	ldr	r2, [r4, #16]
 8007d18:	3202      	adds	r2, #2
 8007d1a:	f104 010c 	add.w	r1, r4, #12
 8007d1e:	0092      	lsls	r2, r2, #2
 8007d20:	300c      	adds	r0, #12
 8007d22:	f000 fd7d 	bl	8008820 <memcpy>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f7ff ffa5 	bl	8007c78 <_Bfree>
 8007d2e:	4644      	mov	r4, r8
 8007d30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d34:	3501      	adds	r5, #1
 8007d36:	615e      	str	r6, [r3, #20]
 8007d38:	6125      	str	r5, [r4, #16]
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d40:	08008bd4 	.word	0x08008bd4
 8007d44:	08008be5 	.word	0x08008be5

08007d48 <__hi0bits>:
 8007d48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	bf36      	itet	cc
 8007d50:	0403      	lslcc	r3, r0, #16
 8007d52:	2000      	movcs	r0, #0
 8007d54:	2010      	movcc	r0, #16
 8007d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d5a:	bf3c      	itt	cc
 8007d5c:	021b      	lslcc	r3, r3, #8
 8007d5e:	3008      	addcc	r0, #8
 8007d60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d64:	bf3c      	itt	cc
 8007d66:	011b      	lslcc	r3, r3, #4
 8007d68:	3004      	addcc	r0, #4
 8007d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d6e:	bf3c      	itt	cc
 8007d70:	009b      	lslcc	r3, r3, #2
 8007d72:	3002      	addcc	r0, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	db05      	blt.n	8007d84 <__hi0bits+0x3c>
 8007d78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d7c:	f100 0001 	add.w	r0, r0, #1
 8007d80:	bf08      	it	eq
 8007d82:	2020      	moveq	r0, #32
 8007d84:	4770      	bx	lr

08007d86 <__lo0bits>:
 8007d86:	6803      	ldr	r3, [r0, #0]
 8007d88:	4602      	mov	r2, r0
 8007d8a:	f013 0007 	ands.w	r0, r3, #7
 8007d8e:	d00b      	beq.n	8007da8 <__lo0bits+0x22>
 8007d90:	07d9      	lsls	r1, r3, #31
 8007d92:	d421      	bmi.n	8007dd8 <__lo0bits+0x52>
 8007d94:	0798      	lsls	r0, r3, #30
 8007d96:	bf49      	itett	mi
 8007d98:	085b      	lsrmi	r3, r3, #1
 8007d9a:	089b      	lsrpl	r3, r3, #2
 8007d9c:	2001      	movmi	r0, #1
 8007d9e:	6013      	strmi	r3, [r2, #0]
 8007da0:	bf5c      	itt	pl
 8007da2:	6013      	strpl	r3, [r2, #0]
 8007da4:	2002      	movpl	r0, #2
 8007da6:	4770      	bx	lr
 8007da8:	b299      	uxth	r1, r3
 8007daa:	b909      	cbnz	r1, 8007db0 <__lo0bits+0x2a>
 8007dac:	0c1b      	lsrs	r3, r3, #16
 8007dae:	2010      	movs	r0, #16
 8007db0:	b2d9      	uxtb	r1, r3
 8007db2:	b909      	cbnz	r1, 8007db8 <__lo0bits+0x32>
 8007db4:	3008      	adds	r0, #8
 8007db6:	0a1b      	lsrs	r3, r3, #8
 8007db8:	0719      	lsls	r1, r3, #28
 8007dba:	bf04      	itt	eq
 8007dbc:	091b      	lsreq	r3, r3, #4
 8007dbe:	3004      	addeq	r0, #4
 8007dc0:	0799      	lsls	r1, r3, #30
 8007dc2:	bf04      	itt	eq
 8007dc4:	089b      	lsreq	r3, r3, #2
 8007dc6:	3002      	addeq	r0, #2
 8007dc8:	07d9      	lsls	r1, r3, #31
 8007dca:	d403      	bmi.n	8007dd4 <__lo0bits+0x4e>
 8007dcc:	085b      	lsrs	r3, r3, #1
 8007dce:	f100 0001 	add.w	r0, r0, #1
 8007dd2:	d003      	beq.n	8007ddc <__lo0bits+0x56>
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	4770      	bx	lr
 8007dd8:	2000      	movs	r0, #0
 8007dda:	4770      	bx	lr
 8007ddc:	2020      	movs	r0, #32
 8007dde:	4770      	bx	lr

08007de0 <__i2b>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	460c      	mov	r4, r1
 8007de4:	2101      	movs	r1, #1
 8007de6:	f7ff ff07 	bl	8007bf8 <_Balloc>
 8007dea:	4602      	mov	r2, r0
 8007dec:	b928      	cbnz	r0, 8007dfa <__i2b+0x1a>
 8007dee:	4b05      	ldr	r3, [pc, #20]	@ (8007e04 <__i2b+0x24>)
 8007df0:	4805      	ldr	r0, [pc, #20]	@ (8007e08 <__i2b+0x28>)
 8007df2:	f240 1145 	movw	r1, #325	@ 0x145
 8007df6:	f000 fd21 	bl	800883c <__assert_func>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	6144      	str	r4, [r0, #20]
 8007dfe:	6103      	str	r3, [r0, #16]
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	bf00      	nop
 8007e04:	08008bd4 	.word	0x08008bd4
 8007e08:	08008be5 	.word	0x08008be5

08007e0c <__multiply>:
 8007e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	4614      	mov	r4, r2
 8007e12:	690a      	ldr	r2, [r1, #16]
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	bfa8      	it	ge
 8007e1a:	4623      	movge	r3, r4
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	bfa4      	itt	ge
 8007e20:	460c      	movge	r4, r1
 8007e22:	461f      	movge	r7, r3
 8007e24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e2c:	68a3      	ldr	r3, [r4, #8]
 8007e2e:	6861      	ldr	r1, [r4, #4]
 8007e30:	eb0a 0609 	add.w	r6, sl, r9
 8007e34:	42b3      	cmp	r3, r6
 8007e36:	b085      	sub	sp, #20
 8007e38:	bfb8      	it	lt
 8007e3a:	3101      	addlt	r1, #1
 8007e3c:	f7ff fedc 	bl	8007bf8 <_Balloc>
 8007e40:	b930      	cbnz	r0, 8007e50 <__multiply+0x44>
 8007e42:	4602      	mov	r2, r0
 8007e44:	4b44      	ldr	r3, [pc, #272]	@ (8007f58 <__multiply+0x14c>)
 8007e46:	4845      	ldr	r0, [pc, #276]	@ (8007f5c <__multiply+0x150>)
 8007e48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e4c:	f000 fcf6 	bl	800883c <__assert_func>
 8007e50:	f100 0514 	add.w	r5, r0, #20
 8007e54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e58:	462b      	mov	r3, r5
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	4543      	cmp	r3, r8
 8007e5e:	d321      	bcc.n	8007ea4 <__multiply+0x98>
 8007e60:	f107 0114 	add.w	r1, r7, #20
 8007e64:	f104 0214 	add.w	r2, r4, #20
 8007e68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e70:	9302      	str	r3, [sp, #8]
 8007e72:	1b13      	subs	r3, r2, r4
 8007e74:	3b15      	subs	r3, #21
 8007e76:	f023 0303 	bic.w	r3, r3, #3
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	f104 0715 	add.w	r7, r4, #21
 8007e80:	42ba      	cmp	r2, r7
 8007e82:	bf38      	it	cc
 8007e84:	2304      	movcc	r3, #4
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	9b02      	ldr	r3, [sp, #8]
 8007e8a:	9103      	str	r1, [sp, #12]
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	d80c      	bhi.n	8007eaa <__multiply+0x9e>
 8007e90:	2e00      	cmp	r6, #0
 8007e92:	dd03      	ble.n	8007e9c <__multiply+0x90>
 8007e94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d05b      	beq.n	8007f54 <__multiply+0x148>
 8007e9c:	6106      	str	r6, [r0, #16]
 8007e9e:	b005      	add	sp, #20
 8007ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea4:	f843 2b04 	str.w	r2, [r3], #4
 8007ea8:	e7d8      	b.n	8007e5c <__multiply+0x50>
 8007eaa:	f8b1 a000 	ldrh.w	sl, [r1]
 8007eae:	f1ba 0f00 	cmp.w	sl, #0
 8007eb2:	d024      	beq.n	8007efe <__multiply+0xf2>
 8007eb4:	f104 0e14 	add.w	lr, r4, #20
 8007eb8:	46a9      	mov	r9, r5
 8007eba:	f04f 0c00 	mov.w	ip, #0
 8007ebe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ec2:	f8d9 3000 	ldr.w	r3, [r9]
 8007ec6:	fa1f fb87 	uxth.w	fp, r7
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ed0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ed4:	f8d9 7000 	ldr.w	r7, [r9]
 8007ed8:	4463      	add	r3, ip
 8007eda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ede:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ee2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007eec:	4572      	cmp	r2, lr
 8007eee:	f849 3b04 	str.w	r3, [r9], #4
 8007ef2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ef6:	d8e2      	bhi.n	8007ebe <__multiply+0xb2>
 8007ef8:	9b01      	ldr	r3, [sp, #4]
 8007efa:	f845 c003 	str.w	ip, [r5, r3]
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f04:	3104      	adds	r1, #4
 8007f06:	f1b9 0f00 	cmp.w	r9, #0
 8007f0a:	d021      	beq.n	8007f50 <__multiply+0x144>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	f104 0c14 	add.w	ip, r4, #20
 8007f12:	46ae      	mov	lr, r5
 8007f14:	f04f 0a00 	mov.w	sl, #0
 8007f18:	f8bc b000 	ldrh.w	fp, [ip]
 8007f1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f20:	fb09 770b 	mla	r7, r9, fp, r7
 8007f24:	4457      	add	r7, sl
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f2c:	f84e 3b04 	str.w	r3, [lr], #4
 8007f30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f38:	f8be 3000 	ldrh.w	r3, [lr]
 8007f3c:	fb09 330a 	mla	r3, r9, sl, r3
 8007f40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f44:	4562      	cmp	r2, ip
 8007f46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f4a:	d8e5      	bhi.n	8007f18 <__multiply+0x10c>
 8007f4c:	9f01      	ldr	r7, [sp, #4]
 8007f4e:	51eb      	str	r3, [r5, r7]
 8007f50:	3504      	adds	r5, #4
 8007f52:	e799      	b.n	8007e88 <__multiply+0x7c>
 8007f54:	3e01      	subs	r6, #1
 8007f56:	e79b      	b.n	8007e90 <__multiply+0x84>
 8007f58:	08008bd4 	.word	0x08008bd4
 8007f5c:	08008be5 	.word	0x08008be5

08007f60 <__pow5mult>:
 8007f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f64:	4615      	mov	r5, r2
 8007f66:	f012 0203 	ands.w	r2, r2, #3
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	460e      	mov	r6, r1
 8007f6e:	d007      	beq.n	8007f80 <__pow5mult+0x20>
 8007f70:	4c25      	ldr	r4, [pc, #148]	@ (8008008 <__pow5mult+0xa8>)
 8007f72:	3a01      	subs	r2, #1
 8007f74:	2300      	movs	r3, #0
 8007f76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f7a:	f7ff fe9f 	bl	8007cbc <__multadd>
 8007f7e:	4606      	mov	r6, r0
 8007f80:	10ad      	asrs	r5, r5, #2
 8007f82:	d03d      	beq.n	8008000 <__pow5mult+0xa0>
 8007f84:	69fc      	ldr	r4, [r7, #28]
 8007f86:	b97c      	cbnz	r4, 8007fa8 <__pow5mult+0x48>
 8007f88:	2010      	movs	r0, #16
 8007f8a:	f7ff fd7f 	bl	8007a8c <malloc>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	61f8      	str	r0, [r7, #28]
 8007f92:	b928      	cbnz	r0, 8007fa0 <__pow5mult+0x40>
 8007f94:	4b1d      	ldr	r3, [pc, #116]	@ (800800c <__pow5mult+0xac>)
 8007f96:	481e      	ldr	r0, [pc, #120]	@ (8008010 <__pow5mult+0xb0>)
 8007f98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f9c:	f000 fc4e 	bl	800883c <__assert_func>
 8007fa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fa4:	6004      	str	r4, [r0, #0]
 8007fa6:	60c4      	str	r4, [r0, #12]
 8007fa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007fac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fb0:	b94c      	cbnz	r4, 8007fc6 <__pow5mult+0x66>
 8007fb2:	f240 2171 	movw	r1, #625	@ 0x271
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f7ff ff12 	bl	8007de0 <__i2b>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	6003      	str	r3, [r0, #0]
 8007fc6:	f04f 0900 	mov.w	r9, #0
 8007fca:	07eb      	lsls	r3, r5, #31
 8007fcc:	d50a      	bpl.n	8007fe4 <__pow5mult+0x84>
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f7ff ff1a 	bl	8007e0c <__multiply>
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4680      	mov	r8, r0
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f7ff fe4b 	bl	8007c78 <_Bfree>
 8007fe2:	4646      	mov	r6, r8
 8007fe4:	106d      	asrs	r5, r5, #1
 8007fe6:	d00b      	beq.n	8008000 <__pow5mult+0xa0>
 8007fe8:	6820      	ldr	r0, [r4, #0]
 8007fea:	b938      	cbnz	r0, 8007ffc <__pow5mult+0x9c>
 8007fec:	4622      	mov	r2, r4
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff ff0b 	bl	8007e0c <__multiply>
 8007ff6:	6020      	str	r0, [r4, #0]
 8007ff8:	f8c0 9000 	str.w	r9, [r0]
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	e7e4      	b.n	8007fca <__pow5mult+0x6a>
 8008000:	4630      	mov	r0, r6
 8008002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008006:	bf00      	nop
 8008008:	08008c40 	.word	0x08008c40
 800800c:	08008b65 	.word	0x08008b65
 8008010:	08008be5 	.word	0x08008be5

08008014 <__lshift>:
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	460c      	mov	r4, r1
 800801a:	6849      	ldr	r1, [r1, #4]
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008022:	68a3      	ldr	r3, [r4, #8]
 8008024:	4607      	mov	r7, r0
 8008026:	4691      	mov	r9, r2
 8008028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800802c:	f108 0601 	add.w	r6, r8, #1
 8008030:	42b3      	cmp	r3, r6
 8008032:	db0b      	blt.n	800804c <__lshift+0x38>
 8008034:	4638      	mov	r0, r7
 8008036:	f7ff fddf 	bl	8007bf8 <_Balloc>
 800803a:	4605      	mov	r5, r0
 800803c:	b948      	cbnz	r0, 8008052 <__lshift+0x3e>
 800803e:	4602      	mov	r2, r0
 8008040:	4b28      	ldr	r3, [pc, #160]	@ (80080e4 <__lshift+0xd0>)
 8008042:	4829      	ldr	r0, [pc, #164]	@ (80080e8 <__lshift+0xd4>)
 8008044:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008048:	f000 fbf8 	bl	800883c <__assert_func>
 800804c:	3101      	adds	r1, #1
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	e7ee      	b.n	8008030 <__lshift+0x1c>
 8008052:	2300      	movs	r3, #0
 8008054:	f100 0114 	add.w	r1, r0, #20
 8008058:	f100 0210 	add.w	r2, r0, #16
 800805c:	4618      	mov	r0, r3
 800805e:	4553      	cmp	r3, sl
 8008060:	db33      	blt.n	80080ca <__lshift+0xb6>
 8008062:	6920      	ldr	r0, [r4, #16]
 8008064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008068:	f104 0314 	add.w	r3, r4, #20
 800806c:	f019 091f 	ands.w	r9, r9, #31
 8008070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008078:	d02b      	beq.n	80080d2 <__lshift+0xbe>
 800807a:	f1c9 0e20 	rsb	lr, r9, #32
 800807e:	468a      	mov	sl, r1
 8008080:	2200      	movs	r2, #0
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	fa00 f009 	lsl.w	r0, r0, r9
 8008088:	4310      	orrs	r0, r2
 800808a:	f84a 0b04 	str.w	r0, [sl], #4
 800808e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008092:	459c      	cmp	ip, r3
 8008094:	fa22 f20e 	lsr.w	r2, r2, lr
 8008098:	d8f3      	bhi.n	8008082 <__lshift+0x6e>
 800809a:	ebac 0304 	sub.w	r3, ip, r4
 800809e:	3b15      	subs	r3, #21
 80080a0:	f023 0303 	bic.w	r3, r3, #3
 80080a4:	3304      	adds	r3, #4
 80080a6:	f104 0015 	add.w	r0, r4, #21
 80080aa:	4584      	cmp	ip, r0
 80080ac:	bf38      	it	cc
 80080ae:	2304      	movcc	r3, #4
 80080b0:	50ca      	str	r2, [r1, r3]
 80080b2:	b10a      	cbz	r2, 80080b8 <__lshift+0xa4>
 80080b4:	f108 0602 	add.w	r6, r8, #2
 80080b8:	3e01      	subs	r6, #1
 80080ba:	4638      	mov	r0, r7
 80080bc:	612e      	str	r6, [r5, #16]
 80080be:	4621      	mov	r1, r4
 80080c0:	f7ff fdda 	bl	8007c78 <_Bfree>
 80080c4:	4628      	mov	r0, r5
 80080c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80080ce:	3301      	adds	r3, #1
 80080d0:	e7c5      	b.n	800805e <__lshift+0x4a>
 80080d2:	3904      	subs	r1, #4
 80080d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80080dc:	459c      	cmp	ip, r3
 80080de:	d8f9      	bhi.n	80080d4 <__lshift+0xc0>
 80080e0:	e7ea      	b.n	80080b8 <__lshift+0xa4>
 80080e2:	bf00      	nop
 80080e4:	08008bd4 	.word	0x08008bd4
 80080e8:	08008be5 	.word	0x08008be5

080080ec <__mcmp>:
 80080ec:	690a      	ldr	r2, [r1, #16]
 80080ee:	4603      	mov	r3, r0
 80080f0:	6900      	ldr	r0, [r0, #16]
 80080f2:	1a80      	subs	r0, r0, r2
 80080f4:	b530      	push	{r4, r5, lr}
 80080f6:	d10e      	bne.n	8008116 <__mcmp+0x2a>
 80080f8:	3314      	adds	r3, #20
 80080fa:	3114      	adds	r1, #20
 80080fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008100:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008104:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008108:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800810c:	4295      	cmp	r5, r2
 800810e:	d003      	beq.n	8008118 <__mcmp+0x2c>
 8008110:	d205      	bcs.n	800811e <__mcmp+0x32>
 8008112:	f04f 30ff 	mov.w	r0, #4294967295
 8008116:	bd30      	pop	{r4, r5, pc}
 8008118:	42a3      	cmp	r3, r4
 800811a:	d3f3      	bcc.n	8008104 <__mcmp+0x18>
 800811c:	e7fb      	b.n	8008116 <__mcmp+0x2a>
 800811e:	2001      	movs	r0, #1
 8008120:	e7f9      	b.n	8008116 <__mcmp+0x2a>
	...

08008124 <__mdiff>:
 8008124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	4689      	mov	r9, r1
 800812a:	4606      	mov	r6, r0
 800812c:	4611      	mov	r1, r2
 800812e:	4648      	mov	r0, r9
 8008130:	4614      	mov	r4, r2
 8008132:	f7ff ffdb 	bl	80080ec <__mcmp>
 8008136:	1e05      	subs	r5, r0, #0
 8008138:	d112      	bne.n	8008160 <__mdiff+0x3c>
 800813a:	4629      	mov	r1, r5
 800813c:	4630      	mov	r0, r6
 800813e:	f7ff fd5b 	bl	8007bf8 <_Balloc>
 8008142:	4602      	mov	r2, r0
 8008144:	b928      	cbnz	r0, 8008152 <__mdiff+0x2e>
 8008146:	4b3f      	ldr	r3, [pc, #252]	@ (8008244 <__mdiff+0x120>)
 8008148:	f240 2137 	movw	r1, #567	@ 0x237
 800814c:	483e      	ldr	r0, [pc, #248]	@ (8008248 <__mdiff+0x124>)
 800814e:	f000 fb75 	bl	800883c <__assert_func>
 8008152:	2301      	movs	r3, #1
 8008154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008158:	4610      	mov	r0, r2
 800815a:	b003      	add	sp, #12
 800815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008160:	bfbc      	itt	lt
 8008162:	464b      	movlt	r3, r9
 8008164:	46a1      	movlt	r9, r4
 8008166:	4630      	mov	r0, r6
 8008168:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800816c:	bfba      	itte	lt
 800816e:	461c      	movlt	r4, r3
 8008170:	2501      	movlt	r5, #1
 8008172:	2500      	movge	r5, #0
 8008174:	f7ff fd40 	bl	8007bf8 <_Balloc>
 8008178:	4602      	mov	r2, r0
 800817a:	b918      	cbnz	r0, 8008184 <__mdiff+0x60>
 800817c:	4b31      	ldr	r3, [pc, #196]	@ (8008244 <__mdiff+0x120>)
 800817e:	f240 2145 	movw	r1, #581	@ 0x245
 8008182:	e7e3      	b.n	800814c <__mdiff+0x28>
 8008184:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008188:	6926      	ldr	r6, [r4, #16]
 800818a:	60c5      	str	r5, [r0, #12]
 800818c:	f109 0310 	add.w	r3, r9, #16
 8008190:	f109 0514 	add.w	r5, r9, #20
 8008194:	f104 0e14 	add.w	lr, r4, #20
 8008198:	f100 0b14 	add.w	fp, r0, #20
 800819c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	46d9      	mov	r9, fp
 80081a8:	f04f 0c00 	mov.w	ip, #0
 80081ac:	9b01      	ldr	r3, [sp, #4]
 80081ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	fa1f f38a 	uxth.w	r3, sl
 80081bc:	4619      	mov	r1, r3
 80081be:	b283      	uxth	r3, r0
 80081c0:	1acb      	subs	r3, r1, r3
 80081c2:	0c00      	lsrs	r0, r0, #16
 80081c4:	4463      	add	r3, ip
 80081c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081d4:	4576      	cmp	r6, lr
 80081d6:	f849 3b04 	str.w	r3, [r9], #4
 80081da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081de:	d8e5      	bhi.n	80081ac <__mdiff+0x88>
 80081e0:	1b33      	subs	r3, r6, r4
 80081e2:	3b15      	subs	r3, #21
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	3415      	adds	r4, #21
 80081ea:	3304      	adds	r3, #4
 80081ec:	42a6      	cmp	r6, r4
 80081ee:	bf38      	it	cc
 80081f0:	2304      	movcc	r3, #4
 80081f2:	441d      	add	r5, r3
 80081f4:	445b      	add	r3, fp
 80081f6:	461e      	mov	r6, r3
 80081f8:	462c      	mov	r4, r5
 80081fa:	4544      	cmp	r4, r8
 80081fc:	d30e      	bcc.n	800821c <__mdiff+0xf8>
 80081fe:	f108 0103 	add.w	r1, r8, #3
 8008202:	1b49      	subs	r1, r1, r5
 8008204:	f021 0103 	bic.w	r1, r1, #3
 8008208:	3d03      	subs	r5, #3
 800820a:	45a8      	cmp	r8, r5
 800820c:	bf38      	it	cc
 800820e:	2100      	movcc	r1, #0
 8008210:	440b      	add	r3, r1
 8008212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008216:	b191      	cbz	r1, 800823e <__mdiff+0x11a>
 8008218:	6117      	str	r7, [r2, #16]
 800821a:	e79d      	b.n	8008158 <__mdiff+0x34>
 800821c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008220:	46e6      	mov	lr, ip
 8008222:	0c08      	lsrs	r0, r1, #16
 8008224:	fa1c fc81 	uxtah	ip, ip, r1
 8008228:	4471      	add	r1, lr
 800822a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800822e:	b289      	uxth	r1, r1
 8008230:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008234:	f846 1b04 	str.w	r1, [r6], #4
 8008238:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800823c:	e7dd      	b.n	80081fa <__mdiff+0xd6>
 800823e:	3f01      	subs	r7, #1
 8008240:	e7e7      	b.n	8008212 <__mdiff+0xee>
 8008242:	bf00      	nop
 8008244:	08008bd4 	.word	0x08008bd4
 8008248:	08008be5 	.word	0x08008be5

0800824c <__d2b>:
 800824c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008250:	460f      	mov	r7, r1
 8008252:	2101      	movs	r1, #1
 8008254:	ec59 8b10 	vmov	r8, r9, d0
 8008258:	4616      	mov	r6, r2
 800825a:	f7ff fccd 	bl	8007bf8 <_Balloc>
 800825e:	4604      	mov	r4, r0
 8008260:	b930      	cbnz	r0, 8008270 <__d2b+0x24>
 8008262:	4602      	mov	r2, r0
 8008264:	4b23      	ldr	r3, [pc, #140]	@ (80082f4 <__d2b+0xa8>)
 8008266:	4824      	ldr	r0, [pc, #144]	@ (80082f8 <__d2b+0xac>)
 8008268:	f240 310f 	movw	r1, #783	@ 0x30f
 800826c:	f000 fae6 	bl	800883c <__assert_func>
 8008270:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008274:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008278:	b10d      	cbz	r5, 800827e <__d2b+0x32>
 800827a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	f1b8 0300 	subs.w	r3, r8, #0
 8008284:	d023      	beq.n	80082ce <__d2b+0x82>
 8008286:	4668      	mov	r0, sp
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	f7ff fd7c 	bl	8007d86 <__lo0bits>
 800828e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008292:	b1d0      	cbz	r0, 80082ca <__d2b+0x7e>
 8008294:	f1c0 0320 	rsb	r3, r0, #32
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	430b      	orrs	r3, r1
 800829e:	40c2      	lsrs	r2, r0
 80082a0:	6163      	str	r3, [r4, #20]
 80082a2:	9201      	str	r2, [sp, #4]
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	61a3      	str	r3, [r4, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bf0c      	ite	eq
 80082ac:	2201      	moveq	r2, #1
 80082ae:	2202      	movne	r2, #2
 80082b0:	6122      	str	r2, [r4, #16]
 80082b2:	b1a5      	cbz	r5, 80082de <__d2b+0x92>
 80082b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082b8:	4405      	add	r5, r0
 80082ba:	603d      	str	r5, [r7, #0]
 80082bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082c0:	6030      	str	r0, [r6, #0]
 80082c2:	4620      	mov	r0, r4
 80082c4:	b003      	add	sp, #12
 80082c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ca:	6161      	str	r1, [r4, #20]
 80082cc:	e7ea      	b.n	80082a4 <__d2b+0x58>
 80082ce:	a801      	add	r0, sp, #4
 80082d0:	f7ff fd59 	bl	8007d86 <__lo0bits>
 80082d4:	9b01      	ldr	r3, [sp, #4]
 80082d6:	6163      	str	r3, [r4, #20]
 80082d8:	3020      	adds	r0, #32
 80082da:	2201      	movs	r2, #1
 80082dc:	e7e8      	b.n	80082b0 <__d2b+0x64>
 80082de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082e6:	6038      	str	r0, [r7, #0]
 80082e8:	6918      	ldr	r0, [r3, #16]
 80082ea:	f7ff fd2d 	bl	8007d48 <__hi0bits>
 80082ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082f2:	e7e5      	b.n	80082c0 <__d2b+0x74>
 80082f4:	08008bd4 	.word	0x08008bd4
 80082f8:	08008be5 	.word	0x08008be5

080082fc <__sfputc_r>:
 80082fc:	6893      	ldr	r3, [r2, #8]
 80082fe:	3b01      	subs	r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	b410      	push	{r4}
 8008304:	6093      	str	r3, [r2, #8]
 8008306:	da08      	bge.n	800831a <__sfputc_r+0x1e>
 8008308:	6994      	ldr	r4, [r2, #24]
 800830a:	42a3      	cmp	r3, r4
 800830c:	db01      	blt.n	8008312 <__sfputc_r+0x16>
 800830e:	290a      	cmp	r1, #10
 8008310:	d103      	bne.n	800831a <__sfputc_r+0x1e>
 8008312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008316:	f000 b9df 	b.w	80086d8 <__swbuf_r>
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	1c58      	adds	r0, r3, #1
 800831e:	6010      	str	r0, [r2, #0]
 8008320:	7019      	strb	r1, [r3, #0]
 8008322:	4608      	mov	r0, r1
 8008324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008328:	4770      	bx	lr

0800832a <__sfputs_r>:
 800832a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
 8008330:	4614      	mov	r4, r2
 8008332:	18d5      	adds	r5, r2, r3
 8008334:	42ac      	cmp	r4, r5
 8008336:	d101      	bne.n	800833c <__sfputs_r+0x12>
 8008338:	2000      	movs	r0, #0
 800833a:	e007      	b.n	800834c <__sfputs_r+0x22>
 800833c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008340:	463a      	mov	r2, r7
 8008342:	4630      	mov	r0, r6
 8008344:	f7ff ffda 	bl	80082fc <__sfputc_r>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d1f3      	bne.n	8008334 <__sfputs_r+0xa>
 800834c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008350 <_vfiprintf_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	460d      	mov	r5, r1
 8008356:	b09d      	sub	sp, #116	@ 0x74
 8008358:	4614      	mov	r4, r2
 800835a:	4698      	mov	r8, r3
 800835c:	4606      	mov	r6, r0
 800835e:	b118      	cbz	r0, 8008368 <_vfiprintf_r+0x18>
 8008360:	6a03      	ldr	r3, [r0, #32]
 8008362:	b90b      	cbnz	r3, 8008368 <_vfiprintf_r+0x18>
 8008364:	f7fe fbee 	bl	8006b44 <__sinit>
 8008368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800836a:	07d9      	lsls	r1, r3, #31
 800836c:	d405      	bmi.n	800837a <_vfiprintf_r+0x2a>
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	059a      	lsls	r2, r3, #22
 8008372:	d402      	bmi.n	800837a <_vfiprintf_r+0x2a>
 8008374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008376:	f7fe fcee 	bl	8006d56 <__retarget_lock_acquire_recursive>
 800837a:	89ab      	ldrh	r3, [r5, #12]
 800837c:	071b      	lsls	r3, r3, #28
 800837e:	d501      	bpl.n	8008384 <_vfiprintf_r+0x34>
 8008380:	692b      	ldr	r3, [r5, #16]
 8008382:	b99b      	cbnz	r3, 80083ac <_vfiprintf_r+0x5c>
 8008384:	4629      	mov	r1, r5
 8008386:	4630      	mov	r0, r6
 8008388:	f000 f9e4 	bl	8008754 <__swsetup_r>
 800838c:	b170      	cbz	r0, 80083ac <_vfiprintf_r+0x5c>
 800838e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008390:	07dc      	lsls	r4, r3, #31
 8008392:	d504      	bpl.n	800839e <_vfiprintf_r+0x4e>
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	b01d      	add	sp, #116	@ 0x74
 800839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839e:	89ab      	ldrh	r3, [r5, #12]
 80083a0:	0598      	lsls	r0, r3, #22
 80083a2:	d4f7      	bmi.n	8008394 <_vfiprintf_r+0x44>
 80083a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083a6:	f7fe fcd7 	bl	8006d58 <__retarget_lock_release_recursive>
 80083aa:	e7f3      	b.n	8008394 <_vfiprintf_r+0x44>
 80083ac:	2300      	movs	r3, #0
 80083ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b0:	2320      	movs	r3, #32
 80083b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ba:	2330      	movs	r3, #48	@ 0x30
 80083bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800856c <_vfiprintf_r+0x21c>
 80083c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083c4:	f04f 0901 	mov.w	r9, #1
 80083c8:	4623      	mov	r3, r4
 80083ca:	469a      	mov	sl, r3
 80083cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083d0:	b10a      	cbz	r2, 80083d6 <_vfiprintf_r+0x86>
 80083d2:	2a25      	cmp	r2, #37	@ 0x25
 80083d4:	d1f9      	bne.n	80083ca <_vfiprintf_r+0x7a>
 80083d6:	ebba 0b04 	subs.w	fp, sl, r4
 80083da:	d00b      	beq.n	80083f4 <_vfiprintf_r+0xa4>
 80083dc:	465b      	mov	r3, fp
 80083de:	4622      	mov	r2, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	4630      	mov	r0, r6
 80083e4:	f7ff ffa1 	bl	800832a <__sfputs_r>
 80083e8:	3001      	adds	r0, #1
 80083ea:	f000 80a7 	beq.w	800853c <_vfiprintf_r+0x1ec>
 80083ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083f0:	445a      	add	r2, fp
 80083f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80083f4:	f89a 3000 	ldrb.w	r3, [sl]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 809f 	beq.w	800853c <_vfiprintf_r+0x1ec>
 80083fe:	2300      	movs	r3, #0
 8008400:	f04f 32ff 	mov.w	r2, #4294967295
 8008404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008408:	f10a 0a01 	add.w	sl, sl, #1
 800840c:	9304      	str	r3, [sp, #16]
 800840e:	9307      	str	r3, [sp, #28]
 8008410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008414:	931a      	str	r3, [sp, #104]	@ 0x68
 8008416:	4654      	mov	r4, sl
 8008418:	2205      	movs	r2, #5
 800841a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800841e:	4853      	ldr	r0, [pc, #332]	@ (800856c <_vfiprintf_r+0x21c>)
 8008420:	f7f7 fed6 	bl	80001d0 <memchr>
 8008424:	9a04      	ldr	r2, [sp, #16]
 8008426:	b9d8      	cbnz	r0, 8008460 <_vfiprintf_r+0x110>
 8008428:	06d1      	lsls	r1, r2, #27
 800842a:	bf44      	itt	mi
 800842c:	2320      	movmi	r3, #32
 800842e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008432:	0713      	lsls	r3, r2, #28
 8008434:	bf44      	itt	mi
 8008436:	232b      	movmi	r3, #43	@ 0x2b
 8008438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800843c:	f89a 3000 	ldrb.w	r3, [sl]
 8008440:	2b2a      	cmp	r3, #42	@ 0x2a
 8008442:	d015      	beq.n	8008470 <_vfiprintf_r+0x120>
 8008444:	9a07      	ldr	r2, [sp, #28]
 8008446:	4654      	mov	r4, sl
 8008448:	2000      	movs	r0, #0
 800844a:	f04f 0c0a 	mov.w	ip, #10
 800844e:	4621      	mov	r1, r4
 8008450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008454:	3b30      	subs	r3, #48	@ 0x30
 8008456:	2b09      	cmp	r3, #9
 8008458:	d94b      	bls.n	80084f2 <_vfiprintf_r+0x1a2>
 800845a:	b1b0      	cbz	r0, 800848a <_vfiprintf_r+0x13a>
 800845c:	9207      	str	r2, [sp, #28]
 800845e:	e014      	b.n	800848a <_vfiprintf_r+0x13a>
 8008460:	eba0 0308 	sub.w	r3, r0, r8
 8008464:	fa09 f303 	lsl.w	r3, r9, r3
 8008468:	4313      	orrs	r3, r2
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	46a2      	mov	sl, r4
 800846e:	e7d2      	b.n	8008416 <_vfiprintf_r+0xc6>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	1d19      	adds	r1, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	9103      	str	r1, [sp, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	bfbb      	ittet	lt
 800847c:	425b      	neglt	r3, r3
 800847e:	f042 0202 	orrlt.w	r2, r2, #2
 8008482:	9307      	strge	r3, [sp, #28]
 8008484:	9307      	strlt	r3, [sp, #28]
 8008486:	bfb8      	it	lt
 8008488:	9204      	strlt	r2, [sp, #16]
 800848a:	7823      	ldrb	r3, [r4, #0]
 800848c:	2b2e      	cmp	r3, #46	@ 0x2e
 800848e:	d10a      	bne.n	80084a6 <_vfiprintf_r+0x156>
 8008490:	7863      	ldrb	r3, [r4, #1]
 8008492:	2b2a      	cmp	r3, #42	@ 0x2a
 8008494:	d132      	bne.n	80084fc <_vfiprintf_r+0x1ac>
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	1d1a      	adds	r2, r3, #4
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	9203      	str	r2, [sp, #12]
 800849e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084a2:	3402      	adds	r4, #2
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800857c <_vfiprintf_r+0x22c>
 80084aa:	7821      	ldrb	r1, [r4, #0]
 80084ac:	2203      	movs	r2, #3
 80084ae:	4650      	mov	r0, sl
 80084b0:	f7f7 fe8e 	bl	80001d0 <memchr>
 80084b4:	b138      	cbz	r0, 80084c6 <_vfiprintf_r+0x176>
 80084b6:	9b04      	ldr	r3, [sp, #16]
 80084b8:	eba0 000a 	sub.w	r0, r0, sl
 80084bc:	2240      	movs	r2, #64	@ 0x40
 80084be:	4082      	lsls	r2, r0
 80084c0:	4313      	orrs	r3, r2
 80084c2:	3401      	adds	r4, #1
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ca:	4829      	ldr	r0, [pc, #164]	@ (8008570 <_vfiprintf_r+0x220>)
 80084cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084d0:	2206      	movs	r2, #6
 80084d2:	f7f7 fe7d 	bl	80001d0 <memchr>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d03f      	beq.n	800855a <_vfiprintf_r+0x20a>
 80084da:	4b26      	ldr	r3, [pc, #152]	@ (8008574 <_vfiprintf_r+0x224>)
 80084dc:	bb1b      	cbnz	r3, 8008526 <_vfiprintf_r+0x1d6>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	3307      	adds	r3, #7
 80084e2:	f023 0307 	bic.w	r3, r3, #7
 80084e6:	3308      	adds	r3, #8
 80084e8:	9303      	str	r3, [sp, #12]
 80084ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ec:	443b      	add	r3, r7
 80084ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80084f0:	e76a      	b.n	80083c8 <_vfiprintf_r+0x78>
 80084f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084f6:	460c      	mov	r4, r1
 80084f8:	2001      	movs	r0, #1
 80084fa:	e7a8      	b.n	800844e <_vfiprintf_r+0xfe>
 80084fc:	2300      	movs	r3, #0
 80084fe:	3401      	adds	r4, #1
 8008500:	9305      	str	r3, [sp, #20]
 8008502:	4619      	mov	r1, r3
 8008504:	f04f 0c0a 	mov.w	ip, #10
 8008508:	4620      	mov	r0, r4
 800850a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800850e:	3a30      	subs	r2, #48	@ 0x30
 8008510:	2a09      	cmp	r2, #9
 8008512:	d903      	bls.n	800851c <_vfiprintf_r+0x1cc>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0c6      	beq.n	80084a6 <_vfiprintf_r+0x156>
 8008518:	9105      	str	r1, [sp, #20]
 800851a:	e7c4      	b.n	80084a6 <_vfiprintf_r+0x156>
 800851c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008520:	4604      	mov	r4, r0
 8008522:	2301      	movs	r3, #1
 8008524:	e7f0      	b.n	8008508 <_vfiprintf_r+0x1b8>
 8008526:	ab03      	add	r3, sp, #12
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	462a      	mov	r2, r5
 800852c:	4b12      	ldr	r3, [pc, #72]	@ (8008578 <_vfiprintf_r+0x228>)
 800852e:	a904      	add	r1, sp, #16
 8008530:	4630      	mov	r0, r6
 8008532:	f7fd fec3 	bl	80062bc <_printf_float>
 8008536:	4607      	mov	r7, r0
 8008538:	1c78      	adds	r0, r7, #1
 800853a:	d1d6      	bne.n	80084ea <_vfiprintf_r+0x19a>
 800853c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800853e:	07d9      	lsls	r1, r3, #31
 8008540:	d405      	bmi.n	800854e <_vfiprintf_r+0x1fe>
 8008542:	89ab      	ldrh	r3, [r5, #12]
 8008544:	059a      	lsls	r2, r3, #22
 8008546:	d402      	bmi.n	800854e <_vfiprintf_r+0x1fe>
 8008548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800854a:	f7fe fc05 	bl	8006d58 <__retarget_lock_release_recursive>
 800854e:	89ab      	ldrh	r3, [r5, #12]
 8008550:	065b      	lsls	r3, r3, #25
 8008552:	f53f af1f 	bmi.w	8008394 <_vfiprintf_r+0x44>
 8008556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008558:	e71e      	b.n	8008398 <_vfiprintf_r+0x48>
 800855a:	ab03      	add	r3, sp, #12
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	462a      	mov	r2, r5
 8008560:	4b05      	ldr	r3, [pc, #20]	@ (8008578 <_vfiprintf_r+0x228>)
 8008562:	a904      	add	r1, sp, #16
 8008564:	4630      	mov	r0, r6
 8008566:	f7fe f941 	bl	80067ec <_printf_i>
 800856a:	e7e4      	b.n	8008536 <_vfiprintf_r+0x1e6>
 800856c:	08008d40 	.word	0x08008d40
 8008570:	08008d4a 	.word	0x08008d4a
 8008574:	080062bd 	.word	0x080062bd
 8008578:	0800832b 	.word	0x0800832b
 800857c:	08008d46 	.word	0x08008d46

08008580 <__sflush_r>:
 8008580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008588:	0716      	lsls	r6, r2, #28
 800858a:	4605      	mov	r5, r0
 800858c:	460c      	mov	r4, r1
 800858e:	d454      	bmi.n	800863a <__sflush_r+0xba>
 8008590:	684b      	ldr	r3, [r1, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	dc02      	bgt.n	800859c <__sflush_r+0x1c>
 8008596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	dd48      	ble.n	800862e <__sflush_r+0xae>
 800859c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800859e:	2e00      	cmp	r6, #0
 80085a0:	d045      	beq.n	800862e <__sflush_r+0xae>
 80085a2:	2300      	movs	r3, #0
 80085a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085a8:	682f      	ldr	r7, [r5, #0]
 80085aa:	6a21      	ldr	r1, [r4, #32]
 80085ac:	602b      	str	r3, [r5, #0]
 80085ae:	d030      	beq.n	8008612 <__sflush_r+0x92>
 80085b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	0759      	lsls	r1, r3, #29
 80085b6:	d505      	bpl.n	80085c4 <__sflush_r+0x44>
 80085b8:	6863      	ldr	r3, [r4, #4]
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085be:	b10b      	cbz	r3, 80085c4 <__sflush_r+0x44>
 80085c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085c2:	1ad2      	subs	r2, r2, r3
 80085c4:	2300      	movs	r3, #0
 80085c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085c8:	6a21      	ldr	r1, [r4, #32]
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b0      	blx	r6
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	d106      	bne.n	80085e2 <__sflush_r+0x62>
 80085d4:	6829      	ldr	r1, [r5, #0]
 80085d6:	291d      	cmp	r1, #29
 80085d8:	d82b      	bhi.n	8008632 <__sflush_r+0xb2>
 80085da:	4a2a      	ldr	r2, [pc, #168]	@ (8008684 <__sflush_r+0x104>)
 80085dc:	410a      	asrs	r2, r1
 80085de:	07d6      	lsls	r6, r2, #31
 80085e0:	d427      	bmi.n	8008632 <__sflush_r+0xb2>
 80085e2:	2200      	movs	r2, #0
 80085e4:	6062      	str	r2, [r4, #4]
 80085e6:	04d9      	lsls	r1, r3, #19
 80085e8:	6922      	ldr	r2, [r4, #16]
 80085ea:	6022      	str	r2, [r4, #0]
 80085ec:	d504      	bpl.n	80085f8 <__sflush_r+0x78>
 80085ee:	1c42      	adds	r2, r0, #1
 80085f0:	d101      	bne.n	80085f6 <__sflush_r+0x76>
 80085f2:	682b      	ldr	r3, [r5, #0]
 80085f4:	b903      	cbnz	r3, 80085f8 <__sflush_r+0x78>
 80085f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80085f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085fa:	602f      	str	r7, [r5, #0]
 80085fc:	b1b9      	cbz	r1, 800862e <__sflush_r+0xae>
 80085fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008602:	4299      	cmp	r1, r3
 8008604:	d002      	beq.n	800860c <__sflush_r+0x8c>
 8008606:	4628      	mov	r0, r5
 8008608:	f7ff f9f6 	bl	80079f8 <_free_r>
 800860c:	2300      	movs	r3, #0
 800860e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008610:	e00d      	b.n	800862e <__sflush_r+0xae>
 8008612:	2301      	movs	r3, #1
 8008614:	4628      	mov	r0, r5
 8008616:	47b0      	blx	r6
 8008618:	4602      	mov	r2, r0
 800861a:	1c50      	adds	r0, r2, #1
 800861c:	d1c9      	bne.n	80085b2 <__sflush_r+0x32>
 800861e:	682b      	ldr	r3, [r5, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d0c6      	beq.n	80085b2 <__sflush_r+0x32>
 8008624:	2b1d      	cmp	r3, #29
 8008626:	d001      	beq.n	800862c <__sflush_r+0xac>
 8008628:	2b16      	cmp	r3, #22
 800862a:	d11e      	bne.n	800866a <__sflush_r+0xea>
 800862c:	602f      	str	r7, [r5, #0]
 800862e:	2000      	movs	r0, #0
 8008630:	e022      	b.n	8008678 <__sflush_r+0xf8>
 8008632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008636:	b21b      	sxth	r3, r3
 8008638:	e01b      	b.n	8008672 <__sflush_r+0xf2>
 800863a:	690f      	ldr	r7, [r1, #16]
 800863c:	2f00      	cmp	r7, #0
 800863e:	d0f6      	beq.n	800862e <__sflush_r+0xae>
 8008640:	0793      	lsls	r3, r2, #30
 8008642:	680e      	ldr	r6, [r1, #0]
 8008644:	bf08      	it	eq
 8008646:	694b      	ldreq	r3, [r1, #20]
 8008648:	600f      	str	r7, [r1, #0]
 800864a:	bf18      	it	ne
 800864c:	2300      	movne	r3, #0
 800864e:	eba6 0807 	sub.w	r8, r6, r7
 8008652:	608b      	str	r3, [r1, #8]
 8008654:	f1b8 0f00 	cmp.w	r8, #0
 8008658:	dde9      	ble.n	800862e <__sflush_r+0xae>
 800865a:	6a21      	ldr	r1, [r4, #32]
 800865c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800865e:	4643      	mov	r3, r8
 8008660:	463a      	mov	r2, r7
 8008662:	4628      	mov	r0, r5
 8008664:	47b0      	blx	r6
 8008666:	2800      	cmp	r0, #0
 8008668:	dc08      	bgt.n	800867c <__sflush_r+0xfc>
 800866a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800866e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800867c:	4407      	add	r7, r0
 800867e:	eba8 0800 	sub.w	r8, r8, r0
 8008682:	e7e7      	b.n	8008654 <__sflush_r+0xd4>
 8008684:	dfbffffe 	.word	0xdfbffffe

08008688 <_fflush_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	690b      	ldr	r3, [r1, #16]
 800868c:	4605      	mov	r5, r0
 800868e:	460c      	mov	r4, r1
 8008690:	b913      	cbnz	r3, 8008698 <_fflush_r+0x10>
 8008692:	2500      	movs	r5, #0
 8008694:	4628      	mov	r0, r5
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	b118      	cbz	r0, 80086a2 <_fflush_r+0x1a>
 800869a:	6a03      	ldr	r3, [r0, #32]
 800869c:	b90b      	cbnz	r3, 80086a2 <_fflush_r+0x1a>
 800869e:	f7fe fa51 	bl	8006b44 <__sinit>
 80086a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0f3      	beq.n	8008692 <_fflush_r+0xa>
 80086aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086ac:	07d0      	lsls	r0, r2, #31
 80086ae:	d404      	bmi.n	80086ba <_fflush_r+0x32>
 80086b0:	0599      	lsls	r1, r3, #22
 80086b2:	d402      	bmi.n	80086ba <_fflush_r+0x32>
 80086b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086b6:	f7fe fb4e 	bl	8006d56 <__retarget_lock_acquire_recursive>
 80086ba:	4628      	mov	r0, r5
 80086bc:	4621      	mov	r1, r4
 80086be:	f7ff ff5f 	bl	8008580 <__sflush_r>
 80086c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086c4:	07da      	lsls	r2, r3, #31
 80086c6:	4605      	mov	r5, r0
 80086c8:	d4e4      	bmi.n	8008694 <_fflush_r+0xc>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	059b      	lsls	r3, r3, #22
 80086ce:	d4e1      	bmi.n	8008694 <_fflush_r+0xc>
 80086d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086d2:	f7fe fb41 	bl	8006d58 <__retarget_lock_release_recursive>
 80086d6:	e7dd      	b.n	8008694 <_fflush_r+0xc>

080086d8 <__swbuf_r>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	460e      	mov	r6, r1
 80086dc:	4614      	mov	r4, r2
 80086de:	4605      	mov	r5, r0
 80086e0:	b118      	cbz	r0, 80086ea <__swbuf_r+0x12>
 80086e2:	6a03      	ldr	r3, [r0, #32]
 80086e4:	b90b      	cbnz	r3, 80086ea <__swbuf_r+0x12>
 80086e6:	f7fe fa2d 	bl	8006b44 <__sinit>
 80086ea:	69a3      	ldr	r3, [r4, #24]
 80086ec:	60a3      	str	r3, [r4, #8]
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	071a      	lsls	r2, r3, #28
 80086f2:	d501      	bpl.n	80086f8 <__swbuf_r+0x20>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	b943      	cbnz	r3, 800870a <__swbuf_r+0x32>
 80086f8:	4621      	mov	r1, r4
 80086fa:	4628      	mov	r0, r5
 80086fc:	f000 f82a 	bl	8008754 <__swsetup_r>
 8008700:	b118      	cbz	r0, 800870a <__swbuf_r+0x32>
 8008702:	f04f 37ff 	mov.w	r7, #4294967295
 8008706:	4638      	mov	r0, r7
 8008708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	6922      	ldr	r2, [r4, #16]
 800870e:	1a98      	subs	r0, r3, r2
 8008710:	6963      	ldr	r3, [r4, #20]
 8008712:	b2f6      	uxtb	r6, r6
 8008714:	4283      	cmp	r3, r0
 8008716:	4637      	mov	r7, r6
 8008718:	dc05      	bgt.n	8008726 <__swbuf_r+0x4e>
 800871a:	4621      	mov	r1, r4
 800871c:	4628      	mov	r0, r5
 800871e:	f7ff ffb3 	bl	8008688 <_fflush_r>
 8008722:	2800      	cmp	r0, #0
 8008724:	d1ed      	bne.n	8008702 <__swbuf_r+0x2a>
 8008726:	68a3      	ldr	r3, [r4, #8]
 8008728:	3b01      	subs	r3, #1
 800872a:	60a3      	str	r3, [r4, #8]
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	6022      	str	r2, [r4, #0]
 8008732:	701e      	strb	r6, [r3, #0]
 8008734:	6962      	ldr	r2, [r4, #20]
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	429a      	cmp	r2, r3
 800873a:	d004      	beq.n	8008746 <__swbuf_r+0x6e>
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	07db      	lsls	r3, r3, #31
 8008740:	d5e1      	bpl.n	8008706 <__swbuf_r+0x2e>
 8008742:	2e0a      	cmp	r6, #10
 8008744:	d1df      	bne.n	8008706 <__swbuf_r+0x2e>
 8008746:	4621      	mov	r1, r4
 8008748:	4628      	mov	r0, r5
 800874a:	f7ff ff9d 	bl	8008688 <_fflush_r>
 800874e:	2800      	cmp	r0, #0
 8008750:	d0d9      	beq.n	8008706 <__swbuf_r+0x2e>
 8008752:	e7d6      	b.n	8008702 <__swbuf_r+0x2a>

08008754 <__swsetup_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4b29      	ldr	r3, [pc, #164]	@ (80087fc <__swsetup_r+0xa8>)
 8008758:	4605      	mov	r5, r0
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	460c      	mov	r4, r1
 800875e:	b118      	cbz	r0, 8008768 <__swsetup_r+0x14>
 8008760:	6a03      	ldr	r3, [r0, #32]
 8008762:	b90b      	cbnz	r3, 8008768 <__swsetup_r+0x14>
 8008764:	f7fe f9ee 	bl	8006b44 <__sinit>
 8008768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800876c:	0719      	lsls	r1, r3, #28
 800876e:	d422      	bmi.n	80087b6 <__swsetup_r+0x62>
 8008770:	06da      	lsls	r2, r3, #27
 8008772:	d407      	bmi.n	8008784 <__swsetup_r+0x30>
 8008774:	2209      	movs	r2, #9
 8008776:	602a      	str	r2, [r5, #0]
 8008778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800877c:	81a3      	strh	r3, [r4, #12]
 800877e:	f04f 30ff 	mov.w	r0, #4294967295
 8008782:	e033      	b.n	80087ec <__swsetup_r+0x98>
 8008784:	0758      	lsls	r0, r3, #29
 8008786:	d512      	bpl.n	80087ae <__swsetup_r+0x5a>
 8008788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800878a:	b141      	cbz	r1, 800879e <__swsetup_r+0x4a>
 800878c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008790:	4299      	cmp	r1, r3
 8008792:	d002      	beq.n	800879a <__swsetup_r+0x46>
 8008794:	4628      	mov	r0, r5
 8008796:	f7ff f92f 	bl	80079f8 <_free_r>
 800879a:	2300      	movs	r3, #0
 800879c:	6363      	str	r3, [r4, #52]	@ 0x34
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	2300      	movs	r3, #0
 80087a8:	6063      	str	r3, [r4, #4]
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	f043 0308 	orr.w	r3, r3, #8
 80087b4:	81a3      	strh	r3, [r4, #12]
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	b94b      	cbnz	r3, 80087ce <__swsetup_r+0x7a>
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087c4:	d003      	beq.n	80087ce <__swsetup_r+0x7a>
 80087c6:	4621      	mov	r1, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f000 f8c1 	bl	8008950 <__smakebuf_r>
 80087ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d2:	f013 0201 	ands.w	r2, r3, #1
 80087d6:	d00a      	beq.n	80087ee <__swsetup_r+0x9a>
 80087d8:	2200      	movs	r2, #0
 80087da:	60a2      	str	r2, [r4, #8]
 80087dc:	6962      	ldr	r2, [r4, #20]
 80087de:	4252      	negs	r2, r2
 80087e0:	61a2      	str	r2, [r4, #24]
 80087e2:	6922      	ldr	r2, [r4, #16]
 80087e4:	b942      	cbnz	r2, 80087f8 <__swsetup_r+0xa4>
 80087e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087ea:	d1c5      	bne.n	8008778 <__swsetup_r+0x24>
 80087ec:	bd38      	pop	{r3, r4, r5, pc}
 80087ee:	0799      	lsls	r1, r3, #30
 80087f0:	bf58      	it	pl
 80087f2:	6962      	ldrpl	r2, [r4, #20]
 80087f4:	60a2      	str	r2, [r4, #8]
 80087f6:	e7f4      	b.n	80087e2 <__swsetup_r+0x8e>
 80087f8:	2000      	movs	r0, #0
 80087fa:	e7f7      	b.n	80087ec <__swsetup_r+0x98>
 80087fc:	20000024 	.word	0x20000024

08008800 <_sbrk_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d06      	ldr	r5, [pc, #24]	@ (800881c <_sbrk_r+0x1c>)
 8008804:	2300      	movs	r3, #0
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	602b      	str	r3, [r5, #0]
 800880c:	f7f8 ff34 	bl	8001678 <_sbrk>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d102      	bne.n	800881a <_sbrk_r+0x1a>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	b103      	cbz	r3, 800881a <_sbrk_r+0x1a>
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	200004bc 	.word	0x200004bc

08008820 <memcpy>:
 8008820:	440a      	add	r2, r1
 8008822:	4291      	cmp	r1, r2
 8008824:	f100 33ff 	add.w	r3, r0, #4294967295
 8008828:	d100      	bne.n	800882c <memcpy+0xc>
 800882a:	4770      	bx	lr
 800882c:	b510      	push	{r4, lr}
 800882e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008836:	4291      	cmp	r1, r2
 8008838:	d1f9      	bne.n	800882e <memcpy+0xe>
 800883a:	bd10      	pop	{r4, pc}

0800883c <__assert_func>:
 800883c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800883e:	4614      	mov	r4, r2
 8008840:	461a      	mov	r2, r3
 8008842:	4b09      	ldr	r3, [pc, #36]	@ (8008868 <__assert_func+0x2c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4605      	mov	r5, r0
 8008848:	68d8      	ldr	r0, [r3, #12]
 800884a:	b954      	cbnz	r4, 8008862 <__assert_func+0x26>
 800884c:	4b07      	ldr	r3, [pc, #28]	@ (800886c <__assert_func+0x30>)
 800884e:	461c      	mov	r4, r3
 8008850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008854:	9100      	str	r1, [sp, #0]
 8008856:	462b      	mov	r3, r5
 8008858:	4905      	ldr	r1, [pc, #20]	@ (8008870 <__assert_func+0x34>)
 800885a:	f000 f841 	bl	80088e0 <fiprintf>
 800885e:	f000 f8d5 	bl	8008a0c <abort>
 8008862:	4b04      	ldr	r3, [pc, #16]	@ (8008874 <__assert_func+0x38>)
 8008864:	e7f4      	b.n	8008850 <__assert_func+0x14>
 8008866:	bf00      	nop
 8008868:	20000024 	.word	0x20000024
 800886c:	08008d96 	.word	0x08008d96
 8008870:	08008d68 	.word	0x08008d68
 8008874:	08008d5b 	.word	0x08008d5b

08008878 <_calloc_r>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	fba1 5402 	umull	r5, r4, r1, r2
 800887e:	b93c      	cbnz	r4, 8008890 <_calloc_r+0x18>
 8008880:	4629      	mov	r1, r5
 8008882:	f7ff f92d 	bl	8007ae0 <_malloc_r>
 8008886:	4606      	mov	r6, r0
 8008888:	b928      	cbnz	r0, 8008896 <_calloc_r+0x1e>
 800888a:	2600      	movs	r6, #0
 800888c:	4630      	mov	r0, r6
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	220c      	movs	r2, #12
 8008892:	6002      	str	r2, [r0, #0]
 8008894:	e7f9      	b.n	800888a <_calloc_r+0x12>
 8008896:	462a      	mov	r2, r5
 8008898:	4621      	mov	r1, r4
 800889a:	f7fe f9de 	bl	8006c5a <memset>
 800889e:	e7f5      	b.n	800888c <_calloc_r+0x14>

080088a0 <__ascii_mbtowc>:
 80088a0:	b082      	sub	sp, #8
 80088a2:	b901      	cbnz	r1, 80088a6 <__ascii_mbtowc+0x6>
 80088a4:	a901      	add	r1, sp, #4
 80088a6:	b142      	cbz	r2, 80088ba <__ascii_mbtowc+0x1a>
 80088a8:	b14b      	cbz	r3, 80088be <__ascii_mbtowc+0x1e>
 80088aa:	7813      	ldrb	r3, [r2, #0]
 80088ac:	600b      	str	r3, [r1, #0]
 80088ae:	7812      	ldrb	r2, [r2, #0]
 80088b0:	1e10      	subs	r0, r2, #0
 80088b2:	bf18      	it	ne
 80088b4:	2001      	movne	r0, #1
 80088b6:	b002      	add	sp, #8
 80088b8:	4770      	bx	lr
 80088ba:	4610      	mov	r0, r2
 80088bc:	e7fb      	b.n	80088b6 <__ascii_mbtowc+0x16>
 80088be:	f06f 0001 	mvn.w	r0, #1
 80088c2:	e7f8      	b.n	80088b6 <__ascii_mbtowc+0x16>

080088c4 <__ascii_wctomb>:
 80088c4:	4603      	mov	r3, r0
 80088c6:	4608      	mov	r0, r1
 80088c8:	b141      	cbz	r1, 80088dc <__ascii_wctomb+0x18>
 80088ca:	2aff      	cmp	r2, #255	@ 0xff
 80088cc:	d904      	bls.n	80088d8 <__ascii_wctomb+0x14>
 80088ce:	228a      	movs	r2, #138	@ 0x8a
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	f04f 30ff 	mov.w	r0, #4294967295
 80088d6:	4770      	bx	lr
 80088d8:	700a      	strb	r2, [r1, #0]
 80088da:	2001      	movs	r0, #1
 80088dc:	4770      	bx	lr
	...

080088e0 <fiprintf>:
 80088e0:	b40e      	push	{r1, r2, r3}
 80088e2:	b503      	push	{r0, r1, lr}
 80088e4:	4601      	mov	r1, r0
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	4805      	ldr	r0, [pc, #20]	@ (8008900 <fiprintf+0x20>)
 80088ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ee:	6800      	ldr	r0, [r0, #0]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	f7ff fd2d 	bl	8008350 <_vfiprintf_r>
 80088f6:	b002      	add	sp, #8
 80088f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088fc:	b003      	add	sp, #12
 80088fe:	4770      	bx	lr
 8008900:	20000024 	.word	0x20000024

08008904 <__swhatbuf_r>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	460c      	mov	r4, r1
 8008908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890c:	2900      	cmp	r1, #0
 800890e:	b096      	sub	sp, #88	@ 0x58
 8008910:	4615      	mov	r5, r2
 8008912:	461e      	mov	r6, r3
 8008914:	da0d      	bge.n	8008932 <__swhatbuf_r+0x2e>
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800891c:	f04f 0100 	mov.w	r1, #0
 8008920:	bf14      	ite	ne
 8008922:	2340      	movne	r3, #64	@ 0x40
 8008924:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008928:	2000      	movs	r0, #0
 800892a:	6031      	str	r1, [r6, #0]
 800892c:	602b      	str	r3, [r5, #0]
 800892e:	b016      	add	sp, #88	@ 0x58
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	466a      	mov	r2, sp
 8008934:	f000 f848 	bl	80089c8 <_fstat_r>
 8008938:	2800      	cmp	r0, #0
 800893a:	dbec      	blt.n	8008916 <__swhatbuf_r+0x12>
 800893c:	9901      	ldr	r1, [sp, #4]
 800893e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008942:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008946:	4259      	negs	r1, r3
 8008948:	4159      	adcs	r1, r3
 800894a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800894e:	e7eb      	b.n	8008928 <__swhatbuf_r+0x24>

08008950 <__smakebuf_r>:
 8008950:	898b      	ldrh	r3, [r1, #12]
 8008952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008954:	079d      	lsls	r5, r3, #30
 8008956:	4606      	mov	r6, r0
 8008958:	460c      	mov	r4, r1
 800895a:	d507      	bpl.n	800896c <__smakebuf_r+0x1c>
 800895c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	6123      	str	r3, [r4, #16]
 8008964:	2301      	movs	r3, #1
 8008966:	6163      	str	r3, [r4, #20]
 8008968:	b003      	add	sp, #12
 800896a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800896c:	ab01      	add	r3, sp, #4
 800896e:	466a      	mov	r2, sp
 8008970:	f7ff ffc8 	bl	8008904 <__swhatbuf_r>
 8008974:	9f00      	ldr	r7, [sp, #0]
 8008976:	4605      	mov	r5, r0
 8008978:	4639      	mov	r1, r7
 800897a:	4630      	mov	r0, r6
 800897c:	f7ff f8b0 	bl	8007ae0 <_malloc_r>
 8008980:	b948      	cbnz	r0, 8008996 <__smakebuf_r+0x46>
 8008982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008986:	059a      	lsls	r2, r3, #22
 8008988:	d4ee      	bmi.n	8008968 <__smakebuf_r+0x18>
 800898a:	f023 0303 	bic.w	r3, r3, #3
 800898e:	f043 0302 	orr.w	r3, r3, #2
 8008992:	81a3      	strh	r3, [r4, #12]
 8008994:	e7e2      	b.n	800895c <__smakebuf_r+0xc>
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	6020      	str	r0, [r4, #0]
 800899a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800899e:	81a3      	strh	r3, [r4, #12]
 80089a0:	9b01      	ldr	r3, [sp, #4]
 80089a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089a6:	b15b      	cbz	r3, 80089c0 <__smakebuf_r+0x70>
 80089a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ac:	4630      	mov	r0, r6
 80089ae:	f000 f81d 	bl	80089ec <_isatty_r>
 80089b2:	b128      	cbz	r0, 80089c0 <__smakebuf_r+0x70>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f023 0303 	bic.w	r3, r3, #3
 80089ba:	f043 0301 	orr.w	r3, r3, #1
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	431d      	orrs	r5, r3
 80089c4:	81a5      	strh	r5, [r4, #12]
 80089c6:	e7cf      	b.n	8008968 <__smakebuf_r+0x18>

080089c8 <_fstat_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	@ (80089e8 <_fstat_r+0x20>)
 80089cc:	2300      	movs	r3, #0
 80089ce:	4604      	mov	r4, r0
 80089d0:	4608      	mov	r0, r1
 80089d2:	4611      	mov	r1, r2
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	f7f8 fe26 	bl	8001626 <_fstat>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	d102      	bne.n	80089e4 <_fstat_r+0x1c>
 80089de:	682b      	ldr	r3, [r5, #0]
 80089e0:	b103      	cbz	r3, 80089e4 <_fstat_r+0x1c>
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	bd38      	pop	{r3, r4, r5, pc}
 80089e6:	bf00      	nop
 80089e8:	200004bc 	.word	0x200004bc

080089ec <_isatty_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d06      	ldr	r5, [pc, #24]	@ (8008a08 <_isatty_r+0x1c>)
 80089f0:	2300      	movs	r3, #0
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	f7f8 fe25 	bl	8001646 <_isatty>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d102      	bne.n	8008a06 <_isatty_r+0x1a>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	b103      	cbz	r3, 8008a06 <_isatty_r+0x1a>
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	200004bc 	.word	0x200004bc

08008a0c <abort>:
 8008a0c:	b508      	push	{r3, lr}
 8008a0e:	2006      	movs	r0, #6
 8008a10:	f000 f82c 	bl	8008a6c <raise>
 8008a14:	2001      	movs	r0, #1
 8008a16:	f7f8 fdb6 	bl	8001586 <_exit>

08008a1a <_raise_r>:
 8008a1a:	291f      	cmp	r1, #31
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4605      	mov	r5, r0
 8008a20:	460c      	mov	r4, r1
 8008a22:	d904      	bls.n	8008a2e <_raise_r+0x14>
 8008a24:	2316      	movs	r3, #22
 8008a26:	6003      	str	r3, [r0, #0]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a30:	b112      	cbz	r2, 8008a38 <_raise_r+0x1e>
 8008a32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a36:	b94b      	cbnz	r3, 8008a4c <_raise_r+0x32>
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 f831 	bl	8008aa0 <_getpid_r>
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4601      	mov	r1, r0
 8008a42:	4628      	mov	r0, r5
 8008a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a48:	f000 b818 	b.w	8008a7c <_kill_r>
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d00a      	beq.n	8008a66 <_raise_r+0x4c>
 8008a50:	1c59      	adds	r1, r3, #1
 8008a52:	d103      	bne.n	8008a5c <_raise_r+0x42>
 8008a54:	2316      	movs	r3, #22
 8008a56:	6003      	str	r3, [r0, #0]
 8008a58:	2001      	movs	r0, #1
 8008a5a:	e7e7      	b.n	8008a2c <_raise_r+0x12>
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a62:	4620      	mov	r0, r4
 8008a64:	4798      	blx	r3
 8008a66:	2000      	movs	r0, #0
 8008a68:	e7e0      	b.n	8008a2c <_raise_r+0x12>
	...

08008a6c <raise>:
 8008a6c:	4b02      	ldr	r3, [pc, #8]	@ (8008a78 <raise+0xc>)
 8008a6e:	4601      	mov	r1, r0
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f7ff bfd2 	b.w	8008a1a <_raise_r>
 8008a76:	bf00      	nop
 8008a78:	20000024 	.word	0x20000024

08008a7c <_kill_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d07      	ldr	r5, [pc, #28]	@ (8008a9c <_kill_r+0x20>)
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	4611      	mov	r1, r2
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	f7f8 fd6c 	bl	8001566 <_kill>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d102      	bne.n	8008a98 <_kill_r+0x1c>
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	b103      	cbz	r3, 8008a98 <_kill_r+0x1c>
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	bd38      	pop	{r3, r4, r5, pc}
 8008a9a:	bf00      	nop
 8008a9c:	200004bc 	.word	0x200004bc

08008aa0 <_getpid_r>:
 8008aa0:	f7f8 bd59 	b.w	8001556 <_getpid>

08008aa4 <_init>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	bf00      	nop
 8008aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aaa:	bc08      	pop	{r3}
 8008aac:	469e      	mov	lr, r3
 8008aae:	4770      	bx	lr

08008ab0 <_fini>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr
