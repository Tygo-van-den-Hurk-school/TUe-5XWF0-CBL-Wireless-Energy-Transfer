
HoverCharge_DCAC_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08008b78  08008b78  00009b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f60  08008f60  0000a1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008f60  08008f60  00009f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f68  08008f68  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f68  08008f68  00009f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f6c  08008f6c  00009f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08008f70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1e4  2**0
                  CONTENTS
 10 .bss          00000390  200001e4  200001e4  0000a1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000574  20000574  0000a1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f6c  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002498  00000000  00000000  0001b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  0001d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c20  00000000  00000000  0001e598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d21a  00000000  00000000  0001f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013702  00000000  00000000  0003c3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adcbc  00000000  00000000  0004fad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd790  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b0  00000000  00000000  000fd7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00102984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b5c 	.word	0x08008b5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008b5c 	.word	0x08008b5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFF);
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <__io_putchar+0x20>)
 8000bba:	f004 ff68 	bl	8005a8e <HAL_UART_Transmit>

	return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000374 	.word	0x20000374

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fe18 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f894 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 fad8 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be0:	f000 fab0 	bl	8001144 <MX_DMA_Init>
  MX_TIM1_Init();
 8000be4:	f000 f9d2 	bl	8000f8c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 fa7c 	bl	80010e4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000bec:	f000 f962 	bl	8000eb4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000bf0:	f000 f8e2 	bl	8000db8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	 PWM_Period = 64000000/(2*PWM_Freq)-1;
 8000bf4:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <main+0x100>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4a35      	ldr	r2, [pc, #212]	@ (8000cd0 <main+0x104>)
 8000bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c00:	3b01      	subs	r3, #1
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <main+0x108>)
 8000c06:	601a      	str	r2, [r3, #0]
  PWM_PulseWidth = (int)((PWM_Period*PWM_DutyC)/100);
 8000c08:	4b32      	ldr	r3, [pc, #200]	@ (8000cd4 <main+0x108>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c14:	4b30      	ldr	r3, [pc, #192]	@ (8000cd8 <main+0x10c>)
 8000c16:	edd3 7a00 	vldr	s15, [r3]
 8000c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c1e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000cdc <main+0x110>
 8000c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c2a:	ee17 2a90 	vmov	r2, s15
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <main+0x114>)
 8000c30:	601a      	str	r2, [r3, #0]

  	  	   __HAL_TIM_SET_AUTORELOAD(&htim1, PWM_Period);					//Timer 1 config
 8000c32:	4b28      	ldr	r3, [pc, #160]	@ (8000cd4 <main+0x108>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <main+0x118>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3c:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <main+0x108>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <main+0x118>)
 8000c44:	60da      	str	r2, [r3, #12]

 	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth);	//Tim1 Channel 1 config
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <main+0x114>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <main+0x118>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	635a      	str	r2, [r3, #52]	@ 0x34
 	        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c50:	2100      	movs	r1, #0
 8000c52:	4824      	ldr	r0, [pc, #144]	@ (8000ce4 <main+0x118>)
 8000c54:	f003 fe74 	bl	8004940 <HAL_TIM_PWM_Start>
 	        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <main+0x118>)
 8000c5c:	f004 fd18 	bl	8005690 <HAL_TIMEx_PWMN_Start>

  	       HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);				//ADC1 config
 8000c60:	2100      	movs	r1, #0
 8000c62:	4821      	ldr	r0, [pc, #132]	@ (8000ce8 <main+0x11c>)
 8000c64:	f001 f8da 	bl	8001e1c <HAL_ADCEx_Calibration_Start>
  	       HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_Buff, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4920      	ldr	r1, [pc, #128]	@ (8000cec <main+0x120>)
 8000c6c:	481e      	ldr	r0, [pc, #120]	@ (8000ce8 <main+0x11c>)
 8000c6e:	f000 fffb 	bl	8001c68 <HAL_ADC_Start_DMA>

 	       HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);				//ADC1 config
 8000c72:	2100      	movs	r1, #0
 8000c74:	481e      	ldr	r0, [pc, #120]	@ (8000cf0 <main+0x124>)
 8000c76:	f001 f8d1 	bl	8001e1c <HAL_ADCEx_Calibration_Start>
 	       HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2_Buff, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	491d      	ldr	r1, [pc, #116]	@ (8000cf4 <main+0x128>)
 8000c7e:	481c      	ldr	r0, [pc, #112]	@ (8000cf0 <main+0x124>)
 8000c80:	f000 fff2 	bl	8001c68 <HAL_ADC_Start_DMA>

		// __HAL_TIM_SET_COMPARE (&htim1, TIM_CHANNEL_1, PWM_PulseWidth);



		 printf("\r\n I_DCDC_OUT= %.2f A  |V_DCDC_OUT= %.2f V |  Duty Cycle: %.2f", I_DCDC_OUT, V_DCDC_OUT, PWM_DutyC);
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <main+0x12c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc5d 	bl	8000548 <__aeabi_f2d>
 8000c8e:	4680      	mov	r8, r0
 8000c90:	4689      	mov	r9, r1
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <main+0x130>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fc56 	bl	8000548 <__aeabi_f2d>
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <main+0x10c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fc4f 	bl	8000548 <__aeabi_f2d>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000cb2:	e9cd 4500 	strd	r4, r5, [sp]
 8000cb6:	4642      	mov	r2, r8
 8000cb8:	464b      	mov	r3, r9
 8000cba:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <main+0x134>)
 8000cbc:	f005 ffd4 	bl	8006c68 <iprintf>
		 HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f000 fe07 	bl	80018d4 <HAL_Delay>
		 printf("\r\n I_DCDC_OUT= %.2f A  |V_DCDC_OUT= %.2f V |  Duty Cycle: %.2f", I_DCDC_OUT, V_DCDC_OUT, PWM_DutyC);
 8000cc6:	bf00      	nop
 8000cc8:	e7dc      	b.n	8000c84 <main+0xb8>
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	03d09000 	.word	0x03d09000
 8000cd4:	20000414 	.word	0x20000414
 8000cd8:	2000000c 	.word	0x2000000c
 8000cdc:	42c80000 	.word	0x42c80000
 8000ce0:	20000418 	.word	0x20000418
 8000ce4:	20000328 	.word	0x20000328
 8000ce8:	20000200 	.word	0x20000200
 8000cec:	200003fc 	.word	0x200003fc
 8000cf0:	20000250 	.word	0x20000250
 8000cf4:	20000400 	.word	0x20000400
 8000cf8:	20000408 	.word	0x20000408
 8000cfc:	20000410 	.word	0x20000410
 8000d00:	08008b78 	.word	0x08008b78

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b096      	sub	sp, #88	@ 0x58
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d0e:	2228      	movs	r2, #40	@ 0x28
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 fffd 	bl	8006d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d40:	2310      	movs	r3, #16
 8000d42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	2302      	movs	r3, #2
 8000d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d4c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 f9a0 	bl	800309c <HAL_RCC_OscConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d62:	f000 fa71 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	2102      	movs	r1, #2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 f9c8 	bl	8004118 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d8e:	f000 fa5b 	bl	8001248 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d96:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fbf0 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000daa:	f000 fa4d 	bl	8001248 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3758      	adds	r7, #88	@ 0x58
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dda:	4b35      	ldr	r3, [pc, #212]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000ddc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000de0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000de2:	4b33      	ldr	r3, [pc, #204]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000de4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000de8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dea:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000df0:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000df6:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e04:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e0e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e20:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e28:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e3a:	481d      	ldr	r0, [pc, #116]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e3c:	f000 fd82 	bl	8001944 <HAL_ADC_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e46:	f000 f9ff 	bl	8001248 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4816      	ldr	r0, [pc, #88]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e56:	f001 fb11 	bl	800247c <HAL_ADCEx_MultiModeConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e60:	f000 f9f2 	bl	8001248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480b      	ldr	r0, [pc, #44]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e82:	f001 f83d 	bl	8001f00 <HAL_ADC_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e8c:	f000 f9dc 	bl	8001248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_ADC1_Init+0xf8>)
 8000e9a:	f001 f831 	bl	8001f00 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000ea4:	f000 f9d0 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	@ 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000200 	.word	0x20000200

08000eb4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000eca:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8000f88 <MX_ADC2_Init+0xd4>)
 8000ece:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000ed2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ed6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ede:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ee4:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000ef4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000efc:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000f00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f28:	4816      	ldr	r0, [pc, #88]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f2a:	f000 fd0b 	bl	8001944 <HAL_ADC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000f34:	f000 f988 	bl	8001248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f56:	f000 ffd3 	bl	8001f00 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000f60:	f000 f972 	bl	8001248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <MX_ADC2_Init+0xd0>)
 8000f6e:	f000 ffc7 	bl	8001f00 <HAL_ADC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000f78:	f000 f966 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000250 	.word	0x20000250
 8000f88:	50000100 	.word	0x50000100

08000f8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09a      	sub	sp, #104	@ 0x68
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	615a      	str	r2, [r3, #20]
 8000fbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	222c      	movs	r2, #44	@ 0x2c
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 fea3 	bl	8006d12 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fcc:	4b43      	ldr	r3, [pc, #268]	@ (80010dc <MX_TIM1_Init+0x150>)
 8000fce:	4a44      	ldr	r2, [pc, #272]	@ (80010e0 <MX_TIM1_Init+0x154>)
 8000fd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fd2:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <MX_TIM1_Init+0x150>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fd8:	4b40      	ldr	r3, [pc, #256]	@ (80010dc <MX_TIM1_Init+0x150>)
 8000fda:	2220      	movs	r2, #32
 8000fdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fde:	4b3f      	ldr	r3, [pc, #252]	@ (80010dc <MX_TIM1_Init+0x150>)
 8000fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80010dc <MX_TIM1_Init+0x150>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000fec:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <MX_TIM1_Init+0x150>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80010dc <MX_TIM1_Init+0x150>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff8:	4838      	ldr	r0, [pc, #224]	@ (80010dc <MX_TIM1_Init+0x150>)
 8000ffa:	f003 fbe9 	bl	80047d0 <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001004:	f000 f920 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800100e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001012:	4619      	mov	r1, r3
 8001014:	4831      	ldr	r0, [pc, #196]	@ (80010dc <MX_TIM1_Init+0x150>)
 8001016:	f003 fe93 	bl	8004d40 <HAL_TIM_ConfigClockSource>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001020:	f000 f912 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001024:	482d      	ldr	r0, [pc, #180]	@ (80010dc <MX_TIM1_Init+0x150>)
 8001026:	f003 fc2a 	bl	800487e <HAL_TIM_PWM_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001030:	f000 f90a 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001034:	2320      	movs	r3, #32
 8001036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001040:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001044:	4619      	mov	r1, r3
 8001046:	4825      	ldr	r0, [pc, #148]	@ (80010dc <MX_TIM1_Init+0x150>)
 8001048:	f004 fbc8 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001052:	f000 f8f9 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001056:	2360      	movs	r3, #96	@ 0x60
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001072:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	4818      	ldr	r0, [pc, #96]	@ (80010dc <MX_TIM1_Init+0x150>)
 800107c:	f003 fd4c 	bl	8004b18 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001086:	f000 f8df 	bl	8001248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 8;
 8001096:	2308      	movs	r3, #8
 8001098:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800109e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4807      	ldr	r0, [pc, #28]	@ (80010dc <MX_TIM1_Init+0x150>)
 80010c0:	f004 fbfa 	bl	80058b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80010ca:	f000 f8bd 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ce:	4803      	ldr	r0, [pc, #12]	@ (80010dc <MX_TIM1_Init+0x150>)
 80010d0:	f000 f9da 	bl	8001488 <HAL_TIM_MspPostInit>

}
 80010d4:	bf00      	nop
 80010d6:	3768      	adds	r7, #104	@ 0x68
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000328 	.word	0x20000328
 80010e0:	40012c00 	.word	0x40012c00

080010e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_USART2_UART_Init+0x58>)
 80010ea:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <MX_USART2_UART_Init+0x5c>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_USART2_UART_Init+0x58>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_USART2_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_USART2_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_USART2_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_USART2_UART_Init+0x58>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_USART2_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_USART2_UART_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_USART2_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_USART2_UART_Init+0x58>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_USART2_UART_Init+0x58>)
 8001128:	f004 fc63 	bl	80059f2 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001132:	f000 f889 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000374 	.word	0x20000374
 8001140:	40004400 	.word	0x40004400

08001144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_DMA_Init+0x48>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a0f      	ldr	r2, [pc, #60]	@ (800118c <MX_DMA_Init+0x48>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6153      	str	r3, [r2, #20]
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <MX_DMA_Init+0x48>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200b      	movs	r0, #11
 8001168:	f001 fc59 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800116c:	200b      	movs	r0, #11
 800116e:	f001 fc72 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	200c      	movs	r0, #12
 8001178:	f001 fc51 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800117c:	200c      	movs	r0, #12
 800117e:	f001 fc6a 	bl	8002a56 <HAL_NVIC_EnableIRQ>

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_GPIO_Init+0x2c>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <MX_GPIO_Init+0x2c>)
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_GPIO_Init+0x2c>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

		adc_val_4 = ADC2_Buff[0];
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_ADC_ConvCpltCallback+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a16      	ldr	r2, [pc, #88]	@ (8001228 <HAL_ADC_ConvCpltCallback+0x68>)
 80011ce:	6013      	str	r3, [r2, #0]
		I_DCDC_OUT = (float)adc_val_4 * Factor_ADC_I_IN -1.6f;
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_ADC_ConvCpltCallback+0x68>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <HAL_ADC_ConvCpltCallback+0x6c>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001230 <HAL_ADC_ConvCpltCallback+0x70>
 80011ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_ADC_ConvCpltCallback+0x74>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]

		adc_val_1 = ADC1_Buff[0];
 80011f4:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <HAL_ADC_ConvCpltCallback+0x78>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_ADC_ConvCpltCallback+0x7c>)
 80011fa:	6013      	str	r3, [r2, #0]
		V_DCDC_OUT = (float)adc_val_1 * Factor_ADC_V_IN;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_ADC_ConvCpltCallback+0x7c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <HAL_ADC_ConvCpltCallback+0x80>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <HAL_ADC_ConvCpltCallback+0x84>)
 8001214:	edc3 7a00 	vstr	s15, [r3]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	20000400 	.word	0x20000400
 8001228:	20000404 	.word	0x20000404
 800122c:	20000000 	.word	0x20000000
 8001230:	3fcccccd 	.word	0x3fcccccd
 8001234:	20000408 	.word	0x20000408
 8001238:	200003fc 	.word	0x200003fc
 800123c:	2000040c 	.word	0x2000040c
 8001240:	20000004 	.word	0x20000004
 8001244:	20000410 	.word	0x20000410

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <Error_Handler+0x8>

08001254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <HAL_MspInit+0x44>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a0e      	ldr	r2, [pc, #56]	@ (8001298 <HAL_MspInit+0x44>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_MspInit+0x44>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_MspInit+0x44>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_MspInit+0x44>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_MspInit+0x44>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012bc:	d156      	bne.n	800136c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012be:	4b5b      	ldr	r3, [pc, #364]	@ (800142c <HAL_ADC_MspInit+0x190>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	4a59      	ldr	r2, [pc, #356]	@ (800142c <HAL_ADC_MspInit+0x190>)
 80012c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012c8:	4b58      	ldr	r3, [pc, #352]	@ (800142c <HAL_ADC_MspInit+0x190>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d10b      	bne.n	80012e8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012d0:	4b57      	ldr	r3, [pc, #348]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	4a56      	ldr	r2, [pc, #344]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012da:	6153      	str	r3, [r2, #20]
 80012dc:	4b54      	ldr	r3, [pc, #336]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4a50      	ldr	r2, [pc, #320]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f2:	6153      	str	r3, [r2, #20]
 80012f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = A0_DCDC_V_Pin;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(A0_DCDC_V_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001316:	f001 fd4f 	bl	8002db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800131a:	4b46      	ldr	r3, [pc, #280]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 800131c:	4a46      	ldr	r2, [pc, #280]	@ (8001438 <HAL_ADC_MspInit+0x19c>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001320:	4b44      	ldr	r3, [pc, #272]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001326:	4b43      	ldr	r3, [pc, #268]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800132c:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001332:	4b40      	ldr	r3, [pc, #256]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 8001334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001338:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800133a:	4b3e      	ldr	r3, [pc, #248]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 800133c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001340:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001342:	4b3c      	ldr	r3, [pc, #240]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 8001344:	2220      	movs	r2, #32
 8001346:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001348:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800134e:	4839      	ldr	r0, [pc, #228]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 8001350:	f001 fb9b 	bl	8002a8a <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800135a:	f7ff ff75 	bl	8001248 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a34      	ldr	r2, [pc, #208]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 8001362:	639a      	str	r2, [r3, #56]	@ 0x38
 8001364:	4a33      	ldr	r2, [pc, #204]	@ (8001434 <HAL_ADC_MspInit+0x198>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800136a:	e05a      	b.n	8001422 <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a32      	ldr	r2, [pc, #200]	@ (800143c <HAL_ADC_MspInit+0x1a0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d155      	bne.n	8001422 <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001376:	4b2d      	ldr	r3, [pc, #180]	@ (800142c <HAL_ADC_MspInit+0x190>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a2b      	ldr	r2, [pc, #172]	@ (800142c <HAL_ADC_MspInit+0x190>)
 800137e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001380:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <HAL_ADC_MspInit+0x190>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001388:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	4a28      	ldr	r2, [pc, #160]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001392:	6153      	str	r3, [r2, #20]
 8001394:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80013a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013aa:	6153      	str	r3, [r2, #20]
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <HAL_ADC_MspInit+0x194>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ce:	f001 fcf3 	bl	8002db8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_ADC_MspInit+0x1a8>)
 80013d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 80013e6:	2280      	movs	r2, #128	@ 0x80
 80013e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 80013ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 80013f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013f8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 80013fc:	2220      	movs	r2, #32
 80013fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001406:	480e      	ldr	r0, [pc, #56]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 8001408:	f001 fb3f 	bl	8002a8a <HAL_DMA_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8001412:	f7ff ff19 	bl	8001248 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 800141a:	639a      	str	r2, [r3, #56]	@ 0x38
 800141c:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_ADC_MspInit+0x1a4>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001422:	bf00      	nop
 8001424:	3730      	adds	r7, #48	@ 0x30
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000041c 	.word	0x2000041c
 8001430:	40021000 	.word	0x40021000
 8001434:	200002a0 	.word	0x200002a0
 8001438:	40020008 	.word	0x40020008
 800143c:	50000100 	.word	0x50000100
 8001440:	200002e4 	.word	0x200002e4
 8001444:	4002001c 	.word	0x4002001c

08001448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <HAL_TIM_Base_MspInit+0x38>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10b      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_TIM_Base_MspInit+0x3c>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a09      	ldr	r2, [pc, #36]	@ (8001484 <HAL_TIM_Base_MspInit+0x3c>)
 8001460:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <HAL_TIM_Base_MspInit+0x3c>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40012c00 	.word	0x40012c00
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <HAL_TIM_MspPostInit+0x68>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d11d      	bne.n	80014e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_TIM_MspPostInit+0x6c>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_TIM_MspPostInit+0x6c>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_TIM_MspPostInit+0x6c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = D9_PWM_DCAC_1_Pin|D10_PWM_DCAC_2_Pin;
 80014c2:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80014c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014d4:	2306      	movs	r3, #6
 80014d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f001 fc69 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40012c00 	.word	0x40012c00
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <HAL_UART_MspInit+0x7c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d128      	bne.n	800156c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151a:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <HAL_UART_MspInit+0x80>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a16      	ldr	r2, [pc, #88]	@ (8001578 <HAL_UART_MspInit+0x80>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_UART_MspInit+0x80>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_UART_MspInit+0x80>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	4a10      	ldr	r2, [pc, #64]	@ (8001578 <HAL_UART_MspInit+0x80>)
 8001538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153c:	6153      	str	r3, [r2, #20]
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <HAL_UART_MspInit+0x80>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154a:	230c      	movs	r3, #12
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155a:	2307      	movs	r3, #7
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001568:	f001 fc26 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	@ 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40004400 	.word	0x40004400
 8001578:	40021000 	.word	0x40021000

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <NMI_Handler+0x4>

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <MemManage_Handler+0x4>

08001594 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 f95f 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <DMA1_Channel1_IRQHandler+0x10>)
 80015e2:	f001 faf8 	bl	8002bd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002a0 	.word	0x200002a0

080015f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <DMA1_Channel2_IRQHandler+0x10>)
 80015f6:	f001 faee 	bl	8002bd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200002e4 	.word	0x200002e4

08001604 <_getpid>:
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
 8001608:	2301      	movs	r3, #1
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_kill>:
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	f005 fbcb 	bl	8006db8 <__errno>
 8001622:	4603      	mov	r3, r0
 8001624:	2216      	movs	r2, #22
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_exit>:
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffe7 	bl	8001614 <_kill>
 8001646:	bf00      	nop
 8001648:	e7fd      	b.n	8001646 <_exit+0x12>

0800164a <_read>:
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e00a      	b.n	8001672 <_read+0x28>
 800165c:	f3af 8000 	nop.w
 8001660:	4601      	mov	r1, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	60ba      	str	r2, [r7, #8]
 8001668:	b2ca      	uxtb	r2, r1
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	dbf0      	blt.n	800165c <_read+0x12>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_write>:
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e009      	b.n	80016aa <_write+0x26>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fa82 	bl	8000ba8 <__io_putchar>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbf1      	blt.n	8001696 <_write+0x12>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_close>:
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_fstat>:
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	2300      	movs	r3, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_isatty>:
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	2301      	movs	r3, #1
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_lseek>:
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	2300      	movs	r3, #0
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_sbrk>:
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	@ (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
 8001754:	f005 fb30 	bl	8006db8 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20003000 	.word	0x20003000
 8001784:	00000400 	.word	0x00000400
 8001788:	20000420 	.word	0x20000420
 800178c:	20000578 	.word	0x20000578

08001790 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ec <LoopForever+0x2>
 80017b8:	f7ff ffea 	bl	8001790 <SystemInit>
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <LoopForever+0x6>)
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <LoopForever+0xa>)
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <LoopForever+0xe>)
 80017c2:	2300      	movs	r3, #0
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:
 80017c6:	58d4      	ldr	r4, [r2, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:
 80017cc:	18c4      	adds	r4, r0, r3
 80017ce:	428c      	cmp	r4, r1
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <LoopForever+0x12>)
 80017d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001800 <LoopForever+0x16>)
 80017d6:	2300      	movs	r3, #0
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:
 80017de:	42a2      	cmp	r2, r4
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>
 80017e2:	f005 faef 	bl	8006dc4 <__libc_init_array>
 80017e6:	f7ff f9f1 	bl	8000bcc <main>

080017ea <LoopForever>:
 80017ea:	e7fe      	b.n	80017ea <LoopForever>
 80017ec:	20003000 	.word	0x20003000
 80017f0:	20000000 	.word	0x20000000
 80017f4:	200001e4 	.word	0x200001e4
 80017f8:	08008f70 	.word	0x08008f70
 80017fc:	200001e4 	.word	0x200001e4
 8001800:	20000574 	.word	0x20000574

08001804 <ADC1_2_IRQHandler>:
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_Init+0x28>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <HAL_Init+0x28>)
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f001 f8f5 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fd16 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000

08001834 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f001 f90d 	bl	8002a72 <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f001 f8d5 	bl	8002a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	@ (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000010 	.word	0x20000010
 800188c:	20000018 	.word	0x20000018
 8001890:	20000014 	.word	0x20000014

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_IncTick+0x24>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <HAL_IncTick+0x24>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000018 	.word	0x20000018
 80018b8:	20000424 	.word	0x20000424

080018bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;  
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000424 	.word	0x20000424

080018d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff ffee 	bl	80018bc <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffde 	bl	80018bc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000018 	.word	0x20000018

0800191c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b09a      	sub	sp, #104	@ 0x68
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e172      	b.n	8001c4a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	d176      	bne.n	8001a64 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d152      	bne.n	8001a24 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fc7f 	bl	800129c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d13b      	bne.n	8001a24 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fef5 	bl	800279c <ADC_Disable>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d12f      	bne.n	8001a24 <HAL_ADC_Init+0xe0>
 80019c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d12b      	bne.n	8001a24 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019d4:	f023 0302 	bic.w	r3, r3, #2
 80019d8:	f043 0202 	orr.w	r2, r3, #2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80019fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a00:	4b94      	ldr	r3, [pc, #592]	@ (8001c54 <HAL_ADC_Init+0x310>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a94      	ldr	r2, [pc, #592]	@ (8001c58 <HAL_ADC_Init+0x314>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9a      	lsrs	r2, r3, #18
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a16:	e002      	b.n	8001a1e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f9      	bne.n	8001a18 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a40:	d110      	bne.n	8001a64 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f023 0312 	bic.w	r3, r3, #18
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f040 80df 	bne.w	8001c30 <HAL_ADC_Init+0x2ec>
 8001a72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 80da 	bne.w	8001c30 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 80d2 	bne.w	8001c30 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a94:	f043 0202 	orr.w	r2, r3, #2
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c5c <HAL_ADC_Init+0x318>)
 8001a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aa8:	d102      	bne.n	8001ab0 <HAL_ADC_Init+0x16c>
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8001c60 <HAL_ADC_Init+0x31c>)
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e002      	b.n	8001ab6 <HAL_ADC_Init+0x172>
 8001ab0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ab4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d108      	bne.n	8001ad6 <HAL_ADC_Init+0x192>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Init+0x192>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_ADC_Init+0x194>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11c      	bne.n	8001b16 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d010      	beq.n	8001b04 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_ADC_Init+0x1ba>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Init+0x1ba>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_ADC_Init+0x1bc>
 8001afe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d108      	bne.n	8001b16 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b14:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7e5b      	ldrb	r3, [r3, #25]
 8001b1a:	035b      	lsls	r3, r3, #13
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b20:	2a01      	cmp	r2, #1
 8001b22:	d002      	beq.n	8001b2a <HAL_ADC_Init+0x1e6>
 8001b24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b28:	e000      	b.n	8001b2c <HAL_ADC_Init+0x1e8>
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d11b      	bne.n	8001b82 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7e5b      	ldrb	r3, [r3, #25]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	3b01      	subs	r3, #1
 8001b58:	045a      	lsls	r2, r3, #17
 8001b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b62:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b64:	e00d      	b.n	8001b82 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001b6e:	f043 0220 	orr.w	r2, r3, #32
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d007      	beq.n	8001b9a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b92:	4313      	orrs	r3, r2
 8001b94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b96:	4313      	orrs	r3, r2
 8001b98:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d114      	bne.n	8001bd2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bb6:	f023 0302 	bic.w	r3, r3, #2
 8001bba:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7e1b      	ldrb	r3, [r3, #24]
 8001bc0:	039a      	lsls	r2, r3, #14
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <HAL_ADC_Init+0x320>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001be2:	430b      	orrs	r3, r1
 8001be4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10c      	bne.n	8001c08 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	f023 010f 	bic.w	r1, r3, #15
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c06:	e007      	b.n	8001c18 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 020f 	bic.w	r2, r2, #15
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c2e:	e00a      	b.n	8001c46 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	f023 0312 	bic.w	r3, r3, #18
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3768      	adds	r7, #104	@ 0x68
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000010 	.word	0x20000010
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	50000300 	.word	0x50000300
 8001c60:	50000100 	.word	0x50000100
 8001c64:	fff0c007 	.word	0xfff0c007

08001c68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 80b9 	bne.w	8001dfa <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Start_DMA+0x2e>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e0b4      	b.n	8001e00 <HAL_ADC_Start_DMA+0x198>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e08 <HAL_ADC_Start_DMA+0x1a0>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 80a0 	bne.w	8001dec <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fd11 	bl	80026d4 <ADC_Enable>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 8092 	bne.w	8001de2 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e08 <HAL_ADC_Start_DMA+0x1a0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_ADC_Start_DMA+0x80>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ce6:	d115      	bne.n	8001d14 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d027      	beq.n	8001d52 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d12:	e01e      	b.n	8001d52 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d28:	d004      	beq.n	8001d34 <HAL_ADC_Start_DMA+0xcc>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a37      	ldr	r2, [pc, #220]	@ (8001e0c <HAL_ADC_Start_DMA+0x1a4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d10e      	bne.n	8001d52 <HAL_ADC_Start_DMA+0xea>
 8001d34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	f023 0206 	bic.w	r2, r3, #6
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d80:	4a23      	ldr	r2, [pc, #140]	@ (8001e10 <HAL_ADC_Start_DMA+0x1a8>)
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d88:	4a22      	ldr	r2, [pc, #136]	@ (8001e14 <HAL_ADC_Start_DMA+0x1ac>)
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d90:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <HAL_ADC_Start_DMA+0x1b0>)
 8001d92:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	221c      	movs	r2, #28
 8001d9a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0210 	orr.w	r2, r2, #16
 8001daa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3340      	adds	r3, #64	@ 0x40
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f000 fea4 	bl	8002b18 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0204 	orr.w	r2, r2, #4
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e00d      	b.n	8001dfe <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001dea:	e008      	b.n	8001dfe <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001df8:	e001      	b.n	8001dfe <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	50000300 	.word	0x50000300
 8001e0c:	50000100 	.word	0x50000100
 8001e10:	08002609 	.word	0x08002609
 8001e14:	08002683 	.word	0x08002683
 8001e18:	0800269f 	.word	0x0800269f

08001e1c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_ADCEx_Calibration_Start+0x1c>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e05f      	b.n	8001ef8 <HAL_ADCEx_Calibration_Start+0xdc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fcab 	bl	800279c <ADC_Disable>
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d14e      	bne.n	8001eee <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001e64:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d107      	bne.n	8001e7c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e7a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e8a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001e8c:	f7ff fd16 	bl	80018bc <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e92:	e01c      	b.n	8001ece <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e94:	f7ff fd12 	bl	80018bc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b0a      	cmp	r3, #10
 8001ea0:	d915      	bls.n	8001ece <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001eac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001eb0:	d10d      	bne.n	8001ece <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f023 0312 	bic.w	r3, r3, #18
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e014      	b.n	8001ef8 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001edc:	d0da      	beq.n	8001e94 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f023 0303 	bic.w	r3, r3, #3
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b09b      	sub	sp, #108	@ 0x6c
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x22>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e2a1      	b.n	8002466 <HAL_ADC_ConfigChannel+0x566>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 8285 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d81c      	bhi.n	8001f7c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	461a      	mov	r2, r3
 8001f56:	231f      	movs	r3, #31
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4019      	ands	r1, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f7a:	e063      	b.n	8002044 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	d81e      	bhi.n	8001fc2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	3b1e      	subs	r3, #30
 8001f98:	221f      	movs	r2, #31
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	4019      	ands	r1, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	3b1e      	subs	r3, #30
 8001fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fc0:	e040      	b.n	8002044 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b0e      	cmp	r3, #14
 8001fc8:	d81e      	bhi.n	8002008 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	3b3c      	subs	r3, #60	@ 0x3c
 8001fde:	221f      	movs	r2, #31
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4019      	ands	r1, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	3b3c      	subs	r3, #60	@ 0x3c
 8001ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	639a      	str	r2, [r3, #56]	@ 0x38
 8002006:	e01d      	b.n	8002044 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	3b5a      	subs	r3, #90	@ 0x5a
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	4019      	ands	r1, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	3b5a      	subs	r3, #90	@ 0x5a
 8002038:	fa00 f203 	lsl.w	r2, r0, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80e5 	bne.w	800221e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b09      	cmp	r3, #9
 800205a:	d91c      	bls.n	8002096 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6999      	ldr	r1, [r3, #24]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	3b1e      	subs	r3, #30
 800206e:	2207      	movs	r2, #7
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	4019      	ands	r1, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6898      	ldr	r0, [r3, #8]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	3b1e      	subs	r3, #30
 8002088:	fa00 f203 	lsl.w	r2, r0, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	619a      	str	r2, [r3, #24]
 8002094:	e019      	b.n	80020ca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6959      	ldr	r1, [r3, #20]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	2207      	movs	r2, #7
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4019      	ands	r1, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6898      	ldr	r0, [r3, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	fa00 f203 	lsl.w	r2, r0, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d84f      	bhi.n	800218c <HAL_ADC_ConfigChannel+0x28c>
 80020ec:	a201      	add	r2, pc, #4	@ (adr r2, 80020f4 <HAL_ADC_ConfigChannel+0x1f4>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002105 	.word	0x08002105
 80020f8:	08002127 	.word	0x08002127
 80020fc:	08002149 	.word	0x08002149
 8002100:	0800216b 	.word	0x0800216b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800210a:	4b9c      	ldr	r3, [pc, #624]	@ (800237c <HAL_ADC_ConfigChannel+0x47c>)
 800210c:	4013      	ands	r3, r2
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	0691      	lsls	r1, r2, #26
 8002114:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002116:	430a      	orrs	r2, r1
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002122:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002124:	e07b      	b.n	800221e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800212c:	4b93      	ldr	r3, [pc, #588]	@ (800237c <HAL_ADC_ConfigChannel+0x47c>)
 800212e:	4013      	ands	r3, r2
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	0691      	lsls	r1, r2, #26
 8002136:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002138:	430a      	orrs	r2, r1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002144:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002146:	e06a      	b.n	800221e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800214e:	4b8b      	ldr	r3, [pc, #556]	@ (800237c <HAL_ADC_ConfigChannel+0x47c>)
 8002150:	4013      	ands	r3, r2
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	0691      	lsls	r1, r2, #26
 8002158:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800215a:	430a      	orrs	r2, r1
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002166:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002168:	e059      	b.n	800221e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002170:	4b82      	ldr	r3, [pc, #520]	@ (800237c <HAL_ADC_ConfigChannel+0x47c>)
 8002172:	4013      	ands	r3, r2
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	0691      	lsls	r1, r2, #26
 800217a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800217c:	430a      	orrs	r2, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002188:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800218a:	e048      	b.n	800221e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002192:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	069b      	lsls	r3, r3, #26
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021ae:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021d2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	069b      	lsls	r3, r3, #26
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021f6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	069b      	lsls	r3, r3, #26
 8002208:	429a      	cmp	r2, r3
 800220a:	d107      	bne.n	800221c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800221a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800221c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d108      	bne.n	800223e <HAL_ADC_ConfigChannel+0x33e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x33e>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_ADC_ConfigChannel+0x340>
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 810a 	bne.w	800245a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d00f      	beq.n	800226e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2201      	movs	r2, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800226c:	e049      	b.n	8002302 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	409a      	lsls	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d91c      	bls.n	80022ca <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6999      	ldr	r1, [r3, #24]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1b      	subs	r3, #27
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4019      	ands	r1, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6898      	ldr	r0, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	3b1b      	subs	r3, #27
 80022bc:	fa00 f203 	lsl.w	r2, r0, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	619a      	str	r2, [r3, #24]
 80022c8:	e01b      	b.n	8002302 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6959      	ldr	r1, [r3, #20]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	2207      	movs	r2, #7
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4019      	ands	r1, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6898      	ldr	r0, [r3, #8]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	fa00 f203 	lsl.w	r2, r0, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002302:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <HAL_ADC_ConfigChannel+0x480>)
 8002304:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b10      	cmp	r3, #16
 800230c:	d105      	bne.n	800231a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800230e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800231e:	2b11      	cmp	r3, #17
 8002320:	d105      	bne.n	800232e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002332:	2b12      	cmp	r3, #18
 8002334:	f040 8091 	bne.w	800245a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 808a 	bne.w	800245a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800234e:	d102      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x456>
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <HAL_ADC_ConfigChannel+0x484>)
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e002      	b.n	800235c <HAL_ADC_ConfigChannel+0x45c>
 8002356:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800235a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10e      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x488>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x488>
 8002378:	2301      	movs	r3, #1
 800237a:	e006      	b.n	800238a <HAL_ADC_ConfigChannel+0x48a>
 800237c:	83fff000 	.word	0x83fff000
 8002380:	50000300 	.word	0x50000300
 8002384:	50000100 	.word	0x50000100
 8002388:	2300      	movs	r3, #0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d150      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800238e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x4b0>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x4b0>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x4b2>
 80023b0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13c      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d11d      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x4fa>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c6:	d118      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80023c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023d4:	4b27      	ldr	r3, [pc, #156]	@ (8002474 <HAL_ADC_ConfigChannel+0x574>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a27      	ldr	r2, [pc, #156]	@ (8002478 <HAL_ADC_ConfigChannel+0x578>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	0c9a      	lsrs	r2, r3, #18
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023ea:	e002      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f9      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023f8:	e02e      	b.n	8002458 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b11      	cmp	r3, #17
 8002400:	d10b      	bne.n	800241a <HAL_ADC_ConfigChannel+0x51a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800240a:	d106      	bne.n	800241a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800240c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002416:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002418:	e01e      	b.n	8002458 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b12      	cmp	r3, #18
 8002420:	d11a      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800242a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800242c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800242e:	e013      	b.n	8002458 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002442:	e00a      	b.n	800245a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002456:	e000      	b.n	800245a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002458:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002462:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002466:	4618      	mov	r0, r3
 8002468:	376c      	adds	r7, #108	@ 0x6c
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000010 	.word	0x20000010
 8002478:	431bde83 	.word	0x431bde83

0800247c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800247c:	b480      	push	{r7}
 800247e:	b099      	sub	sp, #100	@ 0x64
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002494:	d102      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002496:	4b5a      	ldr	r3, [pc, #360]	@ (8002600 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	e002      	b.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800249c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024a0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0a2      	b.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e09b      	b.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d17f      	bne.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d179      	bne.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024dc:	4b49      	ldr	r3, [pc, #292]	@ (8002604 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80024de:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d040      	beq.n	800256a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024fa:	035b      	lsls	r3, r3, #13
 80024fc:	430b      	orrs	r3, r1
 80024fe:	431a      	orrs	r2, r3
 8002500:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002502:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d15c      	bne.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002546:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002548:	2b00      	cmp	r3, #0
 800254a:	d14b      	bne.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800254c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002554:	f023 030f 	bic.w	r3, r3, #15
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	6811      	ldr	r1, [r2, #0]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	6892      	ldr	r2, [r2, #8]
 8002560:	430a      	orrs	r2, r1
 8002562:	431a      	orrs	r2, r3
 8002564:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002566:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002568:	e03c      	b.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800256a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002574:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d123      	bne.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80025b8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d112      	bne.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80025be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025c6:	f023 030f 	bic.w	r3, r3, #15
 80025ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025cc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025ce:	e009      	b.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80025e2:	e000      	b.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80025f2:	4618      	mov	r0, r3
 80025f4:	3764      	adds	r7, #100	@ 0x64
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	50000100 	.word	0x50000100
 8002604:	50000300 	.word	0x50000300

08002608 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800261e:	2b00      	cmp	r3, #0
 8002620:	d126      	bne.n	8002670 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002638:	2b00      	cmp	r3, #0
 800263a:	d115      	bne.n	8002668 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7fe fda9 	bl	80011c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800266e:	e004      	b.n	800267a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff f943 	bl	800191c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026bc:	f043 0204 	orr.w	r2, r3, #4
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff f933 	bl	8001930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <ADC_Enable+0x2c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <ADC_Enable+0x2c>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <ADC_Enable+0x2e>
 8002700:	2300      	movs	r3, #0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d143      	bne.n	800278e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <ADC_Enable+0xc4>)
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	f043 0210 	orr.w	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e02f      	b.n	8002790 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002740:	f7ff f8bc 	bl	80018bc <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002746:	e01b      	b.n	8002780 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002748:	f7ff f8b8 	bl	80018bc <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d914      	bls.n	8002780 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d00d      	beq.n	8002780 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	f043 0210 	orr.w	r2, r3, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e007      	b.n	8002790 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d1dc      	bne.n	8002748 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	8000003f 	.word	0x8000003f

0800279c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d108      	bne.n	80027c8 <ADC_Disable+0x2c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <ADC_Disable+0x2c>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <ADC_Disable+0x2e>
 80027c8:	2300      	movs	r3, #0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d047      	beq.n	800285e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 030d 	and.w	r3, r3, #13
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d10f      	bne.n	80027fc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0202 	orr.w	r2, r2, #2
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2203      	movs	r2, #3
 80027f2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80027f4:	f7ff f862 	bl	80018bc <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027fa:	e029      	b.n	8002850 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f043 0210 	orr.w	r2, r3, #16
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e023      	b.n	8002860 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002818:	f7ff f850 	bl	80018bc <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d914      	bls.n	8002850 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10d      	bne.n	8002850 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f043 0210 	orr.w	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e007      	b.n	8002860 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d0dc      	beq.n	8002818 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002878:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <__NVIC_SetPriorityGrouping+0x44>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002884:	4013      	ands	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289a:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <__NVIC_SetPriorityGrouping+0x44>)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	60d3      	str	r3, [r2, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <__NVIC_GetPriorityGrouping+0x18>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f003 0307 	and.w	r3, r3, #7
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	db0b      	blt.n	80028f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	f003 021f 	and.w	r2, r3, #31
 80028e4:	4907      	ldr	r1, [pc, #28]	@ (8002904 <__NVIC_EnableIRQ+0x38>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2001      	movs	r0, #1
 80028ee:	fa00 f202 	lsl.w	r2, r0, r2
 80028f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000e100 	.word	0xe000e100

08002908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	2b00      	cmp	r3, #0
 800291a:	db0a      	blt.n	8002932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	490c      	ldr	r1, [pc, #48]	@ (8002954 <__NVIC_SetPriority+0x4c>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	440b      	add	r3, r1
 800292c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002930:	e00a      	b.n	8002948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4908      	ldr	r1, [pc, #32]	@ (8002958 <__NVIC_SetPriority+0x50>)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	3b04      	subs	r3, #4
 8002940:	0112      	lsls	r2, r2, #4
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	440b      	add	r3, r1
 8002946:	761a      	strb	r2, [r3, #24]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	@ 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f1c3 0307 	rsb	r3, r3, #7
 8002976:	2b04      	cmp	r3, #4
 8002978:	bf28      	it	cs
 800297a:	2304      	movcs	r3, #4
 800297c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3304      	adds	r3, #4
 8002982:	2b06      	cmp	r3, #6
 8002984:	d902      	bls.n	800298c <NVIC_EncodePriority+0x30>
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3b03      	subs	r3, #3
 800298a:	e000      	b.n	800298e <NVIC_EncodePriority+0x32>
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	f04f 32ff 	mov.w	r2, #4294967295
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	401a      	ands	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43d9      	mvns	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	4313      	orrs	r3, r2
         );
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3724      	adds	r7, #36	@ 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029d4:	d301      	bcc.n	80029da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <SysTick_Config+0x40>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e2:	210f      	movs	r1, #15
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f7ff ff8e 	bl	8002908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <SysTick_Config+0x40>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f2:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <SysTick_Config+0x40>)
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff29 	bl	8002868 <__NVIC_SetPriorityGrouping>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff3e 	bl	80028b0 <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff8e 	bl	800295c <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5d 	bl	8002908 <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff31 	bl	80028cc <__NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffa2 	bl	80029c4 <SysTick_Config>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e037      	b.n	8002b10 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ab6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002aba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f940 	bl	8002d78 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}  
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_DMA_Start_IT+0x20>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e04a      	b.n	8002bce <HAL_DMA_Start_IT+0xb6>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d13a      	bne.n	8002bc0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f8d4 	bl	8002d1c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 020e 	orr.w	r2, r2, #14
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e00f      	b.n	8002bae <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 020a 	orr.w	r2, r2, #10
 8002b9c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0204 	bic.w	r2, r2, #4
 8002bac:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e005      	b.n	8002bcc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d024      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x72>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01f      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0204 	bic.w	r2, r2, #4
 8002c24:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	2104      	movs	r1, #4
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d06a      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c46:	e065      	b.n	8002d14 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02c      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xdc>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d027      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10b      	bne.n	8002c88 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 020a 	bic.w	r2, r2, #10
 8002c7e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	2102      	movs	r1, #2
 8002c92:	fa01 f202 	lsl.w	r2, r1, r2
 8002c96:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d035      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002cb0:	e030      	b.n	8002d14 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d028      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x13e>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 020e 	bic.w	r2, r2, #14
 8002cda:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
    }
  }
}  
 8002d12:	e7ff      	b.n	8002d14 <HAL_DMA_IRQHandler+0x13e>
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d108      	bne.n	8002d5c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d5a:	e007      	b.n	8002d6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <DMA_CalcBaseAndBitshift+0x34>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a09      	ldr	r2, [pc, #36]	@ (8002db0 <DMA_CalcBaseAndBitshift+0x38>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	009a      	lsls	r2, r3, #2
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a06      	ldr	r2, [pc, #24]	@ (8002db4 <DMA_CalcBaseAndBitshift+0x3c>)
 8002d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	bffdfff8 	.word	0xbffdfff8
 8002db0:	cccccccd 	.word	0xcccccccd
 8002db4:	40020000 	.word	0x40020000

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc6:	e14e      	b.n	8003066 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8140 	beq.w	8003060 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d005      	beq.n	8002df8 <HAL_GPIO_Init+0x40>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d130      	bne.n	8002e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2e:	2201      	movs	r2, #1
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 0201 	and.w	r2, r3, #1
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d017      	beq.n	8002e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d123      	bne.n	8002eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	08da      	lsrs	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3208      	adds	r2, #8
 8002eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	220f      	movs	r2, #15
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	08da      	lsrs	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3208      	adds	r2, #8
 8002ee4:	6939      	ldr	r1, [r7, #16]
 8002ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0203 	and.w	r2, r3, #3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 809a 	beq.w	8003060 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2c:	4b55      	ldr	r3, [pc, #340]	@ (8003084 <HAL_GPIO_Init+0x2cc>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4a54      	ldr	r2, [pc, #336]	@ (8003084 <HAL_GPIO_Init+0x2cc>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6193      	str	r3, [r2, #24]
 8002f38:	4b52      	ldr	r3, [pc, #328]	@ (8003084 <HAL_GPIO_Init+0x2cc>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f44:	4a50      	ldr	r2, [pc, #320]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f6e:	d013      	beq.n	8002f98 <HAL_GPIO_Init+0x1e0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a46      	ldr	r2, [pc, #280]	@ (800308c <HAL_GPIO_Init+0x2d4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00d      	beq.n	8002f94 <HAL_GPIO_Init+0x1dc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a45      	ldr	r2, [pc, #276]	@ (8003090 <HAL_GPIO_Init+0x2d8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <HAL_GPIO_Init+0x1d8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a44      	ldr	r2, [pc, #272]	@ (8003094 <HAL_GPIO_Init+0x2dc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_GPIO_Init+0x1d4>
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e006      	b.n	8002f9a <HAL_GPIO_Init+0x1e2>
 8002f8c:	2305      	movs	r3, #5
 8002f8e:	e004      	b.n	8002f9a <HAL_GPIO_Init+0x1e2>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e002      	b.n	8002f9a <HAL_GPIO_Init+0x1e2>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_GPIO_Init+0x1e2>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	f002 0203 	and.w	r2, r2, #3
 8002fa0:	0092      	lsls	r2, r2, #2
 8002fa2:	4093      	lsls	r3, r2
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002faa:	4937      	ldr	r1, [pc, #220]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb8:	4b37      	ldr	r3, [pc, #220]	@ (8003098 <HAL_GPIO_Init+0x2e0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003098 <HAL_GPIO_Init+0x2e0>)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8003098 <HAL_GPIO_Init+0x2e0>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003006:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <HAL_GPIO_Init+0x2e0>)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300c:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_GPIO_Init+0x2e0>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43db      	mvns	r3, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003030:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <HAL_GPIO_Init+0x2e0>)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003036:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <HAL_GPIO_Init+0x2e0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800305a:	4a0f      	ldr	r2, [pc, #60]	@ (8003098 <HAL_GPIO_Init+0x2e0>)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3301      	adds	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f aea9 	bne.w	8002dc8 <HAL_GPIO_Init+0x10>
  }
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40021000 	.word	0x40021000
 8003088:	40010000 	.word	0x40010000
 800308c:	48000400 	.word	0x48000400
 8003090:	48000800 	.word	0x48000800
 8003094:	48000c00 	.word	0x48000c00
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f001 b823 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 817d 	beq.w	80033d2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030d8:	4bbc      	ldr	r3, [pc, #752]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d00c      	beq.n	80030fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e4:	4bb9      	ldr	r3, [pc, #740]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d15c      	bne.n	80031aa <HAL_RCC_OscConfig+0x10e>
 80030f0:	4bb6      	ldr	r3, [pc, #728]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fc:	d155      	bne.n	80031aa <HAL_RCC_OscConfig+0x10e>
 80030fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003102:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003112:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d102      	bne.n	8003130 <HAL_RCC_OscConfig+0x94>
 800312a:	4ba8      	ldr	r3, [pc, #672]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	e015      	b.n	800315c <HAL_RCC_OscConfig+0xc0>
 8003130:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003134:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003148:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800314c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003158:	4b9c      	ldr	r3, [pc, #624]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003160:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003164:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003168:	fa92 f2a2 	rbit	r2, r2
 800316c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003170:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003174:	fab2 f282 	clz	r2, r2
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	f042 0220 	orr.w	r2, r2, #32
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f002 021f 	and.w	r2, r2, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f202 	lsl.w	r2, r1, r2
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 811f 	beq.w	80033d0 <HAL_RCC_OscConfig+0x334>
 8003192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 8116 	bne.w	80033d0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f000 bfaf 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x12e>
 80031bc:	4b83      	ldr	r3, [pc, #524]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a82      	ldr	r2, [pc, #520]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	e036      	b.n	8003238 <HAL_RCC_OscConfig+0x19c>
 80031ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x158>
 80031da:	4b7c      	ldr	r3, [pc, #496]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7b      	ldr	r2, [pc, #492]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80031e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b79      	ldr	r3, [pc, #484]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a78      	ldr	r2, [pc, #480]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80031ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e021      	b.n	8003238 <HAL_RCC_OscConfig+0x19c>
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x184>
 8003206:	4b71      	ldr	r3, [pc, #452]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a70      	ldr	r2, [pc, #448]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b6e      	ldr	r3, [pc, #440]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6d      	ldr	r2, [pc, #436]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x19c>
 8003220:	4b6a      	ldr	r3, [pc, #424]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a69      	ldr	r2, [pc, #420]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b67      	ldr	r3, [pc, #412]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a66      	ldr	r2, [pc, #408]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003236:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003238:	4b64      	ldr	r3, [pc, #400]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	f023 020f 	bic.w	r2, r3, #15
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	495f      	ldr	r1, [pc, #380]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 800324e:	4313      	orrs	r3, r2
 8003250:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d059      	beq.n	8003316 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fb2b 	bl	80018bc <HAL_GetTick>
 8003266:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fb26 	bl	80018bc <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b64      	cmp	r3, #100	@ 0x64
 800327a:	d902      	bls.n	8003282 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	f000 bf43 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>
 8003282:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003286:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003296:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d102      	bne.n	80032b4 <HAL_RCC_OscConfig+0x218>
 80032ae:	4b47      	ldr	r3, [pc, #284]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	e015      	b.n	80032e0 <HAL_RCC_OscConfig+0x244>
 80032b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032b8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80032c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032cc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80032d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80032dc:	4b3b      	ldr	r3, [pc, #236]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032e4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80032e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80032f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80032f8:	fab2 f282 	clz	r2, r2
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	f042 0220 	orr.w	r2, r2, #32
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f002 021f 	and.w	r2, r2, #31
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f202 	lsl.w	r2, r1, r2
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ab      	beq.n	800326c <HAL_RCC_OscConfig+0x1d0>
 8003314:	e05d      	b.n	80033d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fe fad1 	bl	80018bc <HAL_GetTick>
 800331a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003320:	f7fe facc 	bl	80018bc <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b64      	cmp	r3, #100	@ 0x64
 800332e:	d902      	bls.n	8003336 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	f000 bee9 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>
 8003336:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800333a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800334a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_RCC_OscConfig+0x2cc>
 8003362:	4b1a      	ldr	r3, [pc, #104]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	e015      	b.n	8003394 <HAL_RCC_OscConfig+0x2f8>
 8003368:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800336c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003374:	fa93 f3a3 	rbit	r3, r3
 8003378:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800337c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003380:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003384:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <HAL_RCC_OscConfig+0x330>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003398:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800339c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80033a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f042 0220 	orr.w	r2, r2, #32
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f002 021f 	and.w	r2, r2, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ab      	bne.n	8003320 <HAL_RCC_OscConfig+0x284>
 80033c8:	e003      	b.n	80033d2 <HAL_RCC_OscConfig+0x336>
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 817d 	beq.w	80036e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033e8:	4ba6      	ldr	r3, [pc, #664]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033f4:	4ba3      	ldr	r3, [pc, #652]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d172      	bne.n	80034e6 <HAL_RCC_OscConfig+0x44a>
 8003400:	4ba0      	ldr	r3, [pc, #640]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d16c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x44a>
 800340c:	2302      	movs	r3, #2
 800340e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800341e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_RCC_OscConfig+0x3a0>
 8003436:	4b93      	ldr	r3, [pc, #588]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e013      	b.n	8003464 <HAL_RCC_OscConfig+0x3c8>
 800343c:	2302      	movs	r3, #2
 800343e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800344e:	2302      	movs	r3, #2
 8003450:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003454:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003460:	4b88      	ldr	r3, [pc, #544]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	2202      	movs	r2, #2
 8003466:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800346a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800346e:	fa92 f2a2 	rbit	r2, r2
 8003472:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003476:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800347a:	fab2 f282 	clz	r2, r2
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	f042 0220 	orr.w	r2, r2, #32
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	f002 021f 	and.w	r2, r2, #31
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f202 	lsl.w	r2, r1, r2
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCC_OscConfig+0x410>
 8003496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f000 be2e 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b75      	ldr	r3, [pc, #468]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	21f8      	movs	r1, #248	@ 0xf8
 80034c2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80034ca:	fa91 f1a1 	rbit	r1, r1
 80034ce:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80034d2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80034d6:	fab1 f181 	clz	r1, r1
 80034da:	b2c9      	uxtb	r1, r1
 80034dc:	408b      	lsls	r3, r1
 80034de:	4969      	ldr	r1, [pc, #420]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e4:	e0fd      	b.n	80036e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8088 	beq.w	8003608 <HAL_RCC_OscConfig+0x56c>
 80034f8:	2301      	movs	r3, #1
 80034fa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800350a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003518:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	461a      	mov	r2, r3
 8003520:	2301      	movs	r3, #1
 8003522:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe f9ca 	bl	80018bc <HAL_GetTick>
 8003528:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352e:	f7fe f9c5 	bl	80018bc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d902      	bls.n	8003544 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	f000 bde2 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>
 8003544:	2302      	movs	r3, #2
 8003546:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003556:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d102      	bne.n	8003574 <HAL_RCC_OscConfig+0x4d8>
 800356e:	4b45      	ldr	r3, [pc, #276]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	e013      	b.n	800359c <HAL_RCC_OscConfig+0x500>
 8003574:	2302      	movs	r3, #2
 8003576:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003586:	2302      	movs	r3, #2
 8003588:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800358c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003598:	4b3a      	ldr	r3, [pc, #232]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	2202      	movs	r2, #2
 800359e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80035a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80035a6:	fa92 f2a2 	rbit	r2, r2
 80035aa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80035ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80035b2:	fab2 f282 	clz	r2, r2
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	f042 0220 	orr.w	r2, r2, #32
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	f002 021f 	and.w	r2, r2, #31
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f202 	lsl.w	r2, r1, r2
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0af      	beq.n	800352e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	21f8      	movs	r1, #248	@ 0xf8
 80035e4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80035ec:	fa91 f1a1 	rbit	r1, r1
 80035f0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80035f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80035f8:	fab1 f181 	clz	r1, r1
 80035fc:	b2c9      	uxtb	r1, r1
 80035fe:	408b      	lsls	r3, r1
 8003600:	4920      	ldr	r1, [pc, #128]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
 8003606:	e06c      	b.n	80036e2 <HAL_RCC_OscConfig+0x646>
 8003608:	2301      	movs	r3, #1
 800360a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800361a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003628:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	461a      	mov	r2, r3
 8003630:	2300      	movs	r3, #0
 8003632:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe f942 	bl	80018bc <HAL_GetTick>
 8003638:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe f93d 	bl	80018bc <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	f000 bd5a 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>
 8003654:	2302      	movs	r3, #2
 8003656:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003666:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d104      	bne.n	8003688 <HAL_RCC_OscConfig+0x5ec>
 800367e:	4b01      	ldr	r3, [pc, #4]	@ (8003684 <HAL_RCC_OscConfig+0x5e8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	e015      	b.n	80036b0 <HAL_RCC_OscConfig+0x614>
 8003684:	40021000 	.word	0x40021000
 8003688:	2302      	movs	r3, #2
 800368a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800369a:	2302      	movs	r3, #2
 800369c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80036a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80036ac:	4bc8      	ldr	r3, [pc, #800]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	2202      	movs	r2, #2
 80036b2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80036b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80036ba:	fa92 f2a2 	rbit	r2, r2
 80036be:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80036c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80036c6:	fab2 f282 	clz	r2, r2
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f042 0220 	orr.w	r2, r2, #32
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f002 021f 	and.w	r2, r2, #31
 80036d6:	2101      	movs	r1, #1
 80036d8:	fa01 f202 	lsl.w	r2, r1, r2
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ad      	bne.n	800363e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8110 	beq.w	8003918 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d079      	beq.n	80037fc <HAL_RCC_OscConfig+0x760>
 8003708:	2301      	movs	r3, #1
 800370a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800371a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	4bab      	ldr	r3, [pc, #684]	@ (80039d4 <HAL_RCC_OscConfig+0x938>)
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	461a      	mov	r2, r3
 800372e:	2301      	movs	r3, #1
 8003730:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fe f8c3 	bl	80018bc <HAL_GetTick>
 8003736:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe f8be 	bl	80018bc <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d902      	bls.n	8003752 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	f000 bcdb 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>
 8003752:	2302      	movs	r3, #2
 8003754:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003768:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800376c:	2202      	movs	r2, #2
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003774:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	fa93 f2a3 	rbit	r2, r3
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003790:	2202      	movs	r2, #2
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	fa93 f2a3 	rbit	r2, r3
 80037a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80037aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ac:	4b88      	ldr	r3, [pc, #544]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 80037ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037b8:	2102      	movs	r1, #2
 80037ba:	6019      	str	r1, [r3, #0]
 80037bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fa93 f1a3 	rbit	r1, r3
 80037ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80037d2:	6019      	str	r1, [r3, #0]
  return result;
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0a0      	beq.n	800373c <HAL_RCC_OscConfig+0x6a0>
 80037fa:	e08d      	b.n	8003918 <HAL_RCC_OscConfig+0x87c>
 80037fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003800:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	fa93 f2a3 	rbit	r2, r3
 8003816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800381e:	601a      	str	r2, [r3, #0]
  return result;
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003828:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	4b68      	ldr	r3, [pc, #416]	@ (80039d4 <HAL_RCC_OscConfig+0x938>)
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	461a      	mov	r2, r3
 800383a:	2300      	movs	r3, #0
 800383c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383e:	f7fe f83d 	bl	80018bc <HAL_GetTick>
 8003842:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003846:	e00a      	b.n	800385e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003848:	f7fe f838 	bl	80018bc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d902      	bls.n	800385e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	f000 bc55 	b.w	8004108 <HAL_RCC_OscConfig+0x106c>
 800385e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003862:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003866:	2202      	movs	r2, #2
 8003868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	fa93 f2a3 	rbit	r2, r3
 8003878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003886:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800388a:	2202      	movs	r2, #2
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003892:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	fa93 f2a3 	rbit	r2, r3
 800389c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80038ae:	2202      	movs	r2, #2
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	fa93 f2a3 	rbit	r2, r3
 80038c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80038c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ca:	4b41      	ldr	r3, [pc, #260]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 80038cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80038d6:	2102      	movs	r1, #2
 80038d8:	6019      	str	r1, [r3, #0]
 80038da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f1a3 	rbit	r1, r3
 80038e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80038f0:	6019      	str	r1, [r3, #0]
  return result;
 80038f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	2101      	movs	r1, #1
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d197      	bne.n	8003848 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 81a1 	beq.w	8003c70 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003934:	4b26      	ldr	r3, [pc, #152]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d116      	bne.n	800396e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b23      	ldr	r3, [pc, #140]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	4a22      	ldr	r2, [pc, #136]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394a:	61d3      	str	r3, [r2, #28]
 800394c:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003958:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003962:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003966:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	4b1a      	ldr	r3, [pc, #104]	@ (80039d8 <HAL_RCC_OscConfig+0x93c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11a      	bne.n	80039b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397a:	4b17      	ldr	r3, [pc, #92]	@ (80039d8 <HAL_RCC_OscConfig+0x93c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a16      	ldr	r2, [pc, #88]	@ (80039d8 <HAL_RCC_OscConfig+0x93c>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003984:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003986:	f7fd ff99 	bl	80018bc <HAL_GetTick>
 800398a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398e:	e009      	b.n	80039a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003990:	f7fd ff94 	bl	80018bc <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	@ 0x64
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e3b1      	b.n	8004108 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <HAL_RCC_OscConfig+0x93c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ef      	beq.n	8003990 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10d      	bne.n	80039dc <HAL_RCC_OscConfig+0x940>
 80039c0:	4b03      	ldr	r3, [pc, #12]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4a02      	ldr	r2, [pc, #8]	@ (80039d0 <HAL_RCC_OscConfig+0x934>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6213      	str	r3, [r2, #32]
 80039cc:	e03c      	b.n	8003a48 <HAL_RCC_OscConfig+0x9ac>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	10908120 	.word	0x10908120
 80039d8:	40007000 	.word	0x40007000
 80039dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x96a>
 80039ec:	4bc1      	ldr	r3, [pc, #772]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4ac0      	ldr	r2, [pc, #768]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6213      	str	r3, [r2, #32]
 80039f8:	4bbe      	ldr	r3, [pc, #760]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4abd      	ldr	r2, [pc, #756]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	e020      	b.n	8003a48 <HAL_RCC_OscConfig+0x9ac>
 8003a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x994>
 8003a16:	4bb7      	ldr	r3, [pc, #732]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	4ab6      	ldr	r2, [pc, #728]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003a1c:	f043 0304 	orr.w	r3, r3, #4
 8003a20:	6213      	str	r3, [r2, #32]
 8003a22:	4bb4      	ldr	r3, [pc, #720]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4ab3      	ldr	r2, [pc, #716]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCC_OscConfig+0x9ac>
 8003a30:	4bb0      	ldr	r3, [pc, #704]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4aaf      	ldr	r2, [pc, #700]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	6213      	str	r3, [r2, #32]
 8003a3c:	4bad      	ldr	r3, [pc, #692]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4aac      	ldr	r2, [pc, #688]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003a42:	f023 0304 	bic.w	r3, r3, #4
 8003a46:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8081 	beq.w	8003b5c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fd ff2f 	bl	80018bc <HAL_GetTick>
 8003a5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fd ff2a 	bl	80018bc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e345      	b.n	8004108 <HAL_RCC_OscConfig+0x106c>
 8003a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a80:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003a84:	2202      	movs	r2, #2
 8003a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	fa93 f2a3 	rbit	r2, r3
 8003a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003ac2:	601a      	str	r2, [r3, #0]
  return result;
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003acc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f043 0302 	orr.w	r3, r3, #2
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d102      	bne.n	8003ae8 <HAL_RCC_OscConfig+0xa4c>
 8003ae2:	4b84      	ldr	r3, [pc, #528]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	e013      	b.n	8003b10 <HAL_RCC_OscConfig+0xa74>
 8003ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003af0:	2202      	movs	r2, #2
 8003af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	fa93 f2a3 	rbit	r2, r3
 8003b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b06:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	4b79      	ldr	r3, [pc, #484]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b14:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b18:	2102      	movs	r1, #2
 8003b1a:	6011      	str	r1, [r2, #0]
 8003b1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b20:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	fa92 f1a2 	rbit	r1, r2
 8003b2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b2e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003b32:	6011      	str	r1, [r2, #0]
  return result;
 8003b34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b38:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	fab2 f282 	clz	r2, r2
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	f002 021f 	and.w	r2, r2, #31
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d084      	beq.n	8003a64 <HAL_RCC_OscConfig+0x9c8>
 8003b5a:	e07f      	b.n	8003c5c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5c:	f7fd feae 	bl	80018bc <HAL_GetTick>
 8003b60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd fea9 	bl	80018bc <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e2c4      	b.n	8004108 <HAL_RCC_OscConfig+0x106c>
 8003b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b82:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003b86:	2202      	movs	r2, #2
 8003b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003baa:	2202      	movs	r2, #2
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	fa93 f2a3 	rbit	r2, r3
 8003bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003bc4:	601a      	str	r2, [r3, #0]
  return result;
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003bce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d102      	bne.n	8003bea <HAL_RCC_OscConfig+0xb4e>
 8003be4:	4b43      	ldr	r3, [pc, #268]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	e013      	b.n	8003c12 <HAL_RCC_OscConfig+0xb76>
 8003bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	fa93 f2a3 	rbit	r2, r3
 8003c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c08:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	4b39      	ldr	r3, [pc, #228]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c16:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	6011      	str	r1, [r2, #0]
 8003c1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c22:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	fa92 f1a2 	rbit	r1, r2
 8003c2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c30:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003c34:	6011      	str	r1, [r2, #0]
  return result;
 8003c36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c3a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	fab2 f282 	clz	r2, r2
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	f002 021f 	and.w	r2, r2, #31
 8003c50:	2101      	movs	r1, #1
 8003c52:	fa01 f202 	lsl.w	r2, r1, r2
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d184      	bne.n	8003b66 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c5c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b23      	ldr	r3, [pc, #140]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4a22      	ldr	r2, [pc, #136]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8242 	beq.w	8004106 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c82:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf4 <HAL_RCC_OscConfig+0xc58>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	f000 8213 	beq.w	80040b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f040 8162 	bne.w	8003f66 <HAL_RCC_OscConfig+0xeca>
 8003ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003caa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	fa93 f2a3 	rbit	r2, r3
 8003cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003cc6:	601a      	str	r2, [r3, #0]
  return result;
 8003cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ccc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003cd0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cdc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fde8 	bl	80018bc <HAL_GetTick>
 8003cec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf0:	e00c      	b.n	8003d0c <HAL_RCC_OscConfig+0xc70>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fd fde0 	bl	80018bc <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e1fd      	b.n	8004108 <HAL_RCC_OscConfig+0x106c>
 8003d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d10:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fa93 f2a3 	rbit	r2, r3
 8003d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003d30:	601a      	str	r2, [r3, #0]
  return result;
 8003d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d36:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003d3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3c:	fab3 f383 	clz	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d102      	bne.n	8003d56 <HAL_RCC_OscConfig+0xcba>
 8003d50:	4bb0      	ldr	r3, [pc, #704]	@ (8004014 <HAL_RCC_OscConfig+0xf78>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	e027      	b.n	8003da6 <HAL_RCC_OscConfig+0xd0a>
 8003d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003d5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d68:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	fa93 f2a3 	rbit	r2, r3
 8003d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d76:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d80:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003d84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	4b9c      	ldr	r3, [pc, #624]	@ (8004014 <HAL_RCC_OscConfig+0xf78>)
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003daa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003dae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003db2:	6011      	str	r1, [r2, #0]
 8003db4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003db8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	fa92 f1a2 	rbit	r1, r2
 8003dc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dc6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003dca:	6011      	str	r1, [r2, #0]
  return result;
 8003dcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dd0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	fab2 f282 	clz	r2, r2
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	f042 0220 	orr.w	r2, r2, #32
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	f002 021f 	and.w	r2, r2, #31
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d182      	bne.n	8003cf8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df2:	4b88      	ldr	r3, [pc, #544]	@ (8004014 <HAL_RCC_OscConfig+0xf78>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	430b      	orrs	r3, r1
 8003e14:	497f      	ldr	r1, [pc, #508]	@ (8004014 <HAL_RCC_OscConfig+0xf78>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	604b      	str	r3, [r1, #4]
 8003e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	fa93 f2a3 	rbit	r2, r3
 8003e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003e3e:	601a      	str	r2, [r3, #0]
  return result;
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003e48:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e54:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fd fd2c 	bl	80018bc <HAL_GetTick>
 8003e64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e68:	e009      	b.n	8003e7e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fd fd27 	bl	80018bc <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e144      	b.n	8004108 <HAL_RCC_OscConfig+0x106c>
 8003e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e82:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003e86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e90:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003ea2:	601a      	str	r2, [r3, #0]
  return result;
 8003ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003eac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xe2c>
 8003ec2:	4b54      	ldr	r3, [pc, #336]	@ (8004014 <HAL_RCC_OscConfig+0xf78>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	e027      	b.n	8003f18 <HAL_RCC_OscConfig+0xe7c>
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003ed0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eda:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	fa93 f2a3 	rbit	r2, r3
 8003ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003ef6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f00:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	fa93 f2a3 	rbit	r2, r3
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	4b3f      	ldr	r3, [pc, #252]	@ (8004014 <HAL_RCC_OscConfig+0xf78>)
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f1c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f24:	6011      	str	r1, [r2, #0]
 8003f26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f2a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	fa92 f1a2 	rbit	r1, r2
 8003f34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f38:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003f3c:	6011      	str	r1, [r2, #0]
  return result;
 8003f3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f42:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	fab2 f282 	clz	r2, r2
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f042 0220 	orr.w	r2, r2, #32
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	f002 021f 	and.w	r2, r2, #31
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d082      	beq.n	8003e6a <HAL_RCC_OscConfig+0xdce>
 8003f64:	e0cf      	b.n	8004106 <HAL_RCC_OscConfig+0x106a>
 8003f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003f6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f78:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	fa93 f2a3 	rbit	r2, r3
 8003f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f86:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003f8a:	601a      	str	r2, [r3, #0]
  return result;
 8003f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f90:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003f94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fa0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd fc86 	bl	80018bc <HAL_GetTick>
 8003fb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb4:	e009      	b.n	8003fca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fd fc81 	bl	80018bc <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e09e      	b.n	8004108 <HAL_RCC_OscConfig+0x106c>
 8003fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fce:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003fd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fdc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	fa93 f2a3 	rbit	r2, r3
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003fee:	601a      	str	r2, [r3, #0]
  return result;
 8003ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ff8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d104      	bne.n	8004018 <HAL_RCC_OscConfig+0xf7c>
 800400e:	4b01      	ldr	r3, [pc, #4]	@ (8004014 <HAL_RCC_OscConfig+0xf78>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	e029      	b.n	8004068 <HAL_RCC_OscConfig+0xfcc>
 8004014:	40021000 	.word	0x40021000
 8004018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004020:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	fa93 f2a3 	rbit	r2, r3
 8004034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004038:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004046:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	fa93 f2a3 	rbit	r2, r3
 800405a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	4b2b      	ldr	r3, [pc, #172]	@ (8004114 <HAL_RCC_OscConfig+0x1078>)
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800406c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004070:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800407a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	fa92 f1a2 	rbit	r1, r2
 8004084:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004088:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800408c:	6011      	str	r1, [r2, #0]
  return result;
 800408e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004092:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	fab2 f282 	clz	r2, r2
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	f042 0220 	orr.w	r2, r2, #32
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	f002 021f 	and.w	r2, r2, #31
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f202 	lsl.w	r2, r1, r2
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d180      	bne.n	8003fb6 <HAL_RCC_OscConfig+0xf1a>
 80040b4:	e027      	b.n	8004106 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e01e      	b.n	8004108 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040ca:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <HAL_RCC_OscConfig+0x1078>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80040d6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d10b      	bne.n	8004102 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80040ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80040ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040fe:	429a      	cmp	r2, r3
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b09e      	sub	sp, #120	@ 0x78
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e162      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b90      	ldr	r3, [pc, #576]	@ (8004374 <HAL_RCC_ClockConfig+0x25c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d910      	bls.n	8004160 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b8d      	ldr	r3, [pc, #564]	@ (8004374 <HAL_RCC_ClockConfig+0x25c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	498b      	ldr	r1, [pc, #556]	@ (8004374 <HAL_RCC_ClockConfig+0x25c>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b89      	ldr	r3, [pc, #548]	@ (8004374 <HAL_RCC_ClockConfig+0x25c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e14a      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b82      	ldr	r3, [pc, #520]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	497f      	ldr	r1, [pc, #508]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80dc 	beq.w	8004344 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d13c      	bne.n	800420e <HAL_RCC_ClockConfig+0xf6>
 8004194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004198:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80041a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d102      	bne.n	80041be <HAL_RCC_ClockConfig+0xa6>
 80041b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	e00f      	b.n	80041de <HAL_RCC_ClockConfig+0xc6>
 80041be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c6:	fa93 f3a3 	rbit	r3, r3
 80041ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80041cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80041d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041da:	4b67      	ldr	r3, [pc, #412]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041e6:	fa92 f2a2 	rbit	r2, r2
 80041ea:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80041ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041ee:	fab2 f282 	clz	r2, r2
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	f042 0220 	orr.w	r2, r2, #32
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	f002 021f 	and.w	r2, r2, #31
 80041fe:	2101      	movs	r1, #1
 8004200:	fa01 f202 	lsl.w	r2, r1, r2
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d17b      	bne.n	8004302 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0f3      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d13c      	bne.n	8004290 <HAL_RCC_ClockConfig+0x178>
 8004216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800421a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d102      	bne.n	8004240 <HAL_RCC_ClockConfig+0x128>
 800423a:	4b4f      	ldr	r3, [pc, #316]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	e00f      	b.n	8004260 <HAL_RCC_ClockConfig+0x148>
 8004240:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004244:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	647b      	str	r3, [r7, #68]	@ 0x44
 800424e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004252:	643b      	str	r3, [r7, #64]	@ 0x40
 8004254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800425c:	4b46      	ldr	r3, [pc, #280]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004264:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004266:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004268:	fa92 f2a2 	rbit	r2, r2
 800426c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800426e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004270:	fab2 f282 	clz	r2, r2
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	f042 0220 	orr.w	r2, r2, #32
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	f002 021f 	and.w	r2, r2, #31
 8004280:	2101      	movs	r1, #1
 8004282:	fa01 f202 	lsl.w	r2, r1, r2
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d13a      	bne.n	8004302 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0b2      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2de>
 8004290:	2302      	movs	r3, #2
 8004292:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800429c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
 80042b2:	4b31      	ldr	r3, [pc, #196]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	e00d      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1bc>
 80042b8:	2302      	movs	r3, #2
 80042ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c4:	2302      	movs	r3, #2
 80042c6:	623b      	str	r3, [r7, #32]
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	4b29      	ldr	r3, [pc, #164]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	2202      	movs	r2, #2
 80042d6:	61ba      	str	r2, [r7, #24]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	fa92 f2a2 	rbit	r2, r2
 80042de:	617a      	str	r2, [r7, #20]
  return result;
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	fab2 f282 	clz	r2, r2
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f042 0220 	orr.w	r2, r2, #32
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	f002 021f 	and.w	r2, r2, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e079      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004302:	4b1d      	ldr	r3, [pc, #116]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f023 0203 	bic.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	491a      	ldr	r1, [pc, #104]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004314:	f7fd fad2 	bl	80018bc <HAL_GetTick>
 8004318:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	e00a      	b.n	8004332 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431c:	f7fd face 	bl	80018bc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e061      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <HAL_RCC_ClockConfig+0x260>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 020c 	and.w	r2, r3, #12
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	429a      	cmp	r2, r3
 8004342:	d1eb      	bne.n	800431c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <HAL_RCC_ClockConfig+0x25c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d214      	bcs.n	800437c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <HAL_RCC_ClockConfig+0x25c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 0207 	bic.w	r2, r3, #7
 800435a:	4906      	ldr	r1, [pc, #24]	@ (8004374 <HAL_RCC_ClockConfig+0x25c>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <HAL_RCC_ClockConfig+0x25c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e040      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2de>
 8004374:	40022000 	.word	0x40022000
 8004378:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004388:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <HAL_RCC_ClockConfig+0x2e8>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	491a      	ldr	r1, [pc, #104]	@ (8004400 <HAL_RCC_ClockConfig+0x2e8>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a6:	4b16      	ldr	r3, [pc, #88]	@ (8004400 <HAL_RCC_ClockConfig+0x2e8>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4912      	ldr	r1, [pc, #72]	@ (8004400 <HAL_RCC_ClockConfig+0x2e8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043ba:	f000 f829 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80043be:	4601      	mov	r1, r0
 80043c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004400 <HAL_RCC_ClockConfig+0x2e8>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043c8:	22f0      	movs	r2, #240	@ 0xf0
 80043ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	fa92 f2a2 	rbit	r2, r2
 80043d2:	60fa      	str	r2, [r7, #12]
  return result;
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	fab2 f282 	clz	r2, r2
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	40d3      	lsrs	r3, r2
 80043de:	4a09      	ldr	r2, [pc, #36]	@ (8004404 <HAL_RCC_ClockConfig+0x2ec>)
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	fa21 f303 	lsr.w	r3, r1, r3
 80043e6:	4a08      	ldr	r2, [pc, #32]	@ (8004408 <HAL_RCC_ClockConfig+0x2f0>)
 80043e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043ea:	4b08      	ldr	r3, [pc, #32]	@ (800440c <HAL_RCC_ClockConfig+0x2f4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd fa20 	bl	8001834 <HAL_InitTick>
  
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3778      	adds	r7, #120	@ 0x78
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000
 8004404:	08008bb8 	.word	0x08008bb8
 8004408:	20000010 	.word	0x20000010
 800440c:	20000014 	.word	0x20000014

08004410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	b08b      	sub	sp, #44	@ 0x2c
 8004414:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800442a:	4b29      	ldr	r3, [pc, #164]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b04      	cmp	r3, #4
 8004438:	d002      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x30>
 800443a:	2b08      	cmp	r3, #8
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0x36>
 800443e:	e03c      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004440:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004442:	623b      	str	r3, [r7, #32]
      break;
 8004444:	e03c      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800444c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004450:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	fa92 f2a2 	rbit	r2, r2
 8004458:	607a      	str	r2, [r7, #4]
  return result;
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	fab2 f282 	clz	r2, r2
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	40d3      	lsrs	r3, r2
 8004464:	4a1c      	ldr	r2, [pc, #112]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800446a:	4b19      	ldr	r3, [pc, #100]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	220f      	movs	r2, #15
 8004474:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	fa92 f2a2 	rbit	r2, r2
 800447c:	60fa      	str	r2, [r7, #12]
  return result;
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	fab2 f282 	clz	r2, r2
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	40d3      	lsrs	r3, r2
 8004488:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004498:	4a0e      	ldr	r2, [pc, #56]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a8:	e004      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	4a0c      	ldr	r2, [pc, #48]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	623b      	str	r3, [r7, #32]
      break;
 80044b8:	e002      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044ba:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044bc:	623b      	str	r3, [r7, #32]
      break;
 80044be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044c0:	6a3b      	ldr	r3, [r7, #32]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	372c      	adds	r7, #44	@ 0x2c
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	007a1200 	.word	0x007a1200
 80044d8:	08008bd0 	.word	0x08008bd0
 80044dc:	08008be0 	.word	0x08008be0
 80044e0:	003d0900 	.word	0x003d0900

080044e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e8:	4b03      	ldr	r3, [pc, #12]	@ (80044f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000010 	.word	0x20000010

080044fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004502:	f7ff ffef 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004506:	4601      	mov	r1, r0
 8004508:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004510:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004514:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	fa92 f2a2 	rbit	r2, r2
 800451c:	603a      	str	r2, [r7, #0]
  return result;
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	fab2 f282 	clz	r2, r2
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	40d3      	lsrs	r3, r2
 8004528:	4a04      	ldr	r2, [pc, #16]	@ (800453c <HAL_RCC_GetPCLK1Freq+0x40>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	08008bc8 	.word	0x08008bc8

08004540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004546:	f7ff ffcd 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 800454a:	4601      	mov	r1, r0
 800454c:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004554:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004558:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	fa92 f2a2 	rbit	r2, r2
 8004560:	603a      	str	r2, [r7, #0]
  return result;
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	fab2 f282 	clz	r2, r2
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	40d3      	lsrs	r3, r2
 800456c:	4a04      	ldr	r2, [pc, #16]	@ (8004580 <HAL_RCC_GetPCLK2Freq+0x40>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	08008bc8 	.word	0x08008bc8

08004584 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b092      	sub	sp, #72	@ 0x48
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004594:	2300      	movs	r3, #0
 8004596:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80cd 	beq.w	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a8:	4b86      	ldr	r3, [pc, #536]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10e      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b4:	4b83      	ldr	r3, [pc, #524]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	4a82      	ldr	r2, [pc, #520]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045be:	61d3      	str	r3, [r2, #28]
 80045c0:	4b80      	ldr	r3, [pc, #512]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d2:	4b7d      	ldr	r3, [pc, #500]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d118      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045de:	4b7a      	ldr	r3, [pc, #488]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a79      	ldr	r2, [pc, #484]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fd f967 	bl	80018bc <HAL_GetTick>
 80045ee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e008      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fd f963 	bl	80018bc <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b64      	cmp	r3, #100	@ 0x64
 80045fe:	d901      	bls.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0db      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	4b70      	ldr	r3, [pc, #448]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004610:	4b6c      	ldr	r3, [pc, #432]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004618:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800461a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d07d      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004628:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800462a:	429a      	cmp	r2, r3
 800462c:	d076      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800462e:	4b65      	ldr	r3, [pc, #404]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800463c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004648:	fab3 f383 	clz	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	4b5e      	ldr	r3, [pc, #376]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	461a      	mov	r2, r3
 8004658:	2301      	movs	r3, #1
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004660:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466c:	fab3 f383 	clz	r3, r3
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	4b55      	ldr	r3, [pc, #340]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	461a      	mov	r2, r3
 800467c:	2300      	movs	r3, #0
 800467e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004680:	4a50      	ldr	r2, [pc, #320]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004684:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d045      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fd f914 	bl	80018bc <HAL_GetTick>
 8004694:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	e00a      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fd f910 	bl	80018bc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e086      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80046ae:	2302      	movs	r3, #2
 80046b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ba:	2302      	movs	r3, #2
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	61fb      	str	r3, [r7, #28]
  return result;
 80046c6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	fab3 f383 	clz	r3, r3
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d102      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80046dc:	4b39      	ldr	r3, [pc, #228]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	e007      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80046e2:	2302      	movs	r3, #2
 80046e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	4b35      	ldr	r3, [pc, #212]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	2202      	movs	r2, #2
 80046f4:	613a      	str	r2, [r7, #16]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	fa92 f2a2 	rbit	r2, r2
 80046fc:	60fa      	str	r2, [r7, #12]
  return result;
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	fab2 f282 	clz	r2, r2
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	f002 021f 	and.w	r2, r2, #31
 8004710:	2101      	movs	r1, #1
 8004712:	fa01 f202 	lsl.w	r2, r1, r2
 8004716:	4013      	ands	r3, r2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0bd      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800471c:	4b29      	ldr	r3, [pc, #164]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4926      	ldr	r1, [pc, #152]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800472a:	4313      	orrs	r3, r2
 800472c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800472e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004732:	2b01      	cmp	r3, #1
 8004734:	d105      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b23      	ldr	r3, [pc, #140]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	4a22      	ldr	r2, [pc, #136]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004740:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800474e:	4b1d      	ldr	r3, [pc, #116]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	491a      	ldr	r1, [pc, #104]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800475c:	4313      	orrs	r3, r2
 800475e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476c:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	f023 0210 	bic.w	r2, r3, #16
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4912      	ldr	r1, [pc, #72]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800477a:	4313      	orrs	r3, r2
 800477c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800478a:	4b0e      	ldr	r3, [pc, #56]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	490b      	ldr	r1, [pc, #44]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004798:	4313      	orrs	r3, r2
 800479a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047a8:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	4903      	ldr	r1, [pc, #12]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3748      	adds	r7, #72	@ 0x48
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	10908100 	.word	0x10908100

080047d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e049      	b.n	8004876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fe26 	bl	8001448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 fb60 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e049      	b.n	8004924 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f841 	bl	800492c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f000 fb09 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d109      	bne.n	8004964 <HAL_TIM_PWM_Start+0x24>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e03c      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b04      	cmp	r3, #4
 8004968:	d109      	bne.n	800497e <HAL_TIM_PWM_Start+0x3e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e02f      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d109      	bne.n	8004998 <HAL_TIM_PWM_Start+0x58>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e022      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d109      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x72>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	bf14      	ite	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	2300      	moveq	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	e015      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d109      	bne.n	80049cc <HAL_TIM_PWM_Start+0x8c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e008      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e088      	b.n	8004af8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start+0xb6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049f4:	e023      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Start+0xc6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a04:	e01b      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Start+0xd6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a14:	e013      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b0c      	cmp	r3, #12
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xe6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a24:	e00b      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xf6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a34:	e003      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	6839      	ldr	r1, [r7, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fdfc 	bl	8005644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2b      	ldr	r2, [pc, #172]	@ (8004b00 <HAL_TIM_PWM_Start+0x1c0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_TIM_PWM_Start+0x134>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b04 <HAL_TIM_PWM_Start+0x1c4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_TIM_PWM_Start+0x134>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a28      	ldr	r2, [pc, #160]	@ (8004b08 <HAL_TIM_PWM_Start+0x1c8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_PWM_Start+0x134>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a27      	ldr	r2, [pc, #156]	@ (8004b0c <HAL_TIM_PWM_Start+0x1cc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_PWM_Start+0x138>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_TIM_PWM_Start+0x13a>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1b      	ldr	r2, [pc, #108]	@ (8004b00 <HAL_TIM_PWM_Start+0x1c0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x176>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x176>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b10 <HAL_TIM_PWM_Start+0x1d0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x176>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a14      	ldr	r2, [pc, #80]	@ (8004b04 <HAL_TIM_PWM_Start+0x1c4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <HAL_TIM_PWM_Start+0x1d4>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d015      	beq.n	8004af4 <HAL_TIM_PWM_Start+0x1b4>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ace:	d011      	beq.n	8004af4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	e008      	b.n	8004af4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e000      	b.n	8004af6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	40000400 	.word	0x40000400
 8004b14:	00010007 	.word	0x00010007

08004b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0ff      	b.n	8004d36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b14      	cmp	r3, #20
 8004b42:	f200 80f0 	bhi.w	8004d26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b46:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004d27 	.word	0x08004d27
 8004b54:	08004d27 	.word	0x08004d27
 8004b58:	08004d27 	.word	0x08004d27
 8004b5c:	08004be1 	.word	0x08004be1
 8004b60:	08004d27 	.word	0x08004d27
 8004b64:	08004d27 	.word	0x08004d27
 8004b68:	08004d27 	.word	0x08004d27
 8004b6c:	08004c23 	.word	0x08004c23
 8004b70:	08004d27 	.word	0x08004d27
 8004b74:	08004d27 	.word	0x08004d27
 8004b78:	08004d27 	.word	0x08004d27
 8004b7c:	08004c63 	.word	0x08004c63
 8004b80:	08004d27 	.word	0x08004d27
 8004b84:	08004d27 	.word	0x08004d27
 8004b88:	08004d27 	.word	0x08004d27
 8004b8c:	08004ca5 	.word	0x08004ca5
 8004b90:	08004d27 	.word	0x08004d27
 8004b94:	08004d27 	.word	0x08004d27
 8004b98:	08004d27 	.word	0x08004d27
 8004b9c:	08004ce5 	.word	0x08004ce5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa0c 	bl	8004fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0208 	orr.w	r2, r2, #8
 8004bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0204 	bic.w	r2, r2, #4
 8004bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6999      	ldr	r1, [r3, #24]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	619a      	str	r2, [r3, #24]
      break;
 8004bde:	e0a5      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fa72 	bl	80050d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6999      	ldr	r1, [r3, #24]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	619a      	str	r2, [r3, #24]
      break;
 8004c20:	e084      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fad1 	bl	80051d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0208 	orr.w	r2, r2, #8
 8004c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0204 	bic.w	r2, r2, #4
 8004c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69d9      	ldr	r1, [r3, #28]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	61da      	str	r2, [r3, #28]
      break;
 8004c60:	e064      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fb2f 	bl	80052cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69d9      	ldr	r1, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	021a      	lsls	r2, r3, #8
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	61da      	str	r2, [r3, #28]
      break;
 8004ca2:	e043      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fb72 	bl	8005394 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0204 	bic.w	r2, r2, #4
 8004cce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ce2:	e023      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fbb0 	bl	8005450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d24:	e002      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop

08004d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0b6      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x18a>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d98:	d03e      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0xd8>
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9e:	f200 8087 	bhi.w	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_TIM_ConfigClockSource+0x176>
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dae:	d87f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004db0:	2b70      	cmp	r3, #112	@ 0x70
 8004db2:	d01a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0xaa>
 8004db4:	2b70      	cmp	r3, #112	@ 0x70
 8004db6:	d87b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004db8:	2b60      	cmp	r3, #96	@ 0x60
 8004dba:	d050      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x11e>
 8004dbc:	2b60      	cmp	r3, #96	@ 0x60
 8004dbe:	d877      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004dc0:	2b50      	cmp	r3, #80	@ 0x50
 8004dc2:	d03c      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xfe>
 8004dc4:	2b50      	cmp	r3, #80	@ 0x50
 8004dc6:	d873      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d058      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x13e>
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	d86f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004dd0:	2b30      	cmp	r3, #48	@ 0x30
 8004dd2:	d064      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15e>
 8004dd4:	2b30      	cmp	r3, #48	@ 0x30
 8004dd6:	d86b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d060      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15e>
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d867      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d05c      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15e>
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d05a      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15e>
 8004de8:	e062      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dfa:	f000 fc03 	bl	8005604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	609a      	str	r2, [r3, #8]
      break;
 8004e16:	e04f      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e28:	f000 fbec 	bl	8005604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e3a:	609a      	str	r2, [r3, #8]
      break;
 8004e3c:	e03c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 fb60 	bl	8005510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2150      	movs	r1, #80	@ 0x50
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fbb9 	bl	80055ce <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e02c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 fb7f 	bl	800556e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2160      	movs	r1, #96	@ 0x60
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fba9 	bl	80055ce <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e01c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 fb40 	bl	8005510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2140      	movs	r1, #64	@ 0x40
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fb99 	bl	80055ce <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e00c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f000 fb90 	bl	80055ce <TIM_ITRx_SetConfig>
      break;
 8004eae:	e003      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a32      	ldr	r2, [pc, #200]	@ (8004fb0 <TIM_Base_SetConfig+0xdc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <TIM_Base_SetConfig+0x28>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef2:	d003      	beq.n	8004efc <TIM_Base_SetConfig+0x28>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8004fb4 <TIM_Base_SetConfig+0xe0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a27      	ldr	r2, [pc, #156]	@ (8004fb0 <TIM_Base_SetConfig+0xdc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <TIM_Base_SetConfig+0x6a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1c:	d00f      	beq.n	8004f3e <TIM_Base_SetConfig+0x6a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a24      	ldr	r2, [pc, #144]	@ (8004fb4 <TIM_Base_SetConfig+0xe0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0x6a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a23      	ldr	r2, [pc, #140]	@ (8004fb8 <TIM_Base_SetConfig+0xe4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0x6a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a22      	ldr	r2, [pc, #136]	@ (8004fbc <TIM_Base_SetConfig+0xe8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x6a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a21      	ldr	r2, [pc, #132]	@ (8004fc0 <TIM_Base_SetConfig+0xec>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb0 <TIM_Base_SetConfig+0xdc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0xc0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb8 <TIM_Base_SetConfig+0xe4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0xc0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a0d      	ldr	r2, [pc, #52]	@ (8004fbc <TIM_Base_SetConfig+0xe8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0xc0>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc0 <TIM_Base_SetConfig+0xec>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d103      	bne.n	8004f9c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	615a      	str	r2, [r3, #20]
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800

08004fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 0302 	bic.w	r3, r3, #2
 8005010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a28      	ldr	r2, [pc, #160]	@ (80050c0 <TIM_OC1_SetConfig+0xfc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_OC1_SetConfig+0x78>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a27      	ldr	r2, [pc, #156]	@ (80050c4 <TIM_OC1_SetConfig+0x100>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_OC1_SetConfig+0x78>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a26      	ldr	r2, [pc, #152]	@ (80050c8 <TIM_OC1_SetConfig+0x104>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_OC1_SetConfig+0x78>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a25      	ldr	r2, [pc, #148]	@ (80050cc <TIM_OC1_SetConfig+0x108>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d10c      	bne.n	8005056 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0308 	bic.w	r3, r3, #8
 8005042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 0304 	bic.w	r3, r3, #4
 8005054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a19      	ldr	r2, [pc, #100]	@ (80050c0 <TIM_OC1_SetConfig+0xfc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00b      	beq.n	8005076 <TIM_OC1_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a18      	ldr	r2, [pc, #96]	@ (80050c4 <TIM_OC1_SetConfig+0x100>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d007      	beq.n	8005076 <TIM_OC1_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a17      	ldr	r2, [pc, #92]	@ (80050c8 <TIM_OC1_SetConfig+0x104>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <TIM_OC1_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a16      	ldr	r2, [pc, #88]	@ (80050cc <TIM_OC1_SetConfig+0x108>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d111      	bne.n	800509a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800507c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800

080050d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0210 	bic.w	r2, r3, #16
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800510a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f023 0320 	bic.w	r3, r3, #32
 800511e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a24      	ldr	r2, [pc, #144]	@ (80051c0 <TIM_OC2_SetConfig+0xf0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d10d      	bne.n	8005150 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800514e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1b      	ldr	r2, [pc, #108]	@ (80051c0 <TIM_OC2_SetConfig+0xf0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00b      	beq.n	8005170 <TIM_OC2_SetConfig+0xa0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1a      	ldr	r2, [pc, #104]	@ (80051c4 <TIM_OC2_SetConfig+0xf4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d007      	beq.n	8005170 <TIM_OC2_SetConfig+0xa0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a19      	ldr	r2, [pc, #100]	@ (80051c8 <TIM_OC2_SetConfig+0xf8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_OC2_SetConfig+0xa0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a18      	ldr	r2, [pc, #96]	@ (80051cc <TIM_OC2_SetConfig+0xfc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d113      	bne.n	8005198 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005176:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800517e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800521c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a23      	ldr	r2, [pc, #140]	@ (80052bc <TIM_OC3_SetConfig+0xec>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d10d      	bne.n	800524e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800524c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1a      	ldr	r2, [pc, #104]	@ (80052bc <TIM_OC3_SetConfig+0xec>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_OC3_SetConfig+0x9e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a19      	ldr	r2, [pc, #100]	@ (80052c0 <TIM_OC3_SetConfig+0xf0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_OC3_SetConfig+0x9e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a18      	ldr	r2, [pc, #96]	@ (80052c4 <TIM_OC3_SetConfig+0xf4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_OC3_SetConfig+0x9e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a17      	ldr	r2, [pc, #92]	@ (80052c8 <TIM_OC3_SetConfig+0xf8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d113      	bne.n	8005296 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800527c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800

080052cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800531a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <TIM_OC4_SetConfig+0xb8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_OC4_SetConfig+0x7c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a15      	ldr	r2, [pc, #84]	@ (8005388 <TIM_OC4_SetConfig+0xbc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_OC4_SetConfig+0x7c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a14      	ldr	r2, [pc, #80]	@ (800538c <TIM_OC4_SetConfig+0xc0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_OC4_SetConfig+0x7c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a13      	ldr	r2, [pc, #76]	@ (8005390 <TIM_OC4_SetConfig+0xc4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d109      	bne.n	800535c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800534e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	019b      	lsls	r3, r3, #6
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40012c00 	.word	0x40012c00
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800

08005394 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a15      	ldr	r2, [pc, #84]	@ (8005440 <TIM_OC5_SetConfig+0xac>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00b      	beq.n	8005406 <TIM_OC5_SetConfig+0x72>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a14      	ldr	r2, [pc, #80]	@ (8005444 <TIM_OC5_SetConfig+0xb0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_OC5_SetConfig+0x72>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a13      	ldr	r2, [pc, #76]	@ (8005448 <TIM_OC5_SetConfig+0xb4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_OC5_SetConfig+0x72>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a12      	ldr	r2, [pc, #72]	@ (800544c <TIM_OC5_SetConfig+0xb8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d109      	bne.n	800541a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800540c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	621a      	str	r2, [r3, #32]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	051b      	lsls	r3, r3, #20
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a16      	ldr	r2, [pc, #88]	@ (8005500 <TIM_OC6_SetConfig+0xb0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00b      	beq.n	80054c4 <TIM_OC6_SetConfig+0x74>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a15      	ldr	r2, [pc, #84]	@ (8005504 <TIM_OC6_SetConfig+0xb4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_OC6_SetConfig+0x74>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a14      	ldr	r2, [pc, #80]	@ (8005508 <TIM_OC6_SetConfig+0xb8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_OC6_SetConfig+0x74>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a13      	ldr	r2, [pc, #76]	@ (800550c <TIM_OC6_SetConfig+0xbc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d109      	bne.n	80054d8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800553a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 030a 	bic.w	r3, r3, #10
 800554c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556e:	b480      	push	{r7}
 8005570:	b087      	sub	sp, #28
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0210 	bic.w	r2, r3, #16
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	031b      	lsls	r3, r3, #12
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f043 0307 	orr.w	r3, r3, #7
 80055f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	609a      	str	r2, [r3, #8]
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800561e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	021a      	lsls	r2, r3, #8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	431a      	orrs	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4313      	orrs	r3, r2
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	609a      	str	r2, [r3, #8]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	2201      	movs	r2, #1
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1a      	ldr	r2, [r3, #32]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	43db      	mvns	r3, r3
 8005666:	401a      	ands	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1a      	ldr	r2, [r3, #32]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	fa01 f303 	lsl.w	r3, r1, r3
 800567c:	431a      	orrs	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_TIMEx_PWMN_Start+0x24>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e022      	b.n	80056fa <HAL_TIMEx_PWMN_Start+0x6a>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d109      	bne.n	80056ce <HAL_TIMEx_PWMN_Start+0x3e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e015      	b.n	80056fa <HAL_TIMEx_PWMN_Start+0x6a>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d109      	bne.n	80056e8 <HAL_TIMEx_PWMN_Start+0x58>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e008      	b.n	80056fa <HAL_TIMEx_PWMN_Start+0x6a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e05f      	b.n	80057c2 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <HAL_TIMEx_PWMN_Start+0x82>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005710:	e013      	b.n	800573a <HAL_TIMEx_PWMN_Start+0xaa>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d104      	bne.n	8005722 <HAL_TIMEx_PWMN_Start+0x92>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005720:	e00b      	b.n	800573a <HAL_TIMEx_PWMN_Start+0xaa>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d104      	bne.n	8005732 <HAL_TIMEx_PWMN_Start+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005730:	e003      	b.n	800573a <HAL_TIMEx_PWMN_Start+0xaa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2204      	movs	r2, #4
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 f930 	bl	80059a8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005756:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1b      	ldr	r2, [pc, #108]	@ (80057cc <HAL_TIMEx_PWMN_Start+0x13c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_TIMEx_PWMN_Start+0xf0>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576a:	d009      	beq.n	8005780 <HAL_TIMEx_PWMN_Start+0xf0>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a17      	ldr	r2, [pc, #92]	@ (80057d0 <HAL_TIMEx_PWMN_Start+0x140>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIMEx_PWMN_Start+0xf0>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a16      	ldr	r2, [pc, #88]	@ (80057d4 <HAL_TIMEx_PWMN_Start+0x144>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d115      	bne.n	80057ac <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	4b14      	ldr	r3, [pc, #80]	@ (80057d8 <HAL_TIMEx_PWMN_Start+0x148>)
 8005788:	4013      	ands	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b06      	cmp	r3, #6
 8005790:	d015      	beq.n	80057be <HAL_TIMEx_PWMN_Start+0x12e>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005798:	d011      	beq.n	80057be <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057aa:	e008      	b.n	80057be <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	e000      	b.n	80057c0 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	00010007 	.word	0x00010007

080057dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e054      	b.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a24      	ldr	r2, [pc, #144]	@ (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d108      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005824:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a17      	ldr	r2, [pc, #92]	@ (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585c:	d009      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a13      	ldr	r2, [pc, #76]	@ (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a11      	ldr	r2, [pc, #68]	@ (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d10c      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4313      	orrs	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40012c00 	.word	0x40012c00
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40014000 	.word	0x40014000

080058b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e060      	b.n	8005996 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	041b      	lsls	r3, r3, #16
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a14      	ldr	r2, [pc, #80]	@ (80059a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d115      	bne.n	8005984 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	051b      	lsls	r3, r3, #20
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00

080059a8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2204      	movs	r2, #4
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1a      	ldr	r2, [r3, #32]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	401a      	ands	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e040      	b.n	8005a86 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fb fd6f 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2224      	movs	r2, #36	@ 0x24
 8005a1e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f8b5 	bl	8005ba0 <UART_SetConfig>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e022      	b.n	8005a86 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f9df 	bl	8005e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa66 	bl	8005f50 <UART_CheckIdleState>
 8005a84:	4603      	mov	r3, r0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b08a      	sub	sp, #40	@ 0x28
 8005a92:	af02      	add	r7, sp, #8
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d177      	bne.n	8005b96 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_UART_Transmit+0x24>
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e070      	b.n	8005b98 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2221      	movs	r2, #33	@ 0x21
 8005ac2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ac4:	f7fb fefa 	bl	80018bc <HAL_GetTick>
 8005ac8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae2:	d108      	bne.n	8005af6 <HAL_UART_Transmit+0x68>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e003      	b.n	8005afe <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005afe:	e02f      	b.n	8005b60 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2200      	movs	r2, #0
 8005b08:	2180      	movs	r1, #128	@ 0x80
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fac8 	bl	80060a0 <UART_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e03b      	b.n	8005b98 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	881a      	ldrh	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b32:	b292      	uxth	r2, r2
 8005b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	3302      	adds	r3, #2
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	e007      	b.n	8005b4e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1c9      	bne.n	8005b00 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	2140      	movs	r1, #64	@ 0x40
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fa92 	bl	80060a0 <UART_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e005      	b.n	8005b98 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
  }
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b8a      	ldr	r3, [pc, #552]	@ (8005df4 <UART_SetConfig+0x254>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	6979      	ldr	r1, [r7, #20]
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a78      	ldr	r2, [pc, #480]	@ (8005df8 <UART_SetConfig+0x258>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d120      	bne.n	8005c5e <UART_SetConfig+0xbe>
 8005c1c:	4b77      	ldr	r3, [pc, #476]	@ (8005dfc <UART_SetConfig+0x25c>)
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d817      	bhi.n	8005c58 <UART_SetConfig+0xb8>
 8005c28:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <UART_SetConfig+0x90>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c4d 	.word	0x08005c4d
 8005c38:	08005c53 	.word	0x08005c53
 8005c3c:	08005c47 	.word	0x08005c47
 8005c40:	2300      	movs	r3, #0
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e01d      	b.n	8005c82 <UART_SetConfig+0xe2>
 8005c46:	2302      	movs	r3, #2
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e01a      	b.n	8005c82 <UART_SetConfig+0xe2>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e017      	b.n	8005c82 <UART_SetConfig+0xe2>
 8005c52:	2308      	movs	r3, #8
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e014      	b.n	8005c82 <UART_SetConfig+0xe2>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e011      	b.n	8005c82 <UART_SetConfig+0xe2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a67      	ldr	r2, [pc, #412]	@ (8005e00 <UART_SetConfig+0x260>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d102      	bne.n	8005c6e <UART_SetConfig+0xce>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e009      	b.n	8005c82 <UART_SetConfig+0xe2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a64      	ldr	r2, [pc, #400]	@ (8005e04 <UART_SetConfig+0x264>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d102      	bne.n	8005c7e <UART_SetConfig+0xde>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	77fb      	strb	r3, [r7, #31]
 8005c7c:	e001      	b.n	8005c82 <UART_SetConfig+0xe2>
 8005c7e:	2310      	movs	r3, #16
 8005c80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c8a:	d15a      	bne.n	8005d42 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d827      	bhi.n	8005ce2 <UART_SetConfig+0x142>
 8005c92:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <UART_SetConfig+0xf8>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	08005ce3 	.word	0x08005ce3
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005ce3 	.word	0x08005ce3
 8005cb0:	08005ce3 	.word	0x08005ce3
 8005cb4:	08005ce3 	.word	0x08005ce3
 8005cb8:	08005cdb 	.word	0x08005cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cbc:	f7fe fc1e 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8005cc0:	61b8      	str	r0, [r7, #24]
        break;
 8005cc2:	e013      	b.n	8005cec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc4:	f7fe fc3c 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8005cc8:	61b8      	str	r0, [r7, #24]
        break;
 8005cca:	e00f      	b.n	8005cec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e08 <UART_SetConfig+0x268>)
 8005cce:	61bb      	str	r3, [r7, #24]
        break;
 8005cd0:	e00c      	b.n	8005cec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd2:	f7fe fb9d 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 8005cd6:	61b8      	str	r0, [r7, #24]
        break;
 8005cd8:	e008      	b.n	8005cec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cde:	61bb      	str	r3, [r7, #24]
        break;
 8005ce0:	e004      	b.n	8005cec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d074      	beq.n	8005ddc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	005a      	lsls	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b0f      	cmp	r3, #15
 8005d0c:	d916      	bls.n	8005d3c <UART_SetConfig+0x19c>
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d14:	d212      	bcs.n	8005d3c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f023 030f 	bic.w	r3, r3, #15
 8005d1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	89fb      	ldrh	r3, [r7, #14]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	89fa      	ldrh	r2, [r7, #14]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	e04f      	b.n	8005ddc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	77bb      	strb	r3, [r7, #30]
 8005d40:	e04c      	b.n	8005ddc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d42:	7ffb      	ldrb	r3, [r7, #31]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d828      	bhi.n	8005d9a <UART_SetConfig+0x1fa>
 8005d48:	a201      	add	r2, pc, #4	@ (adr r2, 8005d50 <UART_SetConfig+0x1b0>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d75 	.word	0x08005d75
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d85 	.word	0x08005d85
 8005d5c:	08005d9b 	.word	0x08005d9b
 8005d60:	08005d8b 	.word	0x08005d8b
 8005d64:	08005d9b 	.word	0x08005d9b
 8005d68:	08005d9b 	.word	0x08005d9b
 8005d6c:	08005d9b 	.word	0x08005d9b
 8005d70:	08005d93 	.word	0x08005d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d74:	f7fe fbc2 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8005d78:	61b8      	str	r0, [r7, #24]
        break;
 8005d7a:	e013      	b.n	8005da4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d7c:	f7fe fbe0 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8005d80:	61b8      	str	r0, [r7, #24]
        break;
 8005d82:	e00f      	b.n	8005da4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d84:	4b20      	ldr	r3, [pc, #128]	@ (8005e08 <UART_SetConfig+0x268>)
 8005d86:	61bb      	str	r3, [r7, #24]
        break;
 8005d88:	e00c      	b.n	8005da4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8a:	f7fe fb41 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 8005d8e:	61b8      	str	r0, [r7, #24]
        break;
 8005d90:	e008      	b.n	8005da4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d96:	61bb      	str	r3, [r7, #24]
        break;
 8005d98:	e004      	b.n	8005da4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	77bb      	strb	r3, [r7, #30]
        break;
 8005da2:	bf00      	nop
    }

    if (pclk != 0U)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d018      	beq.n	8005ddc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	085a      	lsrs	r2, r3, #1
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	441a      	add	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b0f      	cmp	r3, #15
 8005dc2:	d909      	bls.n	8005dd8 <UART_SetConfig+0x238>
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dca:	d205      	bcs.n	8005dd8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60da      	str	r2, [r3, #12]
 8005dd6:	e001      	b.n	8005ddc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005de8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	efff69f3 	.word	0xefff69f3
 8005df8:	40013800 	.word	0x40013800
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40004400 	.word	0x40004400
 8005e04:	40004800 	.word	0x40004800
 8005e08:	007a1200 	.word	0x007a1200

08005e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01a      	beq.n	8005f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f0a:	d10a      	bne.n	8005f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b098      	sub	sp, #96	@ 0x60
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f60:	f7fb fcac 	bl	80018bc <HAL_GetTick>
 8005f64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d12e      	bne.n	8005fd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f88c 	bl	80060a0 <UART_WaitOnFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d021      	beq.n	8005fd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e6      	bne.n	8005f8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e062      	b.n	8006098 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d149      	bne.n	8006074 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f856 	bl	80060a0 <UART_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d03c      	beq.n	8006074 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	623b      	str	r3, [r7, #32]
   return(result);
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800600e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006018:	633b      	str	r3, [r7, #48]	@ 0x30
 800601a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800601e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e6      	bne.n	8005ffa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	60fb      	str	r3, [r7, #12]
   return(result);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3308      	adds	r3, #8
 800604a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800604c:	61fa      	str	r2, [r7, #28]
 800604e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69b9      	ldr	r1, [r7, #24]
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	617b      	str	r3, [r7, #20]
   return(result);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e011      	b.n	8006098 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3758      	adds	r7, #88	@ 0x58
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b0:	e049      	b.n	8006146 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d045      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ba:	f7fb fbff 	bl	80018bc <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d302      	bcc.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e048      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d031      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d110      	bne.n	8006112 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2208      	movs	r2, #8
 80060f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f838 	bl	800616e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2208      	movs	r2, #8
 8006102:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e029      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800611c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006120:	d111      	bne.n	8006146 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800612a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f81e 	bl	800616e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e00f      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4013      	ands	r3, r2
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	429a      	cmp	r2, r3
 8006154:	bf0c      	ite	eq
 8006156:	2301      	moveq	r3, #1
 8006158:	2300      	movne	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	429a      	cmp	r2, r3
 8006162:	d0a6      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800616e:	b480      	push	{r7}
 8006170:	b095      	sub	sp, #84	@ 0x54
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800618a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006194:	643b      	str	r3, [r7, #64]	@ 0x40
 8006196:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800619a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e6      	bne.n	8006176 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e5      	bne.n	80061a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d118      	bne.n	8006216 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6979      	ldr	r1, [r7, #20]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	613b      	str	r3, [r7, #16]
   return(result);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e6      	bne.n	80061e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800622a:	bf00      	nop
 800622c:	3754      	adds	r7, #84	@ 0x54
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <__cvt>:
 8006236:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800623a:	ec57 6b10 	vmov	r6, r7, d0
 800623e:	2f00      	cmp	r7, #0
 8006240:	460c      	mov	r4, r1
 8006242:	4619      	mov	r1, r3
 8006244:	463b      	mov	r3, r7
 8006246:	bfbb      	ittet	lt
 8006248:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800624c:	461f      	movlt	r7, r3
 800624e:	2300      	movge	r3, #0
 8006250:	232d      	movlt	r3, #45	@ 0x2d
 8006252:	700b      	strb	r3, [r1, #0]
 8006254:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006256:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800625a:	4691      	mov	r9, r2
 800625c:	f023 0820 	bic.w	r8, r3, #32
 8006260:	bfbc      	itt	lt
 8006262:	4632      	movlt	r2, r6
 8006264:	4616      	movlt	r6, r2
 8006266:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800626a:	d005      	beq.n	8006278 <__cvt+0x42>
 800626c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006270:	d100      	bne.n	8006274 <__cvt+0x3e>
 8006272:	3401      	adds	r4, #1
 8006274:	2102      	movs	r1, #2
 8006276:	e000      	b.n	800627a <__cvt+0x44>
 8006278:	2103      	movs	r1, #3
 800627a:	ab03      	add	r3, sp, #12
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	ab02      	add	r3, sp, #8
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	ec47 6b10 	vmov	d0, r6, r7
 8006286:	4653      	mov	r3, sl
 8006288:	4622      	mov	r2, r4
 800628a:	f000 fe4d 	bl	8006f28 <_dtoa_r>
 800628e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006292:	4605      	mov	r5, r0
 8006294:	d119      	bne.n	80062ca <__cvt+0x94>
 8006296:	f019 0f01 	tst.w	r9, #1
 800629a:	d00e      	beq.n	80062ba <__cvt+0x84>
 800629c:	eb00 0904 	add.w	r9, r0, r4
 80062a0:	2200      	movs	r2, #0
 80062a2:	2300      	movs	r3, #0
 80062a4:	4630      	mov	r0, r6
 80062a6:	4639      	mov	r1, r7
 80062a8:	f7fa fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80062ac:	b108      	cbz	r0, 80062b2 <__cvt+0x7c>
 80062ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80062b2:	2230      	movs	r2, #48	@ 0x30
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	454b      	cmp	r3, r9
 80062b8:	d31e      	bcc.n	80062f8 <__cvt+0xc2>
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062be:	1b5b      	subs	r3, r3, r5
 80062c0:	4628      	mov	r0, r5
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	b004      	add	sp, #16
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062ce:	eb00 0904 	add.w	r9, r0, r4
 80062d2:	d1e5      	bne.n	80062a0 <__cvt+0x6a>
 80062d4:	7803      	ldrb	r3, [r0, #0]
 80062d6:	2b30      	cmp	r3, #48	@ 0x30
 80062d8:	d10a      	bne.n	80062f0 <__cvt+0xba>
 80062da:	2200      	movs	r2, #0
 80062dc:	2300      	movs	r3, #0
 80062de:	4630      	mov	r0, r6
 80062e0:	4639      	mov	r1, r7
 80062e2:	f7fa fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e6:	b918      	cbnz	r0, 80062f0 <__cvt+0xba>
 80062e8:	f1c4 0401 	rsb	r4, r4, #1
 80062ec:	f8ca 4000 	str.w	r4, [sl]
 80062f0:	f8da 3000 	ldr.w	r3, [sl]
 80062f4:	4499      	add	r9, r3
 80062f6:	e7d3      	b.n	80062a0 <__cvt+0x6a>
 80062f8:	1c59      	adds	r1, r3, #1
 80062fa:	9103      	str	r1, [sp, #12]
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	e7d9      	b.n	80062b4 <__cvt+0x7e>

08006300 <__exponent>:
 8006300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006302:	2900      	cmp	r1, #0
 8006304:	bfba      	itte	lt
 8006306:	4249      	neglt	r1, r1
 8006308:	232d      	movlt	r3, #45	@ 0x2d
 800630a:	232b      	movge	r3, #43	@ 0x2b
 800630c:	2909      	cmp	r1, #9
 800630e:	7002      	strb	r2, [r0, #0]
 8006310:	7043      	strb	r3, [r0, #1]
 8006312:	dd29      	ble.n	8006368 <__exponent+0x68>
 8006314:	f10d 0307 	add.w	r3, sp, #7
 8006318:	461d      	mov	r5, r3
 800631a:	270a      	movs	r7, #10
 800631c:	461a      	mov	r2, r3
 800631e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006322:	fb07 1416 	mls	r4, r7, r6, r1
 8006326:	3430      	adds	r4, #48	@ 0x30
 8006328:	f802 4c01 	strb.w	r4, [r2, #-1]
 800632c:	460c      	mov	r4, r1
 800632e:	2c63      	cmp	r4, #99	@ 0x63
 8006330:	f103 33ff 	add.w	r3, r3, #4294967295
 8006334:	4631      	mov	r1, r6
 8006336:	dcf1      	bgt.n	800631c <__exponent+0x1c>
 8006338:	3130      	adds	r1, #48	@ 0x30
 800633a:	1e94      	subs	r4, r2, #2
 800633c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006340:	1c41      	adds	r1, r0, #1
 8006342:	4623      	mov	r3, r4
 8006344:	42ab      	cmp	r3, r5
 8006346:	d30a      	bcc.n	800635e <__exponent+0x5e>
 8006348:	f10d 0309 	add.w	r3, sp, #9
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	42ac      	cmp	r4, r5
 8006350:	bf88      	it	hi
 8006352:	2300      	movhi	r3, #0
 8006354:	3302      	adds	r3, #2
 8006356:	4403      	add	r3, r0
 8006358:	1a18      	subs	r0, r3, r0
 800635a:	b003      	add	sp, #12
 800635c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800635e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006362:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006366:	e7ed      	b.n	8006344 <__exponent+0x44>
 8006368:	2330      	movs	r3, #48	@ 0x30
 800636a:	3130      	adds	r1, #48	@ 0x30
 800636c:	7083      	strb	r3, [r0, #2]
 800636e:	70c1      	strb	r1, [r0, #3]
 8006370:	1d03      	adds	r3, r0, #4
 8006372:	e7f1      	b.n	8006358 <__exponent+0x58>

08006374 <_printf_float>:
 8006374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006378:	b08d      	sub	sp, #52	@ 0x34
 800637a:	460c      	mov	r4, r1
 800637c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006380:	4616      	mov	r6, r2
 8006382:	461f      	mov	r7, r3
 8006384:	4605      	mov	r5, r0
 8006386:	f000 fccd 	bl	8006d24 <_localeconv_r>
 800638a:	6803      	ldr	r3, [r0, #0]
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	4618      	mov	r0, r3
 8006390:	f7f9 ff6e 	bl	8000270 <strlen>
 8006394:	2300      	movs	r3, #0
 8006396:	930a      	str	r3, [sp, #40]	@ 0x28
 8006398:	f8d8 3000 	ldr.w	r3, [r8]
 800639c:	9005      	str	r0, [sp, #20]
 800639e:	3307      	adds	r3, #7
 80063a0:	f023 0307 	bic.w	r3, r3, #7
 80063a4:	f103 0208 	add.w	r2, r3, #8
 80063a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063ac:	f8d4 b000 	ldr.w	fp, [r4]
 80063b0:	f8c8 2000 	str.w	r2, [r8]
 80063b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063bc:	9307      	str	r3, [sp, #28]
 80063be:	f8cd 8018 	str.w	r8, [sp, #24]
 80063c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063ca:	4b9c      	ldr	r3, [pc, #624]	@ (800663c <_printf_float+0x2c8>)
 80063cc:	f04f 32ff 	mov.w	r2, #4294967295
 80063d0:	f7fa fbac 	bl	8000b2c <__aeabi_dcmpun>
 80063d4:	bb70      	cbnz	r0, 8006434 <_printf_float+0xc0>
 80063d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063da:	4b98      	ldr	r3, [pc, #608]	@ (800663c <_printf_float+0x2c8>)
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	f7fa fb86 	bl	8000af0 <__aeabi_dcmple>
 80063e4:	bb30      	cbnz	r0, 8006434 <_printf_float+0xc0>
 80063e6:	2200      	movs	r2, #0
 80063e8:	2300      	movs	r3, #0
 80063ea:	4640      	mov	r0, r8
 80063ec:	4649      	mov	r1, r9
 80063ee:	f7fa fb75 	bl	8000adc <__aeabi_dcmplt>
 80063f2:	b110      	cbz	r0, 80063fa <_printf_float+0x86>
 80063f4:	232d      	movs	r3, #45	@ 0x2d
 80063f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063fa:	4a91      	ldr	r2, [pc, #580]	@ (8006640 <_printf_float+0x2cc>)
 80063fc:	4b91      	ldr	r3, [pc, #580]	@ (8006644 <_printf_float+0x2d0>)
 80063fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006402:	bf94      	ite	ls
 8006404:	4690      	movls	r8, r2
 8006406:	4698      	movhi	r8, r3
 8006408:	2303      	movs	r3, #3
 800640a:	6123      	str	r3, [r4, #16]
 800640c:	f02b 0304 	bic.w	r3, fp, #4
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	f04f 0900 	mov.w	r9, #0
 8006416:	9700      	str	r7, [sp, #0]
 8006418:	4633      	mov	r3, r6
 800641a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800641c:	4621      	mov	r1, r4
 800641e:	4628      	mov	r0, r5
 8006420:	f000 f9d2 	bl	80067c8 <_printf_common>
 8006424:	3001      	adds	r0, #1
 8006426:	f040 808d 	bne.w	8006544 <_printf_float+0x1d0>
 800642a:	f04f 30ff 	mov.w	r0, #4294967295
 800642e:	b00d      	add	sp, #52	@ 0x34
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7fa fb76 	bl	8000b2c <__aeabi_dcmpun>
 8006440:	b140      	cbz	r0, 8006454 <_printf_float+0xe0>
 8006442:	464b      	mov	r3, r9
 8006444:	2b00      	cmp	r3, #0
 8006446:	bfbc      	itt	lt
 8006448:	232d      	movlt	r3, #45	@ 0x2d
 800644a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800644e:	4a7e      	ldr	r2, [pc, #504]	@ (8006648 <_printf_float+0x2d4>)
 8006450:	4b7e      	ldr	r3, [pc, #504]	@ (800664c <_printf_float+0x2d8>)
 8006452:	e7d4      	b.n	80063fe <_printf_float+0x8a>
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800645a:	9206      	str	r2, [sp, #24]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	d13b      	bne.n	80064d8 <_printf_float+0x164>
 8006460:	2306      	movs	r3, #6
 8006462:	6063      	str	r3, [r4, #4]
 8006464:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006468:	2300      	movs	r3, #0
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	9303      	str	r3, [sp, #12]
 800646e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006470:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006474:	ab09      	add	r3, sp, #36	@ 0x24
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	6861      	ldr	r1, [r4, #4]
 800647a:	ec49 8b10 	vmov	d0, r8, r9
 800647e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006482:	4628      	mov	r0, r5
 8006484:	f7ff fed7 	bl	8006236 <__cvt>
 8006488:	9b06      	ldr	r3, [sp, #24]
 800648a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800648c:	2b47      	cmp	r3, #71	@ 0x47
 800648e:	4680      	mov	r8, r0
 8006490:	d129      	bne.n	80064e6 <_printf_float+0x172>
 8006492:	1cc8      	adds	r0, r1, #3
 8006494:	db02      	blt.n	800649c <_printf_float+0x128>
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	4299      	cmp	r1, r3
 800649a:	dd41      	ble.n	8006520 <_printf_float+0x1ac>
 800649c:	f1aa 0a02 	sub.w	sl, sl, #2
 80064a0:	fa5f fa8a 	uxtb.w	sl, sl
 80064a4:	3901      	subs	r1, #1
 80064a6:	4652      	mov	r2, sl
 80064a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80064ae:	f7ff ff27 	bl	8006300 <__exponent>
 80064b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064b4:	1813      	adds	r3, r2, r0
 80064b6:	2a01      	cmp	r2, #1
 80064b8:	4681      	mov	r9, r0
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	dc02      	bgt.n	80064c4 <_printf_float+0x150>
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	07d2      	lsls	r2, r2, #31
 80064c2:	d501      	bpl.n	80064c8 <_printf_float+0x154>
 80064c4:	3301      	adds	r3, #1
 80064c6:	6123      	str	r3, [r4, #16]
 80064c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0a2      	beq.n	8006416 <_printf_float+0xa2>
 80064d0:	232d      	movs	r3, #45	@ 0x2d
 80064d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064d6:	e79e      	b.n	8006416 <_printf_float+0xa2>
 80064d8:	9a06      	ldr	r2, [sp, #24]
 80064da:	2a47      	cmp	r2, #71	@ 0x47
 80064dc:	d1c2      	bne.n	8006464 <_printf_float+0xf0>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1c0      	bne.n	8006464 <_printf_float+0xf0>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e7bd      	b.n	8006462 <_printf_float+0xee>
 80064e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064ea:	d9db      	bls.n	80064a4 <_printf_float+0x130>
 80064ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80064f0:	d118      	bne.n	8006524 <_printf_float+0x1b0>
 80064f2:	2900      	cmp	r1, #0
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	dd0b      	ble.n	8006510 <_printf_float+0x19c>
 80064f8:	6121      	str	r1, [r4, #16]
 80064fa:	b913      	cbnz	r3, 8006502 <_printf_float+0x18e>
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	07d0      	lsls	r0, r2, #31
 8006500:	d502      	bpl.n	8006508 <_printf_float+0x194>
 8006502:	3301      	adds	r3, #1
 8006504:	440b      	add	r3, r1
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	65a1      	str	r1, [r4, #88]	@ 0x58
 800650a:	f04f 0900 	mov.w	r9, #0
 800650e:	e7db      	b.n	80064c8 <_printf_float+0x154>
 8006510:	b913      	cbnz	r3, 8006518 <_printf_float+0x1a4>
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	07d2      	lsls	r2, r2, #31
 8006516:	d501      	bpl.n	800651c <_printf_float+0x1a8>
 8006518:	3302      	adds	r3, #2
 800651a:	e7f4      	b.n	8006506 <_printf_float+0x192>
 800651c:	2301      	movs	r3, #1
 800651e:	e7f2      	b.n	8006506 <_printf_float+0x192>
 8006520:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006526:	4299      	cmp	r1, r3
 8006528:	db05      	blt.n	8006536 <_printf_float+0x1c2>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	6121      	str	r1, [r4, #16]
 800652e:	07d8      	lsls	r0, r3, #31
 8006530:	d5ea      	bpl.n	8006508 <_printf_float+0x194>
 8006532:	1c4b      	adds	r3, r1, #1
 8006534:	e7e7      	b.n	8006506 <_printf_float+0x192>
 8006536:	2900      	cmp	r1, #0
 8006538:	bfd4      	ite	le
 800653a:	f1c1 0202 	rsble	r2, r1, #2
 800653e:	2201      	movgt	r2, #1
 8006540:	4413      	add	r3, r2
 8006542:	e7e0      	b.n	8006506 <_printf_float+0x192>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	055a      	lsls	r2, r3, #21
 8006548:	d407      	bmi.n	800655a <_printf_float+0x1e6>
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	4642      	mov	r2, r8
 800654e:	4631      	mov	r1, r6
 8006550:	4628      	mov	r0, r5
 8006552:	47b8      	blx	r7
 8006554:	3001      	adds	r0, #1
 8006556:	d12b      	bne.n	80065b0 <_printf_float+0x23c>
 8006558:	e767      	b.n	800642a <_printf_float+0xb6>
 800655a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800655e:	f240 80dd 	bls.w	800671c <_printf_float+0x3a8>
 8006562:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006566:	2200      	movs	r2, #0
 8006568:	2300      	movs	r3, #0
 800656a:	f7fa faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800656e:	2800      	cmp	r0, #0
 8006570:	d033      	beq.n	80065da <_printf_float+0x266>
 8006572:	4a37      	ldr	r2, [pc, #220]	@ (8006650 <_printf_float+0x2dc>)
 8006574:	2301      	movs	r3, #1
 8006576:	4631      	mov	r1, r6
 8006578:	4628      	mov	r0, r5
 800657a:	47b8      	blx	r7
 800657c:	3001      	adds	r0, #1
 800657e:	f43f af54 	beq.w	800642a <_printf_float+0xb6>
 8006582:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006586:	4543      	cmp	r3, r8
 8006588:	db02      	blt.n	8006590 <_printf_float+0x21c>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	07d8      	lsls	r0, r3, #31
 800658e:	d50f      	bpl.n	80065b0 <_printf_float+0x23c>
 8006590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006594:	4631      	mov	r1, r6
 8006596:	4628      	mov	r0, r5
 8006598:	47b8      	blx	r7
 800659a:	3001      	adds	r0, #1
 800659c:	f43f af45 	beq.w	800642a <_printf_float+0xb6>
 80065a0:	f04f 0900 	mov.w	r9, #0
 80065a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80065a8:	f104 0a1a 	add.w	sl, r4, #26
 80065ac:	45c8      	cmp	r8, r9
 80065ae:	dc09      	bgt.n	80065c4 <_printf_float+0x250>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	079b      	lsls	r3, r3, #30
 80065b4:	f100 8103 	bmi.w	80067be <_printf_float+0x44a>
 80065b8:	68e0      	ldr	r0, [r4, #12]
 80065ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065bc:	4298      	cmp	r0, r3
 80065be:	bfb8      	it	lt
 80065c0:	4618      	movlt	r0, r3
 80065c2:	e734      	b.n	800642e <_printf_float+0xba>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4652      	mov	r2, sl
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f af2b 	beq.w	800642a <_printf_float+0xb6>
 80065d4:	f109 0901 	add.w	r9, r9, #1
 80065d8:	e7e8      	b.n	80065ac <_printf_float+0x238>
 80065da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dc39      	bgt.n	8006654 <_printf_float+0x2e0>
 80065e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006650 <_printf_float+0x2dc>)
 80065e2:	2301      	movs	r3, #1
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f af1d 	beq.w	800642a <_printf_float+0xb6>
 80065f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80065f4:	ea59 0303 	orrs.w	r3, r9, r3
 80065f8:	d102      	bne.n	8006600 <_printf_float+0x28c>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	07d9      	lsls	r1, r3, #31
 80065fe:	d5d7      	bpl.n	80065b0 <_printf_float+0x23c>
 8006600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f af0d 	beq.w	800642a <_printf_float+0xb6>
 8006610:	f04f 0a00 	mov.w	sl, #0
 8006614:	f104 0b1a 	add.w	fp, r4, #26
 8006618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800661a:	425b      	negs	r3, r3
 800661c:	4553      	cmp	r3, sl
 800661e:	dc01      	bgt.n	8006624 <_printf_float+0x2b0>
 8006620:	464b      	mov	r3, r9
 8006622:	e793      	b.n	800654c <_printf_float+0x1d8>
 8006624:	2301      	movs	r3, #1
 8006626:	465a      	mov	r2, fp
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	f43f aefb 	beq.w	800642a <_printf_float+0xb6>
 8006634:	f10a 0a01 	add.w	sl, sl, #1
 8006638:	e7ee      	b.n	8006618 <_printf_float+0x2a4>
 800663a:	bf00      	nop
 800663c:	7fefffff 	.word	0x7fefffff
 8006640:	08008bf0 	.word	0x08008bf0
 8006644:	08008bf4 	.word	0x08008bf4
 8006648:	08008bf8 	.word	0x08008bf8
 800664c:	08008bfc 	.word	0x08008bfc
 8006650:	08008c00 	.word	0x08008c00
 8006654:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006656:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800665a:	4553      	cmp	r3, sl
 800665c:	bfa8      	it	ge
 800665e:	4653      	movge	r3, sl
 8006660:	2b00      	cmp	r3, #0
 8006662:	4699      	mov	r9, r3
 8006664:	dc36      	bgt.n	80066d4 <_printf_float+0x360>
 8006666:	f04f 0b00 	mov.w	fp, #0
 800666a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800666e:	f104 021a 	add.w	r2, r4, #26
 8006672:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006674:	9306      	str	r3, [sp, #24]
 8006676:	eba3 0309 	sub.w	r3, r3, r9
 800667a:	455b      	cmp	r3, fp
 800667c:	dc31      	bgt.n	80066e2 <_printf_float+0x36e>
 800667e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006680:	459a      	cmp	sl, r3
 8006682:	dc3a      	bgt.n	80066fa <_printf_float+0x386>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	07da      	lsls	r2, r3, #31
 8006688:	d437      	bmi.n	80066fa <_printf_float+0x386>
 800668a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800668c:	ebaa 0903 	sub.w	r9, sl, r3
 8006690:	9b06      	ldr	r3, [sp, #24]
 8006692:	ebaa 0303 	sub.w	r3, sl, r3
 8006696:	4599      	cmp	r9, r3
 8006698:	bfa8      	it	ge
 800669a:	4699      	movge	r9, r3
 800669c:	f1b9 0f00 	cmp.w	r9, #0
 80066a0:	dc33      	bgt.n	800670a <_printf_float+0x396>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066aa:	f104 0b1a 	add.w	fp, r4, #26
 80066ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b0:	ebaa 0303 	sub.w	r3, sl, r3
 80066b4:	eba3 0309 	sub.w	r3, r3, r9
 80066b8:	4543      	cmp	r3, r8
 80066ba:	f77f af79 	ble.w	80065b0 <_printf_float+0x23c>
 80066be:	2301      	movs	r3, #1
 80066c0:	465a      	mov	r2, fp
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f aeae 	beq.w	800642a <_printf_float+0xb6>
 80066ce:	f108 0801 	add.w	r8, r8, #1
 80066d2:	e7ec      	b.n	80066ae <_printf_float+0x33a>
 80066d4:	4642      	mov	r2, r8
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d1c2      	bne.n	8006666 <_printf_float+0x2f2>
 80066e0:	e6a3      	b.n	800642a <_printf_float+0xb6>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	9206      	str	r2, [sp, #24]
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f ae9c 	beq.w	800642a <_printf_float+0xb6>
 80066f2:	9a06      	ldr	r2, [sp, #24]
 80066f4:	f10b 0b01 	add.w	fp, fp, #1
 80066f8:	e7bb      	b.n	8006672 <_printf_float+0x2fe>
 80066fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	d1c0      	bne.n	800668a <_printf_float+0x316>
 8006708:	e68f      	b.n	800642a <_printf_float+0xb6>
 800670a:	9a06      	ldr	r2, [sp, #24]
 800670c:	464b      	mov	r3, r9
 800670e:	4442      	add	r2, r8
 8006710:	4631      	mov	r1, r6
 8006712:	4628      	mov	r0, r5
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	d1c3      	bne.n	80066a2 <_printf_float+0x32e>
 800671a:	e686      	b.n	800642a <_printf_float+0xb6>
 800671c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006720:	f1ba 0f01 	cmp.w	sl, #1
 8006724:	dc01      	bgt.n	800672a <_printf_float+0x3b6>
 8006726:	07db      	lsls	r3, r3, #31
 8006728:	d536      	bpl.n	8006798 <_printf_float+0x424>
 800672a:	2301      	movs	r3, #1
 800672c:	4642      	mov	r2, r8
 800672e:	4631      	mov	r1, r6
 8006730:	4628      	mov	r0, r5
 8006732:	47b8      	blx	r7
 8006734:	3001      	adds	r0, #1
 8006736:	f43f ae78 	beq.w	800642a <_printf_float+0xb6>
 800673a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800673e:	4631      	mov	r1, r6
 8006740:	4628      	mov	r0, r5
 8006742:	47b8      	blx	r7
 8006744:	3001      	adds	r0, #1
 8006746:	f43f ae70 	beq.w	800642a <_printf_float+0xb6>
 800674a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800674e:	2200      	movs	r2, #0
 8006750:	2300      	movs	r3, #0
 8006752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006756:	f7fa f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800675a:	b9c0      	cbnz	r0, 800678e <_printf_float+0x41a>
 800675c:	4653      	mov	r3, sl
 800675e:	f108 0201 	add.w	r2, r8, #1
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	d10c      	bne.n	8006786 <_printf_float+0x412>
 800676c:	e65d      	b.n	800642a <_printf_float+0xb6>
 800676e:	2301      	movs	r3, #1
 8006770:	465a      	mov	r2, fp
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	f43f ae56 	beq.w	800642a <_printf_float+0xb6>
 800677e:	f108 0801 	add.w	r8, r8, #1
 8006782:	45d0      	cmp	r8, sl
 8006784:	dbf3      	blt.n	800676e <_printf_float+0x3fa>
 8006786:	464b      	mov	r3, r9
 8006788:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800678c:	e6df      	b.n	800654e <_printf_float+0x1da>
 800678e:	f04f 0800 	mov.w	r8, #0
 8006792:	f104 0b1a 	add.w	fp, r4, #26
 8006796:	e7f4      	b.n	8006782 <_printf_float+0x40e>
 8006798:	2301      	movs	r3, #1
 800679a:	4642      	mov	r2, r8
 800679c:	e7e1      	b.n	8006762 <_printf_float+0x3ee>
 800679e:	2301      	movs	r3, #1
 80067a0:	464a      	mov	r2, r9
 80067a2:	4631      	mov	r1, r6
 80067a4:	4628      	mov	r0, r5
 80067a6:	47b8      	blx	r7
 80067a8:	3001      	adds	r0, #1
 80067aa:	f43f ae3e 	beq.w	800642a <_printf_float+0xb6>
 80067ae:	f108 0801 	add.w	r8, r8, #1
 80067b2:	68e3      	ldr	r3, [r4, #12]
 80067b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067b6:	1a5b      	subs	r3, r3, r1
 80067b8:	4543      	cmp	r3, r8
 80067ba:	dcf0      	bgt.n	800679e <_printf_float+0x42a>
 80067bc:	e6fc      	b.n	80065b8 <_printf_float+0x244>
 80067be:	f04f 0800 	mov.w	r8, #0
 80067c2:	f104 0919 	add.w	r9, r4, #25
 80067c6:	e7f4      	b.n	80067b2 <_printf_float+0x43e>

080067c8 <_printf_common>:
 80067c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	4616      	mov	r6, r2
 80067ce:	4698      	mov	r8, r3
 80067d0:	688a      	ldr	r2, [r1, #8]
 80067d2:	690b      	ldr	r3, [r1, #16]
 80067d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067d8:	4293      	cmp	r3, r2
 80067da:	bfb8      	it	lt
 80067dc:	4613      	movlt	r3, r2
 80067de:	6033      	str	r3, [r6, #0]
 80067e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067e4:	4607      	mov	r7, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	b10a      	cbz	r2, 80067ee <_printf_common+0x26>
 80067ea:	3301      	adds	r3, #1
 80067ec:	6033      	str	r3, [r6, #0]
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	0699      	lsls	r1, r3, #26
 80067f2:	bf42      	ittt	mi
 80067f4:	6833      	ldrmi	r3, [r6, #0]
 80067f6:	3302      	addmi	r3, #2
 80067f8:	6033      	strmi	r3, [r6, #0]
 80067fa:	6825      	ldr	r5, [r4, #0]
 80067fc:	f015 0506 	ands.w	r5, r5, #6
 8006800:	d106      	bne.n	8006810 <_printf_common+0x48>
 8006802:	f104 0a19 	add.w	sl, r4, #25
 8006806:	68e3      	ldr	r3, [r4, #12]
 8006808:	6832      	ldr	r2, [r6, #0]
 800680a:	1a9b      	subs	r3, r3, r2
 800680c:	42ab      	cmp	r3, r5
 800680e:	dc26      	bgt.n	800685e <_printf_common+0x96>
 8006810:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	3b00      	subs	r3, #0
 8006818:	bf18      	it	ne
 800681a:	2301      	movne	r3, #1
 800681c:	0692      	lsls	r2, r2, #26
 800681e:	d42b      	bmi.n	8006878 <_printf_common+0xb0>
 8006820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006824:	4641      	mov	r1, r8
 8006826:	4638      	mov	r0, r7
 8006828:	47c8      	blx	r9
 800682a:	3001      	adds	r0, #1
 800682c:	d01e      	beq.n	800686c <_printf_common+0xa4>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	6922      	ldr	r2, [r4, #16]
 8006832:	f003 0306 	and.w	r3, r3, #6
 8006836:	2b04      	cmp	r3, #4
 8006838:	bf02      	ittt	eq
 800683a:	68e5      	ldreq	r5, [r4, #12]
 800683c:	6833      	ldreq	r3, [r6, #0]
 800683e:	1aed      	subeq	r5, r5, r3
 8006840:	68a3      	ldr	r3, [r4, #8]
 8006842:	bf0c      	ite	eq
 8006844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006848:	2500      	movne	r5, #0
 800684a:	4293      	cmp	r3, r2
 800684c:	bfc4      	itt	gt
 800684e:	1a9b      	subgt	r3, r3, r2
 8006850:	18ed      	addgt	r5, r5, r3
 8006852:	2600      	movs	r6, #0
 8006854:	341a      	adds	r4, #26
 8006856:	42b5      	cmp	r5, r6
 8006858:	d11a      	bne.n	8006890 <_printf_common+0xc8>
 800685a:	2000      	movs	r0, #0
 800685c:	e008      	b.n	8006870 <_printf_common+0xa8>
 800685e:	2301      	movs	r3, #1
 8006860:	4652      	mov	r2, sl
 8006862:	4641      	mov	r1, r8
 8006864:	4638      	mov	r0, r7
 8006866:	47c8      	blx	r9
 8006868:	3001      	adds	r0, #1
 800686a:	d103      	bne.n	8006874 <_printf_common+0xac>
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006874:	3501      	adds	r5, #1
 8006876:	e7c6      	b.n	8006806 <_printf_common+0x3e>
 8006878:	18e1      	adds	r1, r4, r3
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	2030      	movs	r0, #48	@ 0x30
 800687e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006882:	4422      	add	r2, r4
 8006884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800688c:	3302      	adds	r3, #2
 800688e:	e7c7      	b.n	8006820 <_printf_common+0x58>
 8006890:	2301      	movs	r3, #1
 8006892:	4622      	mov	r2, r4
 8006894:	4641      	mov	r1, r8
 8006896:	4638      	mov	r0, r7
 8006898:	47c8      	blx	r9
 800689a:	3001      	adds	r0, #1
 800689c:	d0e6      	beq.n	800686c <_printf_common+0xa4>
 800689e:	3601      	adds	r6, #1
 80068a0:	e7d9      	b.n	8006856 <_printf_common+0x8e>
	...

080068a4 <_printf_i>:
 80068a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	7e0f      	ldrb	r7, [r1, #24]
 80068aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068ac:	2f78      	cmp	r7, #120	@ 0x78
 80068ae:	4691      	mov	r9, r2
 80068b0:	4680      	mov	r8, r0
 80068b2:	460c      	mov	r4, r1
 80068b4:	469a      	mov	sl, r3
 80068b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068ba:	d807      	bhi.n	80068cc <_printf_i+0x28>
 80068bc:	2f62      	cmp	r7, #98	@ 0x62
 80068be:	d80a      	bhi.n	80068d6 <_printf_i+0x32>
 80068c0:	2f00      	cmp	r7, #0
 80068c2:	f000 80d2 	beq.w	8006a6a <_printf_i+0x1c6>
 80068c6:	2f58      	cmp	r7, #88	@ 0x58
 80068c8:	f000 80b9 	beq.w	8006a3e <_printf_i+0x19a>
 80068cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068d4:	e03a      	b.n	800694c <_printf_i+0xa8>
 80068d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068da:	2b15      	cmp	r3, #21
 80068dc:	d8f6      	bhi.n	80068cc <_printf_i+0x28>
 80068de:	a101      	add	r1, pc, #4	@ (adr r1, 80068e4 <_printf_i+0x40>)
 80068e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068e4:	0800693d 	.word	0x0800693d
 80068e8:	08006951 	.word	0x08006951
 80068ec:	080068cd 	.word	0x080068cd
 80068f0:	080068cd 	.word	0x080068cd
 80068f4:	080068cd 	.word	0x080068cd
 80068f8:	080068cd 	.word	0x080068cd
 80068fc:	08006951 	.word	0x08006951
 8006900:	080068cd 	.word	0x080068cd
 8006904:	080068cd 	.word	0x080068cd
 8006908:	080068cd 	.word	0x080068cd
 800690c:	080068cd 	.word	0x080068cd
 8006910:	08006a51 	.word	0x08006a51
 8006914:	0800697b 	.word	0x0800697b
 8006918:	08006a0b 	.word	0x08006a0b
 800691c:	080068cd 	.word	0x080068cd
 8006920:	080068cd 	.word	0x080068cd
 8006924:	08006a73 	.word	0x08006a73
 8006928:	080068cd 	.word	0x080068cd
 800692c:	0800697b 	.word	0x0800697b
 8006930:	080068cd 	.word	0x080068cd
 8006934:	080068cd 	.word	0x080068cd
 8006938:	08006a13 	.word	0x08006a13
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	1d1a      	adds	r2, r3, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6032      	str	r2, [r6, #0]
 8006944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800694c:	2301      	movs	r3, #1
 800694e:	e09d      	b.n	8006a8c <_printf_i+0x1e8>
 8006950:	6833      	ldr	r3, [r6, #0]
 8006952:	6820      	ldr	r0, [r4, #0]
 8006954:	1d19      	adds	r1, r3, #4
 8006956:	6031      	str	r1, [r6, #0]
 8006958:	0606      	lsls	r6, r0, #24
 800695a:	d501      	bpl.n	8006960 <_printf_i+0xbc>
 800695c:	681d      	ldr	r5, [r3, #0]
 800695e:	e003      	b.n	8006968 <_printf_i+0xc4>
 8006960:	0645      	lsls	r5, r0, #25
 8006962:	d5fb      	bpl.n	800695c <_printf_i+0xb8>
 8006964:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006968:	2d00      	cmp	r5, #0
 800696a:	da03      	bge.n	8006974 <_printf_i+0xd0>
 800696c:	232d      	movs	r3, #45	@ 0x2d
 800696e:	426d      	negs	r5, r5
 8006970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006974:	4859      	ldr	r0, [pc, #356]	@ (8006adc <_printf_i+0x238>)
 8006976:	230a      	movs	r3, #10
 8006978:	e011      	b.n	800699e <_printf_i+0xfa>
 800697a:	6821      	ldr	r1, [r4, #0]
 800697c:	6833      	ldr	r3, [r6, #0]
 800697e:	0608      	lsls	r0, r1, #24
 8006980:	f853 5b04 	ldr.w	r5, [r3], #4
 8006984:	d402      	bmi.n	800698c <_printf_i+0xe8>
 8006986:	0649      	lsls	r1, r1, #25
 8006988:	bf48      	it	mi
 800698a:	b2ad      	uxthmi	r5, r5
 800698c:	2f6f      	cmp	r7, #111	@ 0x6f
 800698e:	4853      	ldr	r0, [pc, #332]	@ (8006adc <_printf_i+0x238>)
 8006990:	6033      	str	r3, [r6, #0]
 8006992:	bf14      	ite	ne
 8006994:	230a      	movne	r3, #10
 8006996:	2308      	moveq	r3, #8
 8006998:	2100      	movs	r1, #0
 800699a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800699e:	6866      	ldr	r6, [r4, #4]
 80069a0:	60a6      	str	r6, [r4, #8]
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	bfa2      	ittt	ge
 80069a6:	6821      	ldrge	r1, [r4, #0]
 80069a8:	f021 0104 	bicge.w	r1, r1, #4
 80069ac:	6021      	strge	r1, [r4, #0]
 80069ae:	b90d      	cbnz	r5, 80069b4 <_printf_i+0x110>
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	d04b      	beq.n	8006a4c <_printf_i+0x1a8>
 80069b4:	4616      	mov	r6, r2
 80069b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ba:	fb03 5711 	mls	r7, r3, r1, r5
 80069be:	5dc7      	ldrb	r7, [r0, r7]
 80069c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069c4:	462f      	mov	r7, r5
 80069c6:	42bb      	cmp	r3, r7
 80069c8:	460d      	mov	r5, r1
 80069ca:	d9f4      	bls.n	80069b6 <_printf_i+0x112>
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d10b      	bne.n	80069e8 <_printf_i+0x144>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	07df      	lsls	r7, r3, #31
 80069d4:	d508      	bpl.n	80069e8 <_printf_i+0x144>
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	6861      	ldr	r1, [r4, #4]
 80069da:	4299      	cmp	r1, r3
 80069dc:	bfde      	ittt	le
 80069de:	2330      	movle	r3, #48	@ 0x30
 80069e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069e8:	1b92      	subs	r2, r2, r6
 80069ea:	6122      	str	r2, [r4, #16]
 80069ec:	f8cd a000 	str.w	sl, [sp]
 80069f0:	464b      	mov	r3, r9
 80069f2:	aa03      	add	r2, sp, #12
 80069f4:	4621      	mov	r1, r4
 80069f6:	4640      	mov	r0, r8
 80069f8:	f7ff fee6 	bl	80067c8 <_printf_common>
 80069fc:	3001      	adds	r0, #1
 80069fe:	d14a      	bne.n	8006a96 <_printf_i+0x1f2>
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	b004      	add	sp, #16
 8006a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	f043 0320 	orr.w	r3, r3, #32
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	4833      	ldr	r0, [pc, #204]	@ (8006ae0 <_printf_i+0x23c>)
 8006a14:	2778      	movs	r7, #120	@ 0x78
 8006a16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	6831      	ldr	r1, [r6, #0]
 8006a1e:	061f      	lsls	r7, r3, #24
 8006a20:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a24:	d402      	bmi.n	8006a2c <_printf_i+0x188>
 8006a26:	065f      	lsls	r7, r3, #25
 8006a28:	bf48      	it	mi
 8006a2a:	b2ad      	uxthmi	r5, r5
 8006a2c:	6031      	str	r1, [r6, #0]
 8006a2e:	07d9      	lsls	r1, r3, #31
 8006a30:	bf44      	itt	mi
 8006a32:	f043 0320 	orrmi.w	r3, r3, #32
 8006a36:	6023      	strmi	r3, [r4, #0]
 8006a38:	b11d      	cbz	r5, 8006a42 <_printf_i+0x19e>
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	e7ac      	b.n	8006998 <_printf_i+0xf4>
 8006a3e:	4827      	ldr	r0, [pc, #156]	@ (8006adc <_printf_i+0x238>)
 8006a40:	e7e9      	b.n	8006a16 <_printf_i+0x172>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f023 0320 	bic.w	r3, r3, #32
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	e7f6      	b.n	8006a3a <_printf_i+0x196>
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	e7bd      	b.n	80069cc <_printf_i+0x128>
 8006a50:	6833      	ldr	r3, [r6, #0]
 8006a52:	6825      	ldr	r5, [r4, #0]
 8006a54:	6961      	ldr	r1, [r4, #20]
 8006a56:	1d18      	adds	r0, r3, #4
 8006a58:	6030      	str	r0, [r6, #0]
 8006a5a:	062e      	lsls	r6, r5, #24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	d501      	bpl.n	8006a64 <_printf_i+0x1c0>
 8006a60:	6019      	str	r1, [r3, #0]
 8006a62:	e002      	b.n	8006a6a <_printf_i+0x1c6>
 8006a64:	0668      	lsls	r0, r5, #25
 8006a66:	d5fb      	bpl.n	8006a60 <_printf_i+0x1bc>
 8006a68:	8019      	strh	r1, [r3, #0]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6123      	str	r3, [r4, #16]
 8006a6e:	4616      	mov	r6, r2
 8006a70:	e7bc      	b.n	80069ec <_printf_i+0x148>
 8006a72:	6833      	ldr	r3, [r6, #0]
 8006a74:	1d1a      	adds	r2, r3, #4
 8006a76:	6032      	str	r2, [r6, #0]
 8006a78:	681e      	ldr	r6, [r3, #0]
 8006a7a:	6862      	ldr	r2, [r4, #4]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f7f9 fba6 	bl	80001d0 <memchr>
 8006a84:	b108      	cbz	r0, 8006a8a <_printf_i+0x1e6>
 8006a86:	1b80      	subs	r0, r0, r6
 8006a88:	6060      	str	r0, [r4, #4]
 8006a8a:	6863      	ldr	r3, [r4, #4]
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a94:	e7aa      	b.n	80069ec <_printf_i+0x148>
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	47d0      	blx	sl
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d0ad      	beq.n	8006a00 <_printf_i+0x15c>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	079b      	lsls	r3, r3, #30
 8006aa8:	d413      	bmi.n	8006ad2 <_printf_i+0x22e>
 8006aaa:	68e0      	ldr	r0, [r4, #12]
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	bfb8      	it	lt
 8006ab2:	4618      	movlt	r0, r3
 8006ab4:	e7a6      	b.n	8006a04 <_printf_i+0x160>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4649      	mov	r1, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	47d0      	blx	sl
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d09d      	beq.n	8006a00 <_printf_i+0x15c>
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	68e3      	ldr	r3, [r4, #12]
 8006ac8:	9903      	ldr	r1, [sp, #12]
 8006aca:	1a5b      	subs	r3, r3, r1
 8006acc:	42ab      	cmp	r3, r5
 8006ace:	dcf2      	bgt.n	8006ab6 <_printf_i+0x212>
 8006ad0:	e7eb      	b.n	8006aaa <_printf_i+0x206>
 8006ad2:	2500      	movs	r5, #0
 8006ad4:	f104 0619 	add.w	r6, r4, #25
 8006ad8:	e7f5      	b.n	8006ac6 <_printf_i+0x222>
 8006ada:	bf00      	nop
 8006adc:	08008c02 	.word	0x08008c02
 8006ae0:	08008c13 	.word	0x08008c13

08006ae4 <std>:
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	4604      	mov	r4, r0
 8006aea:	e9c0 3300 	strd	r3, r3, [r0]
 8006aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006af2:	6083      	str	r3, [r0, #8]
 8006af4:	8181      	strh	r1, [r0, #12]
 8006af6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006af8:	81c2      	strh	r2, [r0, #14]
 8006afa:	6183      	str	r3, [r0, #24]
 8006afc:	4619      	mov	r1, r3
 8006afe:	2208      	movs	r2, #8
 8006b00:	305c      	adds	r0, #92	@ 0x5c
 8006b02:	f000 f906 	bl	8006d12 <memset>
 8006b06:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <std+0x58>)
 8006b08:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <std+0x5c>)
 8006b0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <std+0x60>)
 8006b10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <std+0x64>)
 8006b14:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <std+0x68>)
 8006b18:	6224      	str	r4, [r4, #32]
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d006      	beq.n	8006b2c <std+0x48>
 8006b1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b22:	4294      	cmp	r4, r2
 8006b24:	d002      	beq.n	8006b2c <std+0x48>
 8006b26:	33d0      	adds	r3, #208	@ 0xd0
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	d105      	bne.n	8006b38 <std+0x54>
 8006b2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b34:	f000 b96a 	b.w	8006e0c <__retarget_lock_init_recursive>
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08006c8d 	.word	0x08006c8d
 8006b40:	08006caf 	.word	0x08006caf
 8006b44:	08006ce7 	.word	0x08006ce7
 8006b48:	08006d0b 	.word	0x08006d0b
 8006b4c:	20000428 	.word	0x20000428

08006b50 <stdio_exit_handler>:
 8006b50:	4a02      	ldr	r2, [pc, #8]	@ (8006b5c <stdio_exit_handler+0xc>)
 8006b52:	4903      	ldr	r1, [pc, #12]	@ (8006b60 <stdio_exit_handler+0x10>)
 8006b54:	4803      	ldr	r0, [pc, #12]	@ (8006b64 <stdio_exit_handler+0x14>)
 8006b56:	f000 b869 	b.w	8006c2c <_fwalk_sglue>
 8006b5a:	bf00      	nop
 8006b5c:	2000001c 	.word	0x2000001c
 8006b60:	08008741 	.word	0x08008741
 8006b64:	2000002c 	.word	0x2000002c

08006b68 <cleanup_stdio>:
 8006b68:	6841      	ldr	r1, [r0, #4]
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b9c <cleanup_stdio+0x34>)
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	d001      	beq.n	8006b78 <cleanup_stdio+0x10>
 8006b74:	f001 fde4 	bl	8008740 <_fflush_r>
 8006b78:	68a1      	ldr	r1, [r4, #8]
 8006b7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ba0 <cleanup_stdio+0x38>)
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	d002      	beq.n	8006b86 <cleanup_stdio+0x1e>
 8006b80:	4620      	mov	r0, r4
 8006b82:	f001 fddd 	bl	8008740 <_fflush_r>
 8006b86:	68e1      	ldr	r1, [r4, #12]
 8006b88:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <cleanup_stdio+0x3c>)
 8006b8a:	4299      	cmp	r1, r3
 8006b8c:	d004      	beq.n	8006b98 <cleanup_stdio+0x30>
 8006b8e:	4620      	mov	r0, r4
 8006b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b94:	f001 bdd4 	b.w	8008740 <_fflush_r>
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000428 	.word	0x20000428
 8006ba0:	20000490 	.word	0x20000490
 8006ba4:	200004f8 	.word	0x200004f8

08006ba8 <global_stdio_init.part.0>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <global_stdio_init.part.0+0x30>)
 8006bac:	4c0b      	ldr	r4, [pc, #44]	@ (8006bdc <global_stdio_init.part.0+0x34>)
 8006bae:	4a0c      	ldr	r2, [pc, #48]	@ (8006be0 <global_stdio_init.part.0+0x38>)
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2104      	movs	r1, #4
 8006bb8:	f7ff ff94 	bl	8006ae4 <std>
 8006bbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	2109      	movs	r1, #9
 8006bc4:	f7ff ff8e 	bl	8006ae4 <std>
 8006bc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bcc:	2202      	movs	r2, #2
 8006bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd2:	2112      	movs	r1, #18
 8006bd4:	f7ff bf86 	b.w	8006ae4 <std>
 8006bd8:	20000560 	.word	0x20000560
 8006bdc:	20000428 	.word	0x20000428
 8006be0:	08006b51 	.word	0x08006b51

08006be4 <__sfp_lock_acquire>:
 8006be4:	4801      	ldr	r0, [pc, #4]	@ (8006bec <__sfp_lock_acquire+0x8>)
 8006be6:	f000 b912 	b.w	8006e0e <__retarget_lock_acquire_recursive>
 8006bea:	bf00      	nop
 8006bec:	20000569 	.word	0x20000569

08006bf0 <__sfp_lock_release>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	@ (8006bf8 <__sfp_lock_release+0x8>)
 8006bf2:	f000 b90d 	b.w	8006e10 <__retarget_lock_release_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	20000569 	.word	0x20000569

08006bfc <__sinit>:
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	4604      	mov	r4, r0
 8006c00:	f7ff fff0 	bl	8006be4 <__sfp_lock_acquire>
 8006c04:	6a23      	ldr	r3, [r4, #32]
 8006c06:	b11b      	cbz	r3, 8006c10 <__sinit+0x14>
 8006c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0c:	f7ff bff0 	b.w	8006bf0 <__sfp_lock_release>
 8006c10:	4b04      	ldr	r3, [pc, #16]	@ (8006c24 <__sinit+0x28>)
 8006c12:	6223      	str	r3, [r4, #32]
 8006c14:	4b04      	ldr	r3, [pc, #16]	@ (8006c28 <__sinit+0x2c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f5      	bne.n	8006c08 <__sinit+0xc>
 8006c1c:	f7ff ffc4 	bl	8006ba8 <global_stdio_init.part.0>
 8006c20:	e7f2      	b.n	8006c08 <__sinit+0xc>
 8006c22:	bf00      	nop
 8006c24:	08006b69 	.word	0x08006b69
 8006c28:	20000560 	.word	0x20000560

08006c2c <_fwalk_sglue>:
 8006c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c30:	4607      	mov	r7, r0
 8006c32:	4688      	mov	r8, r1
 8006c34:	4614      	mov	r4, r2
 8006c36:	2600      	movs	r6, #0
 8006c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c40:	d505      	bpl.n	8006c4e <_fwalk_sglue+0x22>
 8006c42:	6824      	ldr	r4, [r4, #0]
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	d1f7      	bne.n	8006c38 <_fwalk_sglue+0xc>
 8006c48:	4630      	mov	r0, r6
 8006c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d907      	bls.n	8006c64 <_fwalk_sglue+0x38>
 8006c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	d003      	beq.n	8006c64 <_fwalk_sglue+0x38>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	4638      	mov	r0, r7
 8006c60:	47c0      	blx	r8
 8006c62:	4306      	orrs	r6, r0
 8006c64:	3568      	adds	r5, #104	@ 0x68
 8006c66:	e7e9      	b.n	8006c3c <_fwalk_sglue+0x10>

08006c68 <iprintf>:
 8006c68:	b40f      	push	{r0, r1, r2, r3}
 8006c6a:	b507      	push	{r0, r1, r2, lr}
 8006c6c:	4906      	ldr	r1, [pc, #24]	@ (8006c88 <iprintf+0x20>)
 8006c6e:	ab04      	add	r3, sp, #16
 8006c70:	6808      	ldr	r0, [r1, #0]
 8006c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c76:	6881      	ldr	r1, [r0, #8]
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	f001 fbc5 	bl	8008408 <_vfiprintf_r>
 8006c7e:	b003      	add	sp, #12
 8006c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c84:	b004      	add	sp, #16
 8006c86:	4770      	bx	lr
 8006c88:	20000028 	.word	0x20000028

08006c8c <__sread>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	460c      	mov	r4, r1
 8006c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c94:	f000 f86c 	bl	8006d70 <_read_r>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	bfab      	itete	ge
 8006c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006ca0:	181b      	addge	r3, r3, r0
 8006ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ca6:	bfac      	ite	ge
 8006ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006caa:	81a3      	strhlt	r3, [r4, #12]
 8006cac:	bd10      	pop	{r4, pc}

08006cae <__swrite>:
 8006cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb2:	461f      	mov	r7, r3
 8006cb4:	898b      	ldrh	r3, [r1, #12]
 8006cb6:	05db      	lsls	r3, r3, #23
 8006cb8:	4605      	mov	r5, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	4616      	mov	r6, r2
 8006cbe:	d505      	bpl.n	8006ccc <__swrite+0x1e>
 8006cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f000 f840 	bl	8006d4c <_lseek_r>
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	4632      	mov	r2, r6
 8006cda:	463b      	mov	r3, r7
 8006cdc:	4628      	mov	r0, r5
 8006cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	f000 b857 	b.w	8006d94 <_write_r>

08006ce6 <__sseek>:
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	460c      	mov	r4, r1
 8006cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cee:	f000 f82d 	bl	8006d4c <_lseek_r>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	bf15      	itete	ne
 8006cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d02:	81a3      	strheq	r3, [r4, #12]
 8006d04:	bf18      	it	ne
 8006d06:	81a3      	strhne	r3, [r4, #12]
 8006d08:	bd10      	pop	{r4, pc}

08006d0a <__sclose>:
 8006d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0e:	f000 b80d 	b.w	8006d2c <_close_r>

08006d12 <memset>:
 8006d12:	4402      	add	r2, r0
 8006d14:	4603      	mov	r3, r0
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d100      	bne.n	8006d1c <memset+0xa>
 8006d1a:	4770      	bx	lr
 8006d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d20:	e7f9      	b.n	8006d16 <memset+0x4>
	...

08006d24 <_localeconv_r>:
 8006d24:	4800      	ldr	r0, [pc, #0]	@ (8006d28 <_localeconv_r+0x4>)
 8006d26:	4770      	bx	lr
 8006d28:	20000168 	.word	0x20000168

08006d2c <_close_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4d06      	ldr	r5, [pc, #24]	@ (8006d48 <_close_r+0x1c>)
 8006d30:	2300      	movs	r3, #0
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	f7fa fcc0 	bl	80016bc <_close>
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d102      	bne.n	8006d46 <_close_r+0x1a>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	b103      	cbz	r3, 8006d46 <_close_r+0x1a>
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	20000564 	.word	0x20000564

08006d4c <_lseek_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d07      	ldr	r5, [pc, #28]	@ (8006d6c <_lseek_r+0x20>)
 8006d50:	4604      	mov	r4, r0
 8006d52:	4608      	mov	r0, r1
 8006d54:	4611      	mov	r1, r2
 8006d56:	2200      	movs	r2, #0
 8006d58:	602a      	str	r2, [r5, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f7fa fcd5 	bl	800170a <_lseek>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d102      	bne.n	8006d6a <_lseek_r+0x1e>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	b103      	cbz	r3, 8006d6a <_lseek_r+0x1e>
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	20000564 	.word	0x20000564

08006d70 <_read_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d07      	ldr	r5, [pc, #28]	@ (8006d90 <_read_r+0x20>)
 8006d74:	4604      	mov	r4, r0
 8006d76:	4608      	mov	r0, r1
 8006d78:	4611      	mov	r1, r2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	602a      	str	r2, [r5, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f7fa fc63 	bl	800164a <_read>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_read_r+0x1e>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_read_r+0x1e>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20000564 	.word	0x20000564

08006d94 <_write_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d07      	ldr	r5, [pc, #28]	@ (8006db4 <_write_r+0x20>)
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	602a      	str	r2, [r5, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f7fa fc6e 	bl	8001684 <_write>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_write_r+0x1e>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_write_r+0x1e>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20000564 	.word	0x20000564

08006db8 <__errno>:
 8006db8:	4b01      	ldr	r3, [pc, #4]	@ (8006dc0 <__errno+0x8>)
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20000028 	.word	0x20000028

08006dc4 <__libc_init_array>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8006dfc <__libc_init_array+0x38>)
 8006dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8006e00 <__libc_init_array+0x3c>)
 8006dca:	1b64      	subs	r4, r4, r5
 8006dcc:	10a4      	asrs	r4, r4, #2
 8006dce:	2600      	movs	r6, #0
 8006dd0:	42a6      	cmp	r6, r4
 8006dd2:	d109      	bne.n	8006de8 <__libc_init_array+0x24>
 8006dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8006e04 <__libc_init_array+0x40>)
 8006dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8006e08 <__libc_init_array+0x44>)
 8006dd8:	f001 fec0 	bl	8008b5c <_init>
 8006ddc:	1b64      	subs	r4, r4, r5
 8006dde:	10a4      	asrs	r4, r4, #2
 8006de0:	2600      	movs	r6, #0
 8006de2:	42a6      	cmp	r6, r4
 8006de4:	d105      	bne.n	8006df2 <__libc_init_array+0x2e>
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dec:	4798      	blx	r3
 8006dee:	3601      	adds	r6, #1
 8006df0:	e7ee      	b.n	8006dd0 <__libc_init_array+0xc>
 8006df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df6:	4798      	blx	r3
 8006df8:	3601      	adds	r6, #1
 8006dfa:	e7f2      	b.n	8006de2 <__libc_init_array+0x1e>
 8006dfc:	08008f68 	.word	0x08008f68
 8006e00:	08008f68 	.word	0x08008f68
 8006e04:	08008f68 	.word	0x08008f68
 8006e08:	08008f6c 	.word	0x08008f6c

08006e0c <__retarget_lock_init_recursive>:
 8006e0c:	4770      	bx	lr

08006e0e <__retarget_lock_acquire_recursive>:
 8006e0e:	4770      	bx	lr

08006e10 <__retarget_lock_release_recursive>:
 8006e10:	4770      	bx	lr

08006e12 <quorem>:
 8006e12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e16:	6903      	ldr	r3, [r0, #16]
 8006e18:	690c      	ldr	r4, [r1, #16]
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	db7e      	blt.n	8006f1e <quorem+0x10c>
 8006e20:	3c01      	subs	r4, #1
 8006e22:	f101 0814 	add.w	r8, r1, #20
 8006e26:	00a3      	lsls	r3, r4, #2
 8006e28:	f100 0514 	add.w	r5, r0, #20
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e32:	9301      	str	r3, [sp, #4]
 8006e34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e44:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e48:	d32e      	bcc.n	8006ea8 <quorem+0x96>
 8006e4a:	f04f 0a00 	mov.w	sl, #0
 8006e4e:	46c4      	mov	ip, r8
 8006e50:	46ae      	mov	lr, r5
 8006e52:	46d3      	mov	fp, sl
 8006e54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e58:	b298      	uxth	r0, r3
 8006e5a:	fb06 a000 	mla	r0, r6, r0, sl
 8006e5e:	0c02      	lsrs	r2, r0, #16
 8006e60:	0c1b      	lsrs	r3, r3, #16
 8006e62:	fb06 2303 	mla	r3, r6, r3, r2
 8006e66:	f8de 2000 	ldr.w	r2, [lr]
 8006e6a:	b280      	uxth	r0, r0
 8006e6c:	b292      	uxth	r2, r2
 8006e6e:	1a12      	subs	r2, r2, r0
 8006e70:	445a      	add	r2, fp
 8006e72:	f8de 0000 	ldr.w	r0, [lr]
 8006e76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e84:	b292      	uxth	r2, r2
 8006e86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e8a:	45e1      	cmp	r9, ip
 8006e8c:	f84e 2b04 	str.w	r2, [lr], #4
 8006e90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e94:	d2de      	bcs.n	8006e54 <quorem+0x42>
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	58eb      	ldr	r3, [r5, r3]
 8006e9a:	b92b      	cbnz	r3, 8006ea8 <quorem+0x96>
 8006e9c:	9b01      	ldr	r3, [sp, #4]
 8006e9e:	3b04      	subs	r3, #4
 8006ea0:	429d      	cmp	r5, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	d32f      	bcc.n	8006f06 <quorem+0xf4>
 8006ea6:	613c      	str	r4, [r7, #16]
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f001 f97b 	bl	80081a4 <__mcmp>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	db25      	blt.n	8006efe <quorem+0xec>
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006eba:	f8d1 c000 	ldr.w	ip, [r1]
 8006ebe:	fa1f fe82 	uxth.w	lr, r2
 8006ec2:	fa1f f38c 	uxth.w	r3, ip
 8006ec6:	eba3 030e 	sub.w	r3, r3, lr
 8006eca:	4403      	add	r3, r0
 8006ecc:	0c12      	lsrs	r2, r2, #16
 8006ece:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ed2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006edc:	45c1      	cmp	r9, r8
 8006ede:	f841 3b04 	str.w	r3, [r1], #4
 8006ee2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ee6:	d2e6      	bcs.n	8006eb6 <quorem+0xa4>
 8006ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ef0:	b922      	cbnz	r2, 8006efc <quorem+0xea>
 8006ef2:	3b04      	subs	r3, #4
 8006ef4:	429d      	cmp	r5, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	d30b      	bcc.n	8006f12 <quorem+0x100>
 8006efa:	613c      	str	r4, [r7, #16]
 8006efc:	3601      	adds	r6, #1
 8006efe:	4630      	mov	r0, r6
 8006f00:	b003      	add	sp, #12
 8006f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	3b04      	subs	r3, #4
 8006f0a:	2a00      	cmp	r2, #0
 8006f0c:	d1cb      	bne.n	8006ea6 <quorem+0x94>
 8006f0e:	3c01      	subs	r4, #1
 8006f10:	e7c6      	b.n	8006ea0 <quorem+0x8e>
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	3b04      	subs	r3, #4
 8006f16:	2a00      	cmp	r2, #0
 8006f18:	d1ef      	bne.n	8006efa <quorem+0xe8>
 8006f1a:	3c01      	subs	r4, #1
 8006f1c:	e7ea      	b.n	8006ef4 <quorem+0xe2>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	e7ee      	b.n	8006f00 <quorem+0xee>
 8006f22:	0000      	movs	r0, r0
 8006f24:	0000      	movs	r0, r0
	...

08006f28 <_dtoa_r>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	69c7      	ldr	r7, [r0, #28]
 8006f2e:	b099      	sub	sp, #100	@ 0x64
 8006f30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f34:	ec55 4b10 	vmov	r4, r5, d0
 8006f38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006f3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f3c:	4683      	mov	fp, r0
 8006f3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f42:	b97f      	cbnz	r7, 8006f64 <_dtoa_r+0x3c>
 8006f44:	2010      	movs	r0, #16
 8006f46:	f000 fdfd 	bl	8007b44 <malloc>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f50:	b920      	cbnz	r0, 8006f5c <_dtoa_r+0x34>
 8006f52:	4ba7      	ldr	r3, [pc, #668]	@ (80071f0 <_dtoa_r+0x2c8>)
 8006f54:	21ef      	movs	r1, #239	@ 0xef
 8006f56:	48a7      	ldr	r0, [pc, #668]	@ (80071f4 <_dtoa_r+0x2cc>)
 8006f58:	f001 fccc 	bl	80088f4 <__assert_func>
 8006f5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f60:	6007      	str	r7, [r0, #0]
 8006f62:	60c7      	str	r7, [r0, #12]
 8006f64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f68:	6819      	ldr	r1, [r3, #0]
 8006f6a:	b159      	cbz	r1, 8006f84 <_dtoa_r+0x5c>
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	604a      	str	r2, [r1, #4]
 8006f70:	2301      	movs	r3, #1
 8006f72:	4093      	lsls	r3, r2
 8006f74:	608b      	str	r3, [r1, #8]
 8006f76:	4658      	mov	r0, fp
 8006f78:	f000 feda 	bl	8007d30 <_Bfree>
 8006f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	1e2b      	subs	r3, r5, #0
 8006f86:	bfb9      	ittee	lt
 8006f88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f8c:	9303      	strlt	r3, [sp, #12]
 8006f8e:	2300      	movge	r3, #0
 8006f90:	6033      	strge	r3, [r6, #0]
 8006f92:	9f03      	ldr	r7, [sp, #12]
 8006f94:	4b98      	ldr	r3, [pc, #608]	@ (80071f8 <_dtoa_r+0x2d0>)
 8006f96:	bfbc      	itt	lt
 8006f98:	2201      	movlt	r2, #1
 8006f9a:	6032      	strlt	r2, [r6, #0]
 8006f9c:	43bb      	bics	r3, r7
 8006f9e:	d112      	bne.n	8006fc6 <_dtoa_r+0x9e>
 8006fa0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fac:	4323      	orrs	r3, r4
 8006fae:	f000 854d 	beq.w	8007a4c <_dtoa_r+0xb24>
 8006fb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800720c <_dtoa_r+0x2e4>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 854f 	beq.w	8007a5c <_dtoa_r+0xb34>
 8006fbe:	f10a 0303 	add.w	r3, sl, #3
 8006fc2:	f000 bd49 	b.w	8007a58 <_dtoa_r+0xb30>
 8006fc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	ec51 0b17 	vmov	r0, r1, d7
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006fd6:	f7f9 fd77 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fda:	4680      	mov	r8, r0
 8006fdc:	b158      	cbz	r0, 8006ff6 <_dtoa_r+0xce>
 8006fde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fe6:	b113      	cbz	r3, 8006fee <_dtoa_r+0xc6>
 8006fe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006fea:	4b84      	ldr	r3, [pc, #528]	@ (80071fc <_dtoa_r+0x2d4>)
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007210 <_dtoa_r+0x2e8>
 8006ff2:	f000 bd33 	b.w	8007a5c <_dtoa_r+0xb34>
 8006ff6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ffa:	aa16      	add	r2, sp, #88	@ 0x58
 8006ffc:	a917      	add	r1, sp, #92	@ 0x5c
 8006ffe:	4658      	mov	r0, fp
 8007000:	f001 f980 	bl	8008304 <__d2b>
 8007004:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007008:	4681      	mov	r9, r0
 800700a:	2e00      	cmp	r6, #0
 800700c:	d077      	beq.n	80070fe <_dtoa_r+0x1d6>
 800700e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007010:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800701c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007020:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007024:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007028:	4619      	mov	r1, r3
 800702a:	2200      	movs	r2, #0
 800702c:	4b74      	ldr	r3, [pc, #464]	@ (8007200 <_dtoa_r+0x2d8>)
 800702e:	f7f9 f92b 	bl	8000288 <__aeabi_dsub>
 8007032:	a369      	add	r3, pc, #420	@ (adr r3, 80071d8 <_dtoa_r+0x2b0>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f7f9 fade 	bl	80005f8 <__aeabi_dmul>
 800703c:	a368      	add	r3, pc, #416	@ (adr r3, 80071e0 <_dtoa_r+0x2b8>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f7f9 f923 	bl	800028c <__adddf3>
 8007046:	4604      	mov	r4, r0
 8007048:	4630      	mov	r0, r6
 800704a:	460d      	mov	r5, r1
 800704c:	f7f9 fa6a 	bl	8000524 <__aeabi_i2d>
 8007050:	a365      	add	r3, pc, #404	@ (adr r3, 80071e8 <_dtoa_r+0x2c0>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f7f9 facf 	bl	80005f8 <__aeabi_dmul>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4620      	mov	r0, r4
 8007060:	4629      	mov	r1, r5
 8007062:	f7f9 f913 	bl	800028c <__adddf3>
 8007066:	4604      	mov	r4, r0
 8007068:	460d      	mov	r5, r1
 800706a:	f7f9 fd75 	bl	8000b58 <__aeabi_d2iz>
 800706e:	2200      	movs	r2, #0
 8007070:	4607      	mov	r7, r0
 8007072:	2300      	movs	r3, #0
 8007074:	4620      	mov	r0, r4
 8007076:	4629      	mov	r1, r5
 8007078:	f7f9 fd30 	bl	8000adc <__aeabi_dcmplt>
 800707c:	b140      	cbz	r0, 8007090 <_dtoa_r+0x168>
 800707e:	4638      	mov	r0, r7
 8007080:	f7f9 fa50 	bl	8000524 <__aeabi_i2d>
 8007084:	4622      	mov	r2, r4
 8007086:	462b      	mov	r3, r5
 8007088:	f7f9 fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800708c:	b900      	cbnz	r0, 8007090 <_dtoa_r+0x168>
 800708e:	3f01      	subs	r7, #1
 8007090:	2f16      	cmp	r7, #22
 8007092:	d851      	bhi.n	8007138 <_dtoa_r+0x210>
 8007094:	4b5b      	ldr	r3, [pc, #364]	@ (8007204 <_dtoa_r+0x2dc>)
 8007096:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070a2:	f7f9 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d048      	beq.n	800713c <_dtoa_r+0x214>
 80070aa:	3f01      	subs	r7, #1
 80070ac:	2300      	movs	r3, #0
 80070ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80070b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070b2:	1b9b      	subs	r3, r3, r6
 80070b4:	1e5a      	subs	r2, r3, #1
 80070b6:	bf44      	itt	mi
 80070b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80070bc:	2300      	movmi	r3, #0
 80070be:	9208      	str	r2, [sp, #32]
 80070c0:	bf54      	ite	pl
 80070c2:	f04f 0800 	movpl.w	r8, #0
 80070c6:	9308      	strmi	r3, [sp, #32]
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	db39      	blt.n	8007140 <_dtoa_r+0x218>
 80070cc:	9b08      	ldr	r3, [sp, #32]
 80070ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80070d0:	443b      	add	r3, r7
 80070d2:	9308      	str	r3, [sp, #32]
 80070d4:	2300      	movs	r3, #0
 80070d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070da:	2b09      	cmp	r3, #9
 80070dc:	d864      	bhi.n	80071a8 <_dtoa_r+0x280>
 80070de:	2b05      	cmp	r3, #5
 80070e0:	bfc4      	itt	gt
 80070e2:	3b04      	subgt	r3, #4
 80070e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80070e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e8:	f1a3 0302 	sub.w	r3, r3, #2
 80070ec:	bfcc      	ite	gt
 80070ee:	2400      	movgt	r4, #0
 80070f0:	2401      	movle	r4, #1
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d863      	bhi.n	80071be <_dtoa_r+0x296>
 80070f6:	e8df f003 	tbb	[pc, r3]
 80070fa:	372a      	.short	0x372a
 80070fc:	5535      	.short	0x5535
 80070fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007102:	441e      	add	r6, r3
 8007104:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007108:	2b20      	cmp	r3, #32
 800710a:	bfc1      	itttt	gt
 800710c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007110:	409f      	lslgt	r7, r3
 8007112:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007116:	fa24 f303 	lsrgt.w	r3, r4, r3
 800711a:	bfd6      	itet	le
 800711c:	f1c3 0320 	rsble	r3, r3, #32
 8007120:	ea47 0003 	orrgt.w	r0, r7, r3
 8007124:	fa04 f003 	lslle.w	r0, r4, r3
 8007128:	f7f9 f9ec 	bl	8000504 <__aeabi_ui2d>
 800712c:	2201      	movs	r2, #1
 800712e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007132:	3e01      	subs	r6, #1
 8007134:	9214      	str	r2, [sp, #80]	@ 0x50
 8007136:	e777      	b.n	8007028 <_dtoa_r+0x100>
 8007138:	2301      	movs	r3, #1
 800713a:	e7b8      	b.n	80070ae <_dtoa_r+0x186>
 800713c:	9012      	str	r0, [sp, #72]	@ 0x48
 800713e:	e7b7      	b.n	80070b0 <_dtoa_r+0x188>
 8007140:	427b      	negs	r3, r7
 8007142:	930a      	str	r3, [sp, #40]	@ 0x28
 8007144:	2300      	movs	r3, #0
 8007146:	eba8 0807 	sub.w	r8, r8, r7
 800714a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800714c:	e7c4      	b.n	80070d8 <_dtoa_r+0x1b0>
 800714e:	2300      	movs	r3, #0
 8007150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	dc35      	bgt.n	80071c4 <_dtoa_r+0x29c>
 8007158:	2301      	movs	r3, #1
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	9307      	str	r3, [sp, #28]
 800715e:	461a      	mov	r2, r3
 8007160:	920e      	str	r2, [sp, #56]	@ 0x38
 8007162:	e00b      	b.n	800717c <_dtoa_r+0x254>
 8007164:	2301      	movs	r3, #1
 8007166:	e7f3      	b.n	8007150 <_dtoa_r+0x228>
 8007168:	2300      	movs	r3, #0
 800716a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800716c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800716e:	18fb      	adds	r3, r7, r3
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	2b01      	cmp	r3, #1
 8007176:	9307      	str	r3, [sp, #28]
 8007178:	bfb8      	it	lt
 800717a:	2301      	movlt	r3, #1
 800717c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007180:	2100      	movs	r1, #0
 8007182:	2204      	movs	r2, #4
 8007184:	f102 0514 	add.w	r5, r2, #20
 8007188:	429d      	cmp	r5, r3
 800718a:	d91f      	bls.n	80071cc <_dtoa_r+0x2a4>
 800718c:	6041      	str	r1, [r0, #4]
 800718e:	4658      	mov	r0, fp
 8007190:	f000 fd8e 	bl	8007cb0 <_Balloc>
 8007194:	4682      	mov	sl, r0
 8007196:	2800      	cmp	r0, #0
 8007198:	d13c      	bne.n	8007214 <_dtoa_r+0x2ec>
 800719a:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <_dtoa_r+0x2e0>)
 800719c:	4602      	mov	r2, r0
 800719e:	f240 11af 	movw	r1, #431	@ 0x1af
 80071a2:	e6d8      	b.n	8006f56 <_dtoa_r+0x2e>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e7e0      	b.n	800716a <_dtoa_r+0x242>
 80071a8:	2401      	movs	r4, #1
 80071aa:	2300      	movs	r3, #0
 80071ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071b0:	f04f 33ff 	mov.w	r3, #4294967295
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	9307      	str	r3, [sp, #28]
 80071b8:	2200      	movs	r2, #0
 80071ba:	2312      	movs	r3, #18
 80071bc:	e7d0      	b.n	8007160 <_dtoa_r+0x238>
 80071be:	2301      	movs	r3, #1
 80071c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071c2:	e7f5      	b.n	80071b0 <_dtoa_r+0x288>
 80071c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	9307      	str	r3, [sp, #28]
 80071ca:	e7d7      	b.n	800717c <_dtoa_r+0x254>
 80071cc:	3101      	adds	r1, #1
 80071ce:	0052      	lsls	r2, r2, #1
 80071d0:	e7d8      	b.n	8007184 <_dtoa_r+0x25c>
 80071d2:	bf00      	nop
 80071d4:	f3af 8000 	nop.w
 80071d8:	636f4361 	.word	0x636f4361
 80071dc:	3fd287a7 	.word	0x3fd287a7
 80071e0:	8b60c8b3 	.word	0x8b60c8b3
 80071e4:	3fc68a28 	.word	0x3fc68a28
 80071e8:	509f79fb 	.word	0x509f79fb
 80071ec:	3fd34413 	.word	0x3fd34413
 80071f0:	08008c31 	.word	0x08008c31
 80071f4:	08008c48 	.word	0x08008c48
 80071f8:	7ff00000 	.word	0x7ff00000
 80071fc:	08008c01 	.word	0x08008c01
 8007200:	3ff80000 	.word	0x3ff80000
 8007204:	08008d40 	.word	0x08008d40
 8007208:	08008ca0 	.word	0x08008ca0
 800720c:	08008c2d 	.word	0x08008c2d
 8007210:	08008c00 	.word	0x08008c00
 8007214:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007218:	6018      	str	r0, [r3, #0]
 800721a:	9b07      	ldr	r3, [sp, #28]
 800721c:	2b0e      	cmp	r3, #14
 800721e:	f200 80a4 	bhi.w	800736a <_dtoa_r+0x442>
 8007222:	2c00      	cmp	r4, #0
 8007224:	f000 80a1 	beq.w	800736a <_dtoa_r+0x442>
 8007228:	2f00      	cmp	r7, #0
 800722a:	dd33      	ble.n	8007294 <_dtoa_r+0x36c>
 800722c:	4bad      	ldr	r3, [pc, #692]	@ (80074e4 <_dtoa_r+0x5bc>)
 800722e:	f007 020f 	and.w	r2, r7, #15
 8007232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007236:	ed93 7b00 	vldr	d7, [r3]
 800723a:	05f8      	lsls	r0, r7, #23
 800723c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007240:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007244:	d516      	bpl.n	8007274 <_dtoa_r+0x34c>
 8007246:	4ba8      	ldr	r3, [pc, #672]	@ (80074e8 <_dtoa_r+0x5c0>)
 8007248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800724c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007250:	f7f9 fafc 	bl	800084c <__aeabi_ddiv>
 8007254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007258:	f004 040f 	and.w	r4, r4, #15
 800725c:	2603      	movs	r6, #3
 800725e:	4da2      	ldr	r5, [pc, #648]	@ (80074e8 <_dtoa_r+0x5c0>)
 8007260:	b954      	cbnz	r4, 8007278 <_dtoa_r+0x350>
 8007262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800726a:	f7f9 faef 	bl	800084c <__aeabi_ddiv>
 800726e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007272:	e028      	b.n	80072c6 <_dtoa_r+0x39e>
 8007274:	2602      	movs	r6, #2
 8007276:	e7f2      	b.n	800725e <_dtoa_r+0x336>
 8007278:	07e1      	lsls	r1, r4, #31
 800727a:	d508      	bpl.n	800728e <_dtoa_r+0x366>
 800727c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007280:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007284:	f7f9 f9b8 	bl	80005f8 <__aeabi_dmul>
 8007288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800728c:	3601      	adds	r6, #1
 800728e:	1064      	asrs	r4, r4, #1
 8007290:	3508      	adds	r5, #8
 8007292:	e7e5      	b.n	8007260 <_dtoa_r+0x338>
 8007294:	f000 80d2 	beq.w	800743c <_dtoa_r+0x514>
 8007298:	427c      	negs	r4, r7
 800729a:	4b92      	ldr	r3, [pc, #584]	@ (80074e4 <_dtoa_r+0x5bc>)
 800729c:	4d92      	ldr	r5, [pc, #584]	@ (80074e8 <_dtoa_r+0x5c0>)
 800729e:	f004 020f 	and.w	r2, r4, #15
 80072a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072ae:	f7f9 f9a3 	bl	80005f8 <__aeabi_dmul>
 80072b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b6:	1124      	asrs	r4, r4, #4
 80072b8:	2300      	movs	r3, #0
 80072ba:	2602      	movs	r6, #2
 80072bc:	2c00      	cmp	r4, #0
 80072be:	f040 80b2 	bne.w	8007426 <_dtoa_r+0x4fe>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1d3      	bne.n	800726e <_dtoa_r+0x346>
 80072c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80b7 	beq.w	8007440 <_dtoa_r+0x518>
 80072d2:	4b86      	ldr	r3, [pc, #536]	@ (80074ec <_dtoa_r+0x5c4>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	4620      	mov	r0, r4
 80072d8:	4629      	mov	r1, r5
 80072da:	f7f9 fbff 	bl	8000adc <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f000 80ae 	beq.w	8007440 <_dtoa_r+0x518>
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80aa 	beq.w	8007440 <_dtoa_r+0x518>
 80072ec:	9b00      	ldr	r3, [sp, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dd37      	ble.n	8007362 <_dtoa_r+0x43a>
 80072f2:	1e7b      	subs	r3, r7, #1
 80072f4:	9304      	str	r3, [sp, #16]
 80072f6:	4620      	mov	r0, r4
 80072f8:	4b7d      	ldr	r3, [pc, #500]	@ (80074f0 <_dtoa_r+0x5c8>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	4629      	mov	r1, r5
 80072fe:	f7f9 f97b 	bl	80005f8 <__aeabi_dmul>
 8007302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007306:	9c00      	ldr	r4, [sp, #0]
 8007308:	3601      	adds	r6, #1
 800730a:	4630      	mov	r0, r6
 800730c:	f7f9 f90a 	bl	8000524 <__aeabi_i2d>
 8007310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007314:	f7f9 f970 	bl	80005f8 <__aeabi_dmul>
 8007318:	4b76      	ldr	r3, [pc, #472]	@ (80074f4 <_dtoa_r+0x5cc>)
 800731a:	2200      	movs	r2, #0
 800731c:	f7f8 ffb6 	bl	800028c <__adddf3>
 8007320:	4605      	mov	r5, r0
 8007322:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007326:	2c00      	cmp	r4, #0
 8007328:	f040 808d 	bne.w	8007446 <_dtoa_r+0x51e>
 800732c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007330:	4b71      	ldr	r3, [pc, #452]	@ (80074f8 <_dtoa_r+0x5d0>)
 8007332:	2200      	movs	r2, #0
 8007334:	f7f8 ffa8 	bl	8000288 <__aeabi_dsub>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007340:	462a      	mov	r2, r5
 8007342:	4633      	mov	r3, r6
 8007344:	f7f9 fbe8 	bl	8000b18 <__aeabi_dcmpgt>
 8007348:	2800      	cmp	r0, #0
 800734a:	f040 828b 	bne.w	8007864 <_dtoa_r+0x93c>
 800734e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007352:	462a      	mov	r2, r5
 8007354:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007358:	f7f9 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800735c:	2800      	cmp	r0, #0
 800735e:	f040 8128 	bne.w	80075b2 <_dtoa_r+0x68a>
 8007362:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007366:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800736a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800736c:	2b00      	cmp	r3, #0
 800736e:	f2c0 815a 	blt.w	8007626 <_dtoa_r+0x6fe>
 8007372:	2f0e      	cmp	r7, #14
 8007374:	f300 8157 	bgt.w	8007626 <_dtoa_r+0x6fe>
 8007378:	4b5a      	ldr	r3, [pc, #360]	@ (80074e4 <_dtoa_r+0x5bc>)
 800737a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800737e:	ed93 7b00 	vldr	d7, [r3]
 8007382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	ed8d 7b00 	vstr	d7, [sp]
 800738a:	da03      	bge.n	8007394 <_dtoa_r+0x46c>
 800738c:	9b07      	ldr	r3, [sp, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f340 8101 	ble.w	8007596 <_dtoa_r+0x66e>
 8007394:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007398:	4656      	mov	r6, sl
 800739a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7f9 fa53 	bl	800084c <__aeabi_ddiv>
 80073a6:	f7f9 fbd7 	bl	8000b58 <__aeabi_d2iz>
 80073aa:	4680      	mov	r8, r0
 80073ac:	f7f9 f8ba 	bl	8000524 <__aeabi_i2d>
 80073b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073b4:	f7f9 f920 	bl	80005f8 <__aeabi_dmul>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4620      	mov	r0, r4
 80073be:	4629      	mov	r1, r5
 80073c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073c4:	f7f8 ff60 	bl	8000288 <__aeabi_dsub>
 80073c8:	f806 4b01 	strb.w	r4, [r6], #1
 80073cc:	9d07      	ldr	r5, [sp, #28]
 80073ce:	eba6 040a 	sub.w	r4, r6, sl
 80073d2:	42a5      	cmp	r5, r4
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	f040 8117 	bne.w	800760a <_dtoa_r+0x6e2>
 80073dc:	f7f8 ff56 	bl	800028c <__adddf3>
 80073e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073e4:	4604      	mov	r4, r0
 80073e6:	460d      	mov	r5, r1
 80073e8:	f7f9 fb96 	bl	8000b18 <__aeabi_dcmpgt>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	f040 80f9 	bne.w	80075e4 <_dtoa_r+0x6bc>
 80073f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f6:	4620      	mov	r0, r4
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7f9 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 80073fe:	b118      	cbz	r0, 8007408 <_dtoa_r+0x4e0>
 8007400:	f018 0f01 	tst.w	r8, #1
 8007404:	f040 80ee 	bne.w	80075e4 <_dtoa_r+0x6bc>
 8007408:	4649      	mov	r1, r9
 800740a:	4658      	mov	r0, fp
 800740c:	f000 fc90 	bl	8007d30 <_Bfree>
 8007410:	2300      	movs	r3, #0
 8007412:	7033      	strb	r3, [r6, #0]
 8007414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007416:	3701      	adds	r7, #1
 8007418:	601f      	str	r7, [r3, #0]
 800741a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 831d 	beq.w	8007a5c <_dtoa_r+0xb34>
 8007422:	601e      	str	r6, [r3, #0]
 8007424:	e31a      	b.n	8007a5c <_dtoa_r+0xb34>
 8007426:	07e2      	lsls	r2, r4, #31
 8007428:	d505      	bpl.n	8007436 <_dtoa_r+0x50e>
 800742a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800742e:	f7f9 f8e3 	bl	80005f8 <__aeabi_dmul>
 8007432:	3601      	adds	r6, #1
 8007434:	2301      	movs	r3, #1
 8007436:	1064      	asrs	r4, r4, #1
 8007438:	3508      	adds	r5, #8
 800743a:	e73f      	b.n	80072bc <_dtoa_r+0x394>
 800743c:	2602      	movs	r6, #2
 800743e:	e742      	b.n	80072c6 <_dtoa_r+0x39e>
 8007440:	9c07      	ldr	r4, [sp, #28]
 8007442:	9704      	str	r7, [sp, #16]
 8007444:	e761      	b.n	800730a <_dtoa_r+0x3e2>
 8007446:	4b27      	ldr	r3, [pc, #156]	@ (80074e4 <_dtoa_r+0x5bc>)
 8007448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800744a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800744e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007452:	4454      	add	r4, sl
 8007454:	2900      	cmp	r1, #0
 8007456:	d053      	beq.n	8007500 <_dtoa_r+0x5d8>
 8007458:	4928      	ldr	r1, [pc, #160]	@ (80074fc <_dtoa_r+0x5d4>)
 800745a:	2000      	movs	r0, #0
 800745c:	f7f9 f9f6 	bl	800084c <__aeabi_ddiv>
 8007460:	4633      	mov	r3, r6
 8007462:	462a      	mov	r2, r5
 8007464:	f7f8 ff10 	bl	8000288 <__aeabi_dsub>
 8007468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800746c:	4656      	mov	r6, sl
 800746e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007472:	f7f9 fb71 	bl	8000b58 <__aeabi_d2iz>
 8007476:	4605      	mov	r5, r0
 8007478:	f7f9 f854 	bl	8000524 <__aeabi_i2d>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007484:	f7f8 ff00 	bl	8000288 <__aeabi_dsub>
 8007488:	3530      	adds	r5, #48	@ 0x30
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007492:	f806 5b01 	strb.w	r5, [r6], #1
 8007496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800749a:	f7f9 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d171      	bne.n	8007586 <_dtoa_r+0x65e>
 80074a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074a6:	4911      	ldr	r1, [pc, #68]	@ (80074ec <_dtoa_r+0x5c4>)
 80074a8:	2000      	movs	r0, #0
 80074aa:	f7f8 feed 	bl	8000288 <__aeabi_dsub>
 80074ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074b2:	f7f9 fb13 	bl	8000adc <__aeabi_dcmplt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f040 8095 	bne.w	80075e6 <_dtoa_r+0x6be>
 80074bc:	42a6      	cmp	r6, r4
 80074be:	f43f af50 	beq.w	8007362 <_dtoa_r+0x43a>
 80074c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074c6:	4b0a      	ldr	r3, [pc, #40]	@ (80074f0 <_dtoa_r+0x5c8>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	f7f9 f895 	bl	80005f8 <__aeabi_dmul>
 80074ce:	4b08      	ldr	r3, [pc, #32]	@ (80074f0 <_dtoa_r+0x5c8>)
 80074d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074d4:	2200      	movs	r2, #0
 80074d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074da:	f7f9 f88d 	bl	80005f8 <__aeabi_dmul>
 80074de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e2:	e7c4      	b.n	800746e <_dtoa_r+0x546>
 80074e4:	08008d40 	.word	0x08008d40
 80074e8:	08008d18 	.word	0x08008d18
 80074ec:	3ff00000 	.word	0x3ff00000
 80074f0:	40240000 	.word	0x40240000
 80074f4:	401c0000 	.word	0x401c0000
 80074f8:	40140000 	.word	0x40140000
 80074fc:	3fe00000 	.word	0x3fe00000
 8007500:	4631      	mov	r1, r6
 8007502:	4628      	mov	r0, r5
 8007504:	f7f9 f878 	bl	80005f8 <__aeabi_dmul>
 8007508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800750c:	9415      	str	r4, [sp, #84]	@ 0x54
 800750e:	4656      	mov	r6, sl
 8007510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007514:	f7f9 fb20 	bl	8000b58 <__aeabi_d2iz>
 8007518:	4605      	mov	r5, r0
 800751a:	f7f9 f803 	bl	8000524 <__aeabi_i2d>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007526:	f7f8 feaf 	bl	8000288 <__aeabi_dsub>
 800752a:	3530      	adds	r5, #48	@ 0x30
 800752c:	f806 5b01 	strb.w	r5, [r6], #1
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	42a6      	cmp	r6, r4
 8007536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	d124      	bne.n	800758a <_dtoa_r+0x662>
 8007540:	4bac      	ldr	r3, [pc, #688]	@ (80077f4 <_dtoa_r+0x8cc>)
 8007542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007546:	f7f8 fea1 	bl	800028c <__adddf3>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007552:	f7f9 fae1 	bl	8000b18 <__aeabi_dcmpgt>
 8007556:	2800      	cmp	r0, #0
 8007558:	d145      	bne.n	80075e6 <_dtoa_r+0x6be>
 800755a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800755e:	49a5      	ldr	r1, [pc, #660]	@ (80077f4 <_dtoa_r+0x8cc>)
 8007560:	2000      	movs	r0, #0
 8007562:	f7f8 fe91 	bl	8000288 <__aeabi_dsub>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800756e:	f7f9 fab5 	bl	8000adc <__aeabi_dcmplt>
 8007572:	2800      	cmp	r0, #0
 8007574:	f43f aef5 	beq.w	8007362 <_dtoa_r+0x43a>
 8007578:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800757a:	1e73      	subs	r3, r6, #1
 800757c:	9315      	str	r3, [sp, #84]	@ 0x54
 800757e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007582:	2b30      	cmp	r3, #48	@ 0x30
 8007584:	d0f8      	beq.n	8007578 <_dtoa_r+0x650>
 8007586:	9f04      	ldr	r7, [sp, #16]
 8007588:	e73e      	b.n	8007408 <_dtoa_r+0x4e0>
 800758a:	4b9b      	ldr	r3, [pc, #620]	@ (80077f8 <_dtoa_r+0x8d0>)
 800758c:	f7f9 f834 	bl	80005f8 <__aeabi_dmul>
 8007590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007594:	e7bc      	b.n	8007510 <_dtoa_r+0x5e8>
 8007596:	d10c      	bne.n	80075b2 <_dtoa_r+0x68a>
 8007598:	4b98      	ldr	r3, [pc, #608]	@ (80077fc <_dtoa_r+0x8d4>)
 800759a:	2200      	movs	r2, #0
 800759c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075a0:	f7f9 f82a 	bl	80005f8 <__aeabi_dmul>
 80075a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a8:	f7f9 faac 	bl	8000b04 <__aeabi_dcmpge>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f000 8157 	beq.w	8007860 <_dtoa_r+0x938>
 80075b2:	2400      	movs	r4, #0
 80075b4:	4625      	mov	r5, r4
 80075b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075b8:	43db      	mvns	r3, r3
 80075ba:	9304      	str	r3, [sp, #16]
 80075bc:	4656      	mov	r6, sl
 80075be:	2700      	movs	r7, #0
 80075c0:	4621      	mov	r1, r4
 80075c2:	4658      	mov	r0, fp
 80075c4:	f000 fbb4 	bl	8007d30 <_Bfree>
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	d0dc      	beq.n	8007586 <_dtoa_r+0x65e>
 80075cc:	b12f      	cbz	r7, 80075da <_dtoa_r+0x6b2>
 80075ce:	42af      	cmp	r7, r5
 80075d0:	d003      	beq.n	80075da <_dtoa_r+0x6b2>
 80075d2:	4639      	mov	r1, r7
 80075d4:	4658      	mov	r0, fp
 80075d6:	f000 fbab 	bl	8007d30 <_Bfree>
 80075da:	4629      	mov	r1, r5
 80075dc:	4658      	mov	r0, fp
 80075de:	f000 fba7 	bl	8007d30 <_Bfree>
 80075e2:	e7d0      	b.n	8007586 <_dtoa_r+0x65e>
 80075e4:	9704      	str	r7, [sp, #16]
 80075e6:	4633      	mov	r3, r6
 80075e8:	461e      	mov	r6, r3
 80075ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075ee:	2a39      	cmp	r2, #57	@ 0x39
 80075f0:	d107      	bne.n	8007602 <_dtoa_r+0x6da>
 80075f2:	459a      	cmp	sl, r3
 80075f4:	d1f8      	bne.n	80075e8 <_dtoa_r+0x6c0>
 80075f6:	9a04      	ldr	r2, [sp, #16]
 80075f8:	3201      	adds	r2, #1
 80075fa:	9204      	str	r2, [sp, #16]
 80075fc:	2230      	movs	r2, #48	@ 0x30
 80075fe:	f88a 2000 	strb.w	r2, [sl]
 8007602:	781a      	ldrb	r2, [r3, #0]
 8007604:	3201      	adds	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	e7bd      	b.n	8007586 <_dtoa_r+0x65e>
 800760a:	4b7b      	ldr	r3, [pc, #492]	@ (80077f8 <_dtoa_r+0x8d0>)
 800760c:	2200      	movs	r2, #0
 800760e:	f7f8 fff3 	bl	80005f8 <__aeabi_dmul>
 8007612:	2200      	movs	r2, #0
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	460d      	mov	r5, r1
 800761a:	f7f9 fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f aebb 	beq.w	800739a <_dtoa_r+0x472>
 8007624:	e6f0      	b.n	8007408 <_dtoa_r+0x4e0>
 8007626:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007628:	2a00      	cmp	r2, #0
 800762a:	f000 80db 	beq.w	80077e4 <_dtoa_r+0x8bc>
 800762e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007630:	2a01      	cmp	r2, #1
 8007632:	f300 80bf 	bgt.w	80077b4 <_dtoa_r+0x88c>
 8007636:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007638:	2a00      	cmp	r2, #0
 800763a:	f000 80b7 	beq.w	80077ac <_dtoa_r+0x884>
 800763e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007642:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007644:	4646      	mov	r6, r8
 8007646:	9a08      	ldr	r2, [sp, #32]
 8007648:	2101      	movs	r1, #1
 800764a:	441a      	add	r2, r3
 800764c:	4658      	mov	r0, fp
 800764e:	4498      	add	r8, r3
 8007650:	9208      	str	r2, [sp, #32]
 8007652:	f000 fc21 	bl	8007e98 <__i2b>
 8007656:	4605      	mov	r5, r0
 8007658:	b15e      	cbz	r6, 8007672 <_dtoa_r+0x74a>
 800765a:	9b08      	ldr	r3, [sp, #32]
 800765c:	2b00      	cmp	r3, #0
 800765e:	dd08      	ble.n	8007672 <_dtoa_r+0x74a>
 8007660:	42b3      	cmp	r3, r6
 8007662:	9a08      	ldr	r2, [sp, #32]
 8007664:	bfa8      	it	ge
 8007666:	4633      	movge	r3, r6
 8007668:	eba8 0803 	sub.w	r8, r8, r3
 800766c:	1af6      	subs	r6, r6, r3
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	9308      	str	r3, [sp, #32]
 8007672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007674:	b1f3      	cbz	r3, 80076b4 <_dtoa_r+0x78c>
 8007676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80b7 	beq.w	80077ec <_dtoa_r+0x8c4>
 800767e:	b18c      	cbz	r4, 80076a4 <_dtoa_r+0x77c>
 8007680:	4629      	mov	r1, r5
 8007682:	4622      	mov	r2, r4
 8007684:	4658      	mov	r0, fp
 8007686:	f000 fcc7 	bl	8008018 <__pow5mult>
 800768a:	464a      	mov	r2, r9
 800768c:	4601      	mov	r1, r0
 800768e:	4605      	mov	r5, r0
 8007690:	4658      	mov	r0, fp
 8007692:	f000 fc17 	bl	8007ec4 <__multiply>
 8007696:	4649      	mov	r1, r9
 8007698:	9004      	str	r0, [sp, #16]
 800769a:	4658      	mov	r0, fp
 800769c:	f000 fb48 	bl	8007d30 <_Bfree>
 80076a0:	9b04      	ldr	r3, [sp, #16]
 80076a2:	4699      	mov	r9, r3
 80076a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a6:	1b1a      	subs	r2, r3, r4
 80076a8:	d004      	beq.n	80076b4 <_dtoa_r+0x78c>
 80076aa:	4649      	mov	r1, r9
 80076ac:	4658      	mov	r0, fp
 80076ae:	f000 fcb3 	bl	8008018 <__pow5mult>
 80076b2:	4681      	mov	r9, r0
 80076b4:	2101      	movs	r1, #1
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 fbee 	bl	8007e98 <__i2b>
 80076bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076be:	4604      	mov	r4, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 81cf 	beq.w	8007a64 <_dtoa_r+0xb3c>
 80076c6:	461a      	mov	r2, r3
 80076c8:	4601      	mov	r1, r0
 80076ca:	4658      	mov	r0, fp
 80076cc:	f000 fca4 	bl	8008018 <__pow5mult>
 80076d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	4604      	mov	r4, r0
 80076d6:	f300 8095 	bgt.w	8007804 <_dtoa_r+0x8dc>
 80076da:	9b02      	ldr	r3, [sp, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8087 	bne.w	80077f0 <_dtoa_r+0x8c8>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 8089 	bne.w	8007800 <_dtoa_r+0x8d8>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076f4:	0d1b      	lsrs	r3, r3, #20
 80076f6:	051b      	lsls	r3, r3, #20
 80076f8:	b12b      	cbz	r3, 8007706 <_dtoa_r+0x7de>
 80076fa:	9b08      	ldr	r3, [sp, #32]
 80076fc:	3301      	adds	r3, #1
 80076fe:	9308      	str	r3, [sp, #32]
 8007700:	f108 0801 	add.w	r8, r8, #1
 8007704:	2301      	movs	r3, #1
 8007706:	930a      	str	r3, [sp, #40]	@ 0x28
 8007708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 81b0 	beq.w	8007a70 <_dtoa_r+0xb48>
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007716:	6918      	ldr	r0, [r3, #16]
 8007718:	f000 fb72 	bl	8007e00 <__hi0bits>
 800771c:	f1c0 0020 	rsb	r0, r0, #32
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	4418      	add	r0, r3
 8007724:	f010 001f 	ands.w	r0, r0, #31
 8007728:	d077      	beq.n	800781a <_dtoa_r+0x8f2>
 800772a:	f1c0 0320 	rsb	r3, r0, #32
 800772e:	2b04      	cmp	r3, #4
 8007730:	dd6b      	ble.n	800780a <_dtoa_r+0x8e2>
 8007732:	9b08      	ldr	r3, [sp, #32]
 8007734:	f1c0 001c 	rsb	r0, r0, #28
 8007738:	4403      	add	r3, r0
 800773a:	4480      	add	r8, r0
 800773c:	4406      	add	r6, r0
 800773e:	9308      	str	r3, [sp, #32]
 8007740:	f1b8 0f00 	cmp.w	r8, #0
 8007744:	dd05      	ble.n	8007752 <_dtoa_r+0x82a>
 8007746:	4649      	mov	r1, r9
 8007748:	4642      	mov	r2, r8
 800774a:	4658      	mov	r0, fp
 800774c:	f000 fcbe 	bl	80080cc <__lshift>
 8007750:	4681      	mov	r9, r0
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	2b00      	cmp	r3, #0
 8007756:	dd05      	ble.n	8007764 <_dtoa_r+0x83c>
 8007758:	4621      	mov	r1, r4
 800775a:	461a      	mov	r2, r3
 800775c:	4658      	mov	r0, fp
 800775e:	f000 fcb5 	bl	80080cc <__lshift>
 8007762:	4604      	mov	r4, r0
 8007764:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007766:	2b00      	cmp	r3, #0
 8007768:	d059      	beq.n	800781e <_dtoa_r+0x8f6>
 800776a:	4621      	mov	r1, r4
 800776c:	4648      	mov	r0, r9
 800776e:	f000 fd19 	bl	80081a4 <__mcmp>
 8007772:	2800      	cmp	r0, #0
 8007774:	da53      	bge.n	800781e <_dtoa_r+0x8f6>
 8007776:	1e7b      	subs	r3, r7, #1
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	4649      	mov	r1, r9
 800777c:	2300      	movs	r3, #0
 800777e:	220a      	movs	r2, #10
 8007780:	4658      	mov	r0, fp
 8007782:	f000 faf7 	bl	8007d74 <__multadd>
 8007786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007788:	4681      	mov	r9, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8172 	beq.w	8007a74 <_dtoa_r+0xb4c>
 8007790:	2300      	movs	r3, #0
 8007792:	4629      	mov	r1, r5
 8007794:	220a      	movs	r2, #10
 8007796:	4658      	mov	r0, fp
 8007798:	f000 faec 	bl	8007d74 <__multadd>
 800779c:	9b00      	ldr	r3, [sp, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	4605      	mov	r5, r0
 80077a2:	dc67      	bgt.n	8007874 <_dtoa_r+0x94c>
 80077a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	dc41      	bgt.n	800782e <_dtoa_r+0x906>
 80077aa:	e063      	b.n	8007874 <_dtoa_r+0x94c>
 80077ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077b2:	e746      	b.n	8007642 <_dtoa_r+0x71a>
 80077b4:	9b07      	ldr	r3, [sp, #28]
 80077b6:	1e5c      	subs	r4, r3, #1
 80077b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	bfbf      	itttt	lt
 80077be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80077c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80077c4:	1ae3      	sublt	r3, r4, r3
 80077c6:	bfb4      	ite	lt
 80077c8:	18d2      	addlt	r2, r2, r3
 80077ca:	1b1c      	subge	r4, r3, r4
 80077cc:	9b07      	ldr	r3, [sp, #28]
 80077ce:	bfbc      	itt	lt
 80077d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80077d2:	2400      	movlt	r4, #0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bfb5      	itete	lt
 80077d8:	eba8 0603 	sublt.w	r6, r8, r3
 80077dc:	9b07      	ldrge	r3, [sp, #28]
 80077de:	2300      	movlt	r3, #0
 80077e0:	4646      	movge	r6, r8
 80077e2:	e730      	b.n	8007646 <_dtoa_r+0x71e>
 80077e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80077e8:	4646      	mov	r6, r8
 80077ea:	e735      	b.n	8007658 <_dtoa_r+0x730>
 80077ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077ee:	e75c      	b.n	80076aa <_dtoa_r+0x782>
 80077f0:	2300      	movs	r3, #0
 80077f2:	e788      	b.n	8007706 <_dtoa_r+0x7de>
 80077f4:	3fe00000 	.word	0x3fe00000
 80077f8:	40240000 	.word	0x40240000
 80077fc:	40140000 	.word	0x40140000
 8007800:	9b02      	ldr	r3, [sp, #8]
 8007802:	e780      	b.n	8007706 <_dtoa_r+0x7de>
 8007804:	2300      	movs	r3, #0
 8007806:	930a      	str	r3, [sp, #40]	@ 0x28
 8007808:	e782      	b.n	8007710 <_dtoa_r+0x7e8>
 800780a:	d099      	beq.n	8007740 <_dtoa_r+0x818>
 800780c:	9a08      	ldr	r2, [sp, #32]
 800780e:	331c      	adds	r3, #28
 8007810:	441a      	add	r2, r3
 8007812:	4498      	add	r8, r3
 8007814:	441e      	add	r6, r3
 8007816:	9208      	str	r2, [sp, #32]
 8007818:	e792      	b.n	8007740 <_dtoa_r+0x818>
 800781a:	4603      	mov	r3, r0
 800781c:	e7f6      	b.n	800780c <_dtoa_r+0x8e4>
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	9704      	str	r7, [sp, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	dc20      	bgt.n	8007868 <_dtoa_r+0x940>
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800782a:	2b02      	cmp	r3, #2
 800782c:	dd1e      	ble.n	800786c <_dtoa_r+0x944>
 800782e:	9b00      	ldr	r3, [sp, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f47f aec0 	bne.w	80075b6 <_dtoa_r+0x68e>
 8007836:	4621      	mov	r1, r4
 8007838:	2205      	movs	r2, #5
 800783a:	4658      	mov	r0, fp
 800783c:	f000 fa9a 	bl	8007d74 <__multadd>
 8007840:	4601      	mov	r1, r0
 8007842:	4604      	mov	r4, r0
 8007844:	4648      	mov	r0, r9
 8007846:	f000 fcad 	bl	80081a4 <__mcmp>
 800784a:	2800      	cmp	r0, #0
 800784c:	f77f aeb3 	ble.w	80075b6 <_dtoa_r+0x68e>
 8007850:	4656      	mov	r6, sl
 8007852:	2331      	movs	r3, #49	@ 0x31
 8007854:	f806 3b01 	strb.w	r3, [r6], #1
 8007858:	9b04      	ldr	r3, [sp, #16]
 800785a:	3301      	adds	r3, #1
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	e6ae      	b.n	80075be <_dtoa_r+0x696>
 8007860:	9c07      	ldr	r4, [sp, #28]
 8007862:	9704      	str	r7, [sp, #16]
 8007864:	4625      	mov	r5, r4
 8007866:	e7f3      	b.n	8007850 <_dtoa_r+0x928>
 8007868:	9b07      	ldr	r3, [sp, #28]
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 8104 	beq.w	8007a7c <_dtoa_r+0xb54>
 8007874:	2e00      	cmp	r6, #0
 8007876:	dd05      	ble.n	8007884 <_dtoa_r+0x95c>
 8007878:	4629      	mov	r1, r5
 800787a:	4632      	mov	r2, r6
 800787c:	4658      	mov	r0, fp
 800787e:	f000 fc25 	bl	80080cc <__lshift>
 8007882:	4605      	mov	r5, r0
 8007884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d05a      	beq.n	8007940 <_dtoa_r+0xa18>
 800788a:	6869      	ldr	r1, [r5, #4]
 800788c:	4658      	mov	r0, fp
 800788e:	f000 fa0f 	bl	8007cb0 <_Balloc>
 8007892:	4606      	mov	r6, r0
 8007894:	b928      	cbnz	r0, 80078a2 <_dtoa_r+0x97a>
 8007896:	4b84      	ldr	r3, [pc, #528]	@ (8007aa8 <_dtoa_r+0xb80>)
 8007898:	4602      	mov	r2, r0
 800789a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800789e:	f7ff bb5a 	b.w	8006f56 <_dtoa_r+0x2e>
 80078a2:	692a      	ldr	r2, [r5, #16]
 80078a4:	3202      	adds	r2, #2
 80078a6:	0092      	lsls	r2, r2, #2
 80078a8:	f105 010c 	add.w	r1, r5, #12
 80078ac:	300c      	adds	r0, #12
 80078ae:	f001 f813 	bl	80088d8 <memcpy>
 80078b2:	2201      	movs	r2, #1
 80078b4:	4631      	mov	r1, r6
 80078b6:	4658      	mov	r0, fp
 80078b8:	f000 fc08 	bl	80080cc <__lshift>
 80078bc:	f10a 0301 	add.w	r3, sl, #1
 80078c0:	9307      	str	r3, [sp, #28]
 80078c2:	9b00      	ldr	r3, [sp, #0]
 80078c4:	4453      	add	r3, sl
 80078c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	462f      	mov	r7, r5
 80078d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d2:	4605      	mov	r5, r0
 80078d4:	9b07      	ldr	r3, [sp, #28]
 80078d6:	4621      	mov	r1, r4
 80078d8:	3b01      	subs	r3, #1
 80078da:	4648      	mov	r0, r9
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	f7ff fa98 	bl	8006e12 <quorem>
 80078e2:	4639      	mov	r1, r7
 80078e4:	9002      	str	r0, [sp, #8]
 80078e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078ea:	4648      	mov	r0, r9
 80078ec:	f000 fc5a 	bl	80081a4 <__mcmp>
 80078f0:	462a      	mov	r2, r5
 80078f2:	9008      	str	r0, [sp, #32]
 80078f4:	4621      	mov	r1, r4
 80078f6:	4658      	mov	r0, fp
 80078f8:	f000 fc70 	bl	80081dc <__mdiff>
 80078fc:	68c2      	ldr	r2, [r0, #12]
 80078fe:	4606      	mov	r6, r0
 8007900:	bb02      	cbnz	r2, 8007944 <_dtoa_r+0xa1c>
 8007902:	4601      	mov	r1, r0
 8007904:	4648      	mov	r0, r9
 8007906:	f000 fc4d 	bl	80081a4 <__mcmp>
 800790a:	4602      	mov	r2, r0
 800790c:	4631      	mov	r1, r6
 800790e:	4658      	mov	r0, fp
 8007910:	920e      	str	r2, [sp, #56]	@ 0x38
 8007912:	f000 fa0d 	bl	8007d30 <_Bfree>
 8007916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007918:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800791a:	9e07      	ldr	r6, [sp, #28]
 800791c:	ea43 0102 	orr.w	r1, r3, r2
 8007920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007922:	4319      	orrs	r1, r3
 8007924:	d110      	bne.n	8007948 <_dtoa_r+0xa20>
 8007926:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800792a:	d029      	beq.n	8007980 <_dtoa_r+0xa58>
 800792c:	9b08      	ldr	r3, [sp, #32]
 800792e:	2b00      	cmp	r3, #0
 8007930:	dd02      	ble.n	8007938 <_dtoa_r+0xa10>
 8007932:	9b02      	ldr	r3, [sp, #8]
 8007934:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007938:	9b00      	ldr	r3, [sp, #0]
 800793a:	f883 8000 	strb.w	r8, [r3]
 800793e:	e63f      	b.n	80075c0 <_dtoa_r+0x698>
 8007940:	4628      	mov	r0, r5
 8007942:	e7bb      	b.n	80078bc <_dtoa_r+0x994>
 8007944:	2201      	movs	r2, #1
 8007946:	e7e1      	b.n	800790c <_dtoa_r+0x9e4>
 8007948:	9b08      	ldr	r3, [sp, #32]
 800794a:	2b00      	cmp	r3, #0
 800794c:	db04      	blt.n	8007958 <_dtoa_r+0xa30>
 800794e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007950:	430b      	orrs	r3, r1
 8007952:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007954:	430b      	orrs	r3, r1
 8007956:	d120      	bne.n	800799a <_dtoa_r+0xa72>
 8007958:	2a00      	cmp	r2, #0
 800795a:	dded      	ble.n	8007938 <_dtoa_r+0xa10>
 800795c:	4649      	mov	r1, r9
 800795e:	2201      	movs	r2, #1
 8007960:	4658      	mov	r0, fp
 8007962:	f000 fbb3 	bl	80080cc <__lshift>
 8007966:	4621      	mov	r1, r4
 8007968:	4681      	mov	r9, r0
 800796a:	f000 fc1b 	bl	80081a4 <__mcmp>
 800796e:	2800      	cmp	r0, #0
 8007970:	dc03      	bgt.n	800797a <_dtoa_r+0xa52>
 8007972:	d1e1      	bne.n	8007938 <_dtoa_r+0xa10>
 8007974:	f018 0f01 	tst.w	r8, #1
 8007978:	d0de      	beq.n	8007938 <_dtoa_r+0xa10>
 800797a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800797e:	d1d8      	bne.n	8007932 <_dtoa_r+0xa0a>
 8007980:	9a00      	ldr	r2, [sp, #0]
 8007982:	2339      	movs	r3, #57	@ 0x39
 8007984:	7013      	strb	r3, [r2, #0]
 8007986:	4633      	mov	r3, r6
 8007988:	461e      	mov	r6, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007990:	2a39      	cmp	r2, #57	@ 0x39
 8007992:	d052      	beq.n	8007a3a <_dtoa_r+0xb12>
 8007994:	3201      	adds	r2, #1
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e612      	b.n	80075c0 <_dtoa_r+0x698>
 800799a:	2a00      	cmp	r2, #0
 800799c:	dd07      	ble.n	80079ae <_dtoa_r+0xa86>
 800799e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079a2:	d0ed      	beq.n	8007980 <_dtoa_r+0xa58>
 80079a4:	9a00      	ldr	r2, [sp, #0]
 80079a6:	f108 0301 	add.w	r3, r8, #1
 80079aa:	7013      	strb	r3, [r2, #0]
 80079ac:	e608      	b.n	80075c0 <_dtoa_r+0x698>
 80079ae:	9b07      	ldr	r3, [sp, #28]
 80079b0:	9a07      	ldr	r2, [sp, #28]
 80079b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80079b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d028      	beq.n	8007a0e <_dtoa_r+0xae6>
 80079bc:	4649      	mov	r1, r9
 80079be:	2300      	movs	r3, #0
 80079c0:	220a      	movs	r2, #10
 80079c2:	4658      	mov	r0, fp
 80079c4:	f000 f9d6 	bl	8007d74 <__multadd>
 80079c8:	42af      	cmp	r7, r5
 80079ca:	4681      	mov	r9, r0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	f04f 020a 	mov.w	r2, #10
 80079d4:	4639      	mov	r1, r7
 80079d6:	4658      	mov	r0, fp
 80079d8:	d107      	bne.n	80079ea <_dtoa_r+0xac2>
 80079da:	f000 f9cb 	bl	8007d74 <__multadd>
 80079de:	4607      	mov	r7, r0
 80079e0:	4605      	mov	r5, r0
 80079e2:	9b07      	ldr	r3, [sp, #28]
 80079e4:	3301      	adds	r3, #1
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	e774      	b.n	80078d4 <_dtoa_r+0x9ac>
 80079ea:	f000 f9c3 	bl	8007d74 <__multadd>
 80079ee:	4629      	mov	r1, r5
 80079f0:	4607      	mov	r7, r0
 80079f2:	2300      	movs	r3, #0
 80079f4:	220a      	movs	r2, #10
 80079f6:	4658      	mov	r0, fp
 80079f8:	f000 f9bc 	bl	8007d74 <__multadd>
 80079fc:	4605      	mov	r5, r0
 80079fe:	e7f0      	b.n	80079e2 <_dtoa_r+0xaba>
 8007a00:	9b00      	ldr	r3, [sp, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfcc      	ite	gt
 8007a06:	461e      	movgt	r6, r3
 8007a08:	2601      	movle	r6, #1
 8007a0a:	4456      	add	r6, sl
 8007a0c:	2700      	movs	r7, #0
 8007a0e:	4649      	mov	r1, r9
 8007a10:	2201      	movs	r2, #1
 8007a12:	4658      	mov	r0, fp
 8007a14:	f000 fb5a 	bl	80080cc <__lshift>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	4681      	mov	r9, r0
 8007a1c:	f000 fbc2 	bl	80081a4 <__mcmp>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	dcb0      	bgt.n	8007986 <_dtoa_r+0xa5e>
 8007a24:	d102      	bne.n	8007a2c <_dtoa_r+0xb04>
 8007a26:	f018 0f01 	tst.w	r8, #1
 8007a2a:	d1ac      	bne.n	8007986 <_dtoa_r+0xa5e>
 8007a2c:	4633      	mov	r3, r6
 8007a2e:	461e      	mov	r6, r3
 8007a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a34:	2a30      	cmp	r2, #48	@ 0x30
 8007a36:	d0fa      	beq.n	8007a2e <_dtoa_r+0xb06>
 8007a38:	e5c2      	b.n	80075c0 <_dtoa_r+0x698>
 8007a3a:	459a      	cmp	sl, r3
 8007a3c:	d1a4      	bne.n	8007988 <_dtoa_r+0xa60>
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	3301      	adds	r3, #1
 8007a42:	9304      	str	r3, [sp, #16]
 8007a44:	2331      	movs	r3, #49	@ 0x31
 8007a46:	f88a 3000 	strb.w	r3, [sl]
 8007a4a:	e5b9      	b.n	80075c0 <_dtoa_r+0x698>
 8007a4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007aac <_dtoa_r+0xb84>
 8007a52:	b11b      	cbz	r3, 8007a5c <_dtoa_r+0xb34>
 8007a54:	f10a 0308 	add.w	r3, sl, #8
 8007a58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	4650      	mov	r0, sl
 8007a5e:	b019      	add	sp, #100	@ 0x64
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	f77f ae37 	ble.w	80076da <_dtoa_r+0x7b2>
 8007a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a70:	2001      	movs	r0, #1
 8007a72:	e655      	b.n	8007720 <_dtoa_r+0x7f8>
 8007a74:	9b00      	ldr	r3, [sp, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f77f aed6 	ble.w	8007828 <_dtoa_r+0x900>
 8007a7c:	4656      	mov	r6, sl
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4648      	mov	r0, r9
 8007a82:	f7ff f9c6 	bl	8006e12 <quorem>
 8007a86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a8a:	f806 8b01 	strb.w	r8, [r6], #1
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	eba6 020a 	sub.w	r2, r6, sl
 8007a94:	4293      	cmp	r3, r2
 8007a96:	ddb3      	ble.n	8007a00 <_dtoa_r+0xad8>
 8007a98:	4649      	mov	r1, r9
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	4658      	mov	r0, fp
 8007aa0:	f000 f968 	bl	8007d74 <__multadd>
 8007aa4:	4681      	mov	r9, r0
 8007aa6:	e7ea      	b.n	8007a7e <_dtoa_r+0xb56>
 8007aa8:	08008ca0 	.word	0x08008ca0
 8007aac:	08008c24 	.word	0x08008c24

08007ab0 <_free_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	d041      	beq.n	8007b3c <_free_r+0x8c>
 8007ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007abc:	1f0c      	subs	r4, r1, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bfb8      	it	lt
 8007ac2:	18e4      	addlt	r4, r4, r3
 8007ac4:	f000 f8e8 	bl	8007c98 <__malloc_lock>
 8007ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b40 <_free_r+0x90>)
 8007aca:	6813      	ldr	r3, [r2, #0]
 8007acc:	b933      	cbnz	r3, 8007adc <_free_r+0x2c>
 8007ace:	6063      	str	r3, [r4, #4]
 8007ad0:	6014      	str	r4, [r2, #0]
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ad8:	f000 b8e4 	b.w	8007ca4 <__malloc_unlock>
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d908      	bls.n	8007af2 <_free_r+0x42>
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	1821      	adds	r1, r4, r0
 8007ae4:	428b      	cmp	r3, r1
 8007ae6:	bf01      	itttt	eq
 8007ae8:	6819      	ldreq	r1, [r3, #0]
 8007aea:	685b      	ldreq	r3, [r3, #4]
 8007aec:	1809      	addeq	r1, r1, r0
 8007aee:	6021      	streq	r1, [r4, #0]
 8007af0:	e7ed      	b.n	8007ace <_free_r+0x1e>
 8007af2:	461a      	mov	r2, r3
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b10b      	cbz	r3, 8007afc <_free_r+0x4c>
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d9fa      	bls.n	8007af2 <_free_r+0x42>
 8007afc:	6811      	ldr	r1, [r2, #0]
 8007afe:	1850      	adds	r0, r2, r1
 8007b00:	42a0      	cmp	r0, r4
 8007b02:	d10b      	bne.n	8007b1c <_free_r+0x6c>
 8007b04:	6820      	ldr	r0, [r4, #0]
 8007b06:	4401      	add	r1, r0
 8007b08:	1850      	adds	r0, r2, r1
 8007b0a:	4283      	cmp	r3, r0
 8007b0c:	6011      	str	r1, [r2, #0]
 8007b0e:	d1e0      	bne.n	8007ad2 <_free_r+0x22>
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	6053      	str	r3, [r2, #4]
 8007b16:	4408      	add	r0, r1
 8007b18:	6010      	str	r0, [r2, #0]
 8007b1a:	e7da      	b.n	8007ad2 <_free_r+0x22>
 8007b1c:	d902      	bls.n	8007b24 <_free_r+0x74>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	602b      	str	r3, [r5, #0]
 8007b22:	e7d6      	b.n	8007ad2 <_free_r+0x22>
 8007b24:	6820      	ldr	r0, [r4, #0]
 8007b26:	1821      	adds	r1, r4, r0
 8007b28:	428b      	cmp	r3, r1
 8007b2a:	bf04      	itt	eq
 8007b2c:	6819      	ldreq	r1, [r3, #0]
 8007b2e:	685b      	ldreq	r3, [r3, #4]
 8007b30:	6063      	str	r3, [r4, #4]
 8007b32:	bf04      	itt	eq
 8007b34:	1809      	addeq	r1, r1, r0
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	6054      	str	r4, [r2, #4]
 8007b3a:	e7ca      	b.n	8007ad2 <_free_r+0x22>
 8007b3c:	bd38      	pop	{r3, r4, r5, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000570 	.word	0x20000570

08007b44 <malloc>:
 8007b44:	4b02      	ldr	r3, [pc, #8]	@ (8007b50 <malloc+0xc>)
 8007b46:	4601      	mov	r1, r0
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	f000 b825 	b.w	8007b98 <_malloc_r>
 8007b4e:	bf00      	nop
 8007b50:	20000028 	.word	0x20000028

08007b54 <sbrk_aligned>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	4e0f      	ldr	r6, [pc, #60]	@ (8007b94 <sbrk_aligned+0x40>)
 8007b58:	460c      	mov	r4, r1
 8007b5a:	6831      	ldr	r1, [r6, #0]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	b911      	cbnz	r1, 8007b66 <sbrk_aligned+0x12>
 8007b60:	f000 feaa 	bl	80088b8 <_sbrk_r>
 8007b64:	6030      	str	r0, [r6, #0]
 8007b66:	4621      	mov	r1, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f000 fea5 	bl	80088b8 <_sbrk_r>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d103      	bne.n	8007b7a <sbrk_aligned+0x26>
 8007b72:	f04f 34ff 	mov.w	r4, #4294967295
 8007b76:	4620      	mov	r0, r4
 8007b78:	bd70      	pop	{r4, r5, r6, pc}
 8007b7a:	1cc4      	adds	r4, r0, #3
 8007b7c:	f024 0403 	bic.w	r4, r4, #3
 8007b80:	42a0      	cmp	r0, r4
 8007b82:	d0f8      	beq.n	8007b76 <sbrk_aligned+0x22>
 8007b84:	1a21      	subs	r1, r4, r0
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 fe96 	bl	80088b8 <_sbrk_r>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d1f2      	bne.n	8007b76 <sbrk_aligned+0x22>
 8007b90:	e7ef      	b.n	8007b72 <sbrk_aligned+0x1e>
 8007b92:	bf00      	nop
 8007b94:	2000056c 	.word	0x2000056c

08007b98 <_malloc_r>:
 8007b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b9c:	1ccd      	adds	r5, r1, #3
 8007b9e:	f025 0503 	bic.w	r5, r5, #3
 8007ba2:	3508      	adds	r5, #8
 8007ba4:	2d0c      	cmp	r5, #12
 8007ba6:	bf38      	it	cc
 8007ba8:	250c      	movcc	r5, #12
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	4606      	mov	r6, r0
 8007bae:	db01      	blt.n	8007bb4 <_malloc_r+0x1c>
 8007bb0:	42a9      	cmp	r1, r5
 8007bb2:	d904      	bls.n	8007bbe <_malloc_r+0x26>
 8007bb4:	230c      	movs	r3, #12
 8007bb6:	6033      	str	r3, [r6, #0]
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c94 <_malloc_r+0xfc>
 8007bc2:	f000 f869 	bl	8007c98 <__malloc_lock>
 8007bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bca:	461c      	mov	r4, r3
 8007bcc:	bb44      	cbnz	r4, 8007c20 <_malloc_r+0x88>
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff ffbf 	bl	8007b54 <sbrk_aligned>
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	4604      	mov	r4, r0
 8007bda:	d158      	bne.n	8007c8e <_malloc_r+0xf6>
 8007bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8007be0:	4627      	mov	r7, r4
 8007be2:	2f00      	cmp	r7, #0
 8007be4:	d143      	bne.n	8007c6e <_malloc_r+0xd6>
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	d04b      	beq.n	8007c82 <_malloc_r+0xea>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	4639      	mov	r1, r7
 8007bee:	4630      	mov	r0, r6
 8007bf0:	eb04 0903 	add.w	r9, r4, r3
 8007bf4:	f000 fe60 	bl	80088b8 <_sbrk_r>
 8007bf8:	4581      	cmp	r9, r0
 8007bfa:	d142      	bne.n	8007c82 <_malloc_r+0xea>
 8007bfc:	6821      	ldr	r1, [r4, #0]
 8007bfe:	1a6d      	subs	r5, r5, r1
 8007c00:	4629      	mov	r1, r5
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7ff ffa6 	bl	8007b54 <sbrk_aligned>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d03a      	beq.n	8007c82 <_malloc_r+0xea>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	442b      	add	r3, r5
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	f8d8 3000 	ldr.w	r3, [r8]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	bb62      	cbnz	r2, 8007c74 <_malloc_r+0xdc>
 8007c1a:	f8c8 7000 	str.w	r7, [r8]
 8007c1e:	e00f      	b.n	8007c40 <_malloc_r+0xa8>
 8007c20:	6822      	ldr	r2, [r4, #0]
 8007c22:	1b52      	subs	r2, r2, r5
 8007c24:	d420      	bmi.n	8007c68 <_malloc_r+0xd0>
 8007c26:	2a0b      	cmp	r2, #11
 8007c28:	d917      	bls.n	8007c5a <_malloc_r+0xc2>
 8007c2a:	1961      	adds	r1, r4, r5
 8007c2c:	42a3      	cmp	r3, r4
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	bf18      	it	ne
 8007c32:	6059      	strne	r1, [r3, #4]
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	bf08      	it	eq
 8007c38:	f8c8 1000 	streq.w	r1, [r8]
 8007c3c:	5162      	str	r2, [r4, r5]
 8007c3e:	604b      	str	r3, [r1, #4]
 8007c40:	4630      	mov	r0, r6
 8007c42:	f000 f82f 	bl	8007ca4 <__malloc_unlock>
 8007c46:	f104 000b 	add.w	r0, r4, #11
 8007c4a:	1d23      	adds	r3, r4, #4
 8007c4c:	f020 0007 	bic.w	r0, r0, #7
 8007c50:	1ac2      	subs	r2, r0, r3
 8007c52:	bf1c      	itt	ne
 8007c54:	1a1b      	subne	r3, r3, r0
 8007c56:	50a3      	strne	r3, [r4, r2]
 8007c58:	e7af      	b.n	8007bba <_malloc_r+0x22>
 8007c5a:	6862      	ldr	r2, [r4, #4]
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	bf0c      	ite	eq
 8007c60:	f8c8 2000 	streq.w	r2, [r8]
 8007c64:	605a      	strne	r2, [r3, #4]
 8007c66:	e7eb      	b.n	8007c40 <_malloc_r+0xa8>
 8007c68:	4623      	mov	r3, r4
 8007c6a:	6864      	ldr	r4, [r4, #4]
 8007c6c:	e7ae      	b.n	8007bcc <_malloc_r+0x34>
 8007c6e:	463c      	mov	r4, r7
 8007c70:	687f      	ldr	r7, [r7, #4]
 8007c72:	e7b6      	b.n	8007be2 <_malloc_r+0x4a>
 8007c74:	461a      	mov	r2, r3
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	42a3      	cmp	r3, r4
 8007c7a:	d1fb      	bne.n	8007c74 <_malloc_r+0xdc>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6053      	str	r3, [r2, #4]
 8007c80:	e7de      	b.n	8007c40 <_malloc_r+0xa8>
 8007c82:	230c      	movs	r3, #12
 8007c84:	6033      	str	r3, [r6, #0]
 8007c86:	4630      	mov	r0, r6
 8007c88:	f000 f80c 	bl	8007ca4 <__malloc_unlock>
 8007c8c:	e794      	b.n	8007bb8 <_malloc_r+0x20>
 8007c8e:	6005      	str	r5, [r0, #0]
 8007c90:	e7d6      	b.n	8007c40 <_malloc_r+0xa8>
 8007c92:	bf00      	nop
 8007c94:	20000570 	.word	0x20000570

08007c98 <__malloc_lock>:
 8007c98:	4801      	ldr	r0, [pc, #4]	@ (8007ca0 <__malloc_lock+0x8>)
 8007c9a:	f7ff b8b8 	b.w	8006e0e <__retarget_lock_acquire_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	20000568 	.word	0x20000568

08007ca4 <__malloc_unlock>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	@ (8007cac <__malloc_unlock+0x8>)
 8007ca6:	f7ff b8b3 	b.w	8006e10 <__retarget_lock_release_recursive>
 8007caa:	bf00      	nop
 8007cac:	20000568 	.word	0x20000568

08007cb0 <_Balloc>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	69c6      	ldr	r6, [r0, #28]
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	460d      	mov	r5, r1
 8007cb8:	b976      	cbnz	r6, 8007cd8 <_Balloc+0x28>
 8007cba:	2010      	movs	r0, #16
 8007cbc:	f7ff ff42 	bl	8007b44 <malloc>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	61e0      	str	r0, [r4, #28]
 8007cc4:	b920      	cbnz	r0, 8007cd0 <_Balloc+0x20>
 8007cc6:	4b18      	ldr	r3, [pc, #96]	@ (8007d28 <_Balloc+0x78>)
 8007cc8:	4818      	ldr	r0, [pc, #96]	@ (8007d2c <_Balloc+0x7c>)
 8007cca:	216b      	movs	r1, #107	@ 0x6b
 8007ccc:	f000 fe12 	bl	80088f4 <__assert_func>
 8007cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd4:	6006      	str	r6, [r0, #0]
 8007cd6:	60c6      	str	r6, [r0, #12]
 8007cd8:	69e6      	ldr	r6, [r4, #28]
 8007cda:	68f3      	ldr	r3, [r6, #12]
 8007cdc:	b183      	cbz	r3, 8007d00 <_Balloc+0x50>
 8007cde:	69e3      	ldr	r3, [r4, #28]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ce6:	b9b8      	cbnz	r0, 8007d18 <_Balloc+0x68>
 8007ce8:	2101      	movs	r1, #1
 8007cea:	fa01 f605 	lsl.w	r6, r1, r5
 8007cee:	1d72      	adds	r2, r6, #5
 8007cf0:	0092      	lsls	r2, r2, #2
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fe1c 	bl	8008930 <_calloc_r>
 8007cf8:	b160      	cbz	r0, 8007d14 <_Balloc+0x64>
 8007cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cfe:	e00e      	b.n	8007d1e <_Balloc+0x6e>
 8007d00:	2221      	movs	r2, #33	@ 0x21
 8007d02:	2104      	movs	r1, #4
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 fe13 	bl	8008930 <_calloc_r>
 8007d0a:	69e3      	ldr	r3, [r4, #28]
 8007d0c:	60f0      	str	r0, [r6, #12]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e4      	bne.n	8007cde <_Balloc+0x2e>
 8007d14:	2000      	movs	r0, #0
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	6802      	ldr	r2, [r0, #0]
 8007d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d24:	e7f7      	b.n	8007d16 <_Balloc+0x66>
 8007d26:	bf00      	nop
 8007d28:	08008c31 	.word	0x08008c31
 8007d2c:	08008cb1 	.word	0x08008cb1

08007d30 <_Bfree>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	69c6      	ldr	r6, [r0, #28]
 8007d34:	4605      	mov	r5, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	b976      	cbnz	r6, 8007d58 <_Bfree+0x28>
 8007d3a:	2010      	movs	r0, #16
 8007d3c:	f7ff ff02 	bl	8007b44 <malloc>
 8007d40:	4602      	mov	r2, r0
 8007d42:	61e8      	str	r0, [r5, #28]
 8007d44:	b920      	cbnz	r0, 8007d50 <_Bfree+0x20>
 8007d46:	4b09      	ldr	r3, [pc, #36]	@ (8007d6c <_Bfree+0x3c>)
 8007d48:	4809      	ldr	r0, [pc, #36]	@ (8007d70 <_Bfree+0x40>)
 8007d4a:	218f      	movs	r1, #143	@ 0x8f
 8007d4c:	f000 fdd2 	bl	80088f4 <__assert_func>
 8007d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d54:	6006      	str	r6, [r0, #0]
 8007d56:	60c6      	str	r6, [r0, #12]
 8007d58:	b13c      	cbz	r4, 8007d6a <_Bfree+0x3a>
 8007d5a:	69eb      	ldr	r3, [r5, #28]
 8007d5c:	6862      	ldr	r2, [r4, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d64:	6021      	str	r1, [r4, #0]
 8007d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	08008c31 	.word	0x08008c31
 8007d70:	08008cb1 	.word	0x08008cb1

08007d74 <__multadd>:
 8007d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d78:	690d      	ldr	r5, [r1, #16]
 8007d7a:	4607      	mov	r7, r0
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	461e      	mov	r6, r3
 8007d80:	f101 0c14 	add.w	ip, r1, #20
 8007d84:	2000      	movs	r0, #0
 8007d86:	f8dc 3000 	ldr.w	r3, [ip]
 8007d8a:	b299      	uxth	r1, r3
 8007d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007d90:	0c1e      	lsrs	r6, r3, #16
 8007d92:	0c0b      	lsrs	r3, r1, #16
 8007d94:	fb02 3306 	mla	r3, r2, r6, r3
 8007d98:	b289      	uxth	r1, r1
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007da0:	4285      	cmp	r5, r0
 8007da2:	f84c 1b04 	str.w	r1, [ip], #4
 8007da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007daa:	dcec      	bgt.n	8007d86 <__multadd+0x12>
 8007dac:	b30e      	cbz	r6, 8007df2 <__multadd+0x7e>
 8007dae:	68a3      	ldr	r3, [r4, #8]
 8007db0:	42ab      	cmp	r3, r5
 8007db2:	dc19      	bgt.n	8007de8 <__multadd+0x74>
 8007db4:	6861      	ldr	r1, [r4, #4]
 8007db6:	4638      	mov	r0, r7
 8007db8:	3101      	adds	r1, #1
 8007dba:	f7ff ff79 	bl	8007cb0 <_Balloc>
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	b928      	cbnz	r0, 8007dce <__multadd+0x5a>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <__multadd+0x84>)
 8007dc6:	480d      	ldr	r0, [pc, #52]	@ (8007dfc <__multadd+0x88>)
 8007dc8:	21ba      	movs	r1, #186	@ 0xba
 8007dca:	f000 fd93 	bl	80088f4 <__assert_func>
 8007dce:	6922      	ldr	r2, [r4, #16]
 8007dd0:	3202      	adds	r2, #2
 8007dd2:	f104 010c 	add.w	r1, r4, #12
 8007dd6:	0092      	lsls	r2, r2, #2
 8007dd8:	300c      	adds	r0, #12
 8007dda:	f000 fd7d 	bl	80088d8 <memcpy>
 8007dde:	4621      	mov	r1, r4
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7ff ffa5 	bl	8007d30 <_Bfree>
 8007de6:	4644      	mov	r4, r8
 8007de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dec:	3501      	adds	r5, #1
 8007dee:	615e      	str	r6, [r3, #20]
 8007df0:	6125      	str	r5, [r4, #16]
 8007df2:	4620      	mov	r0, r4
 8007df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df8:	08008ca0 	.word	0x08008ca0
 8007dfc:	08008cb1 	.word	0x08008cb1

08007e00 <__hi0bits>:
 8007e00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e04:	4603      	mov	r3, r0
 8007e06:	bf36      	itet	cc
 8007e08:	0403      	lslcc	r3, r0, #16
 8007e0a:	2000      	movcs	r0, #0
 8007e0c:	2010      	movcc	r0, #16
 8007e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e12:	bf3c      	itt	cc
 8007e14:	021b      	lslcc	r3, r3, #8
 8007e16:	3008      	addcc	r0, #8
 8007e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e1c:	bf3c      	itt	cc
 8007e1e:	011b      	lslcc	r3, r3, #4
 8007e20:	3004      	addcc	r0, #4
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e26:	bf3c      	itt	cc
 8007e28:	009b      	lslcc	r3, r3, #2
 8007e2a:	3002      	addcc	r0, #2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	db05      	blt.n	8007e3c <__hi0bits+0x3c>
 8007e30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e34:	f100 0001 	add.w	r0, r0, #1
 8007e38:	bf08      	it	eq
 8007e3a:	2020      	moveq	r0, #32
 8007e3c:	4770      	bx	lr

08007e3e <__lo0bits>:
 8007e3e:	6803      	ldr	r3, [r0, #0]
 8007e40:	4602      	mov	r2, r0
 8007e42:	f013 0007 	ands.w	r0, r3, #7
 8007e46:	d00b      	beq.n	8007e60 <__lo0bits+0x22>
 8007e48:	07d9      	lsls	r1, r3, #31
 8007e4a:	d421      	bmi.n	8007e90 <__lo0bits+0x52>
 8007e4c:	0798      	lsls	r0, r3, #30
 8007e4e:	bf49      	itett	mi
 8007e50:	085b      	lsrmi	r3, r3, #1
 8007e52:	089b      	lsrpl	r3, r3, #2
 8007e54:	2001      	movmi	r0, #1
 8007e56:	6013      	strmi	r3, [r2, #0]
 8007e58:	bf5c      	itt	pl
 8007e5a:	6013      	strpl	r3, [r2, #0]
 8007e5c:	2002      	movpl	r0, #2
 8007e5e:	4770      	bx	lr
 8007e60:	b299      	uxth	r1, r3
 8007e62:	b909      	cbnz	r1, 8007e68 <__lo0bits+0x2a>
 8007e64:	0c1b      	lsrs	r3, r3, #16
 8007e66:	2010      	movs	r0, #16
 8007e68:	b2d9      	uxtb	r1, r3
 8007e6a:	b909      	cbnz	r1, 8007e70 <__lo0bits+0x32>
 8007e6c:	3008      	adds	r0, #8
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	0719      	lsls	r1, r3, #28
 8007e72:	bf04      	itt	eq
 8007e74:	091b      	lsreq	r3, r3, #4
 8007e76:	3004      	addeq	r0, #4
 8007e78:	0799      	lsls	r1, r3, #30
 8007e7a:	bf04      	itt	eq
 8007e7c:	089b      	lsreq	r3, r3, #2
 8007e7e:	3002      	addeq	r0, #2
 8007e80:	07d9      	lsls	r1, r3, #31
 8007e82:	d403      	bmi.n	8007e8c <__lo0bits+0x4e>
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	f100 0001 	add.w	r0, r0, #1
 8007e8a:	d003      	beq.n	8007e94 <__lo0bits+0x56>
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	4770      	bx	lr
 8007e90:	2000      	movs	r0, #0
 8007e92:	4770      	bx	lr
 8007e94:	2020      	movs	r0, #32
 8007e96:	4770      	bx	lr

08007e98 <__i2b>:
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	f7ff ff07 	bl	8007cb0 <_Balloc>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	b928      	cbnz	r0, 8007eb2 <__i2b+0x1a>
 8007ea6:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <__i2b+0x24>)
 8007ea8:	4805      	ldr	r0, [pc, #20]	@ (8007ec0 <__i2b+0x28>)
 8007eaa:	f240 1145 	movw	r1, #325	@ 0x145
 8007eae:	f000 fd21 	bl	80088f4 <__assert_func>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	6144      	str	r4, [r0, #20]
 8007eb6:	6103      	str	r3, [r0, #16]
 8007eb8:	bd10      	pop	{r4, pc}
 8007eba:	bf00      	nop
 8007ebc:	08008ca0 	.word	0x08008ca0
 8007ec0:	08008cb1 	.word	0x08008cb1

08007ec4 <__multiply>:
 8007ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	4614      	mov	r4, r2
 8007eca:	690a      	ldr	r2, [r1, #16]
 8007ecc:	6923      	ldr	r3, [r4, #16]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	bfa8      	it	ge
 8007ed2:	4623      	movge	r3, r4
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	bfa4      	itt	ge
 8007ed8:	460c      	movge	r4, r1
 8007eda:	461f      	movge	r7, r3
 8007edc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ee0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ee4:	68a3      	ldr	r3, [r4, #8]
 8007ee6:	6861      	ldr	r1, [r4, #4]
 8007ee8:	eb0a 0609 	add.w	r6, sl, r9
 8007eec:	42b3      	cmp	r3, r6
 8007eee:	b085      	sub	sp, #20
 8007ef0:	bfb8      	it	lt
 8007ef2:	3101      	addlt	r1, #1
 8007ef4:	f7ff fedc 	bl	8007cb0 <_Balloc>
 8007ef8:	b930      	cbnz	r0, 8007f08 <__multiply+0x44>
 8007efa:	4602      	mov	r2, r0
 8007efc:	4b44      	ldr	r3, [pc, #272]	@ (8008010 <__multiply+0x14c>)
 8007efe:	4845      	ldr	r0, [pc, #276]	@ (8008014 <__multiply+0x150>)
 8007f00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f04:	f000 fcf6 	bl	80088f4 <__assert_func>
 8007f08:	f100 0514 	add.w	r5, r0, #20
 8007f0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f10:	462b      	mov	r3, r5
 8007f12:	2200      	movs	r2, #0
 8007f14:	4543      	cmp	r3, r8
 8007f16:	d321      	bcc.n	8007f5c <__multiply+0x98>
 8007f18:	f107 0114 	add.w	r1, r7, #20
 8007f1c:	f104 0214 	add.w	r2, r4, #20
 8007f20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f28:	9302      	str	r3, [sp, #8]
 8007f2a:	1b13      	subs	r3, r2, r4
 8007f2c:	3b15      	subs	r3, #21
 8007f2e:	f023 0303 	bic.w	r3, r3, #3
 8007f32:	3304      	adds	r3, #4
 8007f34:	f104 0715 	add.w	r7, r4, #21
 8007f38:	42ba      	cmp	r2, r7
 8007f3a:	bf38      	it	cc
 8007f3c:	2304      	movcc	r3, #4
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	9b02      	ldr	r3, [sp, #8]
 8007f42:	9103      	str	r1, [sp, #12]
 8007f44:	428b      	cmp	r3, r1
 8007f46:	d80c      	bhi.n	8007f62 <__multiply+0x9e>
 8007f48:	2e00      	cmp	r6, #0
 8007f4a:	dd03      	ble.n	8007f54 <__multiply+0x90>
 8007f4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d05b      	beq.n	800800c <__multiply+0x148>
 8007f54:	6106      	str	r6, [r0, #16]
 8007f56:	b005      	add	sp, #20
 8007f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5c:	f843 2b04 	str.w	r2, [r3], #4
 8007f60:	e7d8      	b.n	8007f14 <__multiply+0x50>
 8007f62:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f66:	f1ba 0f00 	cmp.w	sl, #0
 8007f6a:	d024      	beq.n	8007fb6 <__multiply+0xf2>
 8007f6c:	f104 0e14 	add.w	lr, r4, #20
 8007f70:	46a9      	mov	r9, r5
 8007f72:	f04f 0c00 	mov.w	ip, #0
 8007f76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f7a:	f8d9 3000 	ldr.w	r3, [r9]
 8007f7e:	fa1f fb87 	uxth.w	fp, r7
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f8c:	f8d9 7000 	ldr.w	r7, [r9]
 8007f90:	4463      	add	r3, ip
 8007f92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f96:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fa4:	4572      	cmp	r2, lr
 8007fa6:	f849 3b04 	str.w	r3, [r9], #4
 8007faa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fae:	d8e2      	bhi.n	8007f76 <__multiply+0xb2>
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	f845 c003 	str.w	ip, [r5, r3]
 8007fb6:	9b03      	ldr	r3, [sp, #12]
 8007fb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fbc:	3104      	adds	r1, #4
 8007fbe:	f1b9 0f00 	cmp.w	r9, #0
 8007fc2:	d021      	beq.n	8008008 <__multiply+0x144>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	f104 0c14 	add.w	ip, r4, #20
 8007fca:	46ae      	mov	lr, r5
 8007fcc:	f04f 0a00 	mov.w	sl, #0
 8007fd0:	f8bc b000 	ldrh.w	fp, [ip]
 8007fd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fd8:	fb09 770b 	mla	r7, r9, fp, r7
 8007fdc:	4457      	add	r7, sl
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fe4:	f84e 3b04 	str.w	r3, [lr], #4
 8007fe8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ff0:	f8be 3000 	ldrh.w	r3, [lr]
 8007ff4:	fb09 330a 	mla	r3, r9, sl, r3
 8007ff8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ffc:	4562      	cmp	r2, ip
 8007ffe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008002:	d8e5      	bhi.n	8007fd0 <__multiply+0x10c>
 8008004:	9f01      	ldr	r7, [sp, #4]
 8008006:	51eb      	str	r3, [r5, r7]
 8008008:	3504      	adds	r5, #4
 800800a:	e799      	b.n	8007f40 <__multiply+0x7c>
 800800c:	3e01      	subs	r6, #1
 800800e:	e79b      	b.n	8007f48 <__multiply+0x84>
 8008010:	08008ca0 	.word	0x08008ca0
 8008014:	08008cb1 	.word	0x08008cb1

08008018 <__pow5mult>:
 8008018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800801c:	4615      	mov	r5, r2
 800801e:	f012 0203 	ands.w	r2, r2, #3
 8008022:	4607      	mov	r7, r0
 8008024:	460e      	mov	r6, r1
 8008026:	d007      	beq.n	8008038 <__pow5mult+0x20>
 8008028:	4c25      	ldr	r4, [pc, #148]	@ (80080c0 <__pow5mult+0xa8>)
 800802a:	3a01      	subs	r2, #1
 800802c:	2300      	movs	r3, #0
 800802e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008032:	f7ff fe9f 	bl	8007d74 <__multadd>
 8008036:	4606      	mov	r6, r0
 8008038:	10ad      	asrs	r5, r5, #2
 800803a:	d03d      	beq.n	80080b8 <__pow5mult+0xa0>
 800803c:	69fc      	ldr	r4, [r7, #28]
 800803e:	b97c      	cbnz	r4, 8008060 <__pow5mult+0x48>
 8008040:	2010      	movs	r0, #16
 8008042:	f7ff fd7f 	bl	8007b44 <malloc>
 8008046:	4602      	mov	r2, r0
 8008048:	61f8      	str	r0, [r7, #28]
 800804a:	b928      	cbnz	r0, 8008058 <__pow5mult+0x40>
 800804c:	4b1d      	ldr	r3, [pc, #116]	@ (80080c4 <__pow5mult+0xac>)
 800804e:	481e      	ldr	r0, [pc, #120]	@ (80080c8 <__pow5mult+0xb0>)
 8008050:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008054:	f000 fc4e 	bl	80088f4 <__assert_func>
 8008058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800805c:	6004      	str	r4, [r0, #0]
 800805e:	60c4      	str	r4, [r0, #12]
 8008060:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008068:	b94c      	cbnz	r4, 800807e <__pow5mult+0x66>
 800806a:	f240 2171 	movw	r1, #625	@ 0x271
 800806e:	4638      	mov	r0, r7
 8008070:	f7ff ff12 	bl	8007e98 <__i2b>
 8008074:	2300      	movs	r3, #0
 8008076:	f8c8 0008 	str.w	r0, [r8, #8]
 800807a:	4604      	mov	r4, r0
 800807c:	6003      	str	r3, [r0, #0]
 800807e:	f04f 0900 	mov.w	r9, #0
 8008082:	07eb      	lsls	r3, r5, #31
 8008084:	d50a      	bpl.n	800809c <__pow5mult+0x84>
 8008086:	4631      	mov	r1, r6
 8008088:	4622      	mov	r2, r4
 800808a:	4638      	mov	r0, r7
 800808c:	f7ff ff1a 	bl	8007ec4 <__multiply>
 8008090:	4631      	mov	r1, r6
 8008092:	4680      	mov	r8, r0
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff fe4b 	bl	8007d30 <_Bfree>
 800809a:	4646      	mov	r6, r8
 800809c:	106d      	asrs	r5, r5, #1
 800809e:	d00b      	beq.n	80080b8 <__pow5mult+0xa0>
 80080a0:	6820      	ldr	r0, [r4, #0]
 80080a2:	b938      	cbnz	r0, 80080b4 <__pow5mult+0x9c>
 80080a4:	4622      	mov	r2, r4
 80080a6:	4621      	mov	r1, r4
 80080a8:	4638      	mov	r0, r7
 80080aa:	f7ff ff0b 	bl	8007ec4 <__multiply>
 80080ae:	6020      	str	r0, [r4, #0]
 80080b0:	f8c0 9000 	str.w	r9, [r0]
 80080b4:	4604      	mov	r4, r0
 80080b6:	e7e4      	b.n	8008082 <__pow5mult+0x6a>
 80080b8:	4630      	mov	r0, r6
 80080ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080be:	bf00      	nop
 80080c0:	08008d0c 	.word	0x08008d0c
 80080c4:	08008c31 	.word	0x08008c31
 80080c8:	08008cb1 	.word	0x08008cb1

080080cc <__lshift>:
 80080cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	460c      	mov	r4, r1
 80080d2:	6849      	ldr	r1, [r1, #4]
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	4607      	mov	r7, r0
 80080de:	4691      	mov	r9, r2
 80080e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080e4:	f108 0601 	add.w	r6, r8, #1
 80080e8:	42b3      	cmp	r3, r6
 80080ea:	db0b      	blt.n	8008104 <__lshift+0x38>
 80080ec:	4638      	mov	r0, r7
 80080ee:	f7ff fddf 	bl	8007cb0 <_Balloc>
 80080f2:	4605      	mov	r5, r0
 80080f4:	b948      	cbnz	r0, 800810a <__lshift+0x3e>
 80080f6:	4602      	mov	r2, r0
 80080f8:	4b28      	ldr	r3, [pc, #160]	@ (800819c <__lshift+0xd0>)
 80080fa:	4829      	ldr	r0, [pc, #164]	@ (80081a0 <__lshift+0xd4>)
 80080fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008100:	f000 fbf8 	bl	80088f4 <__assert_func>
 8008104:	3101      	adds	r1, #1
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	e7ee      	b.n	80080e8 <__lshift+0x1c>
 800810a:	2300      	movs	r3, #0
 800810c:	f100 0114 	add.w	r1, r0, #20
 8008110:	f100 0210 	add.w	r2, r0, #16
 8008114:	4618      	mov	r0, r3
 8008116:	4553      	cmp	r3, sl
 8008118:	db33      	blt.n	8008182 <__lshift+0xb6>
 800811a:	6920      	ldr	r0, [r4, #16]
 800811c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008120:	f104 0314 	add.w	r3, r4, #20
 8008124:	f019 091f 	ands.w	r9, r9, #31
 8008128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800812c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008130:	d02b      	beq.n	800818a <__lshift+0xbe>
 8008132:	f1c9 0e20 	rsb	lr, r9, #32
 8008136:	468a      	mov	sl, r1
 8008138:	2200      	movs	r2, #0
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	fa00 f009 	lsl.w	r0, r0, r9
 8008140:	4310      	orrs	r0, r2
 8008142:	f84a 0b04 	str.w	r0, [sl], #4
 8008146:	f853 2b04 	ldr.w	r2, [r3], #4
 800814a:	459c      	cmp	ip, r3
 800814c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008150:	d8f3      	bhi.n	800813a <__lshift+0x6e>
 8008152:	ebac 0304 	sub.w	r3, ip, r4
 8008156:	3b15      	subs	r3, #21
 8008158:	f023 0303 	bic.w	r3, r3, #3
 800815c:	3304      	adds	r3, #4
 800815e:	f104 0015 	add.w	r0, r4, #21
 8008162:	4584      	cmp	ip, r0
 8008164:	bf38      	it	cc
 8008166:	2304      	movcc	r3, #4
 8008168:	50ca      	str	r2, [r1, r3]
 800816a:	b10a      	cbz	r2, 8008170 <__lshift+0xa4>
 800816c:	f108 0602 	add.w	r6, r8, #2
 8008170:	3e01      	subs	r6, #1
 8008172:	4638      	mov	r0, r7
 8008174:	612e      	str	r6, [r5, #16]
 8008176:	4621      	mov	r1, r4
 8008178:	f7ff fdda 	bl	8007d30 <_Bfree>
 800817c:	4628      	mov	r0, r5
 800817e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008182:	f842 0f04 	str.w	r0, [r2, #4]!
 8008186:	3301      	adds	r3, #1
 8008188:	e7c5      	b.n	8008116 <__lshift+0x4a>
 800818a:	3904      	subs	r1, #4
 800818c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008190:	f841 2f04 	str.w	r2, [r1, #4]!
 8008194:	459c      	cmp	ip, r3
 8008196:	d8f9      	bhi.n	800818c <__lshift+0xc0>
 8008198:	e7ea      	b.n	8008170 <__lshift+0xa4>
 800819a:	bf00      	nop
 800819c:	08008ca0 	.word	0x08008ca0
 80081a0:	08008cb1 	.word	0x08008cb1

080081a4 <__mcmp>:
 80081a4:	690a      	ldr	r2, [r1, #16]
 80081a6:	4603      	mov	r3, r0
 80081a8:	6900      	ldr	r0, [r0, #16]
 80081aa:	1a80      	subs	r0, r0, r2
 80081ac:	b530      	push	{r4, r5, lr}
 80081ae:	d10e      	bne.n	80081ce <__mcmp+0x2a>
 80081b0:	3314      	adds	r3, #20
 80081b2:	3114      	adds	r1, #20
 80081b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081c4:	4295      	cmp	r5, r2
 80081c6:	d003      	beq.n	80081d0 <__mcmp+0x2c>
 80081c8:	d205      	bcs.n	80081d6 <__mcmp+0x32>
 80081ca:	f04f 30ff 	mov.w	r0, #4294967295
 80081ce:	bd30      	pop	{r4, r5, pc}
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d3f3      	bcc.n	80081bc <__mcmp+0x18>
 80081d4:	e7fb      	b.n	80081ce <__mcmp+0x2a>
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7f9      	b.n	80081ce <__mcmp+0x2a>
	...

080081dc <__mdiff>:
 80081dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	4689      	mov	r9, r1
 80081e2:	4606      	mov	r6, r0
 80081e4:	4611      	mov	r1, r2
 80081e6:	4648      	mov	r0, r9
 80081e8:	4614      	mov	r4, r2
 80081ea:	f7ff ffdb 	bl	80081a4 <__mcmp>
 80081ee:	1e05      	subs	r5, r0, #0
 80081f0:	d112      	bne.n	8008218 <__mdiff+0x3c>
 80081f2:	4629      	mov	r1, r5
 80081f4:	4630      	mov	r0, r6
 80081f6:	f7ff fd5b 	bl	8007cb0 <_Balloc>
 80081fa:	4602      	mov	r2, r0
 80081fc:	b928      	cbnz	r0, 800820a <__mdiff+0x2e>
 80081fe:	4b3f      	ldr	r3, [pc, #252]	@ (80082fc <__mdiff+0x120>)
 8008200:	f240 2137 	movw	r1, #567	@ 0x237
 8008204:	483e      	ldr	r0, [pc, #248]	@ (8008300 <__mdiff+0x124>)
 8008206:	f000 fb75 	bl	80088f4 <__assert_func>
 800820a:	2301      	movs	r3, #1
 800820c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008210:	4610      	mov	r0, r2
 8008212:	b003      	add	sp, #12
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	bfbc      	itt	lt
 800821a:	464b      	movlt	r3, r9
 800821c:	46a1      	movlt	r9, r4
 800821e:	4630      	mov	r0, r6
 8008220:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008224:	bfba      	itte	lt
 8008226:	461c      	movlt	r4, r3
 8008228:	2501      	movlt	r5, #1
 800822a:	2500      	movge	r5, #0
 800822c:	f7ff fd40 	bl	8007cb0 <_Balloc>
 8008230:	4602      	mov	r2, r0
 8008232:	b918      	cbnz	r0, 800823c <__mdiff+0x60>
 8008234:	4b31      	ldr	r3, [pc, #196]	@ (80082fc <__mdiff+0x120>)
 8008236:	f240 2145 	movw	r1, #581	@ 0x245
 800823a:	e7e3      	b.n	8008204 <__mdiff+0x28>
 800823c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008240:	6926      	ldr	r6, [r4, #16]
 8008242:	60c5      	str	r5, [r0, #12]
 8008244:	f109 0310 	add.w	r3, r9, #16
 8008248:	f109 0514 	add.w	r5, r9, #20
 800824c:	f104 0e14 	add.w	lr, r4, #20
 8008250:	f100 0b14 	add.w	fp, r0, #20
 8008254:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008258:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	46d9      	mov	r9, fp
 8008260:	f04f 0c00 	mov.w	ip, #0
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	f85e 0b04 	ldr.w	r0, [lr], #4
 800826a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	fa1f f38a 	uxth.w	r3, sl
 8008274:	4619      	mov	r1, r3
 8008276:	b283      	uxth	r3, r0
 8008278:	1acb      	subs	r3, r1, r3
 800827a:	0c00      	lsrs	r0, r0, #16
 800827c:	4463      	add	r3, ip
 800827e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008282:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800828c:	4576      	cmp	r6, lr
 800828e:	f849 3b04 	str.w	r3, [r9], #4
 8008292:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008296:	d8e5      	bhi.n	8008264 <__mdiff+0x88>
 8008298:	1b33      	subs	r3, r6, r4
 800829a:	3b15      	subs	r3, #21
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	3415      	adds	r4, #21
 80082a2:	3304      	adds	r3, #4
 80082a4:	42a6      	cmp	r6, r4
 80082a6:	bf38      	it	cc
 80082a8:	2304      	movcc	r3, #4
 80082aa:	441d      	add	r5, r3
 80082ac:	445b      	add	r3, fp
 80082ae:	461e      	mov	r6, r3
 80082b0:	462c      	mov	r4, r5
 80082b2:	4544      	cmp	r4, r8
 80082b4:	d30e      	bcc.n	80082d4 <__mdiff+0xf8>
 80082b6:	f108 0103 	add.w	r1, r8, #3
 80082ba:	1b49      	subs	r1, r1, r5
 80082bc:	f021 0103 	bic.w	r1, r1, #3
 80082c0:	3d03      	subs	r5, #3
 80082c2:	45a8      	cmp	r8, r5
 80082c4:	bf38      	it	cc
 80082c6:	2100      	movcc	r1, #0
 80082c8:	440b      	add	r3, r1
 80082ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ce:	b191      	cbz	r1, 80082f6 <__mdiff+0x11a>
 80082d0:	6117      	str	r7, [r2, #16]
 80082d2:	e79d      	b.n	8008210 <__mdiff+0x34>
 80082d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80082d8:	46e6      	mov	lr, ip
 80082da:	0c08      	lsrs	r0, r1, #16
 80082dc:	fa1c fc81 	uxtah	ip, ip, r1
 80082e0:	4471      	add	r1, lr
 80082e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082e6:	b289      	uxth	r1, r1
 80082e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082ec:	f846 1b04 	str.w	r1, [r6], #4
 80082f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082f4:	e7dd      	b.n	80082b2 <__mdiff+0xd6>
 80082f6:	3f01      	subs	r7, #1
 80082f8:	e7e7      	b.n	80082ca <__mdiff+0xee>
 80082fa:	bf00      	nop
 80082fc:	08008ca0 	.word	0x08008ca0
 8008300:	08008cb1 	.word	0x08008cb1

08008304 <__d2b>:
 8008304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008308:	460f      	mov	r7, r1
 800830a:	2101      	movs	r1, #1
 800830c:	ec59 8b10 	vmov	r8, r9, d0
 8008310:	4616      	mov	r6, r2
 8008312:	f7ff fccd 	bl	8007cb0 <_Balloc>
 8008316:	4604      	mov	r4, r0
 8008318:	b930      	cbnz	r0, 8008328 <__d2b+0x24>
 800831a:	4602      	mov	r2, r0
 800831c:	4b23      	ldr	r3, [pc, #140]	@ (80083ac <__d2b+0xa8>)
 800831e:	4824      	ldr	r0, [pc, #144]	@ (80083b0 <__d2b+0xac>)
 8008320:	f240 310f 	movw	r1, #783	@ 0x30f
 8008324:	f000 fae6 	bl	80088f4 <__assert_func>
 8008328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800832c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008330:	b10d      	cbz	r5, 8008336 <__d2b+0x32>
 8008332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	f1b8 0300 	subs.w	r3, r8, #0
 800833c:	d023      	beq.n	8008386 <__d2b+0x82>
 800833e:	4668      	mov	r0, sp
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	f7ff fd7c 	bl	8007e3e <__lo0bits>
 8008346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800834a:	b1d0      	cbz	r0, 8008382 <__d2b+0x7e>
 800834c:	f1c0 0320 	rsb	r3, r0, #32
 8008350:	fa02 f303 	lsl.w	r3, r2, r3
 8008354:	430b      	orrs	r3, r1
 8008356:	40c2      	lsrs	r2, r0
 8008358:	6163      	str	r3, [r4, #20]
 800835a:	9201      	str	r2, [sp, #4]
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	61a3      	str	r3, [r4, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf0c      	ite	eq
 8008364:	2201      	moveq	r2, #1
 8008366:	2202      	movne	r2, #2
 8008368:	6122      	str	r2, [r4, #16]
 800836a:	b1a5      	cbz	r5, 8008396 <__d2b+0x92>
 800836c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008370:	4405      	add	r5, r0
 8008372:	603d      	str	r5, [r7, #0]
 8008374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008378:	6030      	str	r0, [r6, #0]
 800837a:	4620      	mov	r0, r4
 800837c:	b003      	add	sp, #12
 800837e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008382:	6161      	str	r1, [r4, #20]
 8008384:	e7ea      	b.n	800835c <__d2b+0x58>
 8008386:	a801      	add	r0, sp, #4
 8008388:	f7ff fd59 	bl	8007e3e <__lo0bits>
 800838c:	9b01      	ldr	r3, [sp, #4]
 800838e:	6163      	str	r3, [r4, #20]
 8008390:	3020      	adds	r0, #32
 8008392:	2201      	movs	r2, #1
 8008394:	e7e8      	b.n	8008368 <__d2b+0x64>
 8008396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800839a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800839e:	6038      	str	r0, [r7, #0]
 80083a0:	6918      	ldr	r0, [r3, #16]
 80083a2:	f7ff fd2d 	bl	8007e00 <__hi0bits>
 80083a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083aa:	e7e5      	b.n	8008378 <__d2b+0x74>
 80083ac:	08008ca0 	.word	0x08008ca0
 80083b0:	08008cb1 	.word	0x08008cb1

080083b4 <__sfputc_r>:
 80083b4:	6893      	ldr	r3, [r2, #8]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	b410      	push	{r4}
 80083bc:	6093      	str	r3, [r2, #8]
 80083be:	da08      	bge.n	80083d2 <__sfputc_r+0x1e>
 80083c0:	6994      	ldr	r4, [r2, #24]
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	db01      	blt.n	80083ca <__sfputc_r+0x16>
 80083c6:	290a      	cmp	r1, #10
 80083c8:	d103      	bne.n	80083d2 <__sfputc_r+0x1e>
 80083ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ce:	f000 b9df 	b.w	8008790 <__swbuf_r>
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	1c58      	adds	r0, r3, #1
 80083d6:	6010      	str	r0, [r2, #0]
 80083d8:	7019      	strb	r1, [r3, #0]
 80083da:	4608      	mov	r0, r1
 80083dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <__sfputs_r>:
 80083e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	4614      	mov	r4, r2
 80083ea:	18d5      	adds	r5, r2, r3
 80083ec:	42ac      	cmp	r4, r5
 80083ee:	d101      	bne.n	80083f4 <__sfputs_r+0x12>
 80083f0:	2000      	movs	r0, #0
 80083f2:	e007      	b.n	8008404 <__sfputs_r+0x22>
 80083f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f8:	463a      	mov	r2, r7
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff ffda 	bl	80083b4 <__sfputc_r>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d1f3      	bne.n	80083ec <__sfputs_r+0xa>
 8008404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008408 <_vfiprintf_r>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	460d      	mov	r5, r1
 800840e:	b09d      	sub	sp, #116	@ 0x74
 8008410:	4614      	mov	r4, r2
 8008412:	4698      	mov	r8, r3
 8008414:	4606      	mov	r6, r0
 8008416:	b118      	cbz	r0, 8008420 <_vfiprintf_r+0x18>
 8008418:	6a03      	ldr	r3, [r0, #32]
 800841a:	b90b      	cbnz	r3, 8008420 <_vfiprintf_r+0x18>
 800841c:	f7fe fbee 	bl	8006bfc <__sinit>
 8008420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008422:	07d9      	lsls	r1, r3, #31
 8008424:	d405      	bmi.n	8008432 <_vfiprintf_r+0x2a>
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	059a      	lsls	r2, r3, #22
 800842a:	d402      	bmi.n	8008432 <_vfiprintf_r+0x2a>
 800842c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800842e:	f7fe fcee 	bl	8006e0e <__retarget_lock_acquire_recursive>
 8008432:	89ab      	ldrh	r3, [r5, #12]
 8008434:	071b      	lsls	r3, r3, #28
 8008436:	d501      	bpl.n	800843c <_vfiprintf_r+0x34>
 8008438:	692b      	ldr	r3, [r5, #16]
 800843a:	b99b      	cbnz	r3, 8008464 <_vfiprintf_r+0x5c>
 800843c:	4629      	mov	r1, r5
 800843e:	4630      	mov	r0, r6
 8008440:	f000 f9e4 	bl	800880c <__swsetup_r>
 8008444:	b170      	cbz	r0, 8008464 <_vfiprintf_r+0x5c>
 8008446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008448:	07dc      	lsls	r4, r3, #31
 800844a:	d504      	bpl.n	8008456 <_vfiprintf_r+0x4e>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	b01d      	add	sp, #116	@ 0x74
 8008452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	89ab      	ldrh	r3, [r5, #12]
 8008458:	0598      	lsls	r0, r3, #22
 800845a:	d4f7      	bmi.n	800844c <_vfiprintf_r+0x44>
 800845c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800845e:	f7fe fcd7 	bl	8006e10 <__retarget_lock_release_recursive>
 8008462:	e7f3      	b.n	800844c <_vfiprintf_r+0x44>
 8008464:	2300      	movs	r3, #0
 8008466:	9309      	str	r3, [sp, #36]	@ 0x24
 8008468:	2320      	movs	r3, #32
 800846a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800846e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008472:	2330      	movs	r3, #48	@ 0x30
 8008474:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008624 <_vfiprintf_r+0x21c>
 8008478:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800847c:	f04f 0901 	mov.w	r9, #1
 8008480:	4623      	mov	r3, r4
 8008482:	469a      	mov	sl, r3
 8008484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008488:	b10a      	cbz	r2, 800848e <_vfiprintf_r+0x86>
 800848a:	2a25      	cmp	r2, #37	@ 0x25
 800848c:	d1f9      	bne.n	8008482 <_vfiprintf_r+0x7a>
 800848e:	ebba 0b04 	subs.w	fp, sl, r4
 8008492:	d00b      	beq.n	80084ac <_vfiprintf_r+0xa4>
 8008494:	465b      	mov	r3, fp
 8008496:	4622      	mov	r2, r4
 8008498:	4629      	mov	r1, r5
 800849a:	4630      	mov	r0, r6
 800849c:	f7ff ffa1 	bl	80083e2 <__sfputs_r>
 80084a0:	3001      	adds	r0, #1
 80084a2:	f000 80a7 	beq.w	80085f4 <_vfiprintf_r+0x1ec>
 80084a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084a8:	445a      	add	r2, fp
 80084aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80084ac:	f89a 3000 	ldrb.w	r3, [sl]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 809f 	beq.w	80085f4 <_vfiprintf_r+0x1ec>
 80084b6:	2300      	movs	r3, #0
 80084b8:	f04f 32ff 	mov.w	r2, #4294967295
 80084bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c0:	f10a 0a01 	add.w	sl, sl, #1
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	9307      	str	r3, [sp, #28]
 80084c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80084ce:	4654      	mov	r4, sl
 80084d0:	2205      	movs	r2, #5
 80084d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d6:	4853      	ldr	r0, [pc, #332]	@ (8008624 <_vfiprintf_r+0x21c>)
 80084d8:	f7f7 fe7a 	bl	80001d0 <memchr>
 80084dc:	9a04      	ldr	r2, [sp, #16]
 80084de:	b9d8      	cbnz	r0, 8008518 <_vfiprintf_r+0x110>
 80084e0:	06d1      	lsls	r1, r2, #27
 80084e2:	bf44      	itt	mi
 80084e4:	2320      	movmi	r3, #32
 80084e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084ea:	0713      	lsls	r3, r2, #28
 80084ec:	bf44      	itt	mi
 80084ee:	232b      	movmi	r3, #43	@ 0x2b
 80084f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f4:	f89a 3000 	ldrb.w	r3, [sl]
 80084f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084fa:	d015      	beq.n	8008528 <_vfiprintf_r+0x120>
 80084fc:	9a07      	ldr	r2, [sp, #28]
 80084fe:	4654      	mov	r4, sl
 8008500:	2000      	movs	r0, #0
 8008502:	f04f 0c0a 	mov.w	ip, #10
 8008506:	4621      	mov	r1, r4
 8008508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800850c:	3b30      	subs	r3, #48	@ 0x30
 800850e:	2b09      	cmp	r3, #9
 8008510:	d94b      	bls.n	80085aa <_vfiprintf_r+0x1a2>
 8008512:	b1b0      	cbz	r0, 8008542 <_vfiprintf_r+0x13a>
 8008514:	9207      	str	r2, [sp, #28]
 8008516:	e014      	b.n	8008542 <_vfiprintf_r+0x13a>
 8008518:	eba0 0308 	sub.w	r3, r0, r8
 800851c:	fa09 f303 	lsl.w	r3, r9, r3
 8008520:	4313      	orrs	r3, r2
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	46a2      	mov	sl, r4
 8008526:	e7d2      	b.n	80084ce <_vfiprintf_r+0xc6>
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	1d19      	adds	r1, r3, #4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	9103      	str	r1, [sp, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	bfbb      	ittet	lt
 8008534:	425b      	neglt	r3, r3
 8008536:	f042 0202 	orrlt.w	r2, r2, #2
 800853a:	9307      	strge	r3, [sp, #28]
 800853c:	9307      	strlt	r3, [sp, #28]
 800853e:	bfb8      	it	lt
 8008540:	9204      	strlt	r2, [sp, #16]
 8008542:	7823      	ldrb	r3, [r4, #0]
 8008544:	2b2e      	cmp	r3, #46	@ 0x2e
 8008546:	d10a      	bne.n	800855e <_vfiprintf_r+0x156>
 8008548:	7863      	ldrb	r3, [r4, #1]
 800854a:	2b2a      	cmp	r3, #42	@ 0x2a
 800854c:	d132      	bne.n	80085b4 <_vfiprintf_r+0x1ac>
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	1d1a      	adds	r2, r3, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	9203      	str	r2, [sp, #12]
 8008556:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800855a:	3402      	adds	r4, #2
 800855c:	9305      	str	r3, [sp, #20]
 800855e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008634 <_vfiprintf_r+0x22c>
 8008562:	7821      	ldrb	r1, [r4, #0]
 8008564:	2203      	movs	r2, #3
 8008566:	4650      	mov	r0, sl
 8008568:	f7f7 fe32 	bl	80001d0 <memchr>
 800856c:	b138      	cbz	r0, 800857e <_vfiprintf_r+0x176>
 800856e:	9b04      	ldr	r3, [sp, #16]
 8008570:	eba0 000a 	sub.w	r0, r0, sl
 8008574:	2240      	movs	r2, #64	@ 0x40
 8008576:	4082      	lsls	r2, r0
 8008578:	4313      	orrs	r3, r2
 800857a:	3401      	adds	r4, #1
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008582:	4829      	ldr	r0, [pc, #164]	@ (8008628 <_vfiprintf_r+0x220>)
 8008584:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008588:	2206      	movs	r2, #6
 800858a:	f7f7 fe21 	bl	80001d0 <memchr>
 800858e:	2800      	cmp	r0, #0
 8008590:	d03f      	beq.n	8008612 <_vfiprintf_r+0x20a>
 8008592:	4b26      	ldr	r3, [pc, #152]	@ (800862c <_vfiprintf_r+0x224>)
 8008594:	bb1b      	cbnz	r3, 80085de <_vfiprintf_r+0x1d6>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	3307      	adds	r3, #7
 800859a:	f023 0307 	bic.w	r3, r3, #7
 800859e:	3308      	adds	r3, #8
 80085a0:	9303      	str	r3, [sp, #12]
 80085a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a4:	443b      	add	r3, r7
 80085a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a8:	e76a      	b.n	8008480 <_vfiprintf_r+0x78>
 80085aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ae:	460c      	mov	r4, r1
 80085b0:	2001      	movs	r0, #1
 80085b2:	e7a8      	b.n	8008506 <_vfiprintf_r+0xfe>
 80085b4:	2300      	movs	r3, #0
 80085b6:	3401      	adds	r4, #1
 80085b8:	9305      	str	r3, [sp, #20]
 80085ba:	4619      	mov	r1, r3
 80085bc:	f04f 0c0a 	mov.w	ip, #10
 80085c0:	4620      	mov	r0, r4
 80085c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c6:	3a30      	subs	r2, #48	@ 0x30
 80085c8:	2a09      	cmp	r2, #9
 80085ca:	d903      	bls.n	80085d4 <_vfiprintf_r+0x1cc>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0c6      	beq.n	800855e <_vfiprintf_r+0x156>
 80085d0:	9105      	str	r1, [sp, #20]
 80085d2:	e7c4      	b.n	800855e <_vfiprintf_r+0x156>
 80085d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d8:	4604      	mov	r4, r0
 80085da:	2301      	movs	r3, #1
 80085dc:	e7f0      	b.n	80085c0 <_vfiprintf_r+0x1b8>
 80085de:	ab03      	add	r3, sp, #12
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	462a      	mov	r2, r5
 80085e4:	4b12      	ldr	r3, [pc, #72]	@ (8008630 <_vfiprintf_r+0x228>)
 80085e6:	a904      	add	r1, sp, #16
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7fd fec3 	bl	8006374 <_printf_float>
 80085ee:	4607      	mov	r7, r0
 80085f0:	1c78      	adds	r0, r7, #1
 80085f2:	d1d6      	bne.n	80085a2 <_vfiprintf_r+0x19a>
 80085f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085f6:	07d9      	lsls	r1, r3, #31
 80085f8:	d405      	bmi.n	8008606 <_vfiprintf_r+0x1fe>
 80085fa:	89ab      	ldrh	r3, [r5, #12]
 80085fc:	059a      	lsls	r2, r3, #22
 80085fe:	d402      	bmi.n	8008606 <_vfiprintf_r+0x1fe>
 8008600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008602:	f7fe fc05 	bl	8006e10 <__retarget_lock_release_recursive>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	065b      	lsls	r3, r3, #25
 800860a:	f53f af1f 	bmi.w	800844c <_vfiprintf_r+0x44>
 800860e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008610:	e71e      	b.n	8008450 <_vfiprintf_r+0x48>
 8008612:	ab03      	add	r3, sp, #12
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	462a      	mov	r2, r5
 8008618:	4b05      	ldr	r3, [pc, #20]	@ (8008630 <_vfiprintf_r+0x228>)
 800861a:	a904      	add	r1, sp, #16
 800861c:	4630      	mov	r0, r6
 800861e:	f7fe f941 	bl	80068a4 <_printf_i>
 8008622:	e7e4      	b.n	80085ee <_vfiprintf_r+0x1e6>
 8008624:	08008e08 	.word	0x08008e08
 8008628:	08008e12 	.word	0x08008e12
 800862c:	08006375 	.word	0x08006375
 8008630:	080083e3 	.word	0x080083e3
 8008634:	08008e0e 	.word	0x08008e0e

08008638 <__sflush_r>:
 8008638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800863c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008640:	0716      	lsls	r6, r2, #28
 8008642:	4605      	mov	r5, r0
 8008644:	460c      	mov	r4, r1
 8008646:	d454      	bmi.n	80086f2 <__sflush_r+0xba>
 8008648:	684b      	ldr	r3, [r1, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	dc02      	bgt.n	8008654 <__sflush_r+0x1c>
 800864e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	dd48      	ble.n	80086e6 <__sflush_r+0xae>
 8008654:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008656:	2e00      	cmp	r6, #0
 8008658:	d045      	beq.n	80086e6 <__sflush_r+0xae>
 800865a:	2300      	movs	r3, #0
 800865c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008660:	682f      	ldr	r7, [r5, #0]
 8008662:	6a21      	ldr	r1, [r4, #32]
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	d030      	beq.n	80086ca <__sflush_r+0x92>
 8008668:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	0759      	lsls	r1, r3, #29
 800866e:	d505      	bpl.n	800867c <__sflush_r+0x44>
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008676:	b10b      	cbz	r3, 800867c <__sflush_r+0x44>
 8008678:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	2300      	movs	r3, #0
 800867e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008680:	6a21      	ldr	r1, [r4, #32]
 8008682:	4628      	mov	r0, r5
 8008684:	47b0      	blx	r6
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	d106      	bne.n	800869a <__sflush_r+0x62>
 800868c:	6829      	ldr	r1, [r5, #0]
 800868e:	291d      	cmp	r1, #29
 8008690:	d82b      	bhi.n	80086ea <__sflush_r+0xb2>
 8008692:	4a2a      	ldr	r2, [pc, #168]	@ (800873c <__sflush_r+0x104>)
 8008694:	410a      	asrs	r2, r1
 8008696:	07d6      	lsls	r6, r2, #31
 8008698:	d427      	bmi.n	80086ea <__sflush_r+0xb2>
 800869a:	2200      	movs	r2, #0
 800869c:	6062      	str	r2, [r4, #4]
 800869e:	04d9      	lsls	r1, r3, #19
 80086a0:	6922      	ldr	r2, [r4, #16]
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	d504      	bpl.n	80086b0 <__sflush_r+0x78>
 80086a6:	1c42      	adds	r2, r0, #1
 80086a8:	d101      	bne.n	80086ae <__sflush_r+0x76>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	b903      	cbnz	r3, 80086b0 <__sflush_r+0x78>
 80086ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80086b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086b2:	602f      	str	r7, [r5, #0]
 80086b4:	b1b9      	cbz	r1, 80086e6 <__sflush_r+0xae>
 80086b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086ba:	4299      	cmp	r1, r3
 80086bc:	d002      	beq.n	80086c4 <__sflush_r+0x8c>
 80086be:	4628      	mov	r0, r5
 80086c0:	f7ff f9f6 	bl	8007ab0 <_free_r>
 80086c4:	2300      	movs	r3, #0
 80086c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80086c8:	e00d      	b.n	80086e6 <__sflush_r+0xae>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4628      	mov	r0, r5
 80086ce:	47b0      	blx	r6
 80086d0:	4602      	mov	r2, r0
 80086d2:	1c50      	adds	r0, r2, #1
 80086d4:	d1c9      	bne.n	800866a <__sflush_r+0x32>
 80086d6:	682b      	ldr	r3, [r5, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0c6      	beq.n	800866a <__sflush_r+0x32>
 80086dc:	2b1d      	cmp	r3, #29
 80086de:	d001      	beq.n	80086e4 <__sflush_r+0xac>
 80086e0:	2b16      	cmp	r3, #22
 80086e2:	d11e      	bne.n	8008722 <__sflush_r+0xea>
 80086e4:	602f      	str	r7, [r5, #0]
 80086e6:	2000      	movs	r0, #0
 80086e8:	e022      	b.n	8008730 <__sflush_r+0xf8>
 80086ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ee:	b21b      	sxth	r3, r3
 80086f0:	e01b      	b.n	800872a <__sflush_r+0xf2>
 80086f2:	690f      	ldr	r7, [r1, #16]
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	d0f6      	beq.n	80086e6 <__sflush_r+0xae>
 80086f8:	0793      	lsls	r3, r2, #30
 80086fa:	680e      	ldr	r6, [r1, #0]
 80086fc:	bf08      	it	eq
 80086fe:	694b      	ldreq	r3, [r1, #20]
 8008700:	600f      	str	r7, [r1, #0]
 8008702:	bf18      	it	ne
 8008704:	2300      	movne	r3, #0
 8008706:	eba6 0807 	sub.w	r8, r6, r7
 800870a:	608b      	str	r3, [r1, #8]
 800870c:	f1b8 0f00 	cmp.w	r8, #0
 8008710:	dde9      	ble.n	80086e6 <__sflush_r+0xae>
 8008712:	6a21      	ldr	r1, [r4, #32]
 8008714:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008716:	4643      	mov	r3, r8
 8008718:	463a      	mov	r2, r7
 800871a:	4628      	mov	r0, r5
 800871c:	47b0      	blx	r6
 800871e:	2800      	cmp	r0, #0
 8008720:	dc08      	bgt.n	8008734 <__sflush_r+0xfc>
 8008722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008734:	4407      	add	r7, r0
 8008736:	eba8 0800 	sub.w	r8, r8, r0
 800873a:	e7e7      	b.n	800870c <__sflush_r+0xd4>
 800873c:	dfbffffe 	.word	0xdfbffffe

08008740 <_fflush_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	690b      	ldr	r3, [r1, #16]
 8008744:	4605      	mov	r5, r0
 8008746:	460c      	mov	r4, r1
 8008748:	b913      	cbnz	r3, 8008750 <_fflush_r+0x10>
 800874a:	2500      	movs	r5, #0
 800874c:	4628      	mov	r0, r5
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	b118      	cbz	r0, 800875a <_fflush_r+0x1a>
 8008752:	6a03      	ldr	r3, [r0, #32]
 8008754:	b90b      	cbnz	r3, 800875a <_fflush_r+0x1a>
 8008756:	f7fe fa51 	bl	8006bfc <__sinit>
 800875a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f3      	beq.n	800874a <_fflush_r+0xa>
 8008762:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008764:	07d0      	lsls	r0, r2, #31
 8008766:	d404      	bmi.n	8008772 <_fflush_r+0x32>
 8008768:	0599      	lsls	r1, r3, #22
 800876a:	d402      	bmi.n	8008772 <_fflush_r+0x32>
 800876c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800876e:	f7fe fb4e 	bl	8006e0e <__retarget_lock_acquire_recursive>
 8008772:	4628      	mov	r0, r5
 8008774:	4621      	mov	r1, r4
 8008776:	f7ff ff5f 	bl	8008638 <__sflush_r>
 800877a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800877c:	07da      	lsls	r2, r3, #31
 800877e:	4605      	mov	r5, r0
 8008780:	d4e4      	bmi.n	800874c <_fflush_r+0xc>
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	059b      	lsls	r3, r3, #22
 8008786:	d4e1      	bmi.n	800874c <_fflush_r+0xc>
 8008788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878a:	f7fe fb41 	bl	8006e10 <__retarget_lock_release_recursive>
 800878e:	e7dd      	b.n	800874c <_fflush_r+0xc>

08008790 <__swbuf_r>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	460e      	mov	r6, r1
 8008794:	4614      	mov	r4, r2
 8008796:	4605      	mov	r5, r0
 8008798:	b118      	cbz	r0, 80087a2 <__swbuf_r+0x12>
 800879a:	6a03      	ldr	r3, [r0, #32]
 800879c:	b90b      	cbnz	r3, 80087a2 <__swbuf_r+0x12>
 800879e:	f7fe fa2d 	bl	8006bfc <__sinit>
 80087a2:	69a3      	ldr	r3, [r4, #24]
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	071a      	lsls	r2, r3, #28
 80087aa:	d501      	bpl.n	80087b0 <__swbuf_r+0x20>
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	b943      	cbnz	r3, 80087c2 <__swbuf_r+0x32>
 80087b0:	4621      	mov	r1, r4
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 f82a 	bl	800880c <__swsetup_r>
 80087b8:	b118      	cbz	r0, 80087c2 <__swbuf_r+0x32>
 80087ba:	f04f 37ff 	mov.w	r7, #4294967295
 80087be:	4638      	mov	r0, r7
 80087c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	6922      	ldr	r2, [r4, #16]
 80087c6:	1a98      	subs	r0, r3, r2
 80087c8:	6963      	ldr	r3, [r4, #20]
 80087ca:	b2f6      	uxtb	r6, r6
 80087cc:	4283      	cmp	r3, r0
 80087ce:	4637      	mov	r7, r6
 80087d0:	dc05      	bgt.n	80087de <__swbuf_r+0x4e>
 80087d2:	4621      	mov	r1, r4
 80087d4:	4628      	mov	r0, r5
 80087d6:	f7ff ffb3 	bl	8008740 <_fflush_r>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d1ed      	bne.n	80087ba <__swbuf_r+0x2a>
 80087de:	68a3      	ldr	r3, [r4, #8]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	60a3      	str	r3, [r4, #8]
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	6022      	str	r2, [r4, #0]
 80087ea:	701e      	strb	r6, [r3, #0]
 80087ec:	6962      	ldr	r2, [r4, #20]
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d004      	beq.n	80087fe <__swbuf_r+0x6e>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	07db      	lsls	r3, r3, #31
 80087f8:	d5e1      	bpl.n	80087be <__swbuf_r+0x2e>
 80087fa:	2e0a      	cmp	r6, #10
 80087fc:	d1df      	bne.n	80087be <__swbuf_r+0x2e>
 80087fe:	4621      	mov	r1, r4
 8008800:	4628      	mov	r0, r5
 8008802:	f7ff ff9d 	bl	8008740 <_fflush_r>
 8008806:	2800      	cmp	r0, #0
 8008808:	d0d9      	beq.n	80087be <__swbuf_r+0x2e>
 800880a:	e7d6      	b.n	80087ba <__swbuf_r+0x2a>

0800880c <__swsetup_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4b29      	ldr	r3, [pc, #164]	@ (80088b4 <__swsetup_r+0xa8>)
 8008810:	4605      	mov	r5, r0
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	460c      	mov	r4, r1
 8008816:	b118      	cbz	r0, 8008820 <__swsetup_r+0x14>
 8008818:	6a03      	ldr	r3, [r0, #32]
 800881a:	b90b      	cbnz	r3, 8008820 <__swsetup_r+0x14>
 800881c:	f7fe f9ee 	bl	8006bfc <__sinit>
 8008820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008824:	0719      	lsls	r1, r3, #28
 8008826:	d422      	bmi.n	800886e <__swsetup_r+0x62>
 8008828:	06da      	lsls	r2, r3, #27
 800882a:	d407      	bmi.n	800883c <__swsetup_r+0x30>
 800882c:	2209      	movs	r2, #9
 800882e:	602a      	str	r2, [r5, #0]
 8008830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	e033      	b.n	80088a4 <__swsetup_r+0x98>
 800883c:	0758      	lsls	r0, r3, #29
 800883e:	d512      	bpl.n	8008866 <__swsetup_r+0x5a>
 8008840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008842:	b141      	cbz	r1, 8008856 <__swsetup_r+0x4a>
 8008844:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008848:	4299      	cmp	r1, r3
 800884a:	d002      	beq.n	8008852 <__swsetup_r+0x46>
 800884c:	4628      	mov	r0, r5
 800884e:	f7ff f92f 	bl	8007ab0 <_free_r>
 8008852:	2300      	movs	r3, #0
 8008854:	6363      	str	r3, [r4, #52]	@ 0x34
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	2300      	movs	r3, #0
 8008860:	6063      	str	r3, [r4, #4]
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f043 0308 	orr.w	r3, r3, #8
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	b94b      	cbnz	r3, 8008886 <__swsetup_r+0x7a>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800887c:	d003      	beq.n	8008886 <__swsetup_r+0x7a>
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 f8c1 	bl	8008a08 <__smakebuf_r>
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	f013 0201 	ands.w	r2, r3, #1
 800888e:	d00a      	beq.n	80088a6 <__swsetup_r+0x9a>
 8008890:	2200      	movs	r2, #0
 8008892:	60a2      	str	r2, [r4, #8]
 8008894:	6962      	ldr	r2, [r4, #20]
 8008896:	4252      	negs	r2, r2
 8008898:	61a2      	str	r2, [r4, #24]
 800889a:	6922      	ldr	r2, [r4, #16]
 800889c:	b942      	cbnz	r2, 80088b0 <__swsetup_r+0xa4>
 800889e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088a2:	d1c5      	bne.n	8008830 <__swsetup_r+0x24>
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	0799      	lsls	r1, r3, #30
 80088a8:	bf58      	it	pl
 80088aa:	6962      	ldrpl	r2, [r4, #20]
 80088ac:	60a2      	str	r2, [r4, #8]
 80088ae:	e7f4      	b.n	800889a <__swsetup_r+0x8e>
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7f7      	b.n	80088a4 <__swsetup_r+0x98>
 80088b4:	20000028 	.word	0x20000028

080088b8 <_sbrk_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	@ (80088d4 <_sbrk_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7f8 ff2e 	bl	8001724 <_sbrk>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_sbrk_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_sbrk_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20000564 	.word	0x20000564

080088d8 <memcpy>:
 80088d8:	440a      	add	r2, r1
 80088da:	4291      	cmp	r1, r2
 80088dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80088e0:	d100      	bne.n	80088e4 <memcpy+0xc>
 80088e2:	4770      	bx	lr
 80088e4:	b510      	push	{r4, lr}
 80088e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ee:	4291      	cmp	r1, r2
 80088f0:	d1f9      	bne.n	80088e6 <memcpy+0xe>
 80088f2:	bd10      	pop	{r4, pc}

080088f4 <__assert_func>:
 80088f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088f6:	4614      	mov	r4, r2
 80088f8:	461a      	mov	r2, r3
 80088fa:	4b09      	ldr	r3, [pc, #36]	@ (8008920 <__assert_func+0x2c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4605      	mov	r5, r0
 8008900:	68d8      	ldr	r0, [r3, #12]
 8008902:	b954      	cbnz	r4, 800891a <__assert_func+0x26>
 8008904:	4b07      	ldr	r3, [pc, #28]	@ (8008924 <__assert_func+0x30>)
 8008906:	461c      	mov	r4, r3
 8008908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800890c:	9100      	str	r1, [sp, #0]
 800890e:	462b      	mov	r3, r5
 8008910:	4905      	ldr	r1, [pc, #20]	@ (8008928 <__assert_func+0x34>)
 8008912:	f000 f841 	bl	8008998 <fiprintf>
 8008916:	f000 f8d5 	bl	8008ac4 <abort>
 800891a:	4b04      	ldr	r3, [pc, #16]	@ (800892c <__assert_func+0x38>)
 800891c:	e7f4      	b.n	8008908 <__assert_func+0x14>
 800891e:	bf00      	nop
 8008920:	20000028 	.word	0x20000028
 8008924:	08008e5e 	.word	0x08008e5e
 8008928:	08008e30 	.word	0x08008e30
 800892c:	08008e23 	.word	0x08008e23

08008930 <_calloc_r>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	fba1 5402 	umull	r5, r4, r1, r2
 8008936:	b93c      	cbnz	r4, 8008948 <_calloc_r+0x18>
 8008938:	4629      	mov	r1, r5
 800893a:	f7ff f92d 	bl	8007b98 <_malloc_r>
 800893e:	4606      	mov	r6, r0
 8008940:	b928      	cbnz	r0, 800894e <_calloc_r+0x1e>
 8008942:	2600      	movs	r6, #0
 8008944:	4630      	mov	r0, r6
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	220c      	movs	r2, #12
 800894a:	6002      	str	r2, [r0, #0]
 800894c:	e7f9      	b.n	8008942 <_calloc_r+0x12>
 800894e:	462a      	mov	r2, r5
 8008950:	4621      	mov	r1, r4
 8008952:	f7fe f9de 	bl	8006d12 <memset>
 8008956:	e7f5      	b.n	8008944 <_calloc_r+0x14>

08008958 <__ascii_mbtowc>:
 8008958:	b082      	sub	sp, #8
 800895a:	b901      	cbnz	r1, 800895e <__ascii_mbtowc+0x6>
 800895c:	a901      	add	r1, sp, #4
 800895e:	b142      	cbz	r2, 8008972 <__ascii_mbtowc+0x1a>
 8008960:	b14b      	cbz	r3, 8008976 <__ascii_mbtowc+0x1e>
 8008962:	7813      	ldrb	r3, [r2, #0]
 8008964:	600b      	str	r3, [r1, #0]
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	1e10      	subs	r0, r2, #0
 800896a:	bf18      	it	ne
 800896c:	2001      	movne	r0, #1
 800896e:	b002      	add	sp, #8
 8008970:	4770      	bx	lr
 8008972:	4610      	mov	r0, r2
 8008974:	e7fb      	b.n	800896e <__ascii_mbtowc+0x16>
 8008976:	f06f 0001 	mvn.w	r0, #1
 800897a:	e7f8      	b.n	800896e <__ascii_mbtowc+0x16>

0800897c <__ascii_wctomb>:
 800897c:	4603      	mov	r3, r0
 800897e:	4608      	mov	r0, r1
 8008980:	b141      	cbz	r1, 8008994 <__ascii_wctomb+0x18>
 8008982:	2aff      	cmp	r2, #255	@ 0xff
 8008984:	d904      	bls.n	8008990 <__ascii_wctomb+0x14>
 8008986:	228a      	movs	r2, #138	@ 0x8a
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	f04f 30ff 	mov.w	r0, #4294967295
 800898e:	4770      	bx	lr
 8008990:	700a      	strb	r2, [r1, #0]
 8008992:	2001      	movs	r0, #1
 8008994:	4770      	bx	lr
	...

08008998 <fiprintf>:
 8008998:	b40e      	push	{r1, r2, r3}
 800899a:	b503      	push	{r0, r1, lr}
 800899c:	4601      	mov	r1, r0
 800899e:	ab03      	add	r3, sp, #12
 80089a0:	4805      	ldr	r0, [pc, #20]	@ (80089b8 <fiprintf+0x20>)
 80089a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	f7ff fd2d 	bl	8008408 <_vfiprintf_r>
 80089ae:	b002      	add	sp, #8
 80089b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b4:	b003      	add	sp, #12
 80089b6:	4770      	bx	lr
 80089b8:	20000028 	.word	0x20000028

080089bc <__swhatbuf_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c4:	2900      	cmp	r1, #0
 80089c6:	b096      	sub	sp, #88	@ 0x58
 80089c8:	4615      	mov	r5, r2
 80089ca:	461e      	mov	r6, r3
 80089cc:	da0d      	bge.n	80089ea <__swhatbuf_r+0x2e>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089d4:	f04f 0100 	mov.w	r1, #0
 80089d8:	bf14      	ite	ne
 80089da:	2340      	movne	r3, #64	@ 0x40
 80089dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089e0:	2000      	movs	r0, #0
 80089e2:	6031      	str	r1, [r6, #0]
 80089e4:	602b      	str	r3, [r5, #0]
 80089e6:	b016      	add	sp, #88	@ 0x58
 80089e8:	bd70      	pop	{r4, r5, r6, pc}
 80089ea:	466a      	mov	r2, sp
 80089ec:	f000 f848 	bl	8008a80 <_fstat_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	dbec      	blt.n	80089ce <__swhatbuf_r+0x12>
 80089f4:	9901      	ldr	r1, [sp, #4]
 80089f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089fe:	4259      	negs	r1, r3
 8008a00:	4159      	adcs	r1, r3
 8008a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a06:	e7eb      	b.n	80089e0 <__swhatbuf_r+0x24>

08008a08 <__smakebuf_r>:
 8008a08:	898b      	ldrh	r3, [r1, #12]
 8008a0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a0c:	079d      	lsls	r5, r3, #30
 8008a0e:	4606      	mov	r6, r0
 8008a10:	460c      	mov	r4, r1
 8008a12:	d507      	bpl.n	8008a24 <__smakebuf_r+0x1c>
 8008a14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	6163      	str	r3, [r4, #20]
 8008a20:	b003      	add	sp, #12
 8008a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a24:	ab01      	add	r3, sp, #4
 8008a26:	466a      	mov	r2, sp
 8008a28:	f7ff ffc8 	bl	80089bc <__swhatbuf_r>
 8008a2c:	9f00      	ldr	r7, [sp, #0]
 8008a2e:	4605      	mov	r5, r0
 8008a30:	4639      	mov	r1, r7
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7ff f8b0 	bl	8007b98 <_malloc_r>
 8008a38:	b948      	cbnz	r0, 8008a4e <__smakebuf_r+0x46>
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	059a      	lsls	r2, r3, #22
 8008a40:	d4ee      	bmi.n	8008a20 <__smakebuf_r+0x18>
 8008a42:	f023 0303 	bic.w	r3, r3, #3
 8008a46:	f043 0302 	orr.w	r3, r3, #2
 8008a4a:	81a3      	strh	r3, [r4, #12]
 8008a4c:	e7e2      	b.n	8008a14 <__smakebuf_r+0xc>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	6020      	str	r0, [r4, #0]
 8008a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a5e:	b15b      	cbz	r3, 8008a78 <__smakebuf_r+0x70>
 8008a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a64:	4630      	mov	r0, r6
 8008a66:	f000 f81d 	bl	8008aa4 <_isatty_r>
 8008a6a:	b128      	cbz	r0, 8008a78 <__smakebuf_r+0x70>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	431d      	orrs	r5, r3
 8008a7c:	81a5      	strh	r5, [r4, #12]
 8008a7e:	e7cf      	b.n	8008a20 <__smakebuf_r+0x18>

08008a80 <_fstat_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d07      	ldr	r5, [pc, #28]	@ (8008aa0 <_fstat_r+0x20>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	f7f8 fe21 	bl	80016d4 <_fstat>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d102      	bne.n	8008a9c <_fstat_r+0x1c>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b103      	cbz	r3, 8008a9c <_fstat_r+0x1c>
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000564 	.word	0x20000564

08008aa4 <_isatty_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4d06      	ldr	r5, [pc, #24]	@ (8008ac0 <_isatty_r+0x1c>)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f7f8 fe20 	bl	80016f4 <_isatty>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_isatty_r+0x1a>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_isatty_r+0x1a>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20000564 	.word	0x20000564

08008ac4 <abort>:
 8008ac4:	b508      	push	{r3, lr}
 8008ac6:	2006      	movs	r0, #6
 8008ac8:	f000 f82c 	bl	8008b24 <raise>
 8008acc:	2001      	movs	r0, #1
 8008ace:	f7f8 fdb1 	bl	8001634 <_exit>

08008ad2 <_raise_r>:
 8008ad2:	291f      	cmp	r1, #31
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	460c      	mov	r4, r1
 8008ada:	d904      	bls.n	8008ae6 <_raise_r+0x14>
 8008adc:	2316      	movs	r3, #22
 8008ade:	6003      	str	r3, [r0, #0]
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	bd38      	pop	{r3, r4, r5, pc}
 8008ae6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ae8:	b112      	cbz	r2, 8008af0 <_raise_r+0x1e>
 8008aea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008aee:	b94b      	cbnz	r3, 8008b04 <_raise_r+0x32>
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 f831 	bl	8008b58 <_getpid_r>
 8008af6:	4622      	mov	r2, r4
 8008af8:	4601      	mov	r1, r0
 8008afa:	4628      	mov	r0, r5
 8008afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b00:	f000 b818 	b.w	8008b34 <_kill_r>
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d00a      	beq.n	8008b1e <_raise_r+0x4c>
 8008b08:	1c59      	adds	r1, r3, #1
 8008b0a:	d103      	bne.n	8008b14 <_raise_r+0x42>
 8008b0c:	2316      	movs	r3, #22
 8008b0e:	6003      	str	r3, [r0, #0]
 8008b10:	2001      	movs	r0, #1
 8008b12:	e7e7      	b.n	8008ae4 <_raise_r+0x12>
 8008b14:	2100      	movs	r1, #0
 8008b16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4798      	blx	r3
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e7e0      	b.n	8008ae4 <_raise_r+0x12>
	...

08008b24 <raise>:
 8008b24:	4b02      	ldr	r3, [pc, #8]	@ (8008b30 <raise+0xc>)
 8008b26:	4601      	mov	r1, r0
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	f7ff bfd2 	b.w	8008ad2 <_raise_r>
 8008b2e:	bf00      	nop
 8008b30:	20000028 	.word	0x20000028

08008b34 <_kill_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d07      	ldr	r5, [pc, #28]	@ (8008b54 <_kill_r+0x20>)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	4608      	mov	r0, r1
 8008b3e:	4611      	mov	r1, r2
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	f7f8 fd67 	bl	8001614 <_kill>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d102      	bne.n	8008b50 <_kill_r+0x1c>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	b103      	cbz	r3, 8008b50 <_kill_r+0x1c>
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	bf00      	nop
 8008b54:	20000564 	.word	0x20000564

08008b58 <_getpid_r>:
 8008b58:	f7f8 bd54 	b.w	8001604 <_getpid>

08008b5c <_init>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr

08008b68 <_fini>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	bf00      	nop
 8008b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6e:	bc08      	pop	{r3}
 8008b70:	469e      	mov	lr, r3
 8008b72:	4770      	bx	lr
