
Demo_5XWF0_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008594  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08008728  08008728  00009728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad8  08008ad8  0000a204  2**0
                  CONTENTS
  4 .ARM          00000008  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ae0  08008ae0  0000a204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae0  08008ae0  00009ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ae4  08008ae4  00009ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  08008ae8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a204  2**0
                  CONTENTS
 10 .bss          000002ec  20000204  20000204  0000a204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  0000a204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e29  00000000  00000000  0000a234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002468  00000000  00000000  0001b05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  0001d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c11  00000000  00000000  0001e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1e3  00000000  00000000  0001f049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135db  00000000  00000000  0003c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adb02  00000000  00000000  0004f807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd309  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005164  00000000  00000000  000fd34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001024b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800870c 	.word	0x0800870c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800870c 	.word	0x0800870c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFF);
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <__io_putchar+0x20>)
 8000bba:	f004 fd41 	bl	8005640 <HAL_UART_Transmit>

	return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000300 	.word	0x20000300

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 fce2 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f862 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f000 fa32 	bl	8001040 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bdc:	f000 fa12 	bl	8001004 <MX_DMA_Init>
  MX_ADC1_Init();
 8000be0:	f000 f8b6 	bl	8000d50 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000be4:	f000 f932 	bl	8000e4c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 f9dc 	bl	8000fa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("%s", TxStartMessage);
 8000bec:	4920      	ldr	r1, [pc, #128]	@ (8000c70 <main+0xa4>)
 8000bee:	4821      	ldr	r0, [pc, #132]	@ (8000c74 <main+0xa8>)
 8000bf0:	f005 fe14 	bl	800681c <iprintf>

  PWM_Period = 64000000/(2*PWM_Freq)-1;
 8000bf4:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <main+0xac>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4a20      	ldr	r2, [pc, #128]	@ (8000c7c <main+0xb0>)
 8000bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c00:	3b01      	subs	r3, #1
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <main+0xb4>)
 8000c06:	601a      	str	r2, [r3, #0]
  PWM_PulseWidth = (int)((PWM_Period*PWM_DutyC)/100);
 8000c08:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <main+0xb4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <main+0xb8>)
 8000c16:	edd3 7a00 	vldr	s15, [r3]
 8000c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c1e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000c88 <main+0xbc>
 8000c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c2a:	ee17 2a90 	vmov	r2, s15
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <main+0xc0>)
 8000c30:	601a      	str	r2, [r3, #0]

  __HAL_TIM_SET_AUTORELOAD(&htim1, PWM_Period);
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <main+0xb4>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <main+0xc4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3c:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <main+0xb4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <main+0xc4>)
 8000c44:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth);
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <main+0xc0>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <main+0xc4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c50:	2100      	movs	r1, #0
 8000c52:	480f      	ldr	r0, [pc, #60]	@ (8000c90 <main+0xc4>)
 8000c54:	f003 fd18 	bl	8004688 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <main+0xc8>)
 8000c5c:	f000 ff82 	bl	8001b64 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Buff, 1);
 8000c60:	2201      	movs	r2, #1
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <main+0xcc>)
 8000c64:	480b      	ldr	r0, [pc, #44]	@ (8000c94 <main+0xc8>)
 8000c66:	f000 fea3 	bl	80019b0 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6a:	bf00      	nop
 8000c6c:	e7fd      	b.n	8000c6a <main+0x9e>
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000
 8000c74:	08008728 	.word	0x08008728
 8000c78:	20000028 	.word	0x20000028
 8000c7c:	03d09000 	.word	0x03d09000
 8000c80:	20000394 	.word	0x20000394
 8000c84:	2000002c 	.word	0x2000002c
 8000c88:	42c80000 	.word	0x42c80000
 8000c8c:	20000398 	.word	0x20000398
 8000c90:	200002b4 	.word	0x200002b4
 8000c94:	20000220 	.word	0x20000220
 8000c98:	20000388 	.word	0x20000388

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b096      	sub	sp, #88	@ 0x58
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca6:	2228      	movs	r2, #40	@ 0x28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f005 fe0b 	bl	80068c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ce4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000ce8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 f878 	bl	8002de4 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000cfa:	f000 f9e3 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2302      	movs	r3, #2
 8000d04:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 f8a0 	bl	8003e60 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d26:	f000 f9cd 	bl	80010c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fac8 	bl	80042cc <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d42:	f000 f9bf 	bl	80010c4 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3758      	adds	r7, #88	@ 0x58
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d72:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000d74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000d7a:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000d7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	4b31      	ldr	r3, [pc, #196]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d88:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d94:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000da4:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000da6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd2:	481d      	ldr	r0, [pc, #116]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000dd4:	f000 fc5a 	bl	800168c <HAL_ADC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000dde:	f000 f971 	bl	80010c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4816      	ldr	r0, [pc, #88]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000dee:	f001 f9e9 	bl	80021c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000df8:	f000 f964 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000e1a:	f000 ff15 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e24:	f000 f94e 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_ADC1_Init+0xf8>)
 8000e32:	f000 ff09 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000e3c:	f000 f942 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	@ 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000220 	.word	0x20000220

08000e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b09a      	sub	sp, #104	@ 0x68
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	222c      	movs	r2, #44	@ 0x2c
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f005 fd1d 	bl	80068c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8c:	4b43      	ldr	r3, [pc, #268]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000e8e:	4a44      	ldr	r2, [pc, #272]	@ (8000fa0 <MX_TIM1_Init+0x154>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e92:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e98:	4b40      	ldr	r3, [pc, #256]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000eac:	4b3b      	ldr	r3, [pc, #236]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb8:	4838      	ldr	r0, [pc, #224]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000eba:	f003 fb2d 	bl	8004518 <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ec4:	f000 f8fe 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ece:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4831      	ldr	r0, [pc, #196]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000ed6:	f003 fdd7 	bl	8004a88 <HAL_TIM_ConfigClockSource>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ee0:	f000 f8f0 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ee4:	482d      	ldr	r0, [pc, #180]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000ee6:	f003 fb6e 	bl	80045c6 <HAL_TIM_PWM_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ef0:	f000 f8e8 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4825      	ldr	r0, [pc, #148]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000f08:	f004 fa66 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f12:	f000 f8d7 	bl	80010c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f16:	2360      	movs	r3, #96	@ 0x60
 8000f18:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000f3c:	f003 fc90 	bl	8004860 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f46:	f000 f8bd 	bl	80010c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000f80:	f004 fa98 	bl	80054b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f8a:	f000 f89b 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f8e:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM1_Init+0x150>)
 8000f90:	f000 f94a 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000f94:	bf00      	nop
 8000f96:	3768      	adds	r7, #104	@ 0x68
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200002b4 	.word	0x200002b4
 8000fa0:	40012c00 	.word	0x40012c00

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000faa:	4a15      	ldr	r2, [pc, #84]	@ (8001000 <MX_USART2_UART_Init+0x5c>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fe8:	f004 fadc 	bl	80055a4 <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ff2:	f000 f867 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000300 	.word	0x20000300
 8001000:	40004400 	.word	0x40004400

08001004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_DMA_Init+0x38>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <MX_DMA_Init+0x38>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_DMA_Init+0x38>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200b      	movs	r0, #11
 8001028:	f001 fb9d 	bl	8002766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800102c:	200b      	movs	r0, #11
 800102e:	f001 fbb6 	bl	800279e <HAL_NVIC_EnableIRQ>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_GPIO_Init+0x2c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <MX_GPIO_Init+0x2c>)
 800104c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_GPIO_Init+0x2c>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

		adc_val_1 = ADC_Buff[0];
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <HAL_ADC_ConvCpltCallback+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <HAL_ADC_ConvCpltCallback+0x44>)
 800107e:	6013      	str	r3, [r2, #0]
		meas_volt_1 = (((float)adc_val_1)/4095.0f)*3.3f;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <HAL_ADC_ConvCpltCallback+0x44>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800108c:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80010b8 <HAL_ADC_ConvCpltCallback+0x48>
 8001090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001094:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80010bc <HAL_ADC_ConvCpltCallback+0x4c>
 8001098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_ADC_ConvCpltCallback+0x50>)
 800109e:	edc3 7a00 	vstr	s15, [r3]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000388 	.word	0x20000388
 80010b4:	2000038c 	.word	0x2000038c
 80010b8:	457ff000 	.word	0x457ff000
 80010bc:	40533333 	.word	0x40533333
 80010c0:	20000390 	.word	0x20000390

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <Error_Handler+0x8>

080010d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_MspInit+0x44>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	4a0e      	ldr	r2, [pc, #56]	@ (8001114 <HAL_MspInit+0x44>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6193      	str	r3, [r2, #24]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <HAL_MspInit+0x44>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <HAL_MspInit+0x44>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <HAL_MspInit+0x44>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_MspInit+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001138:	d14c      	bne.n	80011d4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800113a:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <HAL_ADC_MspInit+0xc4>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a27      	ldr	r2, [pc, #156]	@ (80011dc <HAL_ADC_MspInit+0xc4>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <HAL_ADC_MspInit+0xc4>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_ADC_MspInit+0xc4>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <HAL_ADC_MspInit+0xc4>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <HAL_ADC_MspInit+0xc4>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116e:	2303      	movs	r3, #3
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f001 fcbe 	bl	8002b00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_ADC_MspInit+0xcc>)
 8001188:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 8001198:	2280      	movs	r2, #128	@ 0x80
 800119a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800119c:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 800119e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 80011a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 80011ae:	2220      	movs	r2, #32
 80011b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b8:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 80011ba:	f001 fb0a 	bl	80027d2 <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80011c4:	f7ff ff7e 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 80011cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80011ce:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <HAL_ADC_MspInit+0xc8>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	@ 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000270 	.word	0x20000270
 80011e4:	40020008 	.word	0x40020008

080011e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_TIM_Base_MspInit+0x38>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d10b      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_TIM_Base_MspInit+0x3c>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a09      	ldr	r2, [pc, #36]	@ (8001224 <HAL_TIM_Base_MspInit+0x3c>)
 8001200:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <HAL_TIM_Base_MspInit+0x3c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40012c00 	.word	0x40012c00
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <HAL_TIM_MspPostInit+0x68>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d11d      	bne.n	8001286 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_TIM_MspPostInit+0x6c>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a11      	ldr	r2, [pc, #68]	@ (8001294 <HAL_TIM_MspPostInit+0x6c>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_TIM_MspPostInit+0x6c>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001262:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001266:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001274:	2306      	movs	r3, #6
 8001276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001282:	f001 fc3d 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40012c00 	.word	0x40012c00
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_UART_MspInit+0x80>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d129      	bne.n	800130e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <HAL_UART_MspInit+0x84>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a17      	ldr	r2, [pc, #92]	@ (800131c <HAL_UART_MspInit+0x84>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_UART_MspInit+0x84>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_UART_MspInit+0x84>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a11      	ldr	r2, [pc, #68]	@ (800131c <HAL_UART_MspInit+0x84>)
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_UART_MspInit+0x84>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80012ea:	f248 0304 	movw	r3, #32772	@ 0x8004
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fc:	2307      	movs	r3, #7
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130a:	f001 fbf9 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	@ 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004400 	.word	0x40004400
 800131c:	40021000 	.word	0x40021000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <NMI_Handler+0x4>

08001328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <UsageFault_Handler+0x4>

08001348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 f955 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <DMA1_Channel1_IRQHandler+0x10>)
 8001386:	f001 faca 	bl	800291e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000270 	.word	0x20000270

08001394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_kill>:

int _kill(int pid, int sig)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ae:	f005 fadd 	bl	800696c <__errno>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2216      	movs	r2, #22
 80013b6:	601a      	str	r2, [r3, #0]
  return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_exit>:

void _exit (int status)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ffe7 	bl	80013a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013d6:	bf00      	nop
 80013d8:	e7fd      	b.n	80013d6 <_exit+0x12>

080013da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e00a      	b.n	8001402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ec:	f3af 8000 	nop.w
 80013f0:	4601      	mov	r1, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf0      	blt.n	80013ec <_read+0x12>
  }

  return len;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e009      	b.n	800143a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	60ba      	str	r2, [r7, #8]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fbba 	bl	8000ba8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	dbf1      	blt.n	8001426 <_write+0x12>
  }
  return len;
 8001442:	687b      	ldr	r3, [r7, #4]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_close>:

int _close(int file)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001474:	605a      	str	r2, [r3, #4]
  return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_isatty>:

int _isatty(int file)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f005 fa42 	bl	800696c <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20003000 	.word	0x20003000
 8001514:	00000400 	.word	0x00000400
 8001518:	2000039c 	.word	0x2000039c
 800151c:	200004f0 	.word	0x200004f0

08001520 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800157c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001548:	f7ff ffea 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	@ (8001584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	@ (8001590 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f005 fa01 	bl	8006978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001576:	f7ff fb29 	bl	8000bcc <main>

0800157a <LoopForever>:

LoopForever:
    b LoopForever
 800157a:	e7fe      	b.n	800157a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800157c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001588:	08008ae8 	.word	0x08008ae8
  ldr r2, =_sbss
 800158c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001590:	200004f0 	.word	0x200004f0

08001594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_2_IRQHandler>
	...

08001598 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_Init+0x28>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_Init+0x28>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f001 f8d1 	bl	8002750 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	200f      	movs	r0, #15
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fd8c 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40022000 	.word	0x40022000

080015c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f8e9 	bl	80027ba <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f001 f8b1 	bl	8002766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	@ (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000030 	.word	0x20000030
 800161c:	20000038 	.word	0x20000038
 8001620:	20000034 	.word	0x20000034

08001624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000038 	.word	0x20000038
 8001648:	200003a0 	.word	0x200003a0

0800164c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200003a0 	.word	0x200003a0

08001664 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b09a      	sub	sp, #104	@ 0x68
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e172      	b.n	8001992 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d176      	bne.n	80017ac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d152      	bne.n	800176c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fd19 	bl	8001118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d13b      	bne.n	800176c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fef5 	bl	80024e4 <ADC_Disable>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d12f      	bne.n	800176c <HAL_ADC_Init+0xe0>
 800170c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001710:	2b00      	cmp	r3, #0
 8001712:	d12b      	bne.n	800176c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800171c:	f023 0302 	bic.w	r3, r3, #2
 8001720:	f043 0202 	orr.w	r2, r3, #2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001736:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001746:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001748:	4b94      	ldr	r3, [pc, #592]	@ (800199c <HAL_ADC_Init+0x310>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a94      	ldr	r2, [pc, #592]	@ (80019a0 <HAL_ADC_Init+0x314>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0c9a      	lsrs	r2, r3, #18
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800175e:	e002      	b.n	8001766 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3b01      	subs	r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f9      	bne.n	8001760 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001788:	d110      	bne.n	80017ac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f023 0312 	bic.w	r3, r3, #18
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f040 80df 	bne.w	8001978 <HAL_ADC_Init+0x2ec>
 80017ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 80da 	bne.w	8001978 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 80d2 	bne.w	8001978 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017dc:	f043 0202 	orr.w	r2, r3, #2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e4:	4b6f      	ldr	r3, [pc, #444]	@ (80019a4 <HAL_ADC_Init+0x318>)
 80017e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f0:	d102      	bne.n	80017f8 <HAL_ADC_Init+0x16c>
 80017f2:	4b6d      	ldr	r3, [pc, #436]	@ (80019a8 <HAL_ADC_Init+0x31c>)
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e002      	b.n	80017fe <HAL_ADC_Init+0x172>
 80017f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_ADC_Init+0x192>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_ADC_Init+0x192>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_ADC_Init+0x194>
 800181e:	2300      	movs	r3, #0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d11c      	bne.n	800185e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001824:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001826:	2b00      	cmp	r3, #0
 8001828:	d010      	beq.n	800184c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_ADC_Init+0x1ba>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Init+0x1ba>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_ADC_Init+0x1bc>
 8001846:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001848:	2b00      	cmp	r3, #0
 800184a:	d108      	bne.n	800185e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800184c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	431a      	orrs	r2, r3
 800185a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800185c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7e5b      	ldrb	r3, [r3, #25]
 8001862:	035b      	lsls	r3, r3, #13
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001868:	2a01      	cmp	r2, #1
 800186a:	d002      	beq.n	8001872 <HAL_ADC_Init+0x1e6>
 800186c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001870:	e000      	b.n	8001874 <HAL_ADC_Init+0x1e8>
 8001872:	2200      	movs	r2, #0
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4313      	orrs	r3, r2
 8001882:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001884:	4313      	orrs	r3, r2
 8001886:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d11b      	bne.n	80018ca <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7e5b      	ldrb	r3, [r3, #25]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	3b01      	subs	r3, #1
 80018a0:	045a      	lsls	r2, r3, #17
 80018a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018a4:	4313      	orrs	r3, r2
 80018a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80018ac:	e00d      	b.n	80018ca <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80018b6:	f043 0220 	orr.w	r2, r3, #32
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d007      	beq.n	80018e2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018da:	4313      	orrs	r3, r2
 80018dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018de:	4313      	orrs	r3, r2
 80018e0:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d114      	bne.n	800191a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018fe:	f023 0302 	bic.w	r3, r3, #2
 8001902:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7e1b      	ldrb	r3, [r3, #24]
 8001908:	039a      	lsls	r2, r3, #14
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4313      	orrs	r3, r2
 8001914:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001916:	4313      	orrs	r3, r2
 8001918:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <HAL_ADC_Init+0x320>)
 8001922:	4013      	ands	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800192a:	430b      	orrs	r3, r1
 800192c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10c      	bne.n	8001950 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	f023 010f 	bic.w	r1, r3, #15
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	631a      	str	r2, [r3, #48]	@ 0x30
 800194e:	e007      	b.n	8001960 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 020f 	bic.w	r2, r2, #15
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	@ 0x40
 8001976:	e00a      	b.n	800198e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f023 0312 	bic.w	r3, r3, #18
 8001980:	f043 0210 	orr.w	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001988:	2301      	movs	r3, #1
 800198a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800198e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001992:	4618      	mov	r0, r3
 8001994:	3768      	adds	r7, #104	@ 0x68
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000030 	.word	0x20000030
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	50000300 	.word	0x50000300
 80019a8:	50000100 	.word	0x50000100
 80019ac:	fff0c007 	.word	0xfff0c007

080019b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 80b9 	bne.w	8001b42 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_ADC_Start_DMA+0x2e>
 80019da:	2302      	movs	r3, #2
 80019dc:	e0b4      	b.n	8001b48 <HAL_ADC_Start_DMA+0x198>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80019e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b50 <HAL_ADC_Start_DMA+0x1a0>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 80a0 	bne.w	8001b34 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fd11 	bl	800241c <ADC_Enable>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f040 8092 	bne.w	8001b2a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001b50 <HAL_ADC_Start_DMA+0x1a0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <HAL_ADC_Start_DMA+0x80>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a2e:	d115      	bne.n	8001a5c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d027      	beq.n	8001a9a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a5a:	e01e      	b.n	8001a9a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a70:	d004      	beq.n	8001a7c <HAL_ADC_Start_DMA+0xcc>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a37      	ldr	r2, [pc, #220]	@ (8001b54 <HAL_ADC_Start_DMA+0x1a4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d10e      	bne.n	8001a9a <HAL_ADC_Start_DMA+0xea>
 8001a7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aac:	f023 0206 	bic.w	r2, r3, #6
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ab4:	e002      	b.n	8001abc <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac8:	4a23      	ldr	r2, [pc, #140]	@ (8001b58 <HAL_ADC_Start_DMA+0x1a8>)
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad0:	4a22      	ldr	r2, [pc, #136]	@ (8001b5c <HAL_ADC_Start_DMA+0x1ac>)
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad8:	4a21      	ldr	r2, [pc, #132]	@ (8001b60 <HAL_ADC_Start_DMA+0x1b0>)
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	221c      	movs	r2, #28
 8001ae2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0210 	orr.w	r2, r2, #16
 8001af2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3340      	adds	r3, #64	@ 0x40
 8001b0e:	4619      	mov	r1, r3
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f000 fea4 	bl	8002860 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0204 	orr.w	r2, r2, #4
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e00d      	b.n	8001b46 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001b32:	e008      	b.n	8001b46 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001b40:	e001      	b.n	8001b46 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
 8001b44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	50000300 	.word	0x50000300
 8001b54:	50000100 	.word	0x50000100
 8001b58:	08002351 	.word	0x08002351
 8001b5c:	080023cb 	.word	0x080023cb
 8001b60:	080023e7 	.word	0x080023e7

08001b64 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADCEx_Calibration_Start+0x1c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e05f      	b.n	8001c40 <HAL_ADCEx_Calibration_Start+0xdc>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fcab 	bl	80024e4 <ADC_Disable>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d14e      	bne.n	8001c36 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001bac:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bc2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001bd2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001bd4:	f7ff fd3a 	bl	800164c <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bda:	e01c      	b.n	8001c16 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001bdc:	f7ff fd36 	bl	800164c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b0a      	cmp	r3, #10
 8001be8:	d915      	bls.n	8001c16 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bf8:	d10d      	bne.n	8001c16 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f023 0312 	bic.w	r3, r3, #18
 8001c02:	f043 0210 	orr.w	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e014      	b.n	8001c40 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c24:	d0da      	beq.n	8001bdc <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f023 0303 	bic.w	r3, r3, #3
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b09b      	sub	sp, #108	@ 0x6c
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x22>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e2a1      	b.n	80021ae <HAL_ADC_ConfigChannel+0x566>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 8285 	bne.w	800218c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d81c      	bhi.n	8001cc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	231f      	movs	r3, #31
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	4019      	ands	r1, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cc2:	e063      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b09      	cmp	r3, #9
 8001cca:	d81e      	bhi.n	8001d0a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	3b1e      	subs	r3, #30
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4019      	ands	r1, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	3b1e      	subs	r3, #30
 8001cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d08:	e040      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b0e      	cmp	r3, #14
 8001d10:	d81e      	bhi.n	8001d50 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	3b3c      	subs	r3, #60	@ 0x3c
 8001d26:	221f      	movs	r2, #31
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4019      	ands	r1, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	3b3c      	subs	r3, #60	@ 0x3c
 8001d42:	fa00 f203 	lsl.w	r2, r0, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d4e:	e01d      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	3b5a      	subs	r3, #90	@ 0x5a
 8001d64:	221f      	movs	r2, #31
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4019      	ands	r1, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	3b5a      	subs	r3, #90	@ 0x5a
 8001d80:	fa00 f203 	lsl.w	r2, r0, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80e5 	bne.w	8001f66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d91c      	bls.n	8001dde <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6999      	ldr	r1, [r3, #24]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3b1e      	subs	r3, #30
 8001db6:	2207      	movs	r2, #7
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4019      	ands	r1, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6898      	ldr	r0, [r3, #8]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	619a      	str	r2, [r3, #24]
 8001ddc:	e019      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6959      	ldr	r1, [r3, #20]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	2207      	movs	r2, #7
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4019      	ands	r1, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6898      	ldr	r0, [r3, #8]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d84f      	bhi.n	8001ed4 <HAL_ADC_ConfigChannel+0x28c>
 8001e34:	a201      	add	r2, pc, #4	@ (adr r2, 8001e3c <HAL_ADC_ConfigChannel+0x1f4>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e6f 	.word	0x08001e6f
 8001e44:	08001e91 	.word	0x08001e91
 8001e48:	08001eb3 	.word	0x08001eb3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e52:	4b9c      	ldr	r3, [pc, #624]	@ (80020c4 <HAL_ADC_ConfigChannel+0x47c>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	0691      	lsls	r1, r2, #26
 8001e5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e6a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e6c:	e07b      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e74:	4b93      	ldr	r3, [pc, #588]	@ (80020c4 <HAL_ADC_ConfigChannel+0x47c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	0691      	lsls	r1, r2, #26
 8001e7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e80:	430a      	orrs	r2, r1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e8c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e8e:	e06a      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e96:	4b8b      	ldr	r3, [pc, #556]	@ (80020c4 <HAL_ADC_ConfigChannel+0x47c>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	0691      	lsls	r1, r2, #26
 8001ea0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001eae:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eb0:	e059      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001eb8:	4b82      	ldr	r3, [pc, #520]	@ (80020c4 <HAL_ADC_ConfigChannel+0x47c>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	0691      	lsls	r1, r2, #26
 8001ec2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ed2:	e048      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	069b      	lsls	r3, r3, #26
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d107      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ef6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001efe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	069b      	lsls	r3, r3, #26
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d107      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f1a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	069b      	lsls	r3, r3, #26
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f3e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d107      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f62:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001f64:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x33e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x33e>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x340>
 8001f86:	2300      	movs	r3, #0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 810a 	bne.w	80021a2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00f      	beq.n	8001fb6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	400a      	ands	r2, r1
 8001fb0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001fb4:	e049      	b.n	800204a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	d91c      	bls.n	8002012 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6999      	ldr	r1, [r3, #24]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b1b      	subs	r3, #27
 8001fea:	2207      	movs	r2, #7
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4019      	ands	r1, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6898      	ldr	r0, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	3b1b      	subs	r3, #27
 8002004:	fa00 f203 	lsl.w	r2, r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	619a      	str	r2, [r3, #24]
 8002010:	e01b      	b.n	800204a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6959      	ldr	r1, [r3, #20]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	2207      	movs	r2, #7
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	4019      	ands	r1, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6898      	ldr	r0, [r3, #8]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	fa00 f203 	lsl.w	r2, r0, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <HAL_ADC_ConfigChannel+0x480>)
 800204c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d105      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d015      	beq.n	800208e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002066:	2b11      	cmp	r3, #17
 8002068:	d105      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800206a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800207a:	2b12      	cmp	r3, #18
 800207c:	f040 8091 	bne.w	80021a2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 808a 	bne.w	80021a2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002096:	d102      	bne.n	800209e <HAL_ADC_ConfigChannel+0x456>
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <HAL_ADC_ConfigChannel+0x484>)
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e002      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x45c>
 800209e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020a2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d10e      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x488>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x488>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e006      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x48a>
 80020c4:	83fff000 	.word	0x83fff000
 80020c8:	50000300 	.word	0x50000300
 80020cc:	50000100 	.word	0x50000100
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d150      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x4b0>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x4b0>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_ADC_ConfigChannel+0x4b2>
 80020f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d13c      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b10      	cmp	r3, #16
 8002104:	d11d      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x4fa>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800210e:	d118      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800211a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800211c:	4b27      	ldr	r3, [pc, #156]	@ (80021bc <HAL_ADC_ConfigChannel+0x574>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a27      	ldr	r2, [pc, #156]	@ (80021c0 <HAL_ADC_ConfigChannel+0x578>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0c9a      	lsrs	r2, r3, #18
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002132:	e002      	b.n	800213a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	3b01      	subs	r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002140:	e02e      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b11      	cmp	r3, #17
 8002148:	d10b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x51a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002152:	d106      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800215c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800215e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002160:	e01e      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b12      	cmp	r3, #18
 8002168:	d11a      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800216a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002174:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002176:	e013      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800218a:	e00a      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800219e:	e000      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	376c      	adds	r7, #108	@ 0x6c
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000030 	.word	0x20000030
 80021c0:	431bde83 	.word	0x431bde83

080021c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b099      	sub	sp, #100	@ 0x64
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021dc:	d102      	bne.n	80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80021de:	4b5a      	ldr	r3, [pc, #360]	@ (8002348 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	e002      	b.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80021e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0a2      	b.n	800233a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021fe:	2302      	movs	r3, #2
 8002200:	e09b      	b.n	800233a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d17f      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d179      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002224:	4b49      	ldr	r3, [pc, #292]	@ (800234c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002226:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d040      	beq.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002242:	035b      	lsls	r3, r3, #13
 8002244:	430b      	orrs	r3, r1
 8002246:	431a      	orrs	r2, r3
 8002248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800224a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d108      	bne.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d15c      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800228e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002290:	2b00      	cmp	r3, #0
 8002292:	d14b      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002294:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800229c:	f023 030f 	bic.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	6811      	ldr	r1, [r2, #0]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	6892      	ldr	r2, [r2, #8]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022ae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022b0:	e03c      	b.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022bc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d108      	bne.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80022de:	2300      	movs	r3, #0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d123      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002300:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002302:	2b00      	cmp	r3, #0
 8002304:	d112      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800230e:	f023 030f 	bic.w	r3, r3, #15
 8002312:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002314:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002316:	e009      	b.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800232a:	e000      	b.n	800232e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800232c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002336:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800233a:	4618      	mov	r0, r3
 800233c:	3764      	adds	r7, #100	@ 0x64
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	50000100 	.word	0x50000100
 800234c:	50000300 	.word	0x50000300

08002350 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002366:	2b00      	cmp	r3, #0
 8002368:	d126      	bne.n	80023b8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002380:	2b00      	cmp	r3, #0
 8002382:	d115      	bne.n	80023b0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002388:	2b00      	cmp	r3, #0
 800238a:	d111      	bne.n	80023b0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f7fe fe5d 	bl	8001070 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023b6:	e004      	b.n	80023c2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff f943 	bl	8001664 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff f933 	bl	8001678 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <ADC_Enable+0x2c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <ADC_Enable+0x2c>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <ADC_Enable+0x2e>
 8002448:	2300      	movs	r3, #0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d143      	bne.n	80024d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <ADC_Enable+0xc4>)
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f043 0210 	orr.w	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e02f      	b.n	80024d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002488:	f7ff f8e0 	bl	800164c <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800248e:	e01b      	b.n	80024c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002490:	f7ff f8dc 	bl	800164c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d914      	bls.n	80024c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d00d      	beq.n	80024c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f043 0210 	orr.w	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e007      	b.n	80024d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d1dc      	bne.n	8002490 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	8000003f 	.word	0x8000003f

080024e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <ADC_Disable+0x2c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <ADC_Disable+0x2c>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <ADC_Disable+0x2e>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d047      	beq.n	80025a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030d 	and.w	r3, r3, #13
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10f      	bne.n	8002544 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0202 	orr.w	r2, r2, #2
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2203      	movs	r2, #3
 800253a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800253c:	f7ff f886 	bl	800164c <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002542:	e029      	b.n	8002598 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f043 0210 	orr.w	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e023      	b.n	80025a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002560:	f7ff f874 	bl	800164c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d914      	bls.n	8002598 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10d      	bne.n	8002598 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f043 0210 	orr.w	r2, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d0dc      	beq.n	8002560 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e2:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <__NVIC_GetPriorityGrouping+0x18>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 0307 	and.w	r3, r3, #7
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db0b      	blt.n	800263e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4907      	ldr	r1, [pc, #28]	@ (800264c <__NVIC_EnableIRQ+0x38>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2001      	movs	r0, #1
 8002636:	fa00 f202 	lsl.w	r2, r0, r2
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000e100 	.word	0xe000e100

08002650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	2b00      	cmp	r3, #0
 8002662:	db0a      	blt.n	800267a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	490c      	ldr	r1, [pc, #48]	@ (800269c <__NVIC_SetPriority+0x4c>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	440b      	add	r3, r1
 8002674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002678:	e00a      	b.n	8002690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4908      	ldr	r1, [pc, #32]	@ (80026a0 <__NVIC_SetPriority+0x50>)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	3b04      	subs	r3, #4
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	440b      	add	r3, r1
 800268e:	761a      	strb	r2, [r3, #24]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000e100 	.word	0xe000e100
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	@ 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f1c3 0307 	rsb	r3, r3, #7
 80026be:	2b04      	cmp	r3, #4
 80026c0:	bf28      	it	cs
 80026c2:	2304      	movcs	r3, #4
 80026c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3304      	adds	r3, #4
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d902      	bls.n	80026d4 <NVIC_EncodePriority+0x30>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3b03      	subs	r3, #3
 80026d2:	e000      	b.n	80026d6 <NVIC_EncodePriority+0x32>
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	f04f 32ff 	mov.w	r2, #4294967295
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	401a      	ands	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	43d9      	mvns	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	4313      	orrs	r3, r2
         );
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3724      	adds	r7, #36	@ 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800271c:	d301      	bcc.n	8002722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271e:	2301      	movs	r3, #1
 8002720:	e00f      	b.n	8002742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002722:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <SysTick_Config+0x40>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272a:	210f      	movs	r1, #15
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f7ff ff8e 	bl	8002650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002734:	4b05      	ldr	r3, [pc, #20]	@ (800274c <SysTick_Config+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273a:	4b04      	ldr	r3, [pc, #16]	@ (800274c <SysTick_Config+0x40>)
 800273c:	2207      	movs	r2, #7
 800273e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	e000e010 	.word	0xe000e010

08002750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff29 	bl	80025b0 <__NVIC_SetPriorityGrouping>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff3e 	bl	80025f8 <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ff8e 	bl	80026a4 <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff5d 	bl	8002650 <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff31 	bl	8002614 <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffa2 	bl	800270c <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e037      	b.n	8002858 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002802:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800280c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f940 	bl	8002ac0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}  
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_DMA_Start_IT+0x20>
 800287c:	2302      	movs	r3, #2
 800287e:	e04a      	b.n	8002916 <HAL_DMA_Start_IT+0xb6>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800288e:	2b01      	cmp	r3, #1
 8002890:	d13a      	bne.n	8002908 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f8d4 	bl	8002a64 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 020e 	orr.w	r2, r2, #14
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e00f      	b.n	80028f6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 020a 	orr.w	r2, r2, #10
 80028e4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0204 	bic.w	r2, r2, #4
 80028f4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e005      	b.n	8002914 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002910:	2302      	movs	r3, #2
 8002912:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002914:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	2204      	movs	r2, #4
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d024      	beq.n	8002990 <HAL_DMA_IRQHandler+0x72>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01f      	beq.n	8002990 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0204 	bic.w	r2, r2, #4
 800296c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002976:	2104      	movs	r1, #4
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d06a      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800298e:	e065      	b.n	8002a5c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	2202      	movs	r2, #2
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02c      	beq.n	80029fa <HAL_DMA_IRQHandler+0xdc>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d027      	beq.n	80029fa <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 020a 	bic.w	r2, r2, #10
 80029c6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d8:	2102      	movs	r1, #2
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d035      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80029f8:	e030      	b.n	8002a5c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	2208      	movs	r2, #8
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d028      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x13e>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d023      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020e 	bic.w	r2, r2, #14
 8002a22:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
    }
  }
}  
 8002a5a:	e7ff      	b.n	8002a5c <HAL_DMA_IRQHandler+0x13e>
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a80:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d108      	bne.n	8002aa4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aa2:	e007      	b.n	8002ab4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <DMA_CalcBaseAndBitshift+0x34>)
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a09      	ldr	r2, [pc, #36]	@ (8002af8 <DMA_CalcBaseAndBitshift+0x38>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	009a      	lsls	r2, r3, #2
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a06      	ldr	r2, [pc, #24]	@ (8002afc <DMA_CalcBaseAndBitshift+0x3c>)
 8002ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	bffdfff8 	.word	0xbffdfff8
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	40020000 	.word	0x40020000

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0e:	e14e      	b.n	8002dae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8140 	beq.w	8002da8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d005      	beq.n	8002b40 <HAL_GPIO_Init+0x40>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d130      	bne.n	8002ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b76:	2201      	movs	r2, #1
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 0201 	and.w	r2, r3, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d017      	beq.n	8002bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d123      	bne.n	8002c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	6939      	ldr	r1, [r7, #16]
 8002c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 809a 	beq.w	8002da8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	4b55      	ldr	r3, [pc, #340]	@ (8002dcc <HAL_GPIO_Init+0x2cc>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4a54      	ldr	r2, [pc, #336]	@ (8002dcc <HAL_GPIO_Init+0x2cc>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6193      	str	r3, [r2, #24]
 8002c80:	4b52      	ldr	r3, [pc, #328]	@ (8002dcc <HAL_GPIO_Init+0x2cc>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c8c:	4a50      	ldr	r2, [pc, #320]	@ (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cb6:	d013      	beq.n	8002ce0 <HAL_GPIO_Init+0x1e0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a46      	ldr	r2, [pc, #280]	@ (8002dd4 <HAL_GPIO_Init+0x2d4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00d      	beq.n	8002cdc <HAL_GPIO_Init+0x1dc>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a45      	ldr	r2, [pc, #276]	@ (8002dd8 <HAL_GPIO_Init+0x2d8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <HAL_GPIO_Init+0x1d8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a44      	ldr	r2, [pc, #272]	@ (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_GPIO_Init+0x1d4>
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e006      	b.n	8002ce2 <HAL_GPIO_Init+0x1e2>
 8002cd4:	2305      	movs	r3, #5
 8002cd6:	e004      	b.n	8002ce2 <HAL_GPIO_Init+0x1e2>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e002      	b.n	8002ce2 <HAL_GPIO_Init+0x1e2>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_GPIO_Init+0x1e2>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	f002 0203 	and.w	r2, r2, #3
 8002ce8:	0092      	lsls	r2, r2, #2
 8002cea:	4093      	lsls	r3, r2
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf2:	4937      	ldr	r1, [pc, #220]	@ (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d00:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d24:	4a2e      	ldr	r2, [pc, #184]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d4e:	4a24      	ldr	r2, [pc, #144]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d54:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d78:	4a19      	ldr	r2, [pc, #100]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002da2:	4a0f      	ldr	r2, [pc, #60]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3301      	adds	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f aea9 	bne.w	8002b10 <HAL_GPIO_Init+0x10>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	48000400 	.word	0x48000400
 8002dd8:	48000800 	.word	0x48000800
 8002ddc:	48000c00 	.word	0x48000c00
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002df4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f001 b823 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 817d 	beq.w	800311a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e20:	4bbc      	ldr	r3, [pc, #752]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d00c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e2c:	4bb9      	ldr	r3, [pc, #740]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d15c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x10e>
 8002e38:	4bb6      	ldr	r3, [pc, #728]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e44:	d155      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x10e>
 8002e46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e4a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_OscConfig+0x94>
 8002e72:	4ba8      	ldr	r3, [pc, #672]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e015      	b.n	8002ea4 <HAL_RCC_OscConfig+0xc0>
 8002e78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e7c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002e8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e90:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002e94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002ea0:	4b9c      	ldr	r3, [pc, #624]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ea8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002eac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002eb0:	fa92 f2a2 	rbit	r2, r2
 8002eb4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002eb8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002ebc:	fab2 f282 	clz	r2, r2
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f042 0220 	orr.w	r2, r2, #32
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f002 021f 	and.w	r2, r2, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 811f 	beq.w	8003118 <HAL_RCC_OscConfig+0x334>
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 8116 	bne.w	8003118 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f000 bfaf 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12e>
 8002f04:	4b83      	ldr	r3, [pc, #524]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a82      	ldr	r2, [pc, #520]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e036      	b.n	8002f80 <HAL_RCC_OscConfig+0x19c>
 8002f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x158>
 8002f22:	4b7c      	ldr	r3, [pc, #496]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7b      	ldr	r2, [pc, #492]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b79      	ldr	r3, [pc, #484]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a78      	ldr	r2, [pc, #480]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e021      	b.n	8002f80 <HAL_RCC_OscConfig+0x19c>
 8002f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x184>
 8002f4e:	4b71      	ldr	r3, [pc, #452]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a70      	ldr	r2, [pc, #448]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0x19c>
 8002f68:	4b6a      	ldr	r3, [pc, #424]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a69      	ldr	r2, [pc, #420]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b67      	ldr	r3, [pc, #412]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a66      	ldr	r2, [pc, #408]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f80:	4b64      	ldr	r3, [pc, #400]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	f023 020f 	bic.w	r2, r3, #15
 8002f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	495f      	ldr	r1, [pc, #380]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d059      	beq.n	800305e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fe fb4f 	bl	800164c <HAL_GetTick>
 8002fae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fb4a 	bl	800164c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	@ 0x64
 8002fc2:	d902      	bls.n	8002fca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	f000 bf43 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>
 8002fca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002fde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_RCC_OscConfig+0x218>
 8002ff6:	4b47      	ldr	r3, [pc, #284]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	e015      	b.n	8003028 <HAL_RCC_OscConfig+0x244>
 8002ffc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003000:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003010:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003014:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003018:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003024:	4b3b      	ldr	r3, [pc, #236]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800302c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003030:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800303c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f042 0220 	orr.w	r2, r2, #32
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f002 021f 	and.w	r2, r2, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ab      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x1d0>
 800305c:	e05d      	b.n	800311a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305e:	f7fe faf5 	bl	800164c <HAL_GetTick>
 8003062:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003068:	f7fe faf0 	bl	800164c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	@ 0x64
 8003076:	d902      	bls.n	800307e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	f000 bee9 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>
 800307e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003082:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003092:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_RCC_OscConfig+0x2cc>
 80030aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	e015      	b.n	80030dc <HAL_RCC_OscConfig+0x2f8>
 80030b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030b4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80030c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80030cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80030d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <HAL_RCC_OscConfig+0x330>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030e0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80030e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80030e8:	fa92 f2a2 	rbit	r2, r2
 80030ec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80030f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f002 021f 	and.w	r2, r2, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f202 	lsl.w	r2, r1, r2
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ab      	bne.n	8003068 <HAL_RCC_OscConfig+0x284>
 8003110:	e003      	b.n	800311a <HAL_RCC_OscConfig+0x336>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 817d 	beq.w	800342a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003130:	4ba6      	ldr	r3, [pc, #664]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800313c:	4ba3      	ldr	r3, [pc, #652]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d172      	bne.n	800322e <HAL_RCC_OscConfig+0x44a>
 8003148:	4ba0      	ldr	r3, [pc, #640]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d16c      	bne.n	800322e <HAL_RCC_OscConfig+0x44a>
 8003154:	2302      	movs	r3, #2
 8003156:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003166:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_OscConfig+0x3a0>
 800317e:	4b93      	ldr	r3, [pc, #588]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	e013      	b.n	80031ac <HAL_RCC_OscConfig+0x3c8>
 8003184:	2302      	movs	r3, #2
 8003186:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003196:	2302      	movs	r3, #2
 8003198:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800319c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80031a8:	4b88      	ldr	r3, [pc, #544]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	2202      	movs	r2, #2
 80031ae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80031b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80031b6:	fa92 f2a2 	rbit	r2, r2
 80031ba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80031be:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80031c2:	fab2 f282 	clz	r2, r2
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f042 0220 	orr.w	r2, r2, #32
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f002 021f 	and.w	r2, r2, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCC_OscConfig+0x410>
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d002      	beq.n	80031f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f000 be2e 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b75      	ldr	r3, [pc, #468]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	21f8      	movs	r1, #248	@ 0xf8
 800320a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003212:	fa91 f1a1 	rbit	r1, r1
 8003216:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800321a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800321e:	fab1 f181 	clz	r1, r1
 8003222:	b2c9      	uxtb	r1, r1
 8003224:	408b      	lsls	r3, r1
 8003226:	4969      	ldr	r1, [pc, #420]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322c:	e0fd      	b.n	800342a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8088 	beq.w	8003350 <HAL_RCC_OscConfig+0x56c>
 8003240:	2301      	movs	r3, #1
 8003242:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003252:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003260:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	461a      	mov	r2, r3
 8003268:	2301      	movs	r3, #1
 800326a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe f9ee 	bl	800164c <HAL_GetTick>
 8003270:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003276:	f7fe f9e9 	bl	800164c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d902      	bls.n	800328c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	f000 bde2 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>
 800328c:	2302      	movs	r3, #2
 800328e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800329e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d102      	bne.n	80032bc <HAL_RCC_OscConfig+0x4d8>
 80032b6:	4b45      	ldr	r3, [pc, #276]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	e013      	b.n	80032e4 <HAL_RCC_OscConfig+0x500>
 80032bc:	2302      	movs	r3, #2
 80032be:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80032ce:	2302      	movs	r3, #2
 80032d0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80032d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80032e0:	4b3a      	ldr	r3, [pc, #232]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	2202      	movs	r2, #2
 80032e6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80032ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80032ee:	fa92 f2a2 	rbit	r2, r2
 80032f2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80032f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80032fa:	fab2 f282 	clz	r2, r2
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f042 0220 	orr.w	r2, r2, #32
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	f002 021f 	and.w	r2, r2, #31
 800330a:	2101      	movs	r1, #1
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0af      	beq.n	8003276 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b2d      	ldr	r3, [pc, #180]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	21f8      	movs	r1, #248	@ 0xf8
 800332c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003334:	fa91 f1a1 	rbit	r1, r1
 8003338:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800333c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003340:	fab1 f181 	clz	r1, r1
 8003344:	b2c9      	uxtb	r1, r1
 8003346:	408b      	lsls	r3, r1
 8003348:	4920      	ldr	r1, [pc, #128]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]
 800334e:	e06c      	b.n	800342a <HAL_RCC_OscConfig+0x646>
 8003350:	2301      	movs	r3, #1
 8003352:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003362:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003370:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	2300      	movs	r3, #0
 800337a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe f966 	bl	800164c <HAL_GetTick>
 8003380:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003386:	f7fe f961 	bl	800164c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d902      	bls.n	800339c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	f000 bd5a 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>
 800339c:	2302      	movs	r3, #2
 800339e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80033ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d104      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5ec>
 80033c6:	4b01      	ldr	r3, [pc, #4]	@ (80033cc <HAL_RCC_OscConfig+0x5e8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	e015      	b.n	80033f8 <HAL_RCC_OscConfig+0x614>
 80033cc:	40021000 	.word	0x40021000
 80033d0:	2302      	movs	r3, #2
 80033d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80033e2:	2302      	movs	r3, #2
 80033e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80033e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80033f4:	4bc8      	ldr	r3, [pc, #800]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	2202      	movs	r2, #2
 80033fa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80033fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003402:	fa92 f2a2 	rbit	r2, r2
 8003406:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800340a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800340e:	fab2 f282 	clz	r2, r2
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f042 0220 	orr.w	r2, r2, #32
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	f002 021f 	and.w	r2, r2, #31
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f202 	lsl.w	r2, r1, r2
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ad      	bne.n	8003386 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8110 	beq.w	8003660 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d079      	beq.n	8003544 <HAL_RCC_OscConfig+0x760>
 8003450:	2301      	movs	r3, #1
 8003452:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4bab      	ldr	r3, [pc, #684]	@ (800371c <HAL_RCC_OscConfig+0x938>)
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	461a      	mov	r2, r3
 8003476:	2301      	movs	r3, #1
 8003478:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fe f8e7 	bl	800164c <HAL_GetTick>
 800347e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	e00a      	b.n	800349a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003484:	f7fe f8e2 	bl	800164c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d902      	bls.n	800349a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	f000 bcdb 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>
 800349a:	2302      	movs	r3, #2
 800349c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034b4:	2202      	movs	r2, #2
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f2a3 	rbit	r2, r3
 80034c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034d8:	2202      	movs	r2, #2
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80034f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f4:	4b88      	ldr	r3, [pc, #544]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 80034f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003500:	2102      	movs	r1, #2
 8003502:	6019      	str	r1, [r3, #0]
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f1a3 	rbit	r1, r3
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800351a:	6019      	str	r1, [r3, #0]
  return result;
 800351c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003520:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2101      	movs	r1, #1
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0a0      	beq.n	8003484 <HAL_RCC_OscConfig+0x6a0>
 8003542:	e08d      	b.n	8003660 <HAL_RCC_OscConfig+0x87c>
 8003544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003548:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f2a3 	rbit	r2, r3
 800355e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003562:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003566:	601a      	str	r2, [r3, #0]
  return result;
 8003568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003570:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	4b68      	ldr	r3, [pc, #416]	@ (800371c <HAL_RCC_OscConfig+0x938>)
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	461a      	mov	r2, r3
 8003582:	2300      	movs	r3, #0
 8003584:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fe f861 	bl	800164c <HAL_GetTick>
 800358a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003590:	f7fe f85c 	bl	800164c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d902      	bls.n	80035a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	f000 bc55 	b.w	8003e50 <HAL_RCC_OscConfig+0x106c>
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035ae:	2202      	movs	r2, #2
 80035b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	fa93 f2a3 	rbit	r2, r3
 80035c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80035d2:	2202      	movs	r2, #2
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fa93 f2a3 	rbit	r2, r3
 80035e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035f6:	2202      	movs	r2, #2
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	fa93 f2a3 	rbit	r2, r3
 8003608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003610:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003612:	4b41      	ldr	r3, [pc, #260]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 8003614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800361e:	2102      	movs	r1, #2
 8003620:	6019      	str	r1, [r3, #0]
 8003622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003626:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fa93 f1a3 	rbit	r1, r3
 8003630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003634:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003638:	6019      	str	r1, [r3, #0]
  return result;
 800363a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	2101      	movs	r1, #1
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d197      	bne.n	8003590 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 81a1 	beq.w	80039b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367c:	4b26      	ldr	r3, [pc, #152]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d116      	bne.n	80036b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4b23      	ldr	r3, [pc, #140]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003692:	61d3      	str	r3, [r2, #28]
 8003694:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800369c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80036ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <HAL_RCC_OscConfig+0x93c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c2:	4b17      	ldr	r3, [pc, #92]	@ (8003720 <HAL_RCC_OscConfig+0x93c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <HAL_RCC_OscConfig+0x93c>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ce:	f7fd ffbd 	bl	800164c <HAL_GetTick>
 80036d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d6:	e009      	b.n	80036ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fd ffb8 	bl	800164c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	@ 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e3b1      	b.n	8003e50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <HAL_RCC_OscConfig+0x93c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ef      	beq.n	80036d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10d      	bne.n	8003724 <HAL_RCC_OscConfig+0x940>
 8003708:	4b03      	ldr	r3, [pc, #12]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4a02      	ldr	r2, [pc, #8]	@ (8003718 <HAL_RCC_OscConfig+0x934>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6213      	str	r3, [r2, #32]
 8003714:	e03c      	b.n	8003790 <HAL_RCC_OscConfig+0x9ac>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	10908120 	.word	0x10908120
 8003720:	40007000 	.word	0x40007000
 8003724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003728:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10c      	bne.n	800374e <HAL_RCC_OscConfig+0x96a>
 8003734:	4bc1      	ldr	r3, [pc, #772]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4ac0      	ldr	r2, [pc, #768]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6213      	str	r3, [r2, #32]
 8003740:	4bbe      	ldr	r3, [pc, #760]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4abd      	ldr	r2, [pc, #756]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003746:	f023 0304 	bic.w	r3, r3, #4
 800374a:	6213      	str	r3, [r2, #32]
 800374c:	e020      	b.n	8003790 <HAL_RCC_OscConfig+0x9ac>
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x994>
 800375e:	4bb7      	ldr	r3, [pc, #732]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4ab6      	ldr	r2, [pc, #728]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	4bb4      	ldr	r3, [pc, #720]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4ab3      	ldr	r2, [pc, #716]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6213      	str	r3, [r2, #32]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0x9ac>
 8003778:	4bb0      	ldr	r3, [pc, #704]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4aaf      	ldr	r2, [pc, #700]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	6213      	str	r3, [r2, #32]
 8003784:	4bad      	ldr	r3, [pc, #692]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4aac      	ldr	r2, [pc, #688]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003794:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8081 	beq.w	80038a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fd ff53 	bl	800164c <HAL_GetTick>
 80037a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fd ff4e 	bl	800164c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e345      	b.n	8003e50 <HAL_RCC_OscConfig+0x106c>
 80037c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	fa93 f2a3 	rbit	r2, r3
 80037de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80037f0:	2202      	movs	r2, #2
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003806:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800380a:	601a      	str	r2, [r3, #0]
  return result;
 800380c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003810:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003814:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0xa4c>
 800382a:	4b84      	ldr	r3, [pc, #528]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	e013      	b.n	8003858 <HAL_RCC_OscConfig+0xa74>
 8003830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003834:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003838:	2202      	movs	r2, #2
 800383a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003840:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	fa93 f2a3 	rbit	r2, r3
 800384a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	4b79      	ldr	r3, [pc, #484]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800385c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003860:	2102      	movs	r1, #2
 8003862:	6011      	str	r1, [r2, #0]
 8003864:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003868:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	fa92 f1a2 	rbit	r1, r2
 8003872:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003876:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800387a:	6011      	str	r1, [r2, #0]
  return result;
 800387c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003880:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	fab2 f282 	clz	r2, r2
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	f002 021f 	and.w	r2, r2, #31
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f202 	lsl.w	r2, r1, r2
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d084      	beq.n	80037ac <HAL_RCC_OscConfig+0x9c8>
 80038a2:	e07f      	b.n	80039a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a4:	f7fd fed2 	bl	800164c <HAL_GetTick>
 80038a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ac:	e00b      	b.n	80038c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fd fecd 	bl	800164c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e2c4      	b.n	8003e50 <HAL_RCC_OscConfig+0x106c>
 80038c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80038ce:	2202      	movs	r2, #2
 80038d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	fa93 f2a3 	rbit	r2, r3
 80038e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80038f2:	2202      	movs	r2, #2
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	fa93 f2a3 	rbit	r2, r3
 8003904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003908:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800390c:	601a      	str	r2, [r3, #0]
  return result;
 800390e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003912:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003916:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f043 0302 	orr.w	r3, r3, #2
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d102      	bne.n	8003932 <HAL_RCC_OscConfig+0xb4e>
 800392c:	4b43      	ldr	r3, [pc, #268]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	e013      	b.n	800395a <HAL_RCC_OscConfig+0xb76>
 8003932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003936:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800393a:	2202      	movs	r2, #2
 800393c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003942:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f2a3 	rbit	r2, r3
 800394c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003950:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	4b39      	ldr	r3, [pc, #228]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800395e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003962:	2102      	movs	r1, #2
 8003964:	6011      	str	r1, [r2, #0]
 8003966:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800396a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	fa92 f1a2 	rbit	r1, r2
 8003974:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003978:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800397c:	6011      	str	r1, [r2, #0]
  return result;
 800397e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003982:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	fab2 f282 	clz	r2, r2
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f002 021f 	and.w	r2, r2, #31
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f202 	lsl.w	r2, r1, r2
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d184      	bne.n	80038ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4b23      	ldr	r3, [pc, #140]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4a22      	ldr	r2, [pc, #136]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8242 	beq.w	8003e4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ca:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <HAL_RCC_OscConfig+0xc58>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	f000 8213 	beq.w	8003dfe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f040 8162 	bne.w	8003cae <HAL_RCC_OscConfig+0xeca>
 80039ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80039f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	fa93 f2a3 	rbit	r2, r3
 8003a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a0e:	601a      	str	r2, [r3, #0]
  return result;
 8003a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a14:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fd fe0c 	bl	800164c <HAL_GetTick>
 8003a34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a38:	e00c      	b.n	8003a54 <HAL_RCC_OscConfig+0xc70>
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fe04 	bl	800164c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1fd      	b.n	8003e50 <HAL_RCC_OscConfig+0x106c>
 8003a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a58:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a66:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	fa93 f2a3 	rbit	r2, r3
 8003a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a78:	601a      	str	r2, [r3, #0]
  return result;
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d102      	bne.n	8003a9e <HAL_RCC_OscConfig+0xcba>
 8003a98:	4bb0      	ldr	r3, [pc, #704]	@ (8003d5c <HAL_RCC_OscConfig+0xf78>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	e027      	b.n	8003aee <HAL_RCC_OscConfig+0xd0a>
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003aa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003acc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	4b9c      	ldr	r3, [pc, #624]	@ (8003d5c <HAL_RCC_OscConfig+0xf78>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003af2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003af6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003afa:	6011      	str	r1, [r2, #0]
 8003afc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b00:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	fa92 f1a2 	rbit	r1, r2
 8003b0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b0e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b12:	6011      	str	r1, [r2, #0]
  return result;
 8003b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b18:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	fab2 f282 	clz	r2, r2
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f042 0220 	orr.w	r2, r2, #32
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f002 021f 	and.w	r2, r2, #31
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f202 	lsl.w	r2, r1, r2
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d182      	bne.n	8003a40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3a:	4b88      	ldr	r3, [pc, #544]	@ (8003d5c <HAL_RCC_OscConfig+0xf78>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	497f      	ldr	r1, [pc, #508]	@ (8003d5c <HAL_RCC_OscConfig+0xf78>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
 8003b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b66:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b74:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	fa93 f2a3 	rbit	r2, r3
 8003b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b86:	601a      	str	r2, [r3, #0]
  return result;
 8003b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fd50 	bl	800164c <HAL_GetTick>
 8003bac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb0:	e009      	b.n	8003bc6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fd fd4b 	bl	800164c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e144      	b.n	8003e50 <HAL_RCC_OscConfig+0x106c>
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003bce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	fa93 f2a3 	rbit	r2, r3
 8003be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003bea:	601a      	str	r2, [r3, #0]
  return result;
 8003bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003bf4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d102      	bne.n	8003c10 <HAL_RCC_OscConfig+0xe2c>
 8003c0a:	4b54      	ldr	r3, [pc, #336]	@ (8003d5c <HAL_RCC_OscConfig+0xf78>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	e027      	b.n	8003c60 <HAL_RCC_OscConfig+0xe7c>
 8003c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c14:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c22:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	fa93 f2a3 	rbit	r2, r3
 8003c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c48:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	fa93 f2a3 	rbit	r2, r3
 8003c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c56:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d5c <HAL_RCC_OscConfig+0xf78>)
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c64:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c72:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	fa92 f1a2 	rbit	r1, r2
 8003c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c80:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c84:	6011      	str	r1, [r2, #0]
  return result;
 8003c86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c8a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	fab2 f282 	clz	r2, r2
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f042 0220 	orr.w	r2, r2, #32
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f002 021f 	and.w	r2, r2, #31
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d082      	beq.n	8003bb2 <HAL_RCC_OscConfig+0xdce>
 8003cac:	e0cf      	b.n	8003e4e <HAL_RCC_OscConfig+0x106a>
 8003cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003cb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	fa93 f2a3 	rbit	r2, r3
 8003cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cd2:	601a      	str	r2, [r3, #0]
  return result;
 8003cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ce8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fcaa 	bl	800164c <HAL_GetTick>
 8003cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfc:	e009      	b.n	8003d12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fd fca5 	bl	800164c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e09e      	b.n	8003e50 <HAL_RCC_OscConfig+0x106c>
 8003d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d24:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	fa93 f2a3 	rbit	r2, r3
 8003d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d32:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d36:	601a      	str	r2, [r3, #0]
  return result;
 8003d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d104      	bne.n	8003d60 <HAL_RCC_OscConfig+0xf7c>
 8003d56:	4b01      	ldr	r3, [pc, #4]	@ (8003d5c <HAL_RCC_OscConfig+0xf78>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	e029      	b.n	8003db0 <HAL_RCC_OscConfig+0xfcc>
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d64:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d72:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	fa93 f2a3 	rbit	r2, r3
 8003d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d80:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d98:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	fa93 f2a3 	rbit	r2, r3
 8003da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <HAL_RCC_OscConfig+0x1078>)
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003db4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003db8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dc2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	fa92 f1a2 	rbit	r1, r2
 8003dcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dd0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003dd4:	6011      	str	r1, [r2, #0]
  return result;
 8003dd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dda:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	fab2 f282 	clz	r2, r2
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f042 0220 	orr.w	r2, r2, #32
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	f002 021f 	and.w	r2, r2, #31
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f202 	lsl.w	r2, r1, r2
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d180      	bne.n	8003cfe <HAL_RCC_OscConfig+0xf1a>
 8003dfc:	e027      	b.n	8003e4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e01e      	b.n	8003e50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_OscConfig+0x1078>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e1e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d10b      	bne.n	8003e4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003e32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000

08003e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b09e      	sub	sp, #120	@ 0x78
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e162      	b.n	800413e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e78:	4b90      	ldr	r3, [pc, #576]	@ (80040bc <HAL_RCC_ClockConfig+0x25c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d910      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b8d      	ldr	r3, [pc, #564]	@ (80040bc <HAL_RCC_ClockConfig+0x25c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 0207 	bic.w	r2, r3, #7
 8003e8e:	498b      	ldr	r1, [pc, #556]	@ (80040bc <HAL_RCC_ClockConfig+0x25c>)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b89      	ldr	r3, [pc, #548]	@ (80040bc <HAL_RCC_ClockConfig+0x25c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e14a      	b.n	800413e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb4:	4b82      	ldr	r3, [pc, #520]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	497f      	ldr	r1, [pc, #508]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80dc 	beq.w	800408c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d13c      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xf6>
 8003edc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ee0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xa6>
 8003f00:	4b6f      	ldr	r3, [pc, #444]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	e00f      	b.n	8003f26 <HAL_RCC_ClockConfig+0xc6>
 8003f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f22:	4b67      	ldr	r3, [pc, #412]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f2e:	fa92 f2a2 	rbit	r2, r2
 8003f32:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003f34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f36:	fab2 f282 	clz	r2, r2
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	f042 0220 	orr.w	r2, r2, #32
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	f002 021f 	and.w	r2, r2, #31
 8003f46:	2101      	movs	r1, #1
 8003f48:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d17b      	bne.n	800404a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0f3      	b.n	800413e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d13c      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x178>
 8003f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d102      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x128>
 8003f82:	4b4f      	ldr	r3, [pc, #316]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	e00f      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x148>
 8003f88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fa4:	4b46      	ldr	r3, [pc, #280]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003fae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fb0:	fa92 f2a2 	rbit	r2, r2
 8003fb4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fb8:	fab2 f282 	clz	r2, r2
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	f042 0220 	orr.w	r2, r2, #32
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	f002 021f 	and.w	r2, r2, #31
 8003fc8:	2101      	movs	r1, #1
 8003fca:	fa01 f202 	lsl.w	r2, r1, r2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d13a      	bne.n	800404a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0b2      	b.n	800413e <HAL_RCC_ClockConfig+0x2de>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d102      	bne.n	8004000 <HAL_RCC_ClockConfig+0x1a0>
 8003ffa:	4b31      	ldr	r3, [pc, #196]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	e00d      	b.n	800401c <HAL_RCC_ClockConfig+0x1bc>
 8004000:	2302      	movs	r3, #2
 8004002:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
 800400c:	2302      	movs	r3, #2
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	4b29      	ldr	r3, [pc, #164]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	2202      	movs	r2, #2
 800401e:	61ba      	str	r2, [r7, #24]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	fa92 f2a2 	rbit	r2, r2
 8004026:	617a      	str	r2, [r7, #20]
  return result;
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	fab2 f282 	clz	r2, r2
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	f042 0220 	orr.w	r2, r2, #32
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	f002 021f 	and.w	r2, r2, #31
 800403a:	2101      	movs	r1, #1
 800403c:	fa01 f202 	lsl.w	r2, r1, r2
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e079      	b.n	800413e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404a:	4b1d      	ldr	r3, [pc, #116]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f023 0203 	bic.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	491a      	ldr	r1, [pc, #104]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800405c:	f7fd faf6 	bl	800164c <HAL_GetTick>
 8004060:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	e00a      	b.n	800407a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fd faf2 	bl	800164c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e061      	b.n	800413e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <HAL_RCC_ClockConfig+0x260>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 020c 	and.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	429a      	cmp	r2, r3
 800408a:	d1eb      	bne.n	8004064 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800408c:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <HAL_RCC_ClockConfig+0x25c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d214      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <HAL_RCC_ClockConfig+0x25c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 0207 	bic.w	r2, r3, #7
 80040a2:	4906      	ldr	r1, [pc, #24]	@ (80040bc <HAL_RCC_ClockConfig+0x25c>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <HAL_RCC_ClockConfig+0x25c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e040      	b.n	800413e <HAL_RCC_ClockConfig+0x2de>
 80040bc:	40022000 	.word	0x40022000
 80040c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004148 <HAL_RCC_ClockConfig+0x2e8>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	491a      	ldr	r1, [pc, #104]	@ (8004148 <HAL_RCC_ClockConfig+0x2e8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ee:	4b16      	ldr	r3, [pc, #88]	@ (8004148 <HAL_RCC_ClockConfig+0x2e8>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4912      	ldr	r1, [pc, #72]	@ (8004148 <HAL_RCC_ClockConfig+0x2e8>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004102:	f000 f829 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8004106:	4601      	mov	r1, r0
 8004108:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <HAL_RCC_ClockConfig+0x2e8>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004110:	22f0      	movs	r2, #240	@ 0xf0
 8004112:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	fa92 f2a2 	rbit	r2, r2
 800411a:	60fa      	str	r2, [r7, #12]
  return result;
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	fab2 f282 	clz	r2, r2
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	40d3      	lsrs	r3, r2
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <HAL_RCC_ClockConfig+0x2ec>)
 8004128:	5cd3      	ldrb	r3, [r2, r3]
 800412a:	fa21 f303 	lsr.w	r3, r1, r3
 800412e:	4a08      	ldr	r2, [pc, #32]	@ (8004150 <HAL_RCC_ClockConfig+0x2f0>)
 8004130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <HAL_RCC_ClockConfig+0x2f4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd fa44 	bl	80015c4 <HAL_InitTick>
  
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3778      	adds	r7, #120	@ 0x78
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000
 800414c:	0800872c 	.word	0x0800872c
 8004150:	20000030 	.word	0x20000030
 8004154:	20000034 	.word	0x20000034

08004158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	b08b      	sub	sp, #44	@ 0x2c
 800415c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004172:	4b29      	ldr	r3, [pc, #164]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b04      	cmp	r3, #4
 8004180:	d002      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x30>
 8004182:	2b08      	cmp	r3, #8
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x36>
 8004186:	e03c      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004188:	4b24      	ldr	r3, [pc, #144]	@ (800421c <HAL_RCC_GetSysClockFreq+0xc4>)
 800418a:	623b      	str	r3, [r7, #32]
      break;
 800418c:	e03c      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004194:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004198:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	fa92 f2a2 	rbit	r2, r2
 80041a0:	607a      	str	r2, [r7, #4]
  return result;
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	fab2 f282 	clz	r2, r2
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	40d3      	lsrs	r3, r2
 80041ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004220 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041ae:	5cd3      	ldrb	r3, [r2, r3]
 80041b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041b2:	4b19      	ldr	r3, [pc, #100]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	220f      	movs	r2, #15
 80041bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	fa92 f2a2 	rbit	r2, r2
 80041c4:	60fa      	str	r2, [r7, #12]
  return result;
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	fab2 f282 	clz	r2, r2
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	40d3      	lsrs	r3, r2
 80041d0:	4a14      	ldr	r2, [pc, #80]	@ (8004224 <HAL_RCC_GetSysClockFreq+0xcc>)
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
 80041d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041e0:	4a0e      	ldr	r2, [pc, #56]	@ (800421c <HAL_RCC_GetSysClockFreq+0xc4>)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f0:	e004      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xd0>)
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	623b      	str	r3, [r7, #32]
      break;
 8004200:	e002      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004202:	4b06      	ldr	r3, [pc, #24]	@ (800421c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004204:	623b      	str	r3, [r7, #32]
      break;
 8004206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004208:	6a3b      	ldr	r3, [r7, #32]
}
 800420a:	4618      	mov	r0, r3
 800420c:	372c      	adds	r7, #44	@ 0x2c
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	007a1200 	.word	0x007a1200
 8004220:	08008744 	.word	0x08008744
 8004224:	08008754 	.word	0x08008754
 8004228:	003d0900 	.word	0x003d0900

0800422c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004230:	4b03      	ldr	r3, [pc, #12]	@ (8004240 <HAL_RCC_GetHCLKFreq+0x14>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000030 	.word	0x20000030

08004244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800424a:	f7ff ffef 	bl	800422c <HAL_RCC_GetHCLKFreq>
 800424e:	4601      	mov	r1, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004258:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800425c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	fa92 f2a2 	rbit	r2, r2
 8004264:	603a      	str	r2, [r7, #0]
  return result;
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	fab2 f282 	clz	r2, r2
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	40d3      	lsrs	r3, r2
 8004270:	4a04      	ldr	r2, [pc, #16]	@ (8004284 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004272:	5cd3      	ldrb	r3, [r2, r3]
 8004274:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	0800873c 	.word	0x0800873c

08004288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800428e:	f7ff ffcd 	bl	800422c <HAL_RCC_GetHCLKFreq>
 8004292:	4601      	mov	r1, r0
 8004294:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800429c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80042a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	fa92 f2a2 	rbit	r2, r2
 80042a8:	603a      	str	r2, [r7, #0]
  return result;
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	fab2 f282 	clz	r2, r2
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	40d3      	lsrs	r3, r2
 80042b4:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	0800873c 	.word	0x0800873c

080042cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b092      	sub	sp, #72	@ 0x48
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80cd 	beq.w	800448a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f0:	4b86      	ldr	r3, [pc, #536]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10e      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b83      	ldr	r3, [pc, #524]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	4a82      	ldr	r2, [pc, #520]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004306:	61d3      	str	r3, [r2, #28]
 8004308:	4b80      	ldr	r3, [pc, #512]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b7d      	ldr	r3, [pc, #500]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d118      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b7a      	ldr	r3, [pc, #488]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a79      	ldr	r2, [pc, #484]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004330:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004332:	f7fd f98b 	bl	800164c <HAL_GetTick>
 8004336:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	e008      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433a:	f7fd f987 	bl	800164c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	@ 0x64
 8004346:	d901      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0db      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b70      	ldr	r3, [pc, #448]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004358:	4b6c      	ldr	r3, [pc, #432]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d07d      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004370:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004372:	429a      	cmp	r2, r3
 8004374:	d076      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004376:	4b65      	ldr	r3, [pc, #404]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800437e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004380:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800438e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	4b5e      	ldr	r3, [pc, #376]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	461a      	mov	r2, r3
 80043a0:	2301      	movs	r3, #1
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80043b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b4:	fab3 f383 	clz	r3, r3
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b55      	ldr	r3, [pc, #340]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043c8:	4a50      	ldr	r2, [pc, #320]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d045      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fd f938 	bl	800164c <HAL_GetTick>
 80043dc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fd f934 	bl	800164c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e086      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80043f6:	2302      	movs	r3, #2
 80043f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
 8004402:	2302      	movs	r3, #2
 8004404:	623b      	str	r3, [r7, #32]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	61fb      	str	r3, [r7, #28]
  return result;
 800440e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	fab3 f383 	clz	r3, r3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f043 0302 	orr.w	r3, r3, #2
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d102      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004424:	4b39      	ldr	r3, [pc, #228]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	e007      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800442a:	2302      	movs	r3, #2
 800442c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	4b35      	ldr	r3, [pc, #212]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	2202      	movs	r2, #2
 800443c:	613a      	str	r2, [r7, #16]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	fa92 f2a2 	rbit	r2, r2
 8004444:	60fa      	str	r2, [r7, #12]
  return result;
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	fab2 f282 	clz	r2, r2
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	f002 021f 	and.w	r2, r2, #31
 8004458:	2101      	movs	r1, #1
 800445a:	fa01 f202 	lsl.w	r2, r1, r2
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0bd      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004464:	4b29      	ldr	r3, [pc, #164]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4926      	ldr	r1, [pc, #152]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004472:	4313      	orrs	r3, r2
 8004474:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004476:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800447a:	2b01      	cmp	r3, #1
 800447c:	d105      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447e:	4b23      	ldr	r3, [pc, #140]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	4a22      	ldr	r2, [pc, #136]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004488:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d008      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004496:	4b1d      	ldr	r3, [pc, #116]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	491a      	ldr	r1, [pc, #104]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044b4:	4b15      	ldr	r3, [pc, #84]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b8:	f023 0210 	bic.w	r2, r3, #16
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4912      	ldr	r1, [pc, #72]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044d2:	4b0e      	ldr	r3, [pc, #56]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	490b      	ldr	r1, [pc, #44]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	4903      	ldr	r1, [pc, #12]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3748      	adds	r7, #72	@ 0x48
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	40007000 	.word	0x40007000
 8004514:	10908100 	.word	0x10908100

08004518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e049      	b.n	80045be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fe52 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f000 fb60 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e049      	b.n	800466c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f841 	bl	8004674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f000 fb09 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <HAL_TIM_PWM_Start+0x24>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	bf14      	ite	ne
 80046a4:	2301      	movne	r3, #1
 80046a6:	2300      	moveq	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e03c      	b.n	8004726 <HAL_TIM_PWM_Start+0x9e>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d109      	bne.n	80046c6 <HAL_TIM_PWM_Start+0x3e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e02f      	b.n	8004726 <HAL_TIM_PWM_Start+0x9e>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d109      	bne.n	80046e0 <HAL_TIM_PWM_Start+0x58>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e022      	b.n	8004726 <HAL_TIM_PWM_Start+0x9e>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d109      	bne.n	80046fa <HAL_TIM_PWM_Start+0x72>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	bf14      	ite	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	2300      	moveq	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	e015      	b.n	8004726 <HAL_TIM_PWM_Start+0x9e>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d109      	bne.n	8004714 <HAL_TIM_PWM_Start+0x8c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e008      	b.n	8004726 <HAL_TIM_PWM_Start+0x9e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e088      	b.n	8004840 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0xb6>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800473c:	e023      	b.n	8004786 <HAL_TIM_PWM_Start+0xfe>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b04      	cmp	r3, #4
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0xc6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800474c:	e01b      	b.n	8004786 <HAL_TIM_PWM_Start+0xfe>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0xd6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800475c:	e013      	b.n	8004786 <HAL_TIM_PWM_Start+0xfe>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xe6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800476c:	e00b      	b.n	8004786 <HAL_TIM_PWM_Start+0xfe>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b10      	cmp	r3, #16
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Start+0xf6>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800477c:	e003      	b.n	8004786 <HAL_TIM_PWM_Start+0xfe>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2201      	movs	r2, #1
 800478c:	6839      	ldr	r1, [r7, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fdfc 	bl	800538c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2b      	ldr	r2, [pc, #172]	@ (8004848 <HAL_TIM_PWM_Start+0x1c0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_PWM_Start+0x134>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2a      	ldr	r2, [pc, #168]	@ (800484c <HAL_TIM_PWM_Start+0x1c4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_PWM_Start+0x134>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a28      	ldr	r2, [pc, #160]	@ (8004850 <HAL_TIM_PWM_Start+0x1c8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_PWM_Start+0x134>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a27      	ldr	r2, [pc, #156]	@ (8004854 <HAL_TIM_PWM_Start+0x1cc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_TIM_PWM_Start+0x138>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_TIM_PWM_Start+0x13a>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1b      	ldr	r2, [pc, #108]	@ (8004848 <HAL_TIM_PWM_Start+0x1c0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00e      	beq.n	80047fe <HAL_TIM_PWM_Start+0x176>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e8:	d009      	beq.n	80047fe <HAL_TIM_PWM_Start+0x176>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004858 <HAL_TIM_PWM_Start+0x1d0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <HAL_TIM_PWM_Start+0x176>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a14      	ldr	r2, [pc, #80]	@ (800484c <HAL_TIM_PWM_Start+0x1c4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d115      	bne.n	800482a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	4b15      	ldr	r3, [pc, #84]	@ (800485c <HAL_TIM_PWM_Start+0x1d4>)
 8004806:	4013      	ands	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b06      	cmp	r3, #6
 800480e:	d015      	beq.n	800483c <HAL_TIM_PWM_Start+0x1b4>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004816:	d011      	beq.n	800483c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	e008      	b.n	800483c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e000      	b.n	800483e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800
 8004858:	40000400 	.word	0x40000400
 800485c:	00010007 	.word	0x00010007

08004860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800487a:	2302      	movs	r3, #2
 800487c:	e0ff      	b.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b14      	cmp	r3, #20
 800488a:	f200 80f0 	bhi.w	8004a6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800488e:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048e9 	.word	0x080048e9
 8004898:	08004a6f 	.word	0x08004a6f
 800489c:	08004a6f 	.word	0x08004a6f
 80048a0:	08004a6f 	.word	0x08004a6f
 80048a4:	08004929 	.word	0x08004929
 80048a8:	08004a6f 	.word	0x08004a6f
 80048ac:	08004a6f 	.word	0x08004a6f
 80048b0:	08004a6f 	.word	0x08004a6f
 80048b4:	0800496b 	.word	0x0800496b
 80048b8:	08004a6f 	.word	0x08004a6f
 80048bc:	08004a6f 	.word	0x08004a6f
 80048c0:	08004a6f 	.word	0x08004a6f
 80048c4:	080049ab 	.word	0x080049ab
 80048c8:	08004a6f 	.word	0x08004a6f
 80048cc:	08004a6f 	.word	0x08004a6f
 80048d0:	08004a6f 	.word	0x08004a6f
 80048d4:	080049ed 	.word	0x080049ed
 80048d8:	08004a6f 	.word	0x08004a6f
 80048dc:	08004a6f 	.word	0x08004a6f
 80048e0:	08004a6f 	.word	0x08004a6f
 80048e4:	08004a2d 	.word	0x08004a2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fa0c 	bl	8004d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0208 	orr.w	r2, r2, #8
 8004902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0204 	bic.w	r2, r2, #4
 8004912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6999      	ldr	r1, [r3, #24]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	619a      	str	r2, [r3, #24]
      break;
 8004926:	e0a5      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fa72 	bl	8004e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]
      break;
 8004968:	e084      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fad1 	bl	8004f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0208 	orr.w	r2, r2, #8
 8004984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0204 	bic.w	r2, r2, #4
 8004994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69d9      	ldr	r1, [r3, #28]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	61da      	str	r2, [r3, #28]
      break;
 80049a8:	e064      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fb2f 	bl	8005014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69d9      	ldr	r1, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	021a      	lsls	r2, r3, #8
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	61da      	str	r2, [r3, #28]
      break;
 80049ea:	e043      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fb72 	bl	80050dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0208 	orr.w	r2, r2, #8
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0204 	bic.w	r2, r2, #4
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a2a:	e023      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fbb0 	bl	8005198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a6c:	e002      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
      break;
 8004a72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop

08004a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0b6      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x18a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ae0:	d03e      	beq.n	8004b60 <HAL_TIM_ConfigClockSource+0xd8>
 8004ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ae6:	f200 8087 	bhi.w	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aee:	f000 8086 	beq.w	8004bfe <HAL_TIM_ConfigClockSource+0x176>
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af6:	d87f      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
 8004af8:	2b70      	cmp	r3, #112	@ 0x70
 8004afa:	d01a      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0xaa>
 8004afc:	2b70      	cmp	r3, #112	@ 0x70
 8004afe:	d87b      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
 8004b00:	2b60      	cmp	r3, #96	@ 0x60
 8004b02:	d050      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x11e>
 8004b04:	2b60      	cmp	r3, #96	@ 0x60
 8004b06:	d877      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
 8004b08:	2b50      	cmp	r3, #80	@ 0x50
 8004b0a:	d03c      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0xfe>
 8004b0c:	2b50      	cmp	r3, #80	@ 0x50
 8004b0e:	d873      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
 8004b10:	2b40      	cmp	r3, #64	@ 0x40
 8004b12:	d058      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x13e>
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d86f      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
 8004b18:	2b30      	cmp	r3, #48	@ 0x30
 8004b1a:	d064      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15e>
 8004b1c:	2b30      	cmp	r3, #48	@ 0x30
 8004b1e:	d86b      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d060      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15e>
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d867      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d05c      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15e>
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d05a      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15e>
 8004b30:	e062      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b42:	f000 fc03 	bl	800534c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	609a      	str	r2, [r3, #8]
      break;
 8004b5e:	e04f      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b70:	f000 fbec 	bl	800534c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b82:	609a      	str	r2, [r3, #8]
      break;
 8004b84:	e03c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 fb60 	bl	8005258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2150      	movs	r1, #80	@ 0x50
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fbb9 	bl	8005316 <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e02c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f000 fb7f 	bl	80052b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2160      	movs	r1, #96	@ 0x60
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fba9 	bl	8005316 <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e01c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 fb40 	bl	8005258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2140      	movs	r1, #64	@ 0x40
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fb99 	bl	8005316 <TIM_ITRx_SetConfig>
      break;
 8004be4:	e00c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f000 fb90 	bl	8005316 <TIM_ITRx_SetConfig>
      break;
 8004bf6:	e003      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfc:	e000      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a32      	ldr	r2, [pc, #200]	@ (8004cf8 <TIM_Base_SetConfig+0xdc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_Base_SetConfig+0x28>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0x28>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cfc <TIM_Base_SetConfig+0xe0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d108      	bne.n	8004c56 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a27      	ldr	r2, [pc, #156]	@ (8004cf8 <TIM_Base_SetConfig+0xdc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d00f      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <TIM_Base_SetConfig+0xe0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <TIM_Base_SetConfig+0xe4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a22      	ldr	r2, [pc, #136]	@ (8004d04 <TIM_Base_SetConfig+0xe8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <TIM_Base_SetConfig+0xec>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <TIM_Base_SetConfig+0xdc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0xc0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d00 <TIM_Base_SetConfig+0xe4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0xc0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a0d      	ldr	r2, [pc, #52]	@ (8004d04 <TIM_Base_SetConfig+0xe8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0xc0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8004d08 <TIM_Base_SetConfig+0xec>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d103      	bne.n	8004ce4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	615a      	str	r2, [r3, #20]
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40014400 	.word	0x40014400
 8004d08:	40014800 	.word	0x40014800

08004d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 0302 	bic.w	r3, r3, #2
 8004d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a28      	ldr	r2, [pc, #160]	@ (8004e08 <TIM_OC1_SetConfig+0xfc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00b      	beq.n	8004d84 <TIM_OC1_SetConfig+0x78>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a27      	ldr	r2, [pc, #156]	@ (8004e0c <TIM_OC1_SetConfig+0x100>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d007      	beq.n	8004d84 <TIM_OC1_SetConfig+0x78>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a26      	ldr	r2, [pc, #152]	@ (8004e10 <TIM_OC1_SetConfig+0x104>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <TIM_OC1_SetConfig+0x78>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a25      	ldr	r2, [pc, #148]	@ (8004e14 <TIM_OC1_SetConfig+0x108>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d10c      	bne.n	8004d9e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0308 	bic.w	r3, r3, #8
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f023 0304 	bic.w	r3, r3, #4
 8004d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a19      	ldr	r2, [pc, #100]	@ (8004e08 <TIM_OC1_SetConfig+0xfc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_OC1_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a18      	ldr	r2, [pc, #96]	@ (8004e0c <TIM_OC1_SetConfig+0x100>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_OC1_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a17      	ldr	r2, [pc, #92]	@ (8004e10 <TIM_OC1_SetConfig+0x104>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_OC1_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a16      	ldr	r2, [pc, #88]	@ (8004e14 <TIM_OC1_SetConfig+0x108>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d111      	bne.n	8004de2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800

08004e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0210 	bic.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0320 	bic.w	r3, r3, #32
 8004e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a24      	ldr	r2, [pc, #144]	@ (8004f08 <TIM_OC2_SetConfig+0xf0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d10d      	bne.n	8004e98 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f08 <TIM_OC2_SetConfig+0xf0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_OC2_SetConfig+0xa0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f0c <TIM_OC2_SetConfig+0xf4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_OC2_SetConfig+0xa0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <TIM_OC2_SetConfig+0xf8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_OC2_SetConfig+0xa0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a18      	ldr	r2, [pc, #96]	@ (8004f14 <TIM_OC2_SetConfig+0xfc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d113      	bne.n	8004ee0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ebe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ec6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800

08004f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a23      	ldr	r2, [pc, #140]	@ (8005004 <TIM_OC3_SetConfig+0xec>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10d      	bne.n	8004f96 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1a      	ldr	r2, [pc, #104]	@ (8005004 <TIM_OC3_SetConfig+0xec>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_OC3_SetConfig+0x9e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <TIM_OC3_SetConfig+0xf0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d007      	beq.n	8004fb6 <TIM_OC3_SetConfig+0x9e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a18      	ldr	r2, [pc, #96]	@ (800500c <TIM_OC3_SetConfig+0xf4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_OC3_SetConfig+0x9e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a17      	ldr	r2, [pc, #92]	@ (8005010 <TIM_OC3_SetConfig+0xf8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d113      	bne.n	8004fde <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	621a      	str	r2, [r3, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800

08005014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a16      	ldr	r2, [pc, #88]	@ (80050cc <TIM_OC4_SetConfig+0xb8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00b      	beq.n	8005090 <TIM_OC4_SetConfig+0x7c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <TIM_OC4_SetConfig+0xbc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_OC4_SetConfig+0x7c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a14      	ldr	r2, [pc, #80]	@ (80050d4 <TIM_OC4_SetConfig+0xc0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_OC4_SetConfig+0x7c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a13      	ldr	r2, [pc, #76]	@ (80050d8 <TIM_OC4_SetConfig+0xc4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d109      	bne.n	80050a4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	019b      	lsls	r3, r3, #6
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800

080050dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800510a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a15      	ldr	r2, [pc, #84]	@ (8005188 <TIM_OC5_SetConfig+0xac>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00b      	beq.n	800514e <TIM_OC5_SetConfig+0x72>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a14      	ldr	r2, [pc, #80]	@ (800518c <TIM_OC5_SetConfig+0xb0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <TIM_OC5_SetConfig+0x72>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a13      	ldr	r2, [pc, #76]	@ (8005190 <TIM_OC5_SetConfig+0xb4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_OC5_SetConfig+0x72>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a12      	ldr	r2, [pc, #72]	@ (8005194 <TIM_OC5_SetConfig+0xb8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d109      	bne.n	8005162 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005154:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	621a      	str	r2, [r3, #32]
}
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	051b      	lsls	r3, r3, #20
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a16      	ldr	r2, [pc, #88]	@ (8005248 <TIM_OC6_SetConfig+0xb0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00b      	beq.n	800520c <TIM_OC6_SetConfig+0x74>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a15      	ldr	r2, [pc, #84]	@ (800524c <TIM_OC6_SetConfig+0xb4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_OC6_SetConfig+0x74>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a14      	ldr	r2, [pc, #80]	@ (8005250 <TIM_OC6_SetConfig+0xb8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_OC6_SetConfig+0x74>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <TIM_OC6_SetConfig+0xbc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d109      	bne.n	8005220 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	029b      	lsls	r3, r3, #10
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800

08005258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 030a 	bic.w	r3, r3, #10
 8005294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b087      	sub	sp, #28
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f023 0210 	bic.w	r2, r3, #16
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	f043 0307 	orr.w	r3, r3, #7
 8005338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	609a      	str	r2, [r3, #8]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	021a      	lsls	r2, r3, #8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	431a      	orrs	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4313      	orrs	r3, r2
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	609a      	str	r2, [r3, #8]
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2201      	movs	r2, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	401a      	ands	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e054      	b.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a24      	ldr	r2, [pc, #144]	@ (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d108      	bne.n	800542c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005420:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a17      	ldr	r2, [pc, #92]	@ (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00e      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005458:	d009      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a13      	ldr	r2, [pc, #76]	@ (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a11      	ldr	r2, [pc, #68]	@ (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d10c      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4313      	orrs	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40014000 	.word	0x40014000

080054b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e060      	b.n	8005592 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a14      	ldr	r2, [pc, #80]	@ (80055a0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d115      	bne.n	8005580 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	051b      	lsls	r3, r3, #20
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40012c00 	.word	0x40012c00

080055a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e040      	b.n	8005638 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb fe66 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	@ 0x24
 80055d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f8b6 	bl	8005754 <UART_SetConfig>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e022      	b.n	8005638 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f9e0 	bl	80059c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800560e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800561e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa67 	bl	8005b04 <UART_CheckIdleState>
 8005636:	4603      	mov	r3, r0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	@ 0x28
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005654:	2b20      	cmp	r3, #32
 8005656:	d177      	bne.n	8005748 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_UART_Transmit+0x24>
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e070      	b.n	800574a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2221      	movs	r2, #33	@ 0x21
 8005674:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005676:	f7fb ffe9 	bl	800164c <HAL_GetTick>
 800567a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005694:	d108      	bne.n	80056a8 <HAL_UART_Transmit+0x68>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	e003      	b.n	80056b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056b0:	e02f      	b.n	8005712 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2180      	movs	r1, #128	@ 0x80
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fac9 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e03b      	b.n	800574a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e4:	b292      	uxth	r2, r2
 80056e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	3302      	adds	r3, #2
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e007      	b.n	8005700 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3301      	adds	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1c9      	bne.n	80056b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2200      	movs	r2, #0
 8005726:	2140      	movs	r1, #64	@ 0x40
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fa93 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e005      	b.n	800574a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e000      	b.n	800574a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b8a      	ldr	r3, [pc, #552]	@ (80059a8 <UART_SetConfig+0x254>)
 8005780:	4013      	ands	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	430b      	orrs	r3, r1
 800578a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a78      	ldr	r2, [pc, #480]	@ (80059ac <UART_SetConfig+0x258>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d120      	bne.n	8005812 <UART_SetConfig+0xbe>
 80057d0:	4b77      	ldr	r3, [pc, #476]	@ (80059b0 <UART_SetConfig+0x25c>)
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d817      	bhi.n	800580c <UART_SetConfig+0xb8>
 80057dc:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <UART_SetConfig+0x90>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057f5 	.word	0x080057f5
 80057e8:	08005801 	.word	0x08005801
 80057ec:	08005807 	.word	0x08005807
 80057f0:	080057fb 	.word	0x080057fb
 80057f4:	2300      	movs	r3, #0
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e01d      	b.n	8005836 <UART_SetConfig+0xe2>
 80057fa:	2302      	movs	r3, #2
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e01a      	b.n	8005836 <UART_SetConfig+0xe2>
 8005800:	2304      	movs	r3, #4
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e017      	b.n	8005836 <UART_SetConfig+0xe2>
 8005806:	2308      	movs	r3, #8
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e014      	b.n	8005836 <UART_SetConfig+0xe2>
 800580c:	2310      	movs	r3, #16
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e011      	b.n	8005836 <UART_SetConfig+0xe2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a67      	ldr	r2, [pc, #412]	@ (80059b4 <UART_SetConfig+0x260>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d102      	bne.n	8005822 <UART_SetConfig+0xce>
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e009      	b.n	8005836 <UART_SetConfig+0xe2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a64      	ldr	r2, [pc, #400]	@ (80059b8 <UART_SetConfig+0x264>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d102      	bne.n	8005832 <UART_SetConfig+0xde>
 800582c:	2300      	movs	r3, #0
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e001      	b.n	8005836 <UART_SetConfig+0xe2>
 8005832:	2310      	movs	r3, #16
 8005834:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583e:	d15a      	bne.n	80058f6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005840:	7ffb      	ldrb	r3, [r7, #31]
 8005842:	2b08      	cmp	r3, #8
 8005844:	d827      	bhi.n	8005896 <UART_SetConfig+0x142>
 8005846:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <UART_SetConfig+0xf8>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	08005897 	.word	0x08005897
 800585c:	08005887 	.word	0x08005887
 8005860:	08005897 	.word	0x08005897
 8005864:	08005897 	.word	0x08005897
 8005868:	08005897 	.word	0x08005897
 800586c:	0800588f 	.word	0x0800588f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005870:	f7fe fce8 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 8005874:	61b8      	str	r0, [r7, #24]
        break;
 8005876:	e013      	b.n	80058a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005878:	f7fe fd06 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 800587c:	61b8      	str	r0, [r7, #24]
        break;
 800587e:	e00f      	b.n	80058a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005880:	4b4e      	ldr	r3, [pc, #312]	@ (80059bc <UART_SetConfig+0x268>)
 8005882:	61bb      	str	r3, [r7, #24]
        break;
 8005884:	e00c      	b.n	80058a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005886:	f7fe fc67 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 800588a:	61b8      	str	r0, [r7, #24]
        break;
 800588c:	e008      	b.n	80058a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005892:	61bb      	str	r3, [r7, #24]
        break;
 8005894:	e004      	b.n	80058a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	77bb      	strb	r3, [r7, #30]
        break;
 800589e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d074      	beq.n	8005990 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	005a      	lsls	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	441a      	add	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b0f      	cmp	r3, #15
 80058c0:	d916      	bls.n	80058f0 <UART_SetConfig+0x19c>
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c8:	d212      	bcs.n	80058f0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f023 030f 	bic.w	r3, r3, #15
 80058d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	b29a      	uxth	r2, r3
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	89fa      	ldrh	r2, [r7, #14]
 80058ec:	60da      	str	r2, [r3, #12]
 80058ee:	e04f      	b.n	8005990 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	77bb      	strb	r3, [r7, #30]
 80058f4:	e04c      	b.n	8005990 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d828      	bhi.n	800594e <UART_SetConfig+0x1fa>
 80058fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005904 <UART_SetConfig+0x1b0>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	0800594f 	.word	0x0800594f
 8005914:	0800593f 	.word	0x0800593f
 8005918:	0800594f 	.word	0x0800594f
 800591c:	0800594f 	.word	0x0800594f
 8005920:	0800594f 	.word	0x0800594f
 8005924:	08005947 	.word	0x08005947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005928:	f7fe fc8c 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 800592c:	61b8      	str	r0, [r7, #24]
        break;
 800592e:	e013      	b.n	8005958 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005930:	f7fe fcaa 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 8005934:	61b8      	str	r0, [r7, #24]
        break;
 8005936:	e00f      	b.n	8005958 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005938:	4b20      	ldr	r3, [pc, #128]	@ (80059bc <UART_SetConfig+0x268>)
 800593a:	61bb      	str	r3, [r7, #24]
        break;
 800593c:	e00c      	b.n	8005958 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593e:	f7fe fc0b 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8005942:	61b8      	str	r0, [r7, #24]
        break;
 8005944:	e008      	b.n	8005958 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800594a:	61bb      	str	r3, [r7, #24]
        break;
 800594c:	e004      	b.n	8005958 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	77bb      	strb	r3, [r7, #30]
        break;
 8005956:	bf00      	nop
    }

    if (pclk != 0U)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d018      	beq.n	8005990 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085a      	lsrs	r2, r3, #1
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	441a      	add	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b0f      	cmp	r3, #15
 8005976:	d909      	bls.n	800598c <UART_SetConfig+0x238>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800597e:	d205      	bcs.n	800598c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	e001      	b.n	8005990 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800599c:	7fbb      	ldrb	r3, [r7, #30]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	efff69f3 	.word	0xefff69f3
 80059ac:	40013800 	.word	0x40013800
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40004400 	.word	0x40004400
 80059b8:	40004800 	.word	0x40004800
 80059bc:	007a1200 	.word	0x007a1200

080059c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005abe:	d10a      	bne.n	8005ad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b098      	sub	sp, #96	@ 0x60
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b14:	f7fb fd9a 	bl	800164c <HAL_GetTick>
 8005b18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d12e      	bne.n	8005b86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b30:	2200      	movs	r2, #0
 8005b32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f88c 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d021      	beq.n	8005b86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e6      	bne.n	8005b42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e062      	b.n	8005c4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d149      	bne.n	8005c28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f856 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d03c      	beq.n	8005c28 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	623b      	str	r3, [r7, #32]
   return(result);
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e6      	bne.n	8005bae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3308      	adds	r3, #8
 8005be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c00:	61fa      	str	r2, [r7, #28]
 8005c02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	69b9      	ldr	r1, [r7, #24]
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e5      	bne.n	8005be0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e011      	b.n	8005c4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3758      	adds	r7, #88	@ 0x58
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c64:	e049      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d045      	beq.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6e:	f7fb fced 	bl	800164c <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e048      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d031      	beq.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d110      	bne.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2208      	movs	r2, #8
 8005caa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f838 	bl	8005d22 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e029      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cd4:	d111      	bne.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f81e 	bl	8005d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e00f      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4013      	ands	r3, r2
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d0a6      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b095      	sub	sp, #84	@ 0x54
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e6      	bne.n	8005d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3308      	adds	r3, #8
 8005d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e5      	bne.n	8005d5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d118      	bne.n	8005dca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f023 0310 	bic.w	r3, r3, #16
 8005dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6979      	ldr	r1, [r7, #20]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e6      	bne.n	8005d98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dde:	bf00      	nop
 8005de0:	3754      	adds	r7, #84	@ 0x54
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <__cvt>:
 8005dea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dee:	ec57 6b10 	vmov	r6, r7, d0
 8005df2:	2f00      	cmp	r7, #0
 8005df4:	460c      	mov	r4, r1
 8005df6:	4619      	mov	r1, r3
 8005df8:	463b      	mov	r3, r7
 8005dfa:	bfbb      	ittet	lt
 8005dfc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e00:	461f      	movlt	r7, r3
 8005e02:	2300      	movge	r3, #0
 8005e04:	232d      	movlt	r3, #45	@ 0x2d
 8005e06:	700b      	strb	r3, [r1, #0]
 8005e08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e0a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e0e:	4691      	mov	r9, r2
 8005e10:	f023 0820 	bic.w	r8, r3, #32
 8005e14:	bfbc      	itt	lt
 8005e16:	4632      	movlt	r2, r6
 8005e18:	4616      	movlt	r6, r2
 8005e1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e1e:	d005      	beq.n	8005e2c <__cvt+0x42>
 8005e20:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e24:	d100      	bne.n	8005e28 <__cvt+0x3e>
 8005e26:	3401      	adds	r4, #1
 8005e28:	2102      	movs	r1, #2
 8005e2a:	e000      	b.n	8005e2e <__cvt+0x44>
 8005e2c:	2103      	movs	r1, #3
 8005e2e:	ab03      	add	r3, sp, #12
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	ab02      	add	r3, sp, #8
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	ec47 6b10 	vmov	d0, r6, r7
 8005e3a:	4653      	mov	r3, sl
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	f000 fe4b 	bl	8006ad8 <_dtoa_r>
 8005e42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e46:	4605      	mov	r5, r0
 8005e48:	d119      	bne.n	8005e7e <__cvt+0x94>
 8005e4a:	f019 0f01 	tst.w	r9, #1
 8005e4e:	d00e      	beq.n	8005e6e <__cvt+0x84>
 8005e50:	eb00 0904 	add.w	r9, r0, r4
 8005e54:	2200      	movs	r2, #0
 8005e56:	2300      	movs	r3, #0
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e60:	b108      	cbz	r0, 8005e66 <__cvt+0x7c>
 8005e62:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e66:	2230      	movs	r2, #48	@ 0x30
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	454b      	cmp	r3, r9
 8005e6c:	d31e      	bcc.n	8005eac <__cvt+0xc2>
 8005e6e:	9b03      	ldr	r3, [sp, #12]
 8005e70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e72:	1b5b      	subs	r3, r3, r5
 8005e74:	4628      	mov	r0, r5
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	b004      	add	sp, #16
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e82:	eb00 0904 	add.w	r9, r0, r4
 8005e86:	d1e5      	bne.n	8005e54 <__cvt+0x6a>
 8005e88:	7803      	ldrb	r3, [r0, #0]
 8005e8a:	2b30      	cmp	r3, #48	@ 0x30
 8005e8c:	d10a      	bne.n	8005ea4 <__cvt+0xba>
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2300      	movs	r3, #0
 8005e92:	4630      	mov	r0, r6
 8005e94:	4639      	mov	r1, r7
 8005e96:	f7fa fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e9a:	b918      	cbnz	r0, 8005ea4 <__cvt+0xba>
 8005e9c:	f1c4 0401 	rsb	r4, r4, #1
 8005ea0:	f8ca 4000 	str.w	r4, [sl]
 8005ea4:	f8da 3000 	ldr.w	r3, [sl]
 8005ea8:	4499      	add	r9, r3
 8005eaa:	e7d3      	b.n	8005e54 <__cvt+0x6a>
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	9103      	str	r1, [sp, #12]
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e7d9      	b.n	8005e68 <__cvt+0x7e>

08005eb4 <__exponent>:
 8005eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eb6:	2900      	cmp	r1, #0
 8005eb8:	bfba      	itte	lt
 8005eba:	4249      	neglt	r1, r1
 8005ebc:	232d      	movlt	r3, #45	@ 0x2d
 8005ebe:	232b      	movge	r3, #43	@ 0x2b
 8005ec0:	2909      	cmp	r1, #9
 8005ec2:	7002      	strb	r2, [r0, #0]
 8005ec4:	7043      	strb	r3, [r0, #1]
 8005ec6:	dd29      	ble.n	8005f1c <__exponent+0x68>
 8005ec8:	f10d 0307 	add.w	r3, sp, #7
 8005ecc:	461d      	mov	r5, r3
 8005ece:	270a      	movs	r7, #10
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ed6:	fb07 1416 	mls	r4, r7, r6, r1
 8005eda:	3430      	adds	r4, #48	@ 0x30
 8005edc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	2c63      	cmp	r4, #99	@ 0x63
 8005ee4:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ee8:	4631      	mov	r1, r6
 8005eea:	dcf1      	bgt.n	8005ed0 <__exponent+0x1c>
 8005eec:	3130      	adds	r1, #48	@ 0x30
 8005eee:	1e94      	subs	r4, r2, #2
 8005ef0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ef4:	1c41      	adds	r1, r0, #1
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	d30a      	bcc.n	8005f12 <__exponent+0x5e>
 8005efc:	f10d 0309 	add.w	r3, sp, #9
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	42ac      	cmp	r4, r5
 8005f04:	bf88      	it	hi
 8005f06:	2300      	movhi	r3, #0
 8005f08:	3302      	adds	r3, #2
 8005f0a:	4403      	add	r3, r0
 8005f0c:	1a18      	subs	r0, r3, r0
 8005f0e:	b003      	add	sp, #12
 8005f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f1a:	e7ed      	b.n	8005ef8 <__exponent+0x44>
 8005f1c:	2330      	movs	r3, #48	@ 0x30
 8005f1e:	3130      	adds	r1, #48	@ 0x30
 8005f20:	7083      	strb	r3, [r0, #2]
 8005f22:	70c1      	strb	r1, [r0, #3]
 8005f24:	1d03      	adds	r3, r0, #4
 8005f26:	e7f1      	b.n	8005f0c <__exponent+0x58>

08005f28 <_printf_float>:
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	b08d      	sub	sp, #52	@ 0x34
 8005f2e:	460c      	mov	r4, r1
 8005f30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f34:	4616      	mov	r6, r2
 8005f36:	461f      	mov	r7, r3
 8005f38:	4605      	mov	r5, r0
 8005f3a:	f000 fccd 	bl	80068d8 <_localeconv_r>
 8005f3e:	6803      	ldr	r3, [r0, #0]
 8005f40:	9304      	str	r3, [sp, #16]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fa f994 	bl	8000270 <strlen>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f50:	9005      	str	r0, [sp, #20]
 8005f52:	3307      	adds	r3, #7
 8005f54:	f023 0307 	bic.w	r3, r3, #7
 8005f58:	f103 0208 	add.w	r2, r3, #8
 8005f5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f60:	f8d4 b000 	ldr.w	fp, [r4]
 8005f64:	f8c8 2000 	str.w	r2, [r8]
 8005f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f70:	9307      	str	r3, [sp, #28]
 8005f72:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f7e:	4b9c      	ldr	r3, [pc, #624]	@ (80061f0 <_printf_float+0x2c8>)
 8005f80:	f04f 32ff 	mov.w	r2, #4294967295
 8005f84:	f7fa fdd2 	bl	8000b2c <__aeabi_dcmpun>
 8005f88:	bb70      	cbnz	r0, 8005fe8 <_printf_float+0xc0>
 8005f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8e:	4b98      	ldr	r3, [pc, #608]	@ (80061f0 <_printf_float+0x2c8>)
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295
 8005f94:	f7fa fdac 	bl	8000af0 <__aeabi_dcmple>
 8005f98:	bb30      	cbnz	r0, 8005fe8 <_printf_float+0xc0>
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	f7fa fd9b 	bl	8000adc <__aeabi_dcmplt>
 8005fa6:	b110      	cbz	r0, 8005fae <_printf_float+0x86>
 8005fa8:	232d      	movs	r3, #45	@ 0x2d
 8005faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fae:	4a91      	ldr	r2, [pc, #580]	@ (80061f4 <_printf_float+0x2cc>)
 8005fb0:	4b91      	ldr	r3, [pc, #580]	@ (80061f8 <_printf_float+0x2d0>)
 8005fb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fb6:	bf94      	ite	ls
 8005fb8:	4690      	movls	r8, r2
 8005fba:	4698      	movhi	r8, r3
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	6123      	str	r3, [r4, #16]
 8005fc0:	f02b 0304 	bic.w	r3, fp, #4
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	f04f 0900 	mov.w	r9, #0
 8005fca:	9700      	str	r7, [sp, #0]
 8005fcc:	4633      	mov	r3, r6
 8005fce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f9d2 	bl	800637c <_printf_common>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f040 808d 	bne.w	80060f8 <_printf_float+0x1d0>
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe2:	b00d      	add	sp, #52	@ 0x34
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	4640      	mov	r0, r8
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa fd9c 	bl	8000b2c <__aeabi_dcmpun>
 8005ff4:	b140      	cbz	r0, 8006008 <_printf_float+0xe0>
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bfbc      	itt	lt
 8005ffc:	232d      	movlt	r3, #45	@ 0x2d
 8005ffe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006002:	4a7e      	ldr	r2, [pc, #504]	@ (80061fc <_printf_float+0x2d4>)
 8006004:	4b7e      	ldr	r3, [pc, #504]	@ (8006200 <_printf_float+0x2d8>)
 8006006:	e7d4      	b.n	8005fb2 <_printf_float+0x8a>
 8006008:	6863      	ldr	r3, [r4, #4]
 800600a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800600e:	9206      	str	r2, [sp, #24]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	d13b      	bne.n	800608c <_printf_float+0x164>
 8006014:	2306      	movs	r3, #6
 8006016:	6063      	str	r3, [r4, #4]
 8006018:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800601c:	2300      	movs	r3, #0
 800601e:	6022      	str	r2, [r4, #0]
 8006020:	9303      	str	r3, [sp, #12]
 8006022:	ab0a      	add	r3, sp, #40	@ 0x28
 8006024:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006028:	ab09      	add	r3, sp, #36	@ 0x24
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	6861      	ldr	r1, [r4, #4]
 800602e:	ec49 8b10 	vmov	d0, r8, r9
 8006032:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006036:	4628      	mov	r0, r5
 8006038:	f7ff fed7 	bl	8005dea <__cvt>
 800603c:	9b06      	ldr	r3, [sp, #24]
 800603e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006040:	2b47      	cmp	r3, #71	@ 0x47
 8006042:	4680      	mov	r8, r0
 8006044:	d129      	bne.n	800609a <_printf_float+0x172>
 8006046:	1cc8      	adds	r0, r1, #3
 8006048:	db02      	blt.n	8006050 <_printf_float+0x128>
 800604a:	6863      	ldr	r3, [r4, #4]
 800604c:	4299      	cmp	r1, r3
 800604e:	dd41      	ble.n	80060d4 <_printf_float+0x1ac>
 8006050:	f1aa 0a02 	sub.w	sl, sl, #2
 8006054:	fa5f fa8a 	uxtb.w	sl, sl
 8006058:	3901      	subs	r1, #1
 800605a:	4652      	mov	r2, sl
 800605c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006060:	9109      	str	r1, [sp, #36]	@ 0x24
 8006062:	f7ff ff27 	bl	8005eb4 <__exponent>
 8006066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006068:	1813      	adds	r3, r2, r0
 800606a:	2a01      	cmp	r2, #1
 800606c:	4681      	mov	r9, r0
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	dc02      	bgt.n	8006078 <_printf_float+0x150>
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	07d2      	lsls	r2, r2, #31
 8006076:	d501      	bpl.n	800607c <_printf_float+0x154>
 8006078:	3301      	adds	r3, #1
 800607a:	6123      	str	r3, [r4, #16]
 800607c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0a2      	beq.n	8005fca <_printf_float+0xa2>
 8006084:	232d      	movs	r3, #45	@ 0x2d
 8006086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800608a:	e79e      	b.n	8005fca <_printf_float+0xa2>
 800608c:	9a06      	ldr	r2, [sp, #24]
 800608e:	2a47      	cmp	r2, #71	@ 0x47
 8006090:	d1c2      	bne.n	8006018 <_printf_float+0xf0>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1c0      	bne.n	8006018 <_printf_float+0xf0>
 8006096:	2301      	movs	r3, #1
 8006098:	e7bd      	b.n	8006016 <_printf_float+0xee>
 800609a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800609e:	d9db      	bls.n	8006058 <_printf_float+0x130>
 80060a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060a4:	d118      	bne.n	80060d8 <_printf_float+0x1b0>
 80060a6:	2900      	cmp	r1, #0
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	dd0b      	ble.n	80060c4 <_printf_float+0x19c>
 80060ac:	6121      	str	r1, [r4, #16]
 80060ae:	b913      	cbnz	r3, 80060b6 <_printf_float+0x18e>
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	07d0      	lsls	r0, r2, #31
 80060b4:	d502      	bpl.n	80060bc <_printf_float+0x194>
 80060b6:	3301      	adds	r3, #1
 80060b8:	440b      	add	r3, r1
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060be:	f04f 0900 	mov.w	r9, #0
 80060c2:	e7db      	b.n	800607c <_printf_float+0x154>
 80060c4:	b913      	cbnz	r3, 80060cc <_printf_float+0x1a4>
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	07d2      	lsls	r2, r2, #31
 80060ca:	d501      	bpl.n	80060d0 <_printf_float+0x1a8>
 80060cc:	3302      	adds	r3, #2
 80060ce:	e7f4      	b.n	80060ba <_printf_float+0x192>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e7f2      	b.n	80060ba <_printf_float+0x192>
 80060d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060da:	4299      	cmp	r1, r3
 80060dc:	db05      	blt.n	80060ea <_printf_float+0x1c2>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	6121      	str	r1, [r4, #16]
 80060e2:	07d8      	lsls	r0, r3, #31
 80060e4:	d5ea      	bpl.n	80060bc <_printf_float+0x194>
 80060e6:	1c4b      	adds	r3, r1, #1
 80060e8:	e7e7      	b.n	80060ba <_printf_float+0x192>
 80060ea:	2900      	cmp	r1, #0
 80060ec:	bfd4      	ite	le
 80060ee:	f1c1 0202 	rsble	r2, r1, #2
 80060f2:	2201      	movgt	r2, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	e7e0      	b.n	80060ba <_printf_float+0x192>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	055a      	lsls	r2, r3, #21
 80060fc:	d407      	bmi.n	800610e <_printf_float+0x1e6>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	4642      	mov	r2, r8
 8006102:	4631      	mov	r1, r6
 8006104:	4628      	mov	r0, r5
 8006106:	47b8      	blx	r7
 8006108:	3001      	adds	r0, #1
 800610a:	d12b      	bne.n	8006164 <_printf_float+0x23c>
 800610c:	e767      	b.n	8005fde <_printf_float+0xb6>
 800610e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006112:	f240 80dd 	bls.w	80062d0 <_printf_float+0x3a8>
 8006116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800611a:	2200      	movs	r2, #0
 800611c:	2300      	movs	r3, #0
 800611e:	f7fa fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006122:	2800      	cmp	r0, #0
 8006124:	d033      	beq.n	800618e <_printf_float+0x266>
 8006126:	4a37      	ldr	r2, [pc, #220]	@ (8006204 <_printf_float+0x2dc>)
 8006128:	2301      	movs	r3, #1
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	f43f af54 	beq.w	8005fde <_printf_float+0xb6>
 8006136:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800613a:	4543      	cmp	r3, r8
 800613c:	db02      	blt.n	8006144 <_printf_float+0x21c>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	07d8      	lsls	r0, r3, #31
 8006142:	d50f      	bpl.n	8006164 <_printf_float+0x23c>
 8006144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006148:	4631      	mov	r1, r6
 800614a:	4628      	mov	r0, r5
 800614c:	47b8      	blx	r7
 800614e:	3001      	adds	r0, #1
 8006150:	f43f af45 	beq.w	8005fde <_printf_float+0xb6>
 8006154:	f04f 0900 	mov.w	r9, #0
 8006158:	f108 38ff 	add.w	r8, r8, #4294967295
 800615c:	f104 0a1a 	add.w	sl, r4, #26
 8006160:	45c8      	cmp	r8, r9
 8006162:	dc09      	bgt.n	8006178 <_printf_float+0x250>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	079b      	lsls	r3, r3, #30
 8006168:	f100 8103 	bmi.w	8006372 <_printf_float+0x44a>
 800616c:	68e0      	ldr	r0, [r4, #12]
 800616e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006170:	4298      	cmp	r0, r3
 8006172:	bfb8      	it	lt
 8006174:	4618      	movlt	r0, r3
 8006176:	e734      	b.n	8005fe2 <_printf_float+0xba>
 8006178:	2301      	movs	r3, #1
 800617a:	4652      	mov	r2, sl
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f af2b 	beq.w	8005fde <_printf_float+0xb6>
 8006188:	f109 0901 	add.w	r9, r9, #1
 800618c:	e7e8      	b.n	8006160 <_printf_float+0x238>
 800618e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc39      	bgt.n	8006208 <_printf_float+0x2e0>
 8006194:	4a1b      	ldr	r2, [pc, #108]	@ (8006204 <_printf_float+0x2dc>)
 8006196:	2301      	movs	r3, #1
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f af1d 	beq.w	8005fde <_printf_float+0xb6>
 80061a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061a8:	ea59 0303 	orrs.w	r3, r9, r3
 80061ac:	d102      	bne.n	80061b4 <_printf_float+0x28c>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	07d9      	lsls	r1, r3, #31
 80061b2:	d5d7      	bpl.n	8006164 <_printf_float+0x23c>
 80061b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	f43f af0d 	beq.w	8005fde <_printf_float+0xb6>
 80061c4:	f04f 0a00 	mov.w	sl, #0
 80061c8:	f104 0b1a 	add.w	fp, r4, #26
 80061cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ce:	425b      	negs	r3, r3
 80061d0:	4553      	cmp	r3, sl
 80061d2:	dc01      	bgt.n	80061d8 <_printf_float+0x2b0>
 80061d4:	464b      	mov	r3, r9
 80061d6:	e793      	b.n	8006100 <_printf_float+0x1d8>
 80061d8:	2301      	movs	r3, #1
 80061da:	465a      	mov	r2, fp
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f aefb 	beq.w	8005fde <_printf_float+0xb6>
 80061e8:	f10a 0a01 	add.w	sl, sl, #1
 80061ec:	e7ee      	b.n	80061cc <_printf_float+0x2a4>
 80061ee:	bf00      	nop
 80061f0:	7fefffff 	.word	0x7fefffff
 80061f4:	08008764 	.word	0x08008764
 80061f8:	08008768 	.word	0x08008768
 80061fc:	0800876c 	.word	0x0800876c
 8006200:	08008770 	.word	0x08008770
 8006204:	08008774 	.word	0x08008774
 8006208:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800620a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800620e:	4553      	cmp	r3, sl
 8006210:	bfa8      	it	ge
 8006212:	4653      	movge	r3, sl
 8006214:	2b00      	cmp	r3, #0
 8006216:	4699      	mov	r9, r3
 8006218:	dc36      	bgt.n	8006288 <_printf_float+0x360>
 800621a:	f04f 0b00 	mov.w	fp, #0
 800621e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006222:	f104 021a 	add.w	r2, r4, #26
 8006226:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006228:	9306      	str	r3, [sp, #24]
 800622a:	eba3 0309 	sub.w	r3, r3, r9
 800622e:	455b      	cmp	r3, fp
 8006230:	dc31      	bgt.n	8006296 <_printf_float+0x36e>
 8006232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006234:	459a      	cmp	sl, r3
 8006236:	dc3a      	bgt.n	80062ae <_printf_float+0x386>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	07da      	lsls	r2, r3, #31
 800623c:	d437      	bmi.n	80062ae <_printf_float+0x386>
 800623e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006240:	ebaa 0903 	sub.w	r9, sl, r3
 8006244:	9b06      	ldr	r3, [sp, #24]
 8006246:	ebaa 0303 	sub.w	r3, sl, r3
 800624a:	4599      	cmp	r9, r3
 800624c:	bfa8      	it	ge
 800624e:	4699      	movge	r9, r3
 8006250:	f1b9 0f00 	cmp.w	r9, #0
 8006254:	dc33      	bgt.n	80062be <_printf_float+0x396>
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800625e:	f104 0b1a 	add.w	fp, r4, #26
 8006262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006264:	ebaa 0303 	sub.w	r3, sl, r3
 8006268:	eba3 0309 	sub.w	r3, r3, r9
 800626c:	4543      	cmp	r3, r8
 800626e:	f77f af79 	ble.w	8006164 <_printf_float+0x23c>
 8006272:	2301      	movs	r3, #1
 8006274:	465a      	mov	r2, fp
 8006276:	4631      	mov	r1, r6
 8006278:	4628      	mov	r0, r5
 800627a:	47b8      	blx	r7
 800627c:	3001      	adds	r0, #1
 800627e:	f43f aeae 	beq.w	8005fde <_printf_float+0xb6>
 8006282:	f108 0801 	add.w	r8, r8, #1
 8006286:	e7ec      	b.n	8006262 <_printf_float+0x33a>
 8006288:	4642      	mov	r2, r8
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	d1c2      	bne.n	800621a <_printf_float+0x2f2>
 8006294:	e6a3      	b.n	8005fde <_printf_float+0xb6>
 8006296:	2301      	movs	r3, #1
 8006298:	4631      	mov	r1, r6
 800629a:	4628      	mov	r0, r5
 800629c:	9206      	str	r2, [sp, #24]
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f ae9c 	beq.w	8005fde <_printf_float+0xb6>
 80062a6:	9a06      	ldr	r2, [sp, #24]
 80062a8:	f10b 0b01 	add.w	fp, fp, #1
 80062ac:	e7bb      	b.n	8006226 <_printf_float+0x2fe>
 80062ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	d1c0      	bne.n	800623e <_printf_float+0x316>
 80062bc:	e68f      	b.n	8005fde <_printf_float+0xb6>
 80062be:	9a06      	ldr	r2, [sp, #24]
 80062c0:	464b      	mov	r3, r9
 80062c2:	4442      	add	r2, r8
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	d1c3      	bne.n	8006256 <_printf_float+0x32e>
 80062ce:	e686      	b.n	8005fde <_printf_float+0xb6>
 80062d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062d4:	f1ba 0f01 	cmp.w	sl, #1
 80062d8:	dc01      	bgt.n	80062de <_printf_float+0x3b6>
 80062da:	07db      	lsls	r3, r3, #31
 80062dc:	d536      	bpl.n	800634c <_printf_float+0x424>
 80062de:	2301      	movs	r3, #1
 80062e0:	4642      	mov	r2, r8
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f ae78 	beq.w	8005fde <_printf_float+0xb6>
 80062ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b8      	blx	r7
 80062f8:	3001      	adds	r0, #1
 80062fa:	f43f ae70 	beq.w	8005fde <_printf_float+0xb6>
 80062fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006302:	2200      	movs	r2, #0
 8006304:	2300      	movs	r3, #0
 8006306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800630a:	f7fa fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800630e:	b9c0      	cbnz	r0, 8006342 <_printf_float+0x41a>
 8006310:	4653      	mov	r3, sl
 8006312:	f108 0201 	add.w	r2, r8, #1
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	d10c      	bne.n	800633a <_printf_float+0x412>
 8006320:	e65d      	b.n	8005fde <_printf_float+0xb6>
 8006322:	2301      	movs	r3, #1
 8006324:	465a      	mov	r2, fp
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	f43f ae56 	beq.w	8005fde <_printf_float+0xb6>
 8006332:	f108 0801 	add.w	r8, r8, #1
 8006336:	45d0      	cmp	r8, sl
 8006338:	dbf3      	blt.n	8006322 <_printf_float+0x3fa>
 800633a:	464b      	mov	r3, r9
 800633c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006340:	e6df      	b.n	8006102 <_printf_float+0x1da>
 8006342:	f04f 0800 	mov.w	r8, #0
 8006346:	f104 0b1a 	add.w	fp, r4, #26
 800634a:	e7f4      	b.n	8006336 <_printf_float+0x40e>
 800634c:	2301      	movs	r3, #1
 800634e:	4642      	mov	r2, r8
 8006350:	e7e1      	b.n	8006316 <_printf_float+0x3ee>
 8006352:	2301      	movs	r3, #1
 8006354:	464a      	mov	r2, r9
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f ae3e 	beq.w	8005fde <_printf_float+0xb6>
 8006362:	f108 0801 	add.w	r8, r8, #1
 8006366:	68e3      	ldr	r3, [r4, #12]
 8006368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800636a:	1a5b      	subs	r3, r3, r1
 800636c:	4543      	cmp	r3, r8
 800636e:	dcf0      	bgt.n	8006352 <_printf_float+0x42a>
 8006370:	e6fc      	b.n	800616c <_printf_float+0x244>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	f104 0919 	add.w	r9, r4, #25
 800637a:	e7f4      	b.n	8006366 <_printf_float+0x43e>

0800637c <_printf_common>:
 800637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	4616      	mov	r6, r2
 8006382:	4698      	mov	r8, r3
 8006384:	688a      	ldr	r2, [r1, #8]
 8006386:	690b      	ldr	r3, [r1, #16]
 8006388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800638c:	4293      	cmp	r3, r2
 800638e:	bfb8      	it	lt
 8006390:	4613      	movlt	r3, r2
 8006392:	6033      	str	r3, [r6, #0]
 8006394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006398:	4607      	mov	r7, r0
 800639a:	460c      	mov	r4, r1
 800639c:	b10a      	cbz	r2, 80063a2 <_printf_common+0x26>
 800639e:	3301      	adds	r3, #1
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	0699      	lsls	r1, r3, #26
 80063a6:	bf42      	ittt	mi
 80063a8:	6833      	ldrmi	r3, [r6, #0]
 80063aa:	3302      	addmi	r3, #2
 80063ac:	6033      	strmi	r3, [r6, #0]
 80063ae:	6825      	ldr	r5, [r4, #0]
 80063b0:	f015 0506 	ands.w	r5, r5, #6
 80063b4:	d106      	bne.n	80063c4 <_printf_common+0x48>
 80063b6:	f104 0a19 	add.w	sl, r4, #25
 80063ba:	68e3      	ldr	r3, [r4, #12]
 80063bc:	6832      	ldr	r2, [r6, #0]
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	42ab      	cmp	r3, r5
 80063c2:	dc26      	bgt.n	8006412 <_printf_common+0x96>
 80063c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	3b00      	subs	r3, #0
 80063cc:	bf18      	it	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	0692      	lsls	r2, r2, #26
 80063d2:	d42b      	bmi.n	800642c <_printf_common+0xb0>
 80063d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063d8:	4641      	mov	r1, r8
 80063da:	4638      	mov	r0, r7
 80063dc:	47c8      	blx	r9
 80063de:	3001      	adds	r0, #1
 80063e0:	d01e      	beq.n	8006420 <_printf_common+0xa4>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	6922      	ldr	r2, [r4, #16]
 80063e6:	f003 0306 	and.w	r3, r3, #6
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	bf02      	ittt	eq
 80063ee:	68e5      	ldreq	r5, [r4, #12]
 80063f0:	6833      	ldreq	r3, [r6, #0]
 80063f2:	1aed      	subeq	r5, r5, r3
 80063f4:	68a3      	ldr	r3, [r4, #8]
 80063f6:	bf0c      	ite	eq
 80063f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063fc:	2500      	movne	r5, #0
 80063fe:	4293      	cmp	r3, r2
 8006400:	bfc4      	itt	gt
 8006402:	1a9b      	subgt	r3, r3, r2
 8006404:	18ed      	addgt	r5, r5, r3
 8006406:	2600      	movs	r6, #0
 8006408:	341a      	adds	r4, #26
 800640a:	42b5      	cmp	r5, r6
 800640c:	d11a      	bne.n	8006444 <_printf_common+0xc8>
 800640e:	2000      	movs	r0, #0
 8006410:	e008      	b.n	8006424 <_printf_common+0xa8>
 8006412:	2301      	movs	r3, #1
 8006414:	4652      	mov	r2, sl
 8006416:	4641      	mov	r1, r8
 8006418:	4638      	mov	r0, r7
 800641a:	47c8      	blx	r9
 800641c:	3001      	adds	r0, #1
 800641e:	d103      	bne.n	8006428 <_printf_common+0xac>
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	3501      	adds	r5, #1
 800642a:	e7c6      	b.n	80063ba <_printf_common+0x3e>
 800642c:	18e1      	adds	r1, r4, r3
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	2030      	movs	r0, #48	@ 0x30
 8006432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006436:	4422      	add	r2, r4
 8006438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800643c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006440:	3302      	adds	r3, #2
 8006442:	e7c7      	b.n	80063d4 <_printf_common+0x58>
 8006444:	2301      	movs	r3, #1
 8006446:	4622      	mov	r2, r4
 8006448:	4641      	mov	r1, r8
 800644a:	4638      	mov	r0, r7
 800644c:	47c8      	blx	r9
 800644e:	3001      	adds	r0, #1
 8006450:	d0e6      	beq.n	8006420 <_printf_common+0xa4>
 8006452:	3601      	adds	r6, #1
 8006454:	e7d9      	b.n	800640a <_printf_common+0x8e>
	...

08006458 <_printf_i>:
 8006458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	7e0f      	ldrb	r7, [r1, #24]
 800645e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006460:	2f78      	cmp	r7, #120	@ 0x78
 8006462:	4691      	mov	r9, r2
 8006464:	4680      	mov	r8, r0
 8006466:	460c      	mov	r4, r1
 8006468:	469a      	mov	sl, r3
 800646a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800646e:	d807      	bhi.n	8006480 <_printf_i+0x28>
 8006470:	2f62      	cmp	r7, #98	@ 0x62
 8006472:	d80a      	bhi.n	800648a <_printf_i+0x32>
 8006474:	2f00      	cmp	r7, #0
 8006476:	f000 80d2 	beq.w	800661e <_printf_i+0x1c6>
 800647a:	2f58      	cmp	r7, #88	@ 0x58
 800647c:	f000 80b9 	beq.w	80065f2 <_printf_i+0x19a>
 8006480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006488:	e03a      	b.n	8006500 <_printf_i+0xa8>
 800648a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800648e:	2b15      	cmp	r3, #21
 8006490:	d8f6      	bhi.n	8006480 <_printf_i+0x28>
 8006492:	a101      	add	r1, pc, #4	@ (adr r1, 8006498 <_printf_i+0x40>)
 8006494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006498:	080064f1 	.word	0x080064f1
 800649c:	08006505 	.word	0x08006505
 80064a0:	08006481 	.word	0x08006481
 80064a4:	08006481 	.word	0x08006481
 80064a8:	08006481 	.word	0x08006481
 80064ac:	08006481 	.word	0x08006481
 80064b0:	08006505 	.word	0x08006505
 80064b4:	08006481 	.word	0x08006481
 80064b8:	08006481 	.word	0x08006481
 80064bc:	08006481 	.word	0x08006481
 80064c0:	08006481 	.word	0x08006481
 80064c4:	08006605 	.word	0x08006605
 80064c8:	0800652f 	.word	0x0800652f
 80064cc:	080065bf 	.word	0x080065bf
 80064d0:	08006481 	.word	0x08006481
 80064d4:	08006481 	.word	0x08006481
 80064d8:	08006627 	.word	0x08006627
 80064dc:	08006481 	.word	0x08006481
 80064e0:	0800652f 	.word	0x0800652f
 80064e4:	08006481 	.word	0x08006481
 80064e8:	08006481 	.word	0x08006481
 80064ec:	080065c7 	.word	0x080065c7
 80064f0:	6833      	ldr	r3, [r6, #0]
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6032      	str	r2, [r6, #0]
 80064f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006500:	2301      	movs	r3, #1
 8006502:	e09d      	b.n	8006640 <_printf_i+0x1e8>
 8006504:	6833      	ldr	r3, [r6, #0]
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	1d19      	adds	r1, r3, #4
 800650a:	6031      	str	r1, [r6, #0]
 800650c:	0606      	lsls	r6, r0, #24
 800650e:	d501      	bpl.n	8006514 <_printf_i+0xbc>
 8006510:	681d      	ldr	r5, [r3, #0]
 8006512:	e003      	b.n	800651c <_printf_i+0xc4>
 8006514:	0645      	lsls	r5, r0, #25
 8006516:	d5fb      	bpl.n	8006510 <_printf_i+0xb8>
 8006518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800651c:	2d00      	cmp	r5, #0
 800651e:	da03      	bge.n	8006528 <_printf_i+0xd0>
 8006520:	232d      	movs	r3, #45	@ 0x2d
 8006522:	426d      	negs	r5, r5
 8006524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006528:	4859      	ldr	r0, [pc, #356]	@ (8006690 <_printf_i+0x238>)
 800652a:	230a      	movs	r3, #10
 800652c:	e011      	b.n	8006552 <_printf_i+0xfa>
 800652e:	6821      	ldr	r1, [r4, #0]
 8006530:	6833      	ldr	r3, [r6, #0]
 8006532:	0608      	lsls	r0, r1, #24
 8006534:	f853 5b04 	ldr.w	r5, [r3], #4
 8006538:	d402      	bmi.n	8006540 <_printf_i+0xe8>
 800653a:	0649      	lsls	r1, r1, #25
 800653c:	bf48      	it	mi
 800653e:	b2ad      	uxthmi	r5, r5
 8006540:	2f6f      	cmp	r7, #111	@ 0x6f
 8006542:	4853      	ldr	r0, [pc, #332]	@ (8006690 <_printf_i+0x238>)
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	bf14      	ite	ne
 8006548:	230a      	movne	r3, #10
 800654a:	2308      	moveq	r3, #8
 800654c:	2100      	movs	r1, #0
 800654e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006552:	6866      	ldr	r6, [r4, #4]
 8006554:	60a6      	str	r6, [r4, #8]
 8006556:	2e00      	cmp	r6, #0
 8006558:	bfa2      	ittt	ge
 800655a:	6821      	ldrge	r1, [r4, #0]
 800655c:	f021 0104 	bicge.w	r1, r1, #4
 8006560:	6021      	strge	r1, [r4, #0]
 8006562:	b90d      	cbnz	r5, 8006568 <_printf_i+0x110>
 8006564:	2e00      	cmp	r6, #0
 8006566:	d04b      	beq.n	8006600 <_printf_i+0x1a8>
 8006568:	4616      	mov	r6, r2
 800656a:	fbb5 f1f3 	udiv	r1, r5, r3
 800656e:	fb03 5711 	mls	r7, r3, r1, r5
 8006572:	5dc7      	ldrb	r7, [r0, r7]
 8006574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006578:	462f      	mov	r7, r5
 800657a:	42bb      	cmp	r3, r7
 800657c:	460d      	mov	r5, r1
 800657e:	d9f4      	bls.n	800656a <_printf_i+0x112>
 8006580:	2b08      	cmp	r3, #8
 8006582:	d10b      	bne.n	800659c <_printf_i+0x144>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	07df      	lsls	r7, r3, #31
 8006588:	d508      	bpl.n	800659c <_printf_i+0x144>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	6861      	ldr	r1, [r4, #4]
 800658e:	4299      	cmp	r1, r3
 8006590:	bfde      	ittt	le
 8006592:	2330      	movle	r3, #48	@ 0x30
 8006594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800659c:	1b92      	subs	r2, r2, r6
 800659e:	6122      	str	r2, [r4, #16]
 80065a0:	f8cd a000 	str.w	sl, [sp]
 80065a4:	464b      	mov	r3, r9
 80065a6:	aa03      	add	r2, sp, #12
 80065a8:	4621      	mov	r1, r4
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff fee6 	bl	800637c <_printf_common>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d14a      	bne.n	800664a <_printf_i+0x1f2>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b004      	add	sp, #16
 80065ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	f043 0320 	orr.w	r3, r3, #32
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	4833      	ldr	r0, [pc, #204]	@ (8006694 <_printf_i+0x23c>)
 80065c8:	2778      	movs	r7, #120	@ 0x78
 80065ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	6831      	ldr	r1, [r6, #0]
 80065d2:	061f      	lsls	r7, r3, #24
 80065d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80065d8:	d402      	bmi.n	80065e0 <_printf_i+0x188>
 80065da:	065f      	lsls	r7, r3, #25
 80065dc:	bf48      	it	mi
 80065de:	b2ad      	uxthmi	r5, r5
 80065e0:	6031      	str	r1, [r6, #0]
 80065e2:	07d9      	lsls	r1, r3, #31
 80065e4:	bf44      	itt	mi
 80065e6:	f043 0320 	orrmi.w	r3, r3, #32
 80065ea:	6023      	strmi	r3, [r4, #0]
 80065ec:	b11d      	cbz	r5, 80065f6 <_printf_i+0x19e>
 80065ee:	2310      	movs	r3, #16
 80065f0:	e7ac      	b.n	800654c <_printf_i+0xf4>
 80065f2:	4827      	ldr	r0, [pc, #156]	@ (8006690 <_printf_i+0x238>)
 80065f4:	e7e9      	b.n	80065ca <_printf_i+0x172>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f023 0320 	bic.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	e7f6      	b.n	80065ee <_printf_i+0x196>
 8006600:	4616      	mov	r6, r2
 8006602:	e7bd      	b.n	8006580 <_printf_i+0x128>
 8006604:	6833      	ldr	r3, [r6, #0]
 8006606:	6825      	ldr	r5, [r4, #0]
 8006608:	6961      	ldr	r1, [r4, #20]
 800660a:	1d18      	adds	r0, r3, #4
 800660c:	6030      	str	r0, [r6, #0]
 800660e:	062e      	lsls	r6, r5, #24
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	d501      	bpl.n	8006618 <_printf_i+0x1c0>
 8006614:	6019      	str	r1, [r3, #0]
 8006616:	e002      	b.n	800661e <_printf_i+0x1c6>
 8006618:	0668      	lsls	r0, r5, #25
 800661a:	d5fb      	bpl.n	8006614 <_printf_i+0x1bc>
 800661c:	8019      	strh	r1, [r3, #0]
 800661e:	2300      	movs	r3, #0
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	4616      	mov	r6, r2
 8006624:	e7bc      	b.n	80065a0 <_printf_i+0x148>
 8006626:	6833      	ldr	r3, [r6, #0]
 8006628:	1d1a      	adds	r2, r3, #4
 800662a:	6032      	str	r2, [r6, #0]
 800662c:	681e      	ldr	r6, [r3, #0]
 800662e:	6862      	ldr	r2, [r4, #4]
 8006630:	2100      	movs	r1, #0
 8006632:	4630      	mov	r0, r6
 8006634:	f7f9 fdcc 	bl	80001d0 <memchr>
 8006638:	b108      	cbz	r0, 800663e <_printf_i+0x1e6>
 800663a:	1b80      	subs	r0, r0, r6
 800663c:	6060      	str	r0, [r4, #4]
 800663e:	6863      	ldr	r3, [r4, #4]
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	2300      	movs	r3, #0
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006648:	e7aa      	b.n	80065a0 <_printf_i+0x148>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	4632      	mov	r2, r6
 800664e:	4649      	mov	r1, r9
 8006650:	4640      	mov	r0, r8
 8006652:	47d0      	blx	sl
 8006654:	3001      	adds	r0, #1
 8006656:	d0ad      	beq.n	80065b4 <_printf_i+0x15c>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	079b      	lsls	r3, r3, #30
 800665c:	d413      	bmi.n	8006686 <_printf_i+0x22e>
 800665e:	68e0      	ldr	r0, [r4, #12]
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	4298      	cmp	r0, r3
 8006664:	bfb8      	it	lt
 8006666:	4618      	movlt	r0, r3
 8006668:	e7a6      	b.n	80065b8 <_printf_i+0x160>
 800666a:	2301      	movs	r3, #1
 800666c:	4632      	mov	r2, r6
 800666e:	4649      	mov	r1, r9
 8006670:	4640      	mov	r0, r8
 8006672:	47d0      	blx	sl
 8006674:	3001      	adds	r0, #1
 8006676:	d09d      	beq.n	80065b4 <_printf_i+0x15c>
 8006678:	3501      	adds	r5, #1
 800667a:	68e3      	ldr	r3, [r4, #12]
 800667c:	9903      	ldr	r1, [sp, #12]
 800667e:	1a5b      	subs	r3, r3, r1
 8006680:	42ab      	cmp	r3, r5
 8006682:	dcf2      	bgt.n	800666a <_printf_i+0x212>
 8006684:	e7eb      	b.n	800665e <_printf_i+0x206>
 8006686:	2500      	movs	r5, #0
 8006688:	f104 0619 	add.w	r6, r4, #25
 800668c:	e7f5      	b.n	800667a <_printf_i+0x222>
 800668e:	bf00      	nop
 8006690:	08008776 	.word	0x08008776
 8006694:	08008787 	.word	0x08008787

08006698 <std>:
 8006698:	2300      	movs	r3, #0
 800669a:	b510      	push	{r4, lr}
 800669c:	4604      	mov	r4, r0
 800669e:	e9c0 3300 	strd	r3, r3, [r0]
 80066a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066a6:	6083      	str	r3, [r0, #8]
 80066a8:	8181      	strh	r1, [r0, #12]
 80066aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80066ac:	81c2      	strh	r2, [r0, #14]
 80066ae:	6183      	str	r3, [r0, #24]
 80066b0:	4619      	mov	r1, r3
 80066b2:	2208      	movs	r2, #8
 80066b4:	305c      	adds	r0, #92	@ 0x5c
 80066b6:	f000 f906 	bl	80068c6 <memset>
 80066ba:	4b0d      	ldr	r3, [pc, #52]	@ (80066f0 <std+0x58>)
 80066bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <std+0x5c>)
 80066c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066c2:	4b0d      	ldr	r3, [pc, #52]	@ (80066f8 <std+0x60>)
 80066c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066c6:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <std+0x64>)
 80066c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <std+0x68>)
 80066cc:	6224      	str	r4, [r4, #32]
 80066ce:	429c      	cmp	r4, r3
 80066d0:	d006      	beq.n	80066e0 <std+0x48>
 80066d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066d6:	4294      	cmp	r4, r2
 80066d8:	d002      	beq.n	80066e0 <std+0x48>
 80066da:	33d0      	adds	r3, #208	@ 0xd0
 80066dc:	429c      	cmp	r4, r3
 80066de:	d105      	bne.n	80066ec <std+0x54>
 80066e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e8:	f000 b96a 	b.w	80069c0 <__retarget_lock_init_recursive>
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	bf00      	nop
 80066f0:	08006841 	.word	0x08006841
 80066f4:	08006863 	.word	0x08006863
 80066f8:	0800689b 	.word	0x0800689b
 80066fc:	080068bf 	.word	0x080068bf
 8006700:	200003a4 	.word	0x200003a4

08006704 <stdio_exit_handler>:
 8006704:	4a02      	ldr	r2, [pc, #8]	@ (8006710 <stdio_exit_handler+0xc>)
 8006706:	4903      	ldr	r1, [pc, #12]	@ (8006714 <stdio_exit_handler+0x10>)
 8006708:	4803      	ldr	r0, [pc, #12]	@ (8006718 <stdio_exit_handler+0x14>)
 800670a:	f000 b869 	b.w	80067e0 <_fwalk_sglue>
 800670e:	bf00      	nop
 8006710:	2000003c 	.word	0x2000003c
 8006714:	080082f1 	.word	0x080082f1
 8006718:	2000004c 	.word	0x2000004c

0800671c <cleanup_stdio>:
 800671c:	6841      	ldr	r1, [r0, #4]
 800671e:	4b0c      	ldr	r3, [pc, #48]	@ (8006750 <cleanup_stdio+0x34>)
 8006720:	4299      	cmp	r1, r3
 8006722:	b510      	push	{r4, lr}
 8006724:	4604      	mov	r4, r0
 8006726:	d001      	beq.n	800672c <cleanup_stdio+0x10>
 8006728:	f001 fde2 	bl	80082f0 <_fflush_r>
 800672c:	68a1      	ldr	r1, [r4, #8]
 800672e:	4b09      	ldr	r3, [pc, #36]	@ (8006754 <cleanup_stdio+0x38>)
 8006730:	4299      	cmp	r1, r3
 8006732:	d002      	beq.n	800673a <cleanup_stdio+0x1e>
 8006734:	4620      	mov	r0, r4
 8006736:	f001 fddb 	bl	80082f0 <_fflush_r>
 800673a:	68e1      	ldr	r1, [r4, #12]
 800673c:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <cleanup_stdio+0x3c>)
 800673e:	4299      	cmp	r1, r3
 8006740:	d004      	beq.n	800674c <cleanup_stdio+0x30>
 8006742:	4620      	mov	r0, r4
 8006744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006748:	f001 bdd2 	b.w	80082f0 <_fflush_r>
 800674c:	bd10      	pop	{r4, pc}
 800674e:	bf00      	nop
 8006750:	200003a4 	.word	0x200003a4
 8006754:	2000040c 	.word	0x2000040c
 8006758:	20000474 	.word	0x20000474

0800675c <global_stdio_init.part.0>:
 800675c:	b510      	push	{r4, lr}
 800675e:	4b0b      	ldr	r3, [pc, #44]	@ (800678c <global_stdio_init.part.0+0x30>)
 8006760:	4c0b      	ldr	r4, [pc, #44]	@ (8006790 <global_stdio_init.part.0+0x34>)
 8006762:	4a0c      	ldr	r2, [pc, #48]	@ (8006794 <global_stdio_init.part.0+0x38>)
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	4620      	mov	r0, r4
 8006768:	2200      	movs	r2, #0
 800676a:	2104      	movs	r1, #4
 800676c:	f7ff ff94 	bl	8006698 <std>
 8006770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006774:	2201      	movs	r2, #1
 8006776:	2109      	movs	r1, #9
 8006778:	f7ff ff8e 	bl	8006698 <std>
 800677c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006780:	2202      	movs	r2, #2
 8006782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006786:	2112      	movs	r1, #18
 8006788:	f7ff bf86 	b.w	8006698 <std>
 800678c:	200004dc 	.word	0x200004dc
 8006790:	200003a4 	.word	0x200003a4
 8006794:	08006705 	.word	0x08006705

08006798 <__sfp_lock_acquire>:
 8006798:	4801      	ldr	r0, [pc, #4]	@ (80067a0 <__sfp_lock_acquire+0x8>)
 800679a:	f000 b912 	b.w	80069c2 <__retarget_lock_acquire_recursive>
 800679e:	bf00      	nop
 80067a0:	200004e5 	.word	0x200004e5

080067a4 <__sfp_lock_release>:
 80067a4:	4801      	ldr	r0, [pc, #4]	@ (80067ac <__sfp_lock_release+0x8>)
 80067a6:	f000 b90d 	b.w	80069c4 <__retarget_lock_release_recursive>
 80067aa:	bf00      	nop
 80067ac:	200004e5 	.word	0x200004e5

080067b0 <__sinit>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	4604      	mov	r4, r0
 80067b4:	f7ff fff0 	bl	8006798 <__sfp_lock_acquire>
 80067b8:	6a23      	ldr	r3, [r4, #32]
 80067ba:	b11b      	cbz	r3, 80067c4 <__sinit+0x14>
 80067bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c0:	f7ff bff0 	b.w	80067a4 <__sfp_lock_release>
 80067c4:	4b04      	ldr	r3, [pc, #16]	@ (80067d8 <__sinit+0x28>)
 80067c6:	6223      	str	r3, [r4, #32]
 80067c8:	4b04      	ldr	r3, [pc, #16]	@ (80067dc <__sinit+0x2c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f5      	bne.n	80067bc <__sinit+0xc>
 80067d0:	f7ff ffc4 	bl	800675c <global_stdio_init.part.0>
 80067d4:	e7f2      	b.n	80067bc <__sinit+0xc>
 80067d6:	bf00      	nop
 80067d8:	0800671d 	.word	0x0800671d
 80067dc:	200004dc 	.word	0x200004dc

080067e0 <_fwalk_sglue>:
 80067e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e4:	4607      	mov	r7, r0
 80067e6:	4688      	mov	r8, r1
 80067e8:	4614      	mov	r4, r2
 80067ea:	2600      	movs	r6, #0
 80067ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067f0:	f1b9 0901 	subs.w	r9, r9, #1
 80067f4:	d505      	bpl.n	8006802 <_fwalk_sglue+0x22>
 80067f6:	6824      	ldr	r4, [r4, #0]
 80067f8:	2c00      	cmp	r4, #0
 80067fa:	d1f7      	bne.n	80067ec <_fwalk_sglue+0xc>
 80067fc:	4630      	mov	r0, r6
 80067fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006802:	89ab      	ldrh	r3, [r5, #12]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d907      	bls.n	8006818 <_fwalk_sglue+0x38>
 8006808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800680c:	3301      	adds	r3, #1
 800680e:	d003      	beq.n	8006818 <_fwalk_sglue+0x38>
 8006810:	4629      	mov	r1, r5
 8006812:	4638      	mov	r0, r7
 8006814:	47c0      	blx	r8
 8006816:	4306      	orrs	r6, r0
 8006818:	3568      	adds	r5, #104	@ 0x68
 800681a:	e7e9      	b.n	80067f0 <_fwalk_sglue+0x10>

0800681c <iprintf>:
 800681c:	b40f      	push	{r0, r1, r2, r3}
 800681e:	b507      	push	{r0, r1, r2, lr}
 8006820:	4906      	ldr	r1, [pc, #24]	@ (800683c <iprintf+0x20>)
 8006822:	ab04      	add	r3, sp, #16
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	f853 2b04 	ldr.w	r2, [r3], #4
 800682a:	6881      	ldr	r1, [r0, #8]
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	f001 fbc3 	bl	8007fb8 <_vfiprintf_r>
 8006832:	b003      	add	sp, #12
 8006834:	f85d eb04 	ldr.w	lr, [sp], #4
 8006838:	b004      	add	sp, #16
 800683a:	4770      	bx	lr
 800683c:	20000048 	.word	0x20000048

08006840 <__sread>:
 8006840:	b510      	push	{r4, lr}
 8006842:	460c      	mov	r4, r1
 8006844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006848:	f000 f86c 	bl	8006924 <_read_r>
 800684c:	2800      	cmp	r0, #0
 800684e:	bfab      	itete	ge
 8006850:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006852:	89a3      	ldrhlt	r3, [r4, #12]
 8006854:	181b      	addge	r3, r3, r0
 8006856:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800685a:	bfac      	ite	ge
 800685c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800685e:	81a3      	strhlt	r3, [r4, #12]
 8006860:	bd10      	pop	{r4, pc}

08006862 <__swrite>:
 8006862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006866:	461f      	mov	r7, r3
 8006868:	898b      	ldrh	r3, [r1, #12]
 800686a:	05db      	lsls	r3, r3, #23
 800686c:	4605      	mov	r5, r0
 800686e:	460c      	mov	r4, r1
 8006870:	4616      	mov	r6, r2
 8006872:	d505      	bpl.n	8006880 <__swrite+0x1e>
 8006874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006878:	2302      	movs	r3, #2
 800687a:	2200      	movs	r2, #0
 800687c:	f000 f840 	bl	8006900 <_lseek_r>
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	4632      	mov	r2, r6
 800688e:	463b      	mov	r3, r7
 8006890:	4628      	mov	r0, r5
 8006892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006896:	f000 b857 	b.w	8006948 <_write_r>

0800689a <__sseek>:
 800689a:	b510      	push	{r4, lr}
 800689c:	460c      	mov	r4, r1
 800689e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a2:	f000 f82d 	bl	8006900 <_lseek_r>
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	bf15      	itete	ne
 80068ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068b6:	81a3      	strheq	r3, [r4, #12]
 80068b8:	bf18      	it	ne
 80068ba:	81a3      	strhne	r3, [r4, #12]
 80068bc:	bd10      	pop	{r4, pc}

080068be <__sclose>:
 80068be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c2:	f000 b80d 	b.w	80068e0 <_close_r>

080068c6 <memset>:
 80068c6:	4402      	add	r2, r0
 80068c8:	4603      	mov	r3, r0
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d100      	bne.n	80068d0 <memset+0xa>
 80068ce:	4770      	bx	lr
 80068d0:	f803 1b01 	strb.w	r1, [r3], #1
 80068d4:	e7f9      	b.n	80068ca <memset+0x4>
	...

080068d8 <_localeconv_r>:
 80068d8:	4800      	ldr	r0, [pc, #0]	@ (80068dc <_localeconv_r+0x4>)
 80068da:	4770      	bx	lr
 80068dc:	20000188 	.word	0x20000188

080068e0 <_close_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4d06      	ldr	r5, [pc, #24]	@ (80068fc <_close_r+0x1c>)
 80068e4:	2300      	movs	r3, #0
 80068e6:	4604      	mov	r4, r0
 80068e8:	4608      	mov	r0, r1
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	f7fa fdae 	bl	800144c <_close>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_close_r+0x1a>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_close_r+0x1a>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	200004e0 	.word	0x200004e0

08006900 <_lseek_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4d07      	ldr	r5, [pc, #28]	@ (8006920 <_lseek_r+0x20>)
 8006904:	4604      	mov	r4, r0
 8006906:	4608      	mov	r0, r1
 8006908:	4611      	mov	r1, r2
 800690a:	2200      	movs	r2, #0
 800690c:	602a      	str	r2, [r5, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	f7fa fdc3 	bl	800149a <_lseek>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d102      	bne.n	800691e <_lseek_r+0x1e>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	b103      	cbz	r3, 800691e <_lseek_r+0x1e>
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	200004e0 	.word	0x200004e0

08006924 <_read_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d07      	ldr	r5, [pc, #28]	@ (8006944 <_read_r+0x20>)
 8006928:	4604      	mov	r4, r0
 800692a:	4608      	mov	r0, r1
 800692c:	4611      	mov	r1, r2
 800692e:	2200      	movs	r2, #0
 8006930:	602a      	str	r2, [r5, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	f7fa fd51 	bl	80013da <_read>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_read_r+0x1e>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	b103      	cbz	r3, 8006942 <_read_r+0x1e>
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	200004e0 	.word	0x200004e0

08006948 <_write_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d07      	ldr	r5, [pc, #28]	@ (8006968 <_write_r+0x20>)
 800694c:	4604      	mov	r4, r0
 800694e:	4608      	mov	r0, r1
 8006950:	4611      	mov	r1, r2
 8006952:	2200      	movs	r2, #0
 8006954:	602a      	str	r2, [r5, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	f7fa fd5c 	bl	8001414 <_write>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d102      	bne.n	8006966 <_write_r+0x1e>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	b103      	cbz	r3, 8006966 <_write_r+0x1e>
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	200004e0 	.word	0x200004e0

0800696c <__errno>:
 800696c:	4b01      	ldr	r3, [pc, #4]	@ (8006974 <__errno+0x8>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000048 	.word	0x20000048

08006978 <__libc_init_array>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4d0d      	ldr	r5, [pc, #52]	@ (80069b0 <__libc_init_array+0x38>)
 800697c:	4c0d      	ldr	r4, [pc, #52]	@ (80069b4 <__libc_init_array+0x3c>)
 800697e:	1b64      	subs	r4, r4, r5
 8006980:	10a4      	asrs	r4, r4, #2
 8006982:	2600      	movs	r6, #0
 8006984:	42a6      	cmp	r6, r4
 8006986:	d109      	bne.n	800699c <__libc_init_array+0x24>
 8006988:	4d0b      	ldr	r5, [pc, #44]	@ (80069b8 <__libc_init_array+0x40>)
 800698a:	4c0c      	ldr	r4, [pc, #48]	@ (80069bc <__libc_init_array+0x44>)
 800698c:	f001 febe 	bl	800870c <_init>
 8006990:	1b64      	subs	r4, r4, r5
 8006992:	10a4      	asrs	r4, r4, #2
 8006994:	2600      	movs	r6, #0
 8006996:	42a6      	cmp	r6, r4
 8006998:	d105      	bne.n	80069a6 <__libc_init_array+0x2e>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a0:	4798      	blx	r3
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7ee      	b.n	8006984 <__libc_init_array+0xc>
 80069a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069aa:	4798      	blx	r3
 80069ac:	3601      	adds	r6, #1
 80069ae:	e7f2      	b.n	8006996 <__libc_init_array+0x1e>
 80069b0:	08008ae0 	.word	0x08008ae0
 80069b4:	08008ae0 	.word	0x08008ae0
 80069b8:	08008ae0 	.word	0x08008ae0
 80069bc:	08008ae4 	.word	0x08008ae4

080069c0 <__retarget_lock_init_recursive>:
 80069c0:	4770      	bx	lr

080069c2 <__retarget_lock_acquire_recursive>:
 80069c2:	4770      	bx	lr

080069c4 <__retarget_lock_release_recursive>:
 80069c4:	4770      	bx	lr

080069c6 <quorem>:
 80069c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	6903      	ldr	r3, [r0, #16]
 80069cc:	690c      	ldr	r4, [r1, #16]
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	4607      	mov	r7, r0
 80069d2:	db7e      	blt.n	8006ad2 <quorem+0x10c>
 80069d4:	3c01      	subs	r4, #1
 80069d6:	f101 0814 	add.w	r8, r1, #20
 80069da:	00a3      	lsls	r3, r4, #2
 80069dc:	f100 0514 	add.w	r5, r0, #20
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069f0:	3301      	adds	r3, #1
 80069f2:	429a      	cmp	r2, r3
 80069f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80069fc:	d32e      	bcc.n	8006a5c <quorem+0x96>
 80069fe:	f04f 0a00 	mov.w	sl, #0
 8006a02:	46c4      	mov	ip, r8
 8006a04:	46ae      	mov	lr, r5
 8006a06:	46d3      	mov	fp, sl
 8006a08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a0c:	b298      	uxth	r0, r3
 8006a0e:	fb06 a000 	mla	r0, r6, r0, sl
 8006a12:	0c02      	lsrs	r2, r0, #16
 8006a14:	0c1b      	lsrs	r3, r3, #16
 8006a16:	fb06 2303 	mla	r3, r6, r3, r2
 8006a1a:	f8de 2000 	ldr.w	r2, [lr]
 8006a1e:	b280      	uxth	r0, r0
 8006a20:	b292      	uxth	r2, r2
 8006a22:	1a12      	subs	r2, r2, r0
 8006a24:	445a      	add	r2, fp
 8006a26:	f8de 0000 	ldr.w	r0, [lr]
 8006a2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a38:	b292      	uxth	r2, r2
 8006a3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a3e:	45e1      	cmp	r9, ip
 8006a40:	f84e 2b04 	str.w	r2, [lr], #4
 8006a44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a48:	d2de      	bcs.n	8006a08 <quorem+0x42>
 8006a4a:	9b00      	ldr	r3, [sp, #0]
 8006a4c:	58eb      	ldr	r3, [r5, r3]
 8006a4e:	b92b      	cbnz	r3, 8006a5c <quorem+0x96>
 8006a50:	9b01      	ldr	r3, [sp, #4]
 8006a52:	3b04      	subs	r3, #4
 8006a54:	429d      	cmp	r5, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	d32f      	bcc.n	8006aba <quorem+0xf4>
 8006a5a:	613c      	str	r4, [r7, #16]
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	f001 f979 	bl	8007d54 <__mcmp>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	db25      	blt.n	8006ab2 <quorem+0xec>
 8006a66:	4629      	mov	r1, r5
 8006a68:	2000      	movs	r0, #0
 8006a6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a6e:	f8d1 c000 	ldr.w	ip, [r1]
 8006a72:	fa1f fe82 	uxth.w	lr, r2
 8006a76:	fa1f f38c 	uxth.w	r3, ip
 8006a7a:	eba3 030e 	sub.w	r3, r3, lr
 8006a7e:	4403      	add	r3, r0
 8006a80:	0c12      	lsrs	r2, r2, #16
 8006a82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a90:	45c1      	cmp	r9, r8
 8006a92:	f841 3b04 	str.w	r3, [r1], #4
 8006a96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a9a:	d2e6      	bcs.n	8006a6a <quorem+0xa4>
 8006a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aa4:	b922      	cbnz	r2, 8006ab0 <quorem+0xea>
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	429d      	cmp	r5, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	d30b      	bcc.n	8006ac6 <quorem+0x100>
 8006aae:	613c      	str	r4, [r7, #16]
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	b003      	add	sp, #12
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	3b04      	subs	r3, #4
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	d1cb      	bne.n	8006a5a <quorem+0x94>
 8006ac2:	3c01      	subs	r4, #1
 8006ac4:	e7c6      	b.n	8006a54 <quorem+0x8e>
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	3b04      	subs	r3, #4
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d1ef      	bne.n	8006aae <quorem+0xe8>
 8006ace:	3c01      	subs	r4, #1
 8006ad0:	e7ea      	b.n	8006aa8 <quorem+0xe2>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e7ee      	b.n	8006ab4 <quorem+0xee>
	...

08006ad8 <_dtoa_r>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	69c7      	ldr	r7, [r0, #28]
 8006ade:	b099      	sub	sp, #100	@ 0x64
 8006ae0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ae4:	ec55 4b10 	vmov	r4, r5, d0
 8006ae8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006aea:	9109      	str	r1, [sp, #36]	@ 0x24
 8006aec:	4683      	mov	fp, r0
 8006aee:	920e      	str	r2, [sp, #56]	@ 0x38
 8006af0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006af2:	b97f      	cbnz	r7, 8006b14 <_dtoa_r+0x3c>
 8006af4:	2010      	movs	r0, #16
 8006af6:	f000 fdfd 	bl	80076f4 <malloc>
 8006afa:	4602      	mov	r2, r0
 8006afc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b00:	b920      	cbnz	r0, 8006b0c <_dtoa_r+0x34>
 8006b02:	4ba7      	ldr	r3, [pc, #668]	@ (8006da0 <_dtoa_r+0x2c8>)
 8006b04:	21ef      	movs	r1, #239	@ 0xef
 8006b06:	48a7      	ldr	r0, [pc, #668]	@ (8006da4 <_dtoa_r+0x2cc>)
 8006b08:	f001 fccc 	bl	80084a4 <__assert_func>
 8006b0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b10:	6007      	str	r7, [r0, #0]
 8006b12:	60c7      	str	r7, [r0, #12]
 8006b14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b18:	6819      	ldr	r1, [r3, #0]
 8006b1a:	b159      	cbz	r1, 8006b34 <_dtoa_r+0x5c>
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	604a      	str	r2, [r1, #4]
 8006b20:	2301      	movs	r3, #1
 8006b22:	4093      	lsls	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
 8006b26:	4658      	mov	r0, fp
 8006b28:	f000 feda 	bl	80078e0 <_Bfree>
 8006b2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	1e2b      	subs	r3, r5, #0
 8006b36:	bfb9      	ittee	lt
 8006b38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b3c:	9303      	strlt	r3, [sp, #12]
 8006b3e:	2300      	movge	r3, #0
 8006b40:	6033      	strge	r3, [r6, #0]
 8006b42:	9f03      	ldr	r7, [sp, #12]
 8006b44:	4b98      	ldr	r3, [pc, #608]	@ (8006da8 <_dtoa_r+0x2d0>)
 8006b46:	bfbc      	itt	lt
 8006b48:	2201      	movlt	r2, #1
 8006b4a:	6032      	strlt	r2, [r6, #0]
 8006b4c:	43bb      	bics	r3, r7
 8006b4e:	d112      	bne.n	8006b76 <_dtoa_r+0x9e>
 8006b50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b5c:	4323      	orrs	r3, r4
 8006b5e:	f000 854d 	beq.w	80075fc <_dtoa_r+0xb24>
 8006b62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006dbc <_dtoa_r+0x2e4>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 854f 	beq.w	800760c <_dtoa_r+0xb34>
 8006b6e:	f10a 0303 	add.w	r3, sl, #3
 8006b72:	f000 bd49 	b.w	8007608 <_dtoa_r+0xb30>
 8006b76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	ec51 0b17 	vmov	r0, r1, d7
 8006b80:	2300      	movs	r3, #0
 8006b82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006b86:	f7f9 ff9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	b158      	cbz	r0, 8006ba6 <_dtoa_r+0xce>
 8006b8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b90:	2301      	movs	r3, #1
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b96:	b113      	cbz	r3, 8006b9e <_dtoa_r+0xc6>
 8006b98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b9a:	4b84      	ldr	r3, [pc, #528]	@ (8006dac <_dtoa_r+0x2d4>)
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006dc0 <_dtoa_r+0x2e8>
 8006ba2:	f000 bd33 	b.w	800760c <_dtoa_r+0xb34>
 8006ba6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006baa:	aa16      	add	r2, sp, #88	@ 0x58
 8006bac:	a917      	add	r1, sp, #92	@ 0x5c
 8006bae:	4658      	mov	r0, fp
 8006bb0:	f001 f980 	bl	8007eb4 <__d2b>
 8006bb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006bb8:	4681      	mov	r9, r0
 8006bba:	2e00      	cmp	r6, #0
 8006bbc:	d077      	beq.n	8006cae <_dtoa_r+0x1d6>
 8006bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006bd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006bd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006bd8:	4619      	mov	r1, r3
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4b74      	ldr	r3, [pc, #464]	@ (8006db0 <_dtoa_r+0x2d8>)
 8006bde:	f7f9 fb53 	bl	8000288 <__aeabi_dsub>
 8006be2:	a369      	add	r3, pc, #420	@ (adr r3, 8006d88 <_dtoa_r+0x2b0>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	a368      	add	r3, pc, #416	@ (adr r3, 8006d90 <_dtoa_r+0x2b8>)
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f7f9 fb4b 	bl	800028c <__adddf3>
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	f7f9 fc92 	bl	8000524 <__aeabi_i2d>
 8006c00:	a365      	add	r3, pc, #404	@ (adr r3, 8006d98 <_dtoa_r+0x2c0>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f7f9 fcf7 	bl	80005f8 <__aeabi_dmul>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fb3b 	bl	800028c <__adddf3>
 8006c16:	4604      	mov	r4, r0
 8006c18:	460d      	mov	r5, r1
 8006c1a:	f7f9 ff9d 	bl	8000b58 <__aeabi_d2iz>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4607      	mov	r7, r0
 8006c22:	2300      	movs	r3, #0
 8006c24:	4620      	mov	r0, r4
 8006c26:	4629      	mov	r1, r5
 8006c28:	f7f9 ff58 	bl	8000adc <__aeabi_dcmplt>
 8006c2c:	b140      	cbz	r0, 8006c40 <_dtoa_r+0x168>
 8006c2e:	4638      	mov	r0, r7
 8006c30:	f7f9 fc78 	bl	8000524 <__aeabi_i2d>
 8006c34:	4622      	mov	r2, r4
 8006c36:	462b      	mov	r3, r5
 8006c38:	f7f9 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c3c:	b900      	cbnz	r0, 8006c40 <_dtoa_r+0x168>
 8006c3e:	3f01      	subs	r7, #1
 8006c40:	2f16      	cmp	r7, #22
 8006c42:	d851      	bhi.n	8006ce8 <_dtoa_r+0x210>
 8006c44:	4b5b      	ldr	r3, [pc, #364]	@ (8006db4 <_dtoa_r+0x2dc>)
 8006c46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c52:	f7f9 ff43 	bl	8000adc <__aeabi_dcmplt>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d048      	beq.n	8006cec <_dtoa_r+0x214>
 8006c5a:	3f01      	subs	r7, #1
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c62:	1b9b      	subs	r3, r3, r6
 8006c64:	1e5a      	subs	r2, r3, #1
 8006c66:	bf44      	itt	mi
 8006c68:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c6c:	2300      	movmi	r3, #0
 8006c6e:	9208      	str	r2, [sp, #32]
 8006c70:	bf54      	ite	pl
 8006c72:	f04f 0800 	movpl.w	r8, #0
 8006c76:	9308      	strmi	r3, [sp, #32]
 8006c78:	2f00      	cmp	r7, #0
 8006c7a:	db39      	blt.n	8006cf0 <_dtoa_r+0x218>
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c80:	443b      	add	r3, r7
 8006c82:	9308      	str	r3, [sp, #32]
 8006c84:	2300      	movs	r3, #0
 8006c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d864      	bhi.n	8006d58 <_dtoa_r+0x280>
 8006c8e:	2b05      	cmp	r3, #5
 8006c90:	bfc4      	itt	gt
 8006c92:	3b04      	subgt	r3, #4
 8006c94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c98:	f1a3 0302 	sub.w	r3, r3, #2
 8006c9c:	bfcc      	ite	gt
 8006c9e:	2400      	movgt	r4, #0
 8006ca0:	2401      	movle	r4, #1
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d863      	bhi.n	8006d6e <_dtoa_r+0x296>
 8006ca6:	e8df f003 	tbb	[pc, r3]
 8006caa:	372a      	.short	0x372a
 8006cac:	5535      	.short	0x5535
 8006cae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006cb2:	441e      	add	r6, r3
 8006cb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	bfc1      	itttt	gt
 8006cbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cc0:	409f      	lslgt	r7, r3
 8006cc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006cc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006cca:	bfd6      	itet	le
 8006ccc:	f1c3 0320 	rsble	r3, r3, #32
 8006cd0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006cd4:	fa04 f003 	lslle.w	r0, r4, r3
 8006cd8:	f7f9 fc14 	bl	8000504 <__aeabi_ui2d>
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ce2:	3e01      	subs	r6, #1
 8006ce4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ce6:	e777      	b.n	8006bd8 <_dtoa_r+0x100>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e7b8      	b.n	8006c5e <_dtoa_r+0x186>
 8006cec:	9012      	str	r0, [sp, #72]	@ 0x48
 8006cee:	e7b7      	b.n	8006c60 <_dtoa_r+0x188>
 8006cf0:	427b      	negs	r3, r7
 8006cf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	eba8 0807 	sub.w	r8, r8, r7
 8006cfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cfc:	e7c4      	b.n	8006c88 <_dtoa_r+0x1b0>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	dc35      	bgt.n	8006d74 <_dtoa_r+0x29c>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	9307      	str	r3, [sp, #28]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d12:	e00b      	b.n	8006d2c <_dtoa_r+0x254>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e7f3      	b.n	8006d00 <_dtoa_r+0x228>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d1e:	18fb      	adds	r3, r7, r3
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	bfb8      	it	lt
 8006d2a:	2301      	movlt	r3, #1
 8006d2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d30:	2100      	movs	r1, #0
 8006d32:	2204      	movs	r2, #4
 8006d34:	f102 0514 	add.w	r5, r2, #20
 8006d38:	429d      	cmp	r5, r3
 8006d3a:	d91f      	bls.n	8006d7c <_dtoa_r+0x2a4>
 8006d3c:	6041      	str	r1, [r0, #4]
 8006d3e:	4658      	mov	r0, fp
 8006d40:	f000 fd8e 	bl	8007860 <_Balloc>
 8006d44:	4682      	mov	sl, r0
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d13c      	bne.n	8006dc4 <_dtoa_r+0x2ec>
 8006d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006db8 <_dtoa_r+0x2e0>)
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d52:	e6d8      	b.n	8006b06 <_dtoa_r+0x2e>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e7e0      	b.n	8006d1a <_dtoa_r+0x242>
 8006d58:	2401      	movs	r4, #1
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d60:	f04f 33ff 	mov.w	r3, #4294967295
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	9307      	str	r3, [sp, #28]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2312      	movs	r3, #18
 8006d6c:	e7d0      	b.n	8006d10 <_dtoa_r+0x238>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d72:	e7f5      	b.n	8006d60 <_dtoa_r+0x288>
 8006d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	9307      	str	r3, [sp, #28]
 8006d7a:	e7d7      	b.n	8006d2c <_dtoa_r+0x254>
 8006d7c:	3101      	adds	r1, #1
 8006d7e:	0052      	lsls	r2, r2, #1
 8006d80:	e7d8      	b.n	8006d34 <_dtoa_r+0x25c>
 8006d82:	bf00      	nop
 8006d84:	f3af 8000 	nop.w
 8006d88:	636f4361 	.word	0x636f4361
 8006d8c:	3fd287a7 	.word	0x3fd287a7
 8006d90:	8b60c8b3 	.word	0x8b60c8b3
 8006d94:	3fc68a28 	.word	0x3fc68a28
 8006d98:	509f79fb 	.word	0x509f79fb
 8006d9c:	3fd34413 	.word	0x3fd34413
 8006da0:	080087a5 	.word	0x080087a5
 8006da4:	080087bc 	.word	0x080087bc
 8006da8:	7ff00000 	.word	0x7ff00000
 8006dac:	08008775 	.word	0x08008775
 8006db0:	3ff80000 	.word	0x3ff80000
 8006db4:	080088b8 	.word	0x080088b8
 8006db8:	08008814 	.word	0x08008814
 8006dbc:	080087a1 	.word	0x080087a1
 8006dc0:	08008774 	.word	0x08008774
 8006dc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006dc8:	6018      	str	r0, [r3, #0]
 8006dca:	9b07      	ldr	r3, [sp, #28]
 8006dcc:	2b0e      	cmp	r3, #14
 8006dce:	f200 80a4 	bhi.w	8006f1a <_dtoa_r+0x442>
 8006dd2:	2c00      	cmp	r4, #0
 8006dd4:	f000 80a1 	beq.w	8006f1a <_dtoa_r+0x442>
 8006dd8:	2f00      	cmp	r7, #0
 8006dda:	dd33      	ble.n	8006e44 <_dtoa_r+0x36c>
 8006ddc:	4bad      	ldr	r3, [pc, #692]	@ (8007094 <_dtoa_r+0x5bc>)
 8006dde:	f007 020f 	and.w	r2, r7, #15
 8006de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de6:	ed93 7b00 	vldr	d7, [r3]
 8006dea:	05f8      	lsls	r0, r7, #23
 8006dec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006df0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006df4:	d516      	bpl.n	8006e24 <_dtoa_r+0x34c>
 8006df6:	4ba8      	ldr	r3, [pc, #672]	@ (8007098 <_dtoa_r+0x5c0>)
 8006df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e00:	f7f9 fd24 	bl	800084c <__aeabi_ddiv>
 8006e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e08:	f004 040f 	and.w	r4, r4, #15
 8006e0c:	2603      	movs	r6, #3
 8006e0e:	4da2      	ldr	r5, [pc, #648]	@ (8007098 <_dtoa_r+0x5c0>)
 8006e10:	b954      	cbnz	r4, 8006e28 <_dtoa_r+0x350>
 8006e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1a:	f7f9 fd17 	bl	800084c <__aeabi_ddiv>
 8006e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e22:	e028      	b.n	8006e76 <_dtoa_r+0x39e>
 8006e24:	2602      	movs	r6, #2
 8006e26:	e7f2      	b.n	8006e0e <_dtoa_r+0x336>
 8006e28:	07e1      	lsls	r1, r4, #31
 8006e2a:	d508      	bpl.n	8006e3e <_dtoa_r+0x366>
 8006e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e34:	f7f9 fbe0 	bl	80005f8 <__aeabi_dmul>
 8006e38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e3c:	3601      	adds	r6, #1
 8006e3e:	1064      	asrs	r4, r4, #1
 8006e40:	3508      	adds	r5, #8
 8006e42:	e7e5      	b.n	8006e10 <_dtoa_r+0x338>
 8006e44:	f000 80d2 	beq.w	8006fec <_dtoa_r+0x514>
 8006e48:	427c      	negs	r4, r7
 8006e4a:	4b92      	ldr	r3, [pc, #584]	@ (8007094 <_dtoa_r+0x5bc>)
 8006e4c:	4d92      	ldr	r5, [pc, #584]	@ (8007098 <_dtoa_r+0x5c0>)
 8006e4e:	f004 020f 	and.w	r2, r4, #15
 8006e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e5e:	f7f9 fbcb 	bl	80005f8 <__aeabi_dmul>
 8006e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e66:	1124      	asrs	r4, r4, #4
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2602      	movs	r6, #2
 8006e6c:	2c00      	cmp	r4, #0
 8006e6e:	f040 80b2 	bne.w	8006fd6 <_dtoa_r+0x4fe>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1d3      	bne.n	8006e1e <_dtoa_r+0x346>
 8006e76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 80b7 	beq.w	8006ff0 <_dtoa_r+0x518>
 8006e82:	4b86      	ldr	r3, [pc, #536]	@ (800709c <_dtoa_r+0x5c4>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fe27 	bl	8000adc <__aeabi_dcmplt>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	f000 80ae 	beq.w	8006ff0 <_dtoa_r+0x518>
 8006e94:	9b07      	ldr	r3, [sp, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80aa 	beq.w	8006ff0 <_dtoa_r+0x518>
 8006e9c:	9b00      	ldr	r3, [sp, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dd37      	ble.n	8006f12 <_dtoa_r+0x43a>
 8006ea2:	1e7b      	subs	r3, r7, #1
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4b7d      	ldr	r3, [pc, #500]	@ (80070a0 <_dtoa_r+0x5c8>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4629      	mov	r1, r5
 8006eae:	f7f9 fba3 	bl	80005f8 <__aeabi_dmul>
 8006eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb6:	9c00      	ldr	r4, [sp, #0]
 8006eb8:	3601      	adds	r6, #1
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7f9 fb32 	bl	8000524 <__aeabi_i2d>
 8006ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ec4:	f7f9 fb98 	bl	80005f8 <__aeabi_dmul>
 8006ec8:	4b76      	ldr	r3, [pc, #472]	@ (80070a4 <_dtoa_r+0x5cc>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f7f9 f9de 	bl	800028c <__adddf3>
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ed6:	2c00      	cmp	r4, #0
 8006ed8:	f040 808d 	bne.w	8006ff6 <_dtoa_r+0x51e>
 8006edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee0:	4b71      	ldr	r3, [pc, #452]	@ (80070a8 <_dtoa_r+0x5d0>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f7f9 f9d0 	bl	8000288 <__aeabi_dsub>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	4633      	mov	r3, r6
 8006ef4:	f7f9 fe10 	bl	8000b18 <__aeabi_dcmpgt>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	f040 828b 	bne.w	8007414 <_dtoa_r+0x93c>
 8006efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f02:	462a      	mov	r2, r5
 8006f04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f08:	f7f9 fde8 	bl	8000adc <__aeabi_dcmplt>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f040 8128 	bne.w	8007162 <_dtoa_r+0x68a>
 8006f12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f2c0 815a 	blt.w	80071d6 <_dtoa_r+0x6fe>
 8006f22:	2f0e      	cmp	r7, #14
 8006f24:	f300 8157 	bgt.w	80071d6 <_dtoa_r+0x6fe>
 8006f28:	4b5a      	ldr	r3, [pc, #360]	@ (8007094 <_dtoa_r+0x5bc>)
 8006f2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f2e:	ed93 7b00 	vldr	d7, [r3]
 8006f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	ed8d 7b00 	vstr	d7, [sp]
 8006f3a:	da03      	bge.n	8006f44 <_dtoa_r+0x46c>
 8006f3c:	9b07      	ldr	r3, [sp, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f340 8101 	ble.w	8007146 <_dtoa_r+0x66e>
 8006f44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f48:	4656      	mov	r6, sl
 8006f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	4629      	mov	r1, r5
 8006f52:	f7f9 fc7b 	bl	800084c <__aeabi_ddiv>
 8006f56:	f7f9 fdff 	bl	8000b58 <__aeabi_d2iz>
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	f7f9 fae2 	bl	8000524 <__aeabi_i2d>
 8006f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f64:	f7f9 fb48 	bl	80005f8 <__aeabi_dmul>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	4629      	mov	r1, r5
 8006f70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f74:	f7f9 f988 	bl	8000288 <__aeabi_dsub>
 8006f78:	f806 4b01 	strb.w	r4, [r6], #1
 8006f7c:	9d07      	ldr	r5, [sp, #28]
 8006f7e:	eba6 040a 	sub.w	r4, r6, sl
 8006f82:	42a5      	cmp	r5, r4
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	f040 8117 	bne.w	80071ba <_dtoa_r+0x6e2>
 8006f8c:	f7f9 f97e 	bl	800028c <__adddf3>
 8006f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f94:	4604      	mov	r4, r0
 8006f96:	460d      	mov	r5, r1
 8006f98:	f7f9 fdbe 	bl	8000b18 <__aeabi_dcmpgt>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f040 80f9 	bne.w	8007194 <_dtoa_r+0x6bc>
 8006fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fae:	b118      	cbz	r0, 8006fb8 <_dtoa_r+0x4e0>
 8006fb0:	f018 0f01 	tst.w	r8, #1
 8006fb4:	f040 80ee 	bne.w	8007194 <_dtoa_r+0x6bc>
 8006fb8:	4649      	mov	r1, r9
 8006fba:	4658      	mov	r0, fp
 8006fbc:	f000 fc90 	bl	80078e0 <_Bfree>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	7033      	strb	r3, [r6, #0]
 8006fc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006fc6:	3701      	adds	r7, #1
 8006fc8:	601f      	str	r7, [r3, #0]
 8006fca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 831d 	beq.w	800760c <_dtoa_r+0xb34>
 8006fd2:	601e      	str	r6, [r3, #0]
 8006fd4:	e31a      	b.n	800760c <_dtoa_r+0xb34>
 8006fd6:	07e2      	lsls	r2, r4, #31
 8006fd8:	d505      	bpl.n	8006fe6 <_dtoa_r+0x50e>
 8006fda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fde:	f7f9 fb0b 	bl	80005f8 <__aeabi_dmul>
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	1064      	asrs	r4, r4, #1
 8006fe8:	3508      	adds	r5, #8
 8006fea:	e73f      	b.n	8006e6c <_dtoa_r+0x394>
 8006fec:	2602      	movs	r6, #2
 8006fee:	e742      	b.n	8006e76 <_dtoa_r+0x39e>
 8006ff0:	9c07      	ldr	r4, [sp, #28]
 8006ff2:	9704      	str	r7, [sp, #16]
 8006ff4:	e761      	b.n	8006eba <_dtoa_r+0x3e2>
 8006ff6:	4b27      	ldr	r3, [pc, #156]	@ (8007094 <_dtoa_r+0x5bc>)
 8006ff8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ffa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ffe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007002:	4454      	add	r4, sl
 8007004:	2900      	cmp	r1, #0
 8007006:	d053      	beq.n	80070b0 <_dtoa_r+0x5d8>
 8007008:	4928      	ldr	r1, [pc, #160]	@ (80070ac <_dtoa_r+0x5d4>)
 800700a:	2000      	movs	r0, #0
 800700c:	f7f9 fc1e 	bl	800084c <__aeabi_ddiv>
 8007010:	4633      	mov	r3, r6
 8007012:	462a      	mov	r2, r5
 8007014:	f7f9 f938 	bl	8000288 <__aeabi_dsub>
 8007018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800701c:	4656      	mov	r6, sl
 800701e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007022:	f7f9 fd99 	bl	8000b58 <__aeabi_d2iz>
 8007026:	4605      	mov	r5, r0
 8007028:	f7f9 fa7c 	bl	8000524 <__aeabi_i2d>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007034:	f7f9 f928 	bl	8000288 <__aeabi_dsub>
 8007038:	3530      	adds	r5, #48	@ 0x30
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007042:	f806 5b01 	strb.w	r5, [r6], #1
 8007046:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800704a:	f7f9 fd47 	bl	8000adc <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	d171      	bne.n	8007136 <_dtoa_r+0x65e>
 8007052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007056:	4911      	ldr	r1, [pc, #68]	@ (800709c <_dtoa_r+0x5c4>)
 8007058:	2000      	movs	r0, #0
 800705a:	f7f9 f915 	bl	8000288 <__aeabi_dsub>
 800705e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007062:	f7f9 fd3b 	bl	8000adc <__aeabi_dcmplt>
 8007066:	2800      	cmp	r0, #0
 8007068:	f040 8095 	bne.w	8007196 <_dtoa_r+0x6be>
 800706c:	42a6      	cmp	r6, r4
 800706e:	f43f af50 	beq.w	8006f12 <_dtoa_r+0x43a>
 8007072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007076:	4b0a      	ldr	r3, [pc, #40]	@ (80070a0 <_dtoa_r+0x5c8>)
 8007078:	2200      	movs	r2, #0
 800707a:	f7f9 fabd 	bl	80005f8 <__aeabi_dmul>
 800707e:	4b08      	ldr	r3, [pc, #32]	@ (80070a0 <_dtoa_r+0x5c8>)
 8007080:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007084:	2200      	movs	r2, #0
 8007086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800708a:	f7f9 fab5 	bl	80005f8 <__aeabi_dmul>
 800708e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007092:	e7c4      	b.n	800701e <_dtoa_r+0x546>
 8007094:	080088b8 	.word	0x080088b8
 8007098:	08008890 	.word	0x08008890
 800709c:	3ff00000 	.word	0x3ff00000
 80070a0:	40240000 	.word	0x40240000
 80070a4:	401c0000 	.word	0x401c0000
 80070a8:	40140000 	.word	0x40140000
 80070ac:	3fe00000 	.word	0x3fe00000
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7f9 faa0 	bl	80005f8 <__aeabi_dmul>
 80070b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80070be:	4656      	mov	r6, sl
 80070c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c4:	f7f9 fd48 	bl	8000b58 <__aeabi_d2iz>
 80070c8:	4605      	mov	r5, r0
 80070ca:	f7f9 fa2b 	bl	8000524 <__aeabi_i2d>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d6:	f7f9 f8d7 	bl	8000288 <__aeabi_dsub>
 80070da:	3530      	adds	r5, #48	@ 0x30
 80070dc:	f806 5b01 	strb.w	r5, [r6], #1
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	42a6      	cmp	r6, r4
 80070e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	d124      	bne.n	800713a <_dtoa_r+0x662>
 80070f0:	4bac      	ldr	r3, [pc, #688]	@ (80073a4 <_dtoa_r+0x8cc>)
 80070f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070f6:	f7f9 f8c9 	bl	800028c <__adddf3>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007102:	f7f9 fd09 	bl	8000b18 <__aeabi_dcmpgt>
 8007106:	2800      	cmp	r0, #0
 8007108:	d145      	bne.n	8007196 <_dtoa_r+0x6be>
 800710a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800710e:	49a5      	ldr	r1, [pc, #660]	@ (80073a4 <_dtoa_r+0x8cc>)
 8007110:	2000      	movs	r0, #0
 8007112:	f7f9 f8b9 	bl	8000288 <__aeabi_dsub>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800711e:	f7f9 fcdd 	bl	8000adc <__aeabi_dcmplt>
 8007122:	2800      	cmp	r0, #0
 8007124:	f43f aef5 	beq.w	8006f12 <_dtoa_r+0x43a>
 8007128:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800712a:	1e73      	subs	r3, r6, #1
 800712c:	9315      	str	r3, [sp, #84]	@ 0x54
 800712e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007132:	2b30      	cmp	r3, #48	@ 0x30
 8007134:	d0f8      	beq.n	8007128 <_dtoa_r+0x650>
 8007136:	9f04      	ldr	r7, [sp, #16]
 8007138:	e73e      	b.n	8006fb8 <_dtoa_r+0x4e0>
 800713a:	4b9b      	ldr	r3, [pc, #620]	@ (80073a8 <_dtoa_r+0x8d0>)
 800713c:	f7f9 fa5c 	bl	80005f8 <__aeabi_dmul>
 8007140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007144:	e7bc      	b.n	80070c0 <_dtoa_r+0x5e8>
 8007146:	d10c      	bne.n	8007162 <_dtoa_r+0x68a>
 8007148:	4b98      	ldr	r3, [pc, #608]	@ (80073ac <_dtoa_r+0x8d4>)
 800714a:	2200      	movs	r2, #0
 800714c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007150:	f7f9 fa52 	bl	80005f8 <__aeabi_dmul>
 8007154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007158:	f7f9 fcd4 	bl	8000b04 <__aeabi_dcmpge>
 800715c:	2800      	cmp	r0, #0
 800715e:	f000 8157 	beq.w	8007410 <_dtoa_r+0x938>
 8007162:	2400      	movs	r4, #0
 8007164:	4625      	mov	r5, r4
 8007166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007168:	43db      	mvns	r3, r3
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	4656      	mov	r6, sl
 800716e:	2700      	movs	r7, #0
 8007170:	4621      	mov	r1, r4
 8007172:	4658      	mov	r0, fp
 8007174:	f000 fbb4 	bl	80078e0 <_Bfree>
 8007178:	2d00      	cmp	r5, #0
 800717a:	d0dc      	beq.n	8007136 <_dtoa_r+0x65e>
 800717c:	b12f      	cbz	r7, 800718a <_dtoa_r+0x6b2>
 800717e:	42af      	cmp	r7, r5
 8007180:	d003      	beq.n	800718a <_dtoa_r+0x6b2>
 8007182:	4639      	mov	r1, r7
 8007184:	4658      	mov	r0, fp
 8007186:	f000 fbab 	bl	80078e0 <_Bfree>
 800718a:	4629      	mov	r1, r5
 800718c:	4658      	mov	r0, fp
 800718e:	f000 fba7 	bl	80078e0 <_Bfree>
 8007192:	e7d0      	b.n	8007136 <_dtoa_r+0x65e>
 8007194:	9704      	str	r7, [sp, #16]
 8007196:	4633      	mov	r3, r6
 8007198:	461e      	mov	r6, r3
 800719a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800719e:	2a39      	cmp	r2, #57	@ 0x39
 80071a0:	d107      	bne.n	80071b2 <_dtoa_r+0x6da>
 80071a2:	459a      	cmp	sl, r3
 80071a4:	d1f8      	bne.n	8007198 <_dtoa_r+0x6c0>
 80071a6:	9a04      	ldr	r2, [sp, #16]
 80071a8:	3201      	adds	r2, #1
 80071aa:	9204      	str	r2, [sp, #16]
 80071ac:	2230      	movs	r2, #48	@ 0x30
 80071ae:	f88a 2000 	strb.w	r2, [sl]
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	3201      	adds	r2, #1
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	e7bd      	b.n	8007136 <_dtoa_r+0x65e>
 80071ba:	4b7b      	ldr	r3, [pc, #492]	@ (80073a8 <_dtoa_r+0x8d0>)
 80071bc:	2200      	movs	r2, #0
 80071be:	f7f9 fa1b 	bl	80005f8 <__aeabi_dmul>
 80071c2:	2200      	movs	r2, #0
 80071c4:	2300      	movs	r3, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	460d      	mov	r5, r1
 80071ca:	f7f9 fc7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f43f aebb 	beq.w	8006f4a <_dtoa_r+0x472>
 80071d4:	e6f0      	b.n	8006fb8 <_dtoa_r+0x4e0>
 80071d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80071d8:	2a00      	cmp	r2, #0
 80071da:	f000 80db 	beq.w	8007394 <_dtoa_r+0x8bc>
 80071de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071e0:	2a01      	cmp	r2, #1
 80071e2:	f300 80bf 	bgt.w	8007364 <_dtoa_r+0x88c>
 80071e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80071e8:	2a00      	cmp	r2, #0
 80071ea:	f000 80b7 	beq.w	800735c <_dtoa_r+0x884>
 80071ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80071f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071f4:	4646      	mov	r6, r8
 80071f6:	9a08      	ldr	r2, [sp, #32]
 80071f8:	2101      	movs	r1, #1
 80071fa:	441a      	add	r2, r3
 80071fc:	4658      	mov	r0, fp
 80071fe:	4498      	add	r8, r3
 8007200:	9208      	str	r2, [sp, #32]
 8007202:	f000 fc21 	bl	8007a48 <__i2b>
 8007206:	4605      	mov	r5, r0
 8007208:	b15e      	cbz	r6, 8007222 <_dtoa_r+0x74a>
 800720a:	9b08      	ldr	r3, [sp, #32]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dd08      	ble.n	8007222 <_dtoa_r+0x74a>
 8007210:	42b3      	cmp	r3, r6
 8007212:	9a08      	ldr	r2, [sp, #32]
 8007214:	bfa8      	it	ge
 8007216:	4633      	movge	r3, r6
 8007218:	eba8 0803 	sub.w	r8, r8, r3
 800721c:	1af6      	subs	r6, r6, r3
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	9308      	str	r3, [sp, #32]
 8007222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007224:	b1f3      	cbz	r3, 8007264 <_dtoa_r+0x78c>
 8007226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80b7 	beq.w	800739c <_dtoa_r+0x8c4>
 800722e:	b18c      	cbz	r4, 8007254 <_dtoa_r+0x77c>
 8007230:	4629      	mov	r1, r5
 8007232:	4622      	mov	r2, r4
 8007234:	4658      	mov	r0, fp
 8007236:	f000 fcc7 	bl	8007bc8 <__pow5mult>
 800723a:	464a      	mov	r2, r9
 800723c:	4601      	mov	r1, r0
 800723e:	4605      	mov	r5, r0
 8007240:	4658      	mov	r0, fp
 8007242:	f000 fc17 	bl	8007a74 <__multiply>
 8007246:	4649      	mov	r1, r9
 8007248:	9004      	str	r0, [sp, #16]
 800724a:	4658      	mov	r0, fp
 800724c:	f000 fb48 	bl	80078e0 <_Bfree>
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	4699      	mov	r9, r3
 8007254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007256:	1b1a      	subs	r2, r3, r4
 8007258:	d004      	beq.n	8007264 <_dtoa_r+0x78c>
 800725a:	4649      	mov	r1, r9
 800725c:	4658      	mov	r0, fp
 800725e:	f000 fcb3 	bl	8007bc8 <__pow5mult>
 8007262:	4681      	mov	r9, r0
 8007264:	2101      	movs	r1, #1
 8007266:	4658      	mov	r0, fp
 8007268:	f000 fbee 	bl	8007a48 <__i2b>
 800726c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800726e:	4604      	mov	r4, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 81cf 	beq.w	8007614 <_dtoa_r+0xb3c>
 8007276:	461a      	mov	r2, r3
 8007278:	4601      	mov	r1, r0
 800727a:	4658      	mov	r0, fp
 800727c:	f000 fca4 	bl	8007bc8 <__pow5mult>
 8007280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007282:	2b01      	cmp	r3, #1
 8007284:	4604      	mov	r4, r0
 8007286:	f300 8095 	bgt.w	80073b4 <_dtoa_r+0x8dc>
 800728a:	9b02      	ldr	r3, [sp, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f040 8087 	bne.w	80073a0 <_dtoa_r+0x8c8>
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007298:	2b00      	cmp	r3, #0
 800729a:	f040 8089 	bne.w	80073b0 <_dtoa_r+0x8d8>
 800729e:	9b03      	ldr	r3, [sp, #12]
 80072a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072a4:	0d1b      	lsrs	r3, r3, #20
 80072a6:	051b      	lsls	r3, r3, #20
 80072a8:	b12b      	cbz	r3, 80072b6 <_dtoa_r+0x7de>
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	3301      	adds	r3, #1
 80072ae:	9308      	str	r3, [sp, #32]
 80072b0:	f108 0801 	add.w	r8, r8, #1
 80072b4:	2301      	movs	r3, #1
 80072b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 81b0 	beq.w	8007620 <_dtoa_r+0xb48>
 80072c0:	6923      	ldr	r3, [r4, #16]
 80072c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072c6:	6918      	ldr	r0, [r3, #16]
 80072c8:	f000 fb72 	bl	80079b0 <__hi0bits>
 80072cc:	f1c0 0020 	rsb	r0, r0, #32
 80072d0:	9b08      	ldr	r3, [sp, #32]
 80072d2:	4418      	add	r0, r3
 80072d4:	f010 001f 	ands.w	r0, r0, #31
 80072d8:	d077      	beq.n	80073ca <_dtoa_r+0x8f2>
 80072da:	f1c0 0320 	rsb	r3, r0, #32
 80072de:	2b04      	cmp	r3, #4
 80072e0:	dd6b      	ble.n	80073ba <_dtoa_r+0x8e2>
 80072e2:	9b08      	ldr	r3, [sp, #32]
 80072e4:	f1c0 001c 	rsb	r0, r0, #28
 80072e8:	4403      	add	r3, r0
 80072ea:	4480      	add	r8, r0
 80072ec:	4406      	add	r6, r0
 80072ee:	9308      	str	r3, [sp, #32]
 80072f0:	f1b8 0f00 	cmp.w	r8, #0
 80072f4:	dd05      	ble.n	8007302 <_dtoa_r+0x82a>
 80072f6:	4649      	mov	r1, r9
 80072f8:	4642      	mov	r2, r8
 80072fa:	4658      	mov	r0, fp
 80072fc:	f000 fcbe 	bl	8007c7c <__lshift>
 8007300:	4681      	mov	r9, r0
 8007302:	9b08      	ldr	r3, [sp, #32]
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd05      	ble.n	8007314 <_dtoa_r+0x83c>
 8007308:	4621      	mov	r1, r4
 800730a:	461a      	mov	r2, r3
 800730c:	4658      	mov	r0, fp
 800730e:	f000 fcb5 	bl	8007c7c <__lshift>
 8007312:	4604      	mov	r4, r0
 8007314:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007316:	2b00      	cmp	r3, #0
 8007318:	d059      	beq.n	80073ce <_dtoa_r+0x8f6>
 800731a:	4621      	mov	r1, r4
 800731c:	4648      	mov	r0, r9
 800731e:	f000 fd19 	bl	8007d54 <__mcmp>
 8007322:	2800      	cmp	r0, #0
 8007324:	da53      	bge.n	80073ce <_dtoa_r+0x8f6>
 8007326:	1e7b      	subs	r3, r7, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	4649      	mov	r1, r9
 800732c:	2300      	movs	r3, #0
 800732e:	220a      	movs	r2, #10
 8007330:	4658      	mov	r0, fp
 8007332:	f000 faf7 	bl	8007924 <__multadd>
 8007336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007338:	4681      	mov	r9, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 8172 	beq.w	8007624 <_dtoa_r+0xb4c>
 8007340:	2300      	movs	r3, #0
 8007342:	4629      	mov	r1, r5
 8007344:	220a      	movs	r2, #10
 8007346:	4658      	mov	r0, fp
 8007348:	f000 faec 	bl	8007924 <__multadd>
 800734c:	9b00      	ldr	r3, [sp, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	4605      	mov	r5, r0
 8007352:	dc67      	bgt.n	8007424 <_dtoa_r+0x94c>
 8007354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007356:	2b02      	cmp	r3, #2
 8007358:	dc41      	bgt.n	80073de <_dtoa_r+0x906>
 800735a:	e063      	b.n	8007424 <_dtoa_r+0x94c>
 800735c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800735e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007362:	e746      	b.n	80071f2 <_dtoa_r+0x71a>
 8007364:	9b07      	ldr	r3, [sp, #28]
 8007366:	1e5c      	subs	r4, r3, #1
 8007368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800736a:	42a3      	cmp	r3, r4
 800736c:	bfbf      	itttt	lt
 800736e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007370:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007372:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007374:	1ae3      	sublt	r3, r4, r3
 8007376:	bfb4      	ite	lt
 8007378:	18d2      	addlt	r2, r2, r3
 800737a:	1b1c      	subge	r4, r3, r4
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	bfbc      	itt	lt
 8007380:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007382:	2400      	movlt	r4, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfb5      	itete	lt
 8007388:	eba8 0603 	sublt.w	r6, r8, r3
 800738c:	9b07      	ldrge	r3, [sp, #28]
 800738e:	2300      	movlt	r3, #0
 8007390:	4646      	movge	r6, r8
 8007392:	e730      	b.n	80071f6 <_dtoa_r+0x71e>
 8007394:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007396:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007398:	4646      	mov	r6, r8
 800739a:	e735      	b.n	8007208 <_dtoa_r+0x730>
 800739c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800739e:	e75c      	b.n	800725a <_dtoa_r+0x782>
 80073a0:	2300      	movs	r3, #0
 80073a2:	e788      	b.n	80072b6 <_dtoa_r+0x7de>
 80073a4:	3fe00000 	.word	0x3fe00000
 80073a8:	40240000 	.word	0x40240000
 80073ac:	40140000 	.word	0x40140000
 80073b0:	9b02      	ldr	r3, [sp, #8]
 80073b2:	e780      	b.n	80072b6 <_dtoa_r+0x7de>
 80073b4:	2300      	movs	r3, #0
 80073b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b8:	e782      	b.n	80072c0 <_dtoa_r+0x7e8>
 80073ba:	d099      	beq.n	80072f0 <_dtoa_r+0x818>
 80073bc:	9a08      	ldr	r2, [sp, #32]
 80073be:	331c      	adds	r3, #28
 80073c0:	441a      	add	r2, r3
 80073c2:	4498      	add	r8, r3
 80073c4:	441e      	add	r6, r3
 80073c6:	9208      	str	r2, [sp, #32]
 80073c8:	e792      	b.n	80072f0 <_dtoa_r+0x818>
 80073ca:	4603      	mov	r3, r0
 80073cc:	e7f6      	b.n	80073bc <_dtoa_r+0x8e4>
 80073ce:	9b07      	ldr	r3, [sp, #28]
 80073d0:	9704      	str	r7, [sp, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	dc20      	bgt.n	8007418 <_dtoa_r+0x940>
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073da:	2b02      	cmp	r3, #2
 80073dc:	dd1e      	ble.n	800741c <_dtoa_r+0x944>
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f47f aec0 	bne.w	8007166 <_dtoa_r+0x68e>
 80073e6:	4621      	mov	r1, r4
 80073e8:	2205      	movs	r2, #5
 80073ea:	4658      	mov	r0, fp
 80073ec:	f000 fa9a 	bl	8007924 <__multadd>
 80073f0:	4601      	mov	r1, r0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4648      	mov	r0, r9
 80073f6:	f000 fcad 	bl	8007d54 <__mcmp>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f77f aeb3 	ble.w	8007166 <_dtoa_r+0x68e>
 8007400:	4656      	mov	r6, sl
 8007402:	2331      	movs	r3, #49	@ 0x31
 8007404:	f806 3b01 	strb.w	r3, [r6], #1
 8007408:	9b04      	ldr	r3, [sp, #16]
 800740a:	3301      	adds	r3, #1
 800740c:	9304      	str	r3, [sp, #16]
 800740e:	e6ae      	b.n	800716e <_dtoa_r+0x696>
 8007410:	9c07      	ldr	r4, [sp, #28]
 8007412:	9704      	str	r7, [sp, #16]
 8007414:	4625      	mov	r5, r4
 8007416:	e7f3      	b.n	8007400 <_dtoa_r+0x928>
 8007418:	9b07      	ldr	r3, [sp, #28]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 8104 	beq.w	800762c <_dtoa_r+0xb54>
 8007424:	2e00      	cmp	r6, #0
 8007426:	dd05      	ble.n	8007434 <_dtoa_r+0x95c>
 8007428:	4629      	mov	r1, r5
 800742a:	4632      	mov	r2, r6
 800742c:	4658      	mov	r0, fp
 800742e:	f000 fc25 	bl	8007c7c <__lshift>
 8007432:	4605      	mov	r5, r0
 8007434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d05a      	beq.n	80074f0 <_dtoa_r+0xa18>
 800743a:	6869      	ldr	r1, [r5, #4]
 800743c:	4658      	mov	r0, fp
 800743e:	f000 fa0f 	bl	8007860 <_Balloc>
 8007442:	4606      	mov	r6, r0
 8007444:	b928      	cbnz	r0, 8007452 <_dtoa_r+0x97a>
 8007446:	4b84      	ldr	r3, [pc, #528]	@ (8007658 <_dtoa_r+0xb80>)
 8007448:	4602      	mov	r2, r0
 800744a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800744e:	f7ff bb5a 	b.w	8006b06 <_dtoa_r+0x2e>
 8007452:	692a      	ldr	r2, [r5, #16]
 8007454:	3202      	adds	r2, #2
 8007456:	0092      	lsls	r2, r2, #2
 8007458:	f105 010c 	add.w	r1, r5, #12
 800745c:	300c      	adds	r0, #12
 800745e:	f001 f813 	bl	8008488 <memcpy>
 8007462:	2201      	movs	r2, #1
 8007464:	4631      	mov	r1, r6
 8007466:	4658      	mov	r0, fp
 8007468:	f000 fc08 	bl	8007c7c <__lshift>
 800746c:	f10a 0301 	add.w	r3, sl, #1
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	9b00      	ldr	r3, [sp, #0]
 8007474:	4453      	add	r3, sl
 8007476:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007478:	9b02      	ldr	r3, [sp, #8]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	462f      	mov	r7, r5
 8007480:	930a      	str	r3, [sp, #40]	@ 0x28
 8007482:	4605      	mov	r5, r0
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	4621      	mov	r1, r4
 8007488:	3b01      	subs	r3, #1
 800748a:	4648      	mov	r0, r9
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	f7ff fa9a 	bl	80069c6 <quorem>
 8007492:	4639      	mov	r1, r7
 8007494:	9002      	str	r0, [sp, #8]
 8007496:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800749a:	4648      	mov	r0, r9
 800749c:	f000 fc5a 	bl	8007d54 <__mcmp>
 80074a0:	462a      	mov	r2, r5
 80074a2:	9008      	str	r0, [sp, #32]
 80074a4:	4621      	mov	r1, r4
 80074a6:	4658      	mov	r0, fp
 80074a8:	f000 fc70 	bl	8007d8c <__mdiff>
 80074ac:	68c2      	ldr	r2, [r0, #12]
 80074ae:	4606      	mov	r6, r0
 80074b0:	bb02      	cbnz	r2, 80074f4 <_dtoa_r+0xa1c>
 80074b2:	4601      	mov	r1, r0
 80074b4:	4648      	mov	r0, r9
 80074b6:	f000 fc4d 	bl	8007d54 <__mcmp>
 80074ba:	4602      	mov	r2, r0
 80074bc:	4631      	mov	r1, r6
 80074be:	4658      	mov	r0, fp
 80074c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80074c2:	f000 fa0d 	bl	80078e0 <_Bfree>
 80074c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074ca:	9e07      	ldr	r6, [sp, #28]
 80074cc:	ea43 0102 	orr.w	r1, r3, r2
 80074d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d2:	4319      	orrs	r1, r3
 80074d4:	d110      	bne.n	80074f8 <_dtoa_r+0xa20>
 80074d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074da:	d029      	beq.n	8007530 <_dtoa_r+0xa58>
 80074dc:	9b08      	ldr	r3, [sp, #32]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dd02      	ble.n	80074e8 <_dtoa_r+0xa10>
 80074e2:	9b02      	ldr	r3, [sp, #8]
 80074e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80074e8:	9b00      	ldr	r3, [sp, #0]
 80074ea:	f883 8000 	strb.w	r8, [r3]
 80074ee:	e63f      	b.n	8007170 <_dtoa_r+0x698>
 80074f0:	4628      	mov	r0, r5
 80074f2:	e7bb      	b.n	800746c <_dtoa_r+0x994>
 80074f4:	2201      	movs	r2, #1
 80074f6:	e7e1      	b.n	80074bc <_dtoa_r+0x9e4>
 80074f8:	9b08      	ldr	r3, [sp, #32]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	db04      	blt.n	8007508 <_dtoa_r+0xa30>
 80074fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007500:	430b      	orrs	r3, r1
 8007502:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007504:	430b      	orrs	r3, r1
 8007506:	d120      	bne.n	800754a <_dtoa_r+0xa72>
 8007508:	2a00      	cmp	r2, #0
 800750a:	dded      	ble.n	80074e8 <_dtoa_r+0xa10>
 800750c:	4649      	mov	r1, r9
 800750e:	2201      	movs	r2, #1
 8007510:	4658      	mov	r0, fp
 8007512:	f000 fbb3 	bl	8007c7c <__lshift>
 8007516:	4621      	mov	r1, r4
 8007518:	4681      	mov	r9, r0
 800751a:	f000 fc1b 	bl	8007d54 <__mcmp>
 800751e:	2800      	cmp	r0, #0
 8007520:	dc03      	bgt.n	800752a <_dtoa_r+0xa52>
 8007522:	d1e1      	bne.n	80074e8 <_dtoa_r+0xa10>
 8007524:	f018 0f01 	tst.w	r8, #1
 8007528:	d0de      	beq.n	80074e8 <_dtoa_r+0xa10>
 800752a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800752e:	d1d8      	bne.n	80074e2 <_dtoa_r+0xa0a>
 8007530:	9a00      	ldr	r2, [sp, #0]
 8007532:	2339      	movs	r3, #57	@ 0x39
 8007534:	7013      	strb	r3, [r2, #0]
 8007536:	4633      	mov	r3, r6
 8007538:	461e      	mov	r6, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007540:	2a39      	cmp	r2, #57	@ 0x39
 8007542:	d052      	beq.n	80075ea <_dtoa_r+0xb12>
 8007544:	3201      	adds	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	e612      	b.n	8007170 <_dtoa_r+0x698>
 800754a:	2a00      	cmp	r2, #0
 800754c:	dd07      	ble.n	800755e <_dtoa_r+0xa86>
 800754e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007552:	d0ed      	beq.n	8007530 <_dtoa_r+0xa58>
 8007554:	9a00      	ldr	r2, [sp, #0]
 8007556:	f108 0301 	add.w	r3, r8, #1
 800755a:	7013      	strb	r3, [r2, #0]
 800755c:	e608      	b.n	8007170 <_dtoa_r+0x698>
 800755e:	9b07      	ldr	r3, [sp, #28]
 8007560:	9a07      	ldr	r2, [sp, #28]
 8007562:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007568:	4293      	cmp	r3, r2
 800756a:	d028      	beq.n	80075be <_dtoa_r+0xae6>
 800756c:	4649      	mov	r1, r9
 800756e:	2300      	movs	r3, #0
 8007570:	220a      	movs	r2, #10
 8007572:	4658      	mov	r0, fp
 8007574:	f000 f9d6 	bl	8007924 <__multadd>
 8007578:	42af      	cmp	r7, r5
 800757a:	4681      	mov	r9, r0
 800757c:	f04f 0300 	mov.w	r3, #0
 8007580:	f04f 020a 	mov.w	r2, #10
 8007584:	4639      	mov	r1, r7
 8007586:	4658      	mov	r0, fp
 8007588:	d107      	bne.n	800759a <_dtoa_r+0xac2>
 800758a:	f000 f9cb 	bl	8007924 <__multadd>
 800758e:	4607      	mov	r7, r0
 8007590:	4605      	mov	r5, r0
 8007592:	9b07      	ldr	r3, [sp, #28]
 8007594:	3301      	adds	r3, #1
 8007596:	9307      	str	r3, [sp, #28]
 8007598:	e774      	b.n	8007484 <_dtoa_r+0x9ac>
 800759a:	f000 f9c3 	bl	8007924 <__multadd>
 800759e:	4629      	mov	r1, r5
 80075a0:	4607      	mov	r7, r0
 80075a2:	2300      	movs	r3, #0
 80075a4:	220a      	movs	r2, #10
 80075a6:	4658      	mov	r0, fp
 80075a8:	f000 f9bc 	bl	8007924 <__multadd>
 80075ac:	4605      	mov	r5, r0
 80075ae:	e7f0      	b.n	8007592 <_dtoa_r+0xaba>
 80075b0:	9b00      	ldr	r3, [sp, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bfcc      	ite	gt
 80075b6:	461e      	movgt	r6, r3
 80075b8:	2601      	movle	r6, #1
 80075ba:	4456      	add	r6, sl
 80075bc:	2700      	movs	r7, #0
 80075be:	4649      	mov	r1, r9
 80075c0:	2201      	movs	r2, #1
 80075c2:	4658      	mov	r0, fp
 80075c4:	f000 fb5a 	bl	8007c7c <__lshift>
 80075c8:	4621      	mov	r1, r4
 80075ca:	4681      	mov	r9, r0
 80075cc:	f000 fbc2 	bl	8007d54 <__mcmp>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	dcb0      	bgt.n	8007536 <_dtoa_r+0xa5e>
 80075d4:	d102      	bne.n	80075dc <_dtoa_r+0xb04>
 80075d6:	f018 0f01 	tst.w	r8, #1
 80075da:	d1ac      	bne.n	8007536 <_dtoa_r+0xa5e>
 80075dc:	4633      	mov	r3, r6
 80075de:	461e      	mov	r6, r3
 80075e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e4:	2a30      	cmp	r2, #48	@ 0x30
 80075e6:	d0fa      	beq.n	80075de <_dtoa_r+0xb06>
 80075e8:	e5c2      	b.n	8007170 <_dtoa_r+0x698>
 80075ea:	459a      	cmp	sl, r3
 80075ec:	d1a4      	bne.n	8007538 <_dtoa_r+0xa60>
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	3301      	adds	r3, #1
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	2331      	movs	r3, #49	@ 0x31
 80075f6:	f88a 3000 	strb.w	r3, [sl]
 80075fa:	e5b9      	b.n	8007170 <_dtoa_r+0x698>
 80075fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800765c <_dtoa_r+0xb84>
 8007602:	b11b      	cbz	r3, 800760c <_dtoa_r+0xb34>
 8007604:	f10a 0308 	add.w	r3, sl, #8
 8007608:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	4650      	mov	r0, sl
 800760e:	b019      	add	sp, #100	@ 0x64
 8007610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007616:	2b01      	cmp	r3, #1
 8007618:	f77f ae37 	ble.w	800728a <_dtoa_r+0x7b2>
 800761c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800761e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007620:	2001      	movs	r0, #1
 8007622:	e655      	b.n	80072d0 <_dtoa_r+0x7f8>
 8007624:	9b00      	ldr	r3, [sp, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f77f aed6 	ble.w	80073d8 <_dtoa_r+0x900>
 800762c:	4656      	mov	r6, sl
 800762e:	4621      	mov	r1, r4
 8007630:	4648      	mov	r0, r9
 8007632:	f7ff f9c8 	bl	80069c6 <quorem>
 8007636:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800763a:	f806 8b01 	strb.w	r8, [r6], #1
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	eba6 020a 	sub.w	r2, r6, sl
 8007644:	4293      	cmp	r3, r2
 8007646:	ddb3      	ble.n	80075b0 <_dtoa_r+0xad8>
 8007648:	4649      	mov	r1, r9
 800764a:	2300      	movs	r3, #0
 800764c:	220a      	movs	r2, #10
 800764e:	4658      	mov	r0, fp
 8007650:	f000 f968 	bl	8007924 <__multadd>
 8007654:	4681      	mov	r9, r0
 8007656:	e7ea      	b.n	800762e <_dtoa_r+0xb56>
 8007658:	08008814 	.word	0x08008814
 800765c:	08008798 	.word	0x08008798

08007660 <_free_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4605      	mov	r5, r0
 8007664:	2900      	cmp	r1, #0
 8007666:	d041      	beq.n	80076ec <_free_r+0x8c>
 8007668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766c:	1f0c      	subs	r4, r1, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfb8      	it	lt
 8007672:	18e4      	addlt	r4, r4, r3
 8007674:	f000 f8e8 	bl	8007848 <__malloc_lock>
 8007678:	4a1d      	ldr	r2, [pc, #116]	@ (80076f0 <_free_r+0x90>)
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	b933      	cbnz	r3, 800768c <_free_r+0x2c>
 800767e:	6063      	str	r3, [r4, #4]
 8007680:	6014      	str	r4, [r2, #0]
 8007682:	4628      	mov	r0, r5
 8007684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007688:	f000 b8e4 	b.w	8007854 <__malloc_unlock>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d908      	bls.n	80076a2 <_free_r+0x42>
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	1821      	adds	r1, r4, r0
 8007694:	428b      	cmp	r3, r1
 8007696:	bf01      	itttt	eq
 8007698:	6819      	ldreq	r1, [r3, #0]
 800769a:	685b      	ldreq	r3, [r3, #4]
 800769c:	1809      	addeq	r1, r1, r0
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	e7ed      	b.n	800767e <_free_r+0x1e>
 80076a2:	461a      	mov	r2, r3
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b10b      	cbz	r3, 80076ac <_free_r+0x4c>
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d9fa      	bls.n	80076a2 <_free_r+0x42>
 80076ac:	6811      	ldr	r1, [r2, #0]
 80076ae:	1850      	adds	r0, r2, r1
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d10b      	bne.n	80076cc <_free_r+0x6c>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	4401      	add	r1, r0
 80076b8:	1850      	adds	r0, r2, r1
 80076ba:	4283      	cmp	r3, r0
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	d1e0      	bne.n	8007682 <_free_r+0x22>
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	6053      	str	r3, [r2, #4]
 80076c6:	4408      	add	r0, r1
 80076c8:	6010      	str	r0, [r2, #0]
 80076ca:	e7da      	b.n	8007682 <_free_r+0x22>
 80076cc:	d902      	bls.n	80076d4 <_free_r+0x74>
 80076ce:	230c      	movs	r3, #12
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	e7d6      	b.n	8007682 <_free_r+0x22>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	1821      	adds	r1, r4, r0
 80076d8:	428b      	cmp	r3, r1
 80076da:	bf04      	itt	eq
 80076dc:	6819      	ldreq	r1, [r3, #0]
 80076de:	685b      	ldreq	r3, [r3, #4]
 80076e0:	6063      	str	r3, [r4, #4]
 80076e2:	bf04      	itt	eq
 80076e4:	1809      	addeq	r1, r1, r0
 80076e6:	6021      	streq	r1, [r4, #0]
 80076e8:	6054      	str	r4, [r2, #4]
 80076ea:	e7ca      	b.n	8007682 <_free_r+0x22>
 80076ec:	bd38      	pop	{r3, r4, r5, pc}
 80076ee:	bf00      	nop
 80076f0:	200004ec 	.word	0x200004ec

080076f4 <malloc>:
 80076f4:	4b02      	ldr	r3, [pc, #8]	@ (8007700 <malloc+0xc>)
 80076f6:	4601      	mov	r1, r0
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	f000 b825 	b.w	8007748 <_malloc_r>
 80076fe:	bf00      	nop
 8007700:	20000048 	.word	0x20000048

08007704 <sbrk_aligned>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	4e0f      	ldr	r6, [pc, #60]	@ (8007744 <sbrk_aligned+0x40>)
 8007708:	460c      	mov	r4, r1
 800770a:	6831      	ldr	r1, [r6, #0]
 800770c:	4605      	mov	r5, r0
 800770e:	b911      	cbnz	r1, 8007716 <sbrk_aligned+0x12>
 8007710:	f000 feaa 	bl	8008468 <_sbrk_r>
 8007714:	6030      	str	r0, [r6, #0]
 8007716:	4621      	mov	r1, r4
 8007718:	4628      	mov	r0, r5
 800771a:	f000 fea5 	bl	8008468 <_sbrk_r>
 800771e:	1c43      	adds	r3, r0, #1
 8007720:	d103      	bne.n	800772a <sbrk_aligned+0x26>
 8007722:	f04f 34ff 	mov.w	r4, #4294967295
 8007726:	4620      	mov	r0, r4
 8007728:	bd70      	pop	{r4, r5, r6, pc}
 800772a:	1cc4      	adds	r4, r0, #3
 800772c:	f024 0403 	bic.w	r4, r4, #3
 8007730:	42a0      	cmp	r0, r4
 8007732:	d0f8      	beq.n	8007726 <sbrk_aligned+0x22>
 8007734:	1a21      	subs	r1, r4, r0
 8007736:	4628      	mov	r0, r5
 8007738:	f000 fe96 	bl	8008468 <_sbrk_r>
 800773c:	3001      	adds	r0, #1
 800773e:	d1f2      	bne.n	8007726 <sbrk_aligned+0x22>
 8007740:	e7ef      	b.n	8007722 <sbrk_aligned+0x1e>
 8007742:	bf00      	nop
 8007744:	200004e8 	.word	0x200004e8

08007748 <_malloc_r>:
 8007748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	1ccd      	adds	r5, r1, #3
 800774e:	f025 0503 	bic.w	r5, r5, #3
 8007752:	3508      	adds	r5, #8
 8007754:	2d0c      	cmp	r5, #12
 8007756:	bf38      	it	cc
 8007758:	250c      	movcc	r5, #12
 800775a:	2d00      	cmp	r5, #0
 800775c:	4606      	mov	r6, r0
 800775e:	db01      	blt.n	8007764 <_malloc_r+0x1c>
 8007760:	42a9      	cmp	r1, r5
 8007762:	d904      	bls.n	800776e <_malloc_r+0x26>
 8007764:	230c      	movs	r3, #12
 8007766:	6033      	str	r3, [r6, #0]
 8007768:	2000      	movs	r0, #0
 800776a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800776e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007844 <_malloc_r+0xfc>
 8007772:	f000 f869 	bl	8007848 <__malloc_lock>
 8007776:	f8d8 3000 	ldr.w	r3, [r8]
 800777a:	461c      	mov	r4, r3
 800777c:	bb44      	cbnz	r4, 80077d0 <_malloc_r+0x88>
 800777e:	4629      	mov	r1, r5
 8007780:	4630      	mov	r0, r6
 8007782:	f7ff ffbf 	bl	8007704 <sbrk_aligned>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	4604      	mov	r4, r0
 800778a:	d158      	bne.n	800783e <_malloc_r+0xf6>
 800778c:	f8d8 4000 	ldr.w	r4, [r8]
 8007790:	4627      	mov	r7, r4
 8007792:	2f00      	cmp	r7, #0
 8007794:	d143      	bne.n	800781e <_malloc_r+0xd6>
 8007796:	2c00      	cmp	r4, #0
 8007798:	d04b      	beq.n	8007832 <_malloc_r+0xea>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	4639      	mov	r1, r7
 800779e:	4630      	mov	r0, r6
 80077a0:	eb04 0903 	add.w	r9, r4, r3
 80077a4:	f000 fe60 	bl	8008468 <_sbrk_r>
 80077a8:	4581      	cmp	r9, r0
 80077aa:	d142      	bne.n	8007832 <_malloc_r+0xea>
 80077ac:	6821      	ldr	r1, [r4, #0]
 80077ae:	1a6d      	subs	r5, r5, r1
 80077b0:	4629      	mov	r1, r5
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff ffa6 	bl	8007704 <sbrk_aligned>
 80077b8:	3001      	adds	r0, #1
 80077ba:	d03a      	beq.n	8007832 <_malloc_r+0xea>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	442b      	add	r3, r5
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	f8d8 3000 	ldr.w	r3, [r8]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	bb62      	cbnz	r2, 8007824 <_malloc_r+0xdc>
 80077ca:	f8c8 7000 	str.w	r7, [r8]
 80077ce:	e00f      	b.n	80077f0 <_malloc_r+0xa8>
 80077d0:	6822      	ldr	r2, [r4, #0]
 80077d2:	1b52      	subs	r2, r2, r5
 80077d4:	d420      	bmi.n	8007818 <_malloc_r+0xd0>
 80077d6:	2a0b      	cmp	r2, #11
 80077d8:	d917      	bls.n	800780a <_malloc_r+0xc2>
 80077da:	1961      	adds	r1, r4, r5
 80077dc:	42a3      	cmp	r3, r4
 80077de:	6025      	str	r5, [r4, #0]
 80077e0:	bf18      	it	ne
 80077e2:	6059      	strne	r1, [r3, #4]
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	bf08      	it	eq
 80077e8:	f8c8 1000 	streq.w	r1, [r8]
 80077ec:	5162      	str	r2, [r4, r5]
 80077ee:	604b      	str	r3, [r1, #4]
 80077f0:	4630      	mov	r0, r6
 80077f2:	f000 f82f 	bl	8007854 <__malloc_unlock>
 80077f6:	f104 000b 	add.w	r0, r4, #11
 80077fa:	1d23      	adds	r3, r4, #4
 80077fc:	f020 0007 	bic.w	r0, r0, #7
 8007800:	1ac2      	subs	r2, r0, r3
 8007802:	bf1c      	itt	ne
 8007804:	1a1b      	subne	r3, r3, r0
 8007806:	50a3      	strne	r3, [r4, r2]
 8007808:	e7af      	b.n	800776a <_malloc_r+0x22>
 800780a:	6862      	ldr	r2, [r4, #4]
 800780c:	42a3      	cmp	r3, r4
 800780e:	bf0c      	ite	eq
 8007810:	f8c8 2000 	streq.w	r2, [r8]
 8007814:	605a      	strne	r2, [r3, #4]
 8007816:	e7eb      	b.n	80077f0 <_malloc_r+0xa8>
 8007818:	4623      	mov	r3, r4
 800781a:	6864      	ldr	r4, [r4, #4]
 800781c:	e7ae      	b.n	800777c <_malloc_r+0x34>
 800781e:	463c      	mov	r4, r7
 8007820:	687f      	ldr	r7, [r7, #4]
 8007822:	e7b6      	b.n	8007792 <_malloc_r+0x4a>
 8007824:	461a      	mov	r2, r3
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	42a3      	cmp	r3, r4
 800782a:	d1fb      	bne.n	8007824 <_malloc_r+0xdc>
 800782c:	2300      	movs	r3, #0
 800782e:	6053      	str	r3, [r2, #4]
 8007830:	e7de      	b.n	80077f0 <_malloc_r+0xa8>
 8007832:	230c      	movs	r3, #12
 8007834:	6033      	str	r3, [r6, #0]
 8007836:	4630      	mov	r0, r6
 8007838:	f000 f80c 	bl	8007854 <__malloc_unlock>
 800783c:	e794      	b.n	8007768 <_malloc_r+0x20>
 800783e:	6005      	str	r5, [r0, #0]
 8007840:	e7d6      	b.n	80077f0 <_malloc_r+0xa8>
 8007842:	bf00      	nop
 8007844:	200004ec 	.word	0x200004ec

08007848 <__malloc_lock>:
 8007848:	4801      	ldr	r0, [pc, #4]	@ (8007850 <__malloc_lock+0x8>)
 800784a:	f7ff b8ba 	b.w	80069c2 <__retarget_lock_acquire_recursive>
 800784e:	bf00      	nop
 8007850:	200004e4 	.word	0x200004e4

08007854 <__malloc_unlock>:
 8007854:	4801      	ldr	r0, [pc, #4]	@ (800785c <__malloc_unlock+0x8>)
 8007856:	f7ff b8b5 	b.w	80069c4 <__retarget_lock_release_recursive>
 800785a:	bf00      	nop
 800785c:	200004e4 	.word	0x200004e4

08007860 <_Balloc>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	69c6      	ldr	r6, [r0, #28]
 8007864:	4604      	mov	r4, r0
 8007866:	460d      	mov	r5, r1
 8007868:	b976      	cbnz	r6, 8007888 <_Balloc+0x28>
 800786a:	2010      	movs	r0, #16
 800786c:	f7ff ff42 	bl	80076f4 <malloc>
 8007870:	4602      	mov	r2, r0
 8007872:	61e0      	str	r0, [r4, #28]
 8007874:	b920      	cbnz	r0, 8007880 <_Balloc+0x20>
 8007876:	4b18      	ldr	r3, [pc, #96]	@ (80078d8 <_Balloc+0x78>)
 8007878:	4818      	ldr	r0, [pc, #96]	@ (80078dc <_Balloc+0x7c>)
 800787a:	216b      	movs	r1, #107	@ 0x6b
 800787c:	f000 fe12 	bl	80084a4 <__assert_func>
 8007880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007884:	6006      	str	r6, [r0, #0]
 8007886:	60c6      	str	r6, [r0, #12]
 8007888:	69e6      	ldr	r6, [r4, #28]
 800788a:	68f3      	ldr	r3, [r6, #12]
 800788c:	b183      	cbz	r3, 80078b0 <_Balloc+0x50>
 800788e:	69e3      	ldr	r3, [r4, #28]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007896:	b9b8      	cbnz	r0, 80078c8 <_Balloc+0x68>
 8007898:	2101      	movs	r1, #1
 800789a:	fa01 f605 	lsl.w	r6, r1, r5
 800789e:	1d72      	adds	r2, r6, #5
 80078a0:	0092      	lsls	r2, r2, #2
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 fe1c 	bl	80084e0 <_calloc_r>
 80078a8:	b160      	cbz	r0, 80078c4 <_Balloc+0x64>
 80078aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078ae:	e00e      	b.n	80078ce <_Balloc+0x6e>
 80078b0:	2221      	movs	r2, #33	@ 0x21
 80078b2:	2104      	movs	r1, #4
 80078b4:	4620      	mov	r0, r4
 80078b6:	f000 fe13 	bl	80084e0 <_calloc_r>
 80078ba:	69e3      	ldr	r3, [r4, #28]
 80078bc:	60f0      	str	r0, [r6, #12]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e4      	bne.n	800788e <_Balloc+0x2e>
 80078c4:	2000      	movs	r0, #0
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	6802      	ldr	r2, [r0, #0]
 80078ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078ce:	2300      	movs	r3, #0
 80078d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078d4:	e7f7      	b.n	80078c6 <_Balloc+0x66>
 80078d6:	bf00      	nop
 80078d8:	080087a5 	.word	0x080087a5
 80078dc:	08008825 	.word	0x08008825

080078e0 <_Bfree>:
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	69c6      	ldr	r6, [r0, #28]
 80078e4:	4605      	mov	r5, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	b976      	cbnz	r6, 8007908 <_Bfree+0x28>
 80078ea:	2010      	movs	r0, #16
 80078ec:	f7ff ff02 	bl	80076f4 <malloc>
 80078f0:	4602      	mov	r2, r0
 80078f2:	61e8      	str	r0, [r5, #28]
 80078f4:	b920      	cbnz	r0, 8007900 <_Bfree+0x20>
 80078f6:	4b09      	ldr	r3, [pc, #36]	@ (800791c <_Bfree+0x3c>)
 80078f8:	4809      	ldr	r0, [pc, #36]	@ (8007920 <_Bfree+0x40>)
 80078fa:	218f      	movs	r1, #143	@ 0x8f
 80078fc:	f000 fdd2 	bl	80084a4 <__assert_func>
 8007900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007904:	6006      	str	r6, [r0, #0]
 8007906:	60c6      	str	r6, [r0, #12]
 8007908:	b13c      	cbz	r4, 800791a <_Bfree+0x3a>
 800790a:	69eb      	ldr	r3, [r5, #28]
 800790c:	6862      	ldr	r2, [r4, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007914:	6021      	str	r1, [r4, #0]
 8007916:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	080087a5 	.word	0x080087a5
 8007920:	08008825 	.word	0x08008825

08007924 <__multadd>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	690d      	ldr	r5, [r1, #16]
 800792a:	4607      	mov	r7, r0
 800792c:	460c      	mov	r4, r1
 800792e:	461e      	mov	r6, r3
 8007930:	f101 0c14 	add.w	ip, r1, #20
 8007934:	2000      	movs	r0, #0
 8007936:	f8dc 3000 	ldr.w	r3, [ip]
 800793a:	b299      	uxth	r1, r3
 800793c:	fb02 6101 	mla	r1, r2, r1, r6
 8007940:	0c1e      	lsrs	r6, r3, #16
 8007942:	0c0b      	lsrs	r3, r1, #16
 8007944:	fb02 3306 	mla	r3, r2, r6, r3
 8007948:	b289      	uxth	r1, r1
 800794a:	3001      	adds	r0, #1
 800794c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007950:	4285      	cmp	r5, r0
 8007952:	f84c 1b04 	str.w	r1, [ip], #4
 8007956:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800795a:	dcec      	bgt.n	8007936 <__multadd+0x12>
 800795c:	b30e      	cbz	r6, 80079a2 <__multadd+0x7e>
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	42ab      	cmp	r3, r5
 8007962:	dc19      	bgt.n	8007998 <__multadd+0x74>
 8007964:	6861      	ldr	r1, [r4, #4]
 8007966:	4638      	mov	r0, r7
 8007968:	3101      	adds	r1, #1
 800796a:	f7ff ff79 	bl	8007860 <_Balloc>
 800796e:	4680      	mov	r8, r0
 8007970:	b928      	cbnz	r0, 800797e <__multadd+0x5a>
 8007972:	4602      	mov	r2, r0
 8007974:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <__multadd+0x84>)
 8007976:	480d      	ldr	r0, [pc, #52]	@ (80079ac <__multadd+0x88>)
 8007978:	21ba      	movs	r1, #186	@ 0xba
 800797a:	f000 fd93 	bl	80084a4 <__assert_func>
 800797e:	6922      	ldr	r2, [r4, #16]
 8007980:	3202      	adds	r2, #2
 8007982:	f104 010c 	add.w	r1, r4, #12
 8007986:	0092      	lsls	r2, r2, #2
 8007988:	300c      	adds	r0, #12
 800798a:	f000 fd7d 	bl	8008488 <memcpy>
 800798e:	4621      	mov	r1, r4
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ffa5 	bl	80078e0 <_Bfree>
 8007996:	4644      	mov	r4, r8
 8007998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800799c:	3501      	adds	r5, #1
 800799e:	615e      	str	r6, [r3, #20]
 80079a0:	6125      	str	r5, [r4, #16]
 80079a2:	4620      	mov	r0, r4
 80079a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a8:	08008814 	.word	0x08008814
 80079ac:	08008825 	.word	0x08008825

080079b0 <__hi0bits>:
 80079b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079b4:	4603      	mov	r3, r0
 80079b6:	bf36      	itet	cc
 80079b8:	0403      	lslcc	r3, r0, #16
 80079ba:	2000      	movcs	r0, #0
 80079bc:	2010      	movcc	r0, #16
 80079be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079c2:	bf3c      	itt	cc
 80079c4:	021b      	lslcc	r3, r3, #8
 80079c6:	3008      	addcc	r0, #8
 80079c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079cc:	bf3c      	itt	cc
 80079ce:	011b      	lslcc	r3, r3, #4
 80079d0:	3004      	addcc	r0, #4
 80079d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d6:	bf3c      	itt	cc
 80079d8:	009b      	lslcc	r3, r3, #2
 80079da:	3002      	addcc	r0, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	db05      	blt.n	80079ec <__hi0bits+0x3c>
 80079e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80079e4:	f100 0001 	add.w	r0, r0, #1
 80079e8:	bf08      	it	eq
 80079ea:	2020      	moveq	r0, #32
 80079ec:	4770      	bx	lr

080079ee <__lo0bits>:
 80079ee:	6803      	ldr	r3, [r0, #0]
 80079f0:	4602      	mov	r2, r0
 80079f2:	f013 0007 	ands.w	r0, r3, #7
 80079f6:	d00b      	beq.n	8007a10 <__lo0bits+0x22>
 80079f8:	07d9      	lsls	r1, r3, #31
 80079fa:	d421      	bmi.n	8007a40 <__lo0bits+0x52>
 80079fc:	0798      	lsls	r0, r3, #30
 80079fe:	bf49      	itett	mi
 8007a00:	085b      	lsrmi	r3, r3, #1
 8007a02:	089b      	lsrpl	r3, r3, #2
 8007a04:	2001      	movmi	r0, #1
 8007a06:	6013      	strmi	r3, [r2, #0]
 8007a08:	bf5c      	itt	pl
 8007a0a:	6013      	strpl	r3, [r2, #0]
 8007a0c:	2002      	movpl	r0, #2
 8007a0e:	4770      	bx	lr
 8007a10:	b299      	uxth	r1, r3
 8007a12:	b909      	cbnz	r1, 8007a18 <__lo0bits+0x2a>
 8007a14:	0c1b      	lsrs	r3, r3, #16
 8007a16:	2010      	movs	r0, #16
 8007a18:	b2d9      	uxtb	r1, r3
 8007a1a:	b909      	cbnz	r1, 8007a20 <__lo0bits+0x32>
 8007a1c:	3008      	adds	r0, #8
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	0719      	lsls	r1, r3, #28
 8007a22:	bf04      	itt	eq
 8007a24:	091b      	lsreq	r3, r3, #4
 8007a26:	3004      	addeq	r0, #4
 8007a28:	0799      	lsls	r1, r3, #30
 8007a2a:	bf04      	itt	eq
 8007a2c:	089b      	lsreq	r3, r3, #2
 8007a2e:	3002      	addeq	r0, #2
 8007a30:	07d9      	lsls	r1, r3, #31
 8007a32:	d403      	bmi.n	8007a3c <__lo0bits+0x4e>
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	f100 0001 	add.w	r0, r0, #1
 8007a3a:	d003      	beq.n	8007a44 <__lo0bits+0x56>
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	4770      	bx	lr
 8007a40:	2000      	movs	r0, #0
 8007a42:	4770      	bx	lr
 8007a44:	2020      	movs	r0, #32
 8007a46:	4770      	bx	lr

08007a48 <__i2b>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	f7ff ff07 	bl	8007860 <_Balloc>
 8007a52:	4602      	mov	r2, r0
 8007a54:	b928      	cbnz	r0, 8007a62 <__i2b+0x1a>
 8007a56:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <__i2b+0x24>)
 8007a58:	4805      	ldr	r0, [pc, #20]	@ (8007a70 <__i2b+0x28>)
 8007a5a:	f240 1145 	movw	r1, #325	@ 0x145
 8007a5e:	f000 fd21 	bl	80084a4 <__assert_func>
 8007a62:	2301      	movs	r3, #1
 8007a64:	6144      	str	r4, [r0, #20]
 8007a66:	6103      	str	r3, [r0, #16]
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	bf00      	nop
 8007a6c:	08008814 	.word	0x08008814
 8007a70:	08008825 	.word	0x08008825

08007a74 <__multiply>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	4614      	mov	r4, r2
 8007a7a:	690a      	ldr	r2, [r1, #16]
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	bfa8      	it	ge
 8007a82:	4623      	movge	r3, r4
 8007a84:	460f      	mov	r7, r1
 8007a86:	bfa4      	itt	ge
 8007a88:	460c      	movge	r4, r1
 8007a8a:	461f      	movge	r7, r3
 8007a8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a94:	68a3      	ldr	r3, [r4, #8]
 8007a96:	6861      	ldr	r1, [r4, #4]
 8007a98:	eb0a 0609 	add.w	r6, sl, r9
 8007a9c:	42b3      	cmp	r3, r6
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	bfb8      	it	lt
 8007aa2:	3101      	addlt	r1, #1
 8007aa4:	f7ff fedc 	bl	8007860 <_Balloc>
 8007aa8:	b930      	cbnz	r0, 8007ab8 <__multiply+0x44>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	4b44      	ldr	r3, [pc, #272]	@ (8007bc0 <__multiply+0x14c>)
 8007aae:	4845      	ldr	r0, [pc, #276]	@ (8007bc4 <__multiply+0x150>)
 8007ab0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ab4:	f000 fcf6 	bl	80084a4 <__assert_func>
 8007ab8:	f100 0514 	add.w	r5, r0, #20
 8007abc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4543      	cmp	r3, r8
 8007ac6:	d321      	bcc.n	8007b0c <__multiply+0x98>
 8007ac8:	f107 0114 	add.w	r1, r7, #20
 8007acc:	f104 0214 	add.w	r2, r4, #20
 8007ad0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ad4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ad8:	9302      	str	r3, [sp, #8]
 8007ada:	1b13      	subs	r3, r2, r4
 8007adc:	3b15      	subs	r3, #21
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	f104 0715 	add.w	r7, r4, #21
 8007ae8:	42ba      	cmp	r2, r7
 8007aea:	bf38      	it	cc
 8007aec:	2304      	movcc	r3, #4
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	9b02      	ldr	r3, [sp, #8]
 8007af2:	9103      	str	r1, [sp, #12]
 8007af4:	428b      	cmp	r3, r1
 8007af6:	d80c      	bhi.n	8007b12 <__multiply+0x9e>
 8007af8:	2e00      	cmp	r6, #0
 8007afa:	dd03      	ble.n	8007b04 <__multiply+0x90>
 8007afc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d05b      	beq.n	8007bbc <__multiply+0x148>
 8007b04:	6106      	str	r6, [r0, #16]
 8007b06:	b005      	add	sp, #20
 8007b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	f843 2b04 	str.w	r2, [r3], #4
 8007b10:	e7d8      	b.n	8007ac4 <__multiply+0x50>
 8007b12:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b16:	f1ba 0f00 	cmp.w	sl, #0
 8007b1a:	d024      	beq.n	8007b66 <__multiply+0xf2>
 8007b1c:	f104 0e14 	add.w	lr, r4, #20
 8007b20:	46a9      	mov	r9, r5
 8007b22:	f04f 0c00 	mov.w	ip, #0
 8007b26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b2a:	f8d9 3000 	ldr.w	r3, [r9]
 8007b2e:	fa1f fb87 	uxth.w	fp, r7
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b3c:	f8d9 7000 	ldr.w	r7, [r9]
 8007b40:	4463      	add	r3, ip
 8007b42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b46:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b54:	4572      	cmp	r2, lr
 8007b56:	f849 3b04 	str.w	r3, [r9], #4
 8007b5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b5e:	d8e2      	bhi.n	8007b26 <__multiply+0xb2>
 8007b60:	9b01      	ldr	r3, [sp, #4]
 8007b62:	f845 c003 	str.w	ip, [r5, r3]
 8007b66:	9b03      	ldr	r3, [sp, #12]
 8007b68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b6c:	3104      	adds	r1, #4
 8007b6e:	f1b9 0f00 	cmp.w	r9, #0
 8007b72:	d021      	beq.n	8007bb8 <__multiply+0x144>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	f104 0c14 	add.w	ip, r4, #20
 8007b7a:	46ae      	mov	lr, r5
 8007b7c:	f04f 0a00 	mov.w	sl, #0
 8007b80:	f8bc b000 	ldrh.w	fp, [ip]
 8007b84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b88:	fb09 770b 	mla	r7, r9, fp, r7
 8007b8c:	4457      	add	r7, sl
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b94:	f84e 3b04 	str.w	r3, [lr], #4
 8007b98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ba0:	f8be 3000 	ldrh.w	r3, [lr]
 8007ba4:	fb09 330a 	mla	r3, r9, sl, r3
 8007ba8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007bac:	4562      	cmp	r2, ip
 8007bae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bb2:	d8e5      	bhi.n	8007b80 <__multiply+0x10c>
 8007bb4:	9f01      	ldr	r7, [sp, #4]
 8007bb6:	51eb      	str	r3, [r5, r7]
 8007bb8:	3504      	adds	r5, #4
 8007bba:	e799      	b.n	8007af0 <__multiply+0x7c>
 8007bbc:	3e01      	subs	r6, #1
 8007bbe:	e79b      	b.n	8007af8 <__multiply+0x84>
 8007bc0:	08008814 	.word	0x08008814
 8007bc4:	08008825 	.word	0x08008825

08007bc8 <__pow5mult>:
 8007bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bcc:	4615      	mov	r5, r2
 8007bce:	f012 0203 	ands.w	r2, r2, #3
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	460e      	mov	r6, r1
 8007bd6:	d007      	beq.n	8007be8 <__pow5mult+0x20>
 8007bd8:	4c25      	ldr	r4, [pc, #148]	@ (8007c70 <__pow5mult+0xa8>)
 8007bda:	3a01      	subs	r2, #1
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007be2:	f7ff fe9f 	bl	8007924 <__multadd>
 8007be6:	4606      	mov	r6, r0
 8007be8:	10ad      	asrs	r5, r5, #2
 8007bea:	d03d      	beq.n	8007c68 <__pow5mult+0xa0>
 8007bec:	69fc      	ldr	r4, [r7, #28]
 8007bee:	b97c      	cbnz	r4, 8007c10 <__pow5mult+0x48>
 8007bf0:	2010      	movs	r0, #16
 8007bf2:	f7ff fd7f 	bl	80076f4 <malloc>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	61f8      	str	r0, [r7, #28]
 8007bfa:	b928      	cbnz	r0, 8007c08 <__pow5mult+0x40>
 8007bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c74 <__pow5mult+0xac>)
 8007bfe:	481e      	ldr	r0, [pc, #120]	@ (8007c78 <__pow5mult+0xb0>)
 8007c00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c04:	f000 fc4e 	bl	80084a4 <__assert_func>
 8007c08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c0c:	6004      	str	r4, [r0, #0]
 8007c0e:	60c4      	str	r4, [r0, #12]
 8007c10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c18:	b94c      	cbnz	r4, 8007c2e <__pow5mult+0x66>
 8007c1a:	f240 2171 	movw	r1, #625	@ 0x271
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7ff ff12 	bl	8007a48 <__i2b>
 8007c24:	2300      	movs	r3, #0
 8007c26:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	6003      	str	r3, [r0, #0]
 8007c2e:	f04f 0900 	mov.w	r9, #0
 8007c32:	07eb      	lsls	r3, r5, #31
 8007c34:	d50a      	bpl.n	8007c4c <__pow5mult+0x84>
 8007c36:	4631      	mov	r1, r6
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	f7ff ff1a 	bl	8007a74 <__multiply>
 8007c40:	4631      	mov	r1, r6
 8007c42:	4680      	mov	r8, r0
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff fe4b 	bl	80078e0 <_Bfree>
 8007c4a:	4646      	mov	r6, r8
 8007c4c:	106d      	asrs	r5, r5, #1
 8007c4e:	d00b      	beq.n	8007c68 <__pow5mult+0xa0>
 8007c50:	6820      	ldr	r0, [r4, #0]
 8007c52:	b938      	cbnz	r0, 8007c64 <__pow5mult+0x9c>
 8007c54:	4622      	mov	r2, r4
 8007c56:	4621      	mov	r1, r4
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f7ff ff0b 	bl	8007a74 <__multiply>
 8007c5e:	6020      	str	r0, [r4, #0]
 8007c60:	f8c0 9000 	str.w	r9, [r0]
 8007c64:	4604      	mov	r4, r0
 8007c66:	e7e4      	b.n	8007c32 <__pow5mult+0x6a>
 8007c68:	4630      	mov	r0, r6
 8007c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c6e:	bf00      	nop
 8007c70:	08008880 	.word	0x08008880
 8007c74:	080087a5 	.word	0x080087a5
 8007c78:	08008825 	.word	0x08008825

08007c7c <__lshift>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	460c      	mov	r4, r1
 8007c82:	6849      	ldr	r1, [r1, #4]
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c8a:	68a3      	ldr	r3, [r4, #8]
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	4691      	mov	r9, r2
 8007c90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c94:	f108 0601 	add.w	r6, r8, #1
 8007c98:	42b3      	cmp	r3, r6
 8007c9a:	db0b      	blt.n	8007cb4 <__lshift+0x38>
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	f7ff fddf 	bl	8007860 <_Balloc>
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	b948      	cbnz	r0, 8007cba <__lshift+0x3e>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	4b28      	ldr	r3, [pc, #160]	@ (8007d4c <__lshift+0xd0>)
 8007caa:	4829      	ldr	r0, [pc, #164]	@ (8007d50 <__lshift+0xd4>)
 8007cac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007cb0:	f000 fbf8 	bl	80084a4 <__assert_func>
 8007cb4:	3101      	adds	r1, #1
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	e7ee      	b.n	8007c98 <__lshift+0x1c>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f100 0114 	add.w	r1, r0, #20
 8007cc0:	f100 0210 	add.w	r2, r0, #16
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	4553      	cmp	r3, sl
 8007cc8:	db33      	blt.n	8007d32 <__lshift+0xb6>
 8007cca:	6920      	ldr	r0, [r4, #16]
 8007ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cd0:	f104 0314 	add.w	r3, r4, #20
 8007cd4:	f019 091f 	ands.w	r9, r9, #31
 8007cd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ce0:	d02b      	beq.n	8007d3a <__lshift+0xbe>
 8007ce2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ce6:	468a      	mov	sl, r1
 8007ce8:	2200      	movs	r2, #0
 8007cea:	6818      	ldr	r0, [r3, #0]
 8007cec:	fa00 f009 	lsl.w	r0, r0, r9
 8007cf0:	4310      	orrs	r0, r2
 8007cf2:	f84a 0b04 	str.w	r0, [sl], #4
 8007cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfa:	459c      	cmp	ip, r3
 8007cfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d00:	d8f3      	bhi.n	8007cea <__lshift+0x6e>
 8007d02:	ebac 0304 	sub.w	r3, ip, r4
 8007d06:	3b15      	subs	r3, #21
 8007d08:	f023 0303 	bic.w	r3, r3, #3
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	f104 0015 	add.w	r0, r4, #21
 8007d12:	4584      	cmp	ip, r0
 8007d14:	bf38      	it	cc
 8007d16:	2304      	movcc	r3, #4
 8007d18:	50ca      	str	r2, [r1, r3]
 8007d1a:	b10a      	cbz	r2, 8007d20 <__lshift+0xa4>
 8007d1c:	f108 0602 	add.w	r6, r8, #2
 8007d20:	3e01      	subs	r6, #1
 8007d22:	4638      	mov	r0, r7
 8007d24:	612e      	str	r6, [r5, #16]
 8007d26:	4621      	mov	r1, r4
 8007d28:	f7ff fdda 	bl	80078e0 <_Bfree>
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d36:	3301      	adds	r3, #1
 8007d38:	e7c5      	b.n	8007cc6 <__lshift+0x4a>
 8007d3a:	3904      	subs	r1, #4
 8007d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d44:	459c      	cmp	ip, r3
 8007d46:	d8f9      	bhi.n	8007d3c <__lshift+0xc0>
 8007d48:	e7ea      	b.n	8007d20 <__lshift+0xa4>
 8007d4a:	bf00      	nop
 8007d4c:	08008814 	.word	0x08008814
 8007d50:	08008825 	.word	0x08008825

08007d54 <__mcmp>:
 8007d54:	690a      	ldr	r2, [r1, #16]
 8007d56:	4603      	mov	r3, r0
 8007d58:	6900      	ldr	r0, [r0, #16]
 8007d5a:	1a80      	subs	r0, r0, r2
 8007d5c:	b530      	push	{r4, r5, lr}
 8007d5e:	d10e      	bne.n	8007d7e <__mcmp+0x2a>
 8007d60:	3314      	adds	r3, #20
 8007d62:	3114      	adds	r1, #20
 8007d64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d74:	4295      	cmp	r5, r2
 8007d76:	d003      	beq.n	8007d80 <__mcmp+0x2c>
 8007d78:	d205      	bcs.n	8007d86 <__mcmp+0x32>
 8007d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7e:	bd30      	pop	{r4, r5, pc}
 8007d80:	42a3      	cmp	r3, r4
 8007d82:	d3f3      	bcc.n	8007d6c <__mcmp+0x18>
 8007d84:	e7fb      	b.n	8007d7e <__mcmp+0x2a>
 8007d86:	2001      	movs	r0, #1
 8007d88:	e7f9      	b.n	8007d7e <__mcmp+0x2a>
	...

08007d8c <__mdiff>:
 8007d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d90:	4689      	mov	r9, r1
 8007d92:	4606      	mov	r6, r0
 8007d94:	4611      	mov	r1, r2
 8007d96:	4648      	mov	r0, r9
 8007d98:	4614      	mov	r4, r2
 8007d9a:	f7ff ffdb 	bl	8007d54 <__mcmp>
 8007d9e:	1e05      	subs	r5, r0, #0
 8007da0:	d112      	bne.n	8007dc8 <__mdiff+0x3c>
 8007da2:	4629      	mov	r1, r5
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff fd5b 	bl	8007860 <_Balloc>
 8007daa:	4602      	mov	r2, r0
 8007dac:	b928      	cbnz	r0, 8007dba <__mdiff+0x2e>
 8007dae:	4b3f      	ldr	r3, [pc, #252]	@ (8007eac <__mdiff+0x120>)
 8007db0:	f240 2137 	movw	r1, #567	@ 0x237
 8007db4:	483e      	ldr	r0, [pc, #248]	@ (8007eb0 <__mdiff+0x124>)
 8007db6:	f000 fb75 	bl	80084a4 <__assert_func>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	b003      	add	sp, #12
 8007dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc8:	bfbc      	itt	lt
 8007dca:	464b      	movlt	r3, r9
 8007dcc:	46a1      	movlt	r9, r4
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007dd4:	bfba      	itte	lt
 8007dd6:	461c      	movlt	r4, r3
 8007dd8:	2501      	movlt	r5, #1
 8007dda:	2500      	movge	r5, #0
 8007ddc:	f7ff fd40 	bl	8007860 <_Balloc>
 8007de0:	4602      	mov	r2, r0
 8007de2:	b918      	cbnz	r0, 8007dec <__mdiff+0x60>
 8007de4:	4b31      	ldr	r3, [pc, #196]	@ (8007eac <__mdiff+0x120>)
 8007de6:	f240 2145 	movw	r1, #581	@ 0x245
 8007dea:	e7e3      	b.n	8007db4 <__mdiff+0x28>
 8007dec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007df0:	6926      	ldr	r6, [r4, #16]
 8007df2:	60c5      	str	r5, [r0, #12]
 8007df4:	f109 0310 	add.w	r3, r9, #16
 8007df8:	f109 0514 	add.w	r5, r9, #20
 8007dfc:	f104 0e14 	add.w	lr, r4, #20
 8007e00:	f100 0b14 	add.w	fp, r0, #20
 8007e04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	46d9      	mov	r9, fp
 8007e10:	f04f 0c00 	mov.w	ip, #0
 8007e14:	9b01      	ldr	r3, [sp, #4]
 8007e16:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	fa1f f38a 	uxth.w	r3, sl
 8007e24:	4619      	mov	r1, r3
 8007e26:	b283      	uxth	r3, r0
 8007e28:	1acb      	subs	r3, r1, r3
 8007e2a:	0c00      	lsrs	r0, r0, #16
 8007e2c:	4463      	add	r3, ip
 8007e2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e3c:	4576      	cmp	r6, lr
 8007e3e:	f849 3b04 	str.w	r3, [r9], #4
 8007e42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e46:	d8e5      	bhi.n	8007e14 <__mdiff+0x88>
 8007e48:	1b33      	subs	r3, r6, r4
 8007e4a:	3b15      	subs	r3, #21
 8007e4c:	f023 0303 	bic.w	r3, r3, #3
 8007e50:	3415      	adds	r4, #21
 8007e52:	3304      	adds	r3, #4
 8007e54:	42a6      	cmp	r6, r4
 8007e56:	bf38      	it	cc
 8007e58:	2304      	movcc	r3, #4
 8007e5a:	441d      	add	r5, r3
 8007e5c:	445b      	add	r3, fp
 8007e5e:	461e      	mov	r6, r3
 8007e60:	462c      	mov	r4, r5
 8007e62:	4544      	cmp	r4, r8
 8007e64:	d30e      	bcc.n	8007e84 <__mdiff+0xf8>
 8007e66:	f108 0103 	add.w	r1, r8, #3
 8007e6a:	1b49      	subs	r1, r1, r5
 8007e6c:	f021 0103 	bic.w	r1, r1, #3
 8007e70:	3d03      	subs	r5, #3
 8007e72:	45a8      	cmp	r8, r5
 8007e74:	bf38      	it	cc
 8007e76:	2100      	movcc	r1, #0
 8007e78:	440b      	add	r3, r1
 8007e7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e7e:	b191      	cbz	r1, 8007ea6 <__mdiff+0x11a>
 8007e80:	6117      	str	r7, [r2, #16]
 8007e82:	e79d      	b.n	8007dc0 <__mdiff+0x34>
 8007e84:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e88:	46e6      	mov	lr, ip
 8007e8a:	0c08      	lsrs	r0, r1, #16
 8007e8c:	fa1c fc81 	uxtah	ip, ip, r1
 8007e90:	4471      	add	r1, lr
 8007e92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e96:	b289      	uxth	r1, r1
 8007e98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e9c:	f846 1b04 	str.w	r1, [r6], #4
 8007ea0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ea4:	e7dd      	b.n	8007e62 <__mdiff+0xd6>
 8007ea6:	3f01      	subs	r7, #1
 8007ea8:	e7e7      	b.n	8007e7a <__mdiff+0xee>
 8007eaa:	bf00      	nop
 8007eac:	08008814 	.word	0x08008814
 8007eb0:	08008825 	.word	0x08008825

08007eb4 <__d2b>:
 8007eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007eb8:	460f      	mov	r7, r1
 8007eba:	2101      	movs	r1, #1
 8007ebc:	ec59 8b10 	vmov	r8, r9, d0
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	f7ff fccd 	bl	8007860 <_Balloc>
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	b930      	cbnz	r0, 8007ed8 <__d2b+0x24>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	4b23      	ldr	r3, [pc, #140]	@ (8007f5c <__d2b+0xa8>)
 8007ece:	4824      	ldr	r0, [pc, #144]	@ (8007f60 <__d2b+0xac>)
 8007ed0:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ed4:	f000 fae6 	bl	80084a4 <__assert_func>
 8007ed8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007edc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ee0:	b10d      	cbz	r5, 8007ee6 <__d2b+0x32>
 8007ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	f1b8 0300 	subs.w	r3, r8, #0
 8007eec:	d023      	beq.n	8007f36 <__d2b+0x82>
 8007eee:	4668      	mov	r0, sp
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	f7ff fd7c 	bl	80079ee <__lo0bits>
 8007ef6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007efa:	b1d0      	cbz	r0, 8007f32 <__d2b+0x7e>
 8007efc:	f1c0 0320 	rsb	r3, r0, #32
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	430b      	orrs	r3, r1
 8007f06:	40c2      	lsrs	r2, r0
 8007f08:	6163      	str	r3, [r4, #20]
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	9b01      	ldr	r3, [sp, #4]
 8007f0e:	61a3      	str	r3, [r4, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bf0c      	ite	eq
 8007f14:	2201      	moveq	r2, #1
 8007f16:	2202      	movne	r2, #2
 8007f18:	6122      	str	r2, [r4, #16]
 8007f1a:	b1a5      	cbz	r5, 8007f46 <__d2b+0x92>
 8007f1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f20:	4405      	add	r5, r0
 8007f22:	603d      	str	r5, [r7, #0]
 8007f24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f28:	6030      	str	r0, [r6, #0]
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	b003      	add	sp, #12
 8007f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f32:	6161      	str	r1, [r4, #20]
 8007f34:	e7ea      	b.n	8007f0c <__d2b+0x58>
 8007f36:	a801      	add	r0, sp, #4
 8007f38:	f7ff fd59 	bl	80079ee <__lo0bits>
 8007f3c:	9b01      	ldr	r3, [sp, #4]
 8007f3e:	6163      	str	r3, [r4, #20]
 8007f40:	3020      	adds	r0, #32
 8007f42:	2201      	movs	r2, #1
 8007f44:	e7e8      	b.n	8007f18 <__d2b+0x64>
 8007f46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f4e:	6038      	str	r0, [r7, #0]
 8007f50:	6918      	ldr	r0, [r3, #16]
 8007f52:	f7ff fd2d 	bl	80079b0 <__hi0bits>
 8007f56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f5a:	e7e5      	b.n	8007f28 <__d2b+0x74>
 8007f5c:	08008814 	.word	0x08008814
 8007f60:	08008825 	.word	0x08008825

08007f64 <__sfputc_r>:
 8007f64:	6893      	ldr	r3, [r2, #8]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	b410      	push	{r4}
 8007f6c:	6093      	str	r3, [r2, #8]
 8007f6e:	da08      	bge.n	8007f82 <__sfputc_r+0x1e>
 8007f70:	6994      	ldr	r4, [r2, #24]
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	db01      	blt.n	8007f7a <__sfputc_r+0x16>
 8007f76:	290a      	cmp	r1, #10
 8007f78:	d103      	bne.n	8007f82 <__sfputc_r+0x1e>
 8007f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f7e:	f000 b9df 	b.w	8008340 <__swbuf_r>
 8007f82:	6813      	ldr	r3, [r2, #0]
 8007f84:	1c58      	adds	r0, r3, #1
 8007f86:	6010      	str	r0, [r2, #0]
 8007f88:	7019      	strb	r1, [r3, #0]
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <__sfputs_r>:
 8007f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	18d5      	adds	r5, r2, r3
 8007f9c:	42ac      	cmp	r4, r5
 8007f9e:	d101      	bne.n	8007fa4 <__sfputs_r+0x12>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e007      	b.n	8007fb4 <__sfputs_r+0x22>
 8007fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa8:	463a      	mov	r2, r7
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ffda 	bl	8007f64 <__sfputc_r>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d1f3      	bne.n	8007f9c <__sfputs_r+0xa>
 8007fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fb8 <_vfiprintf_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	b09d      	sub	sp, #116	@ 0x74
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	4698      	mov	r8, r3
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	b118      	cbz	r0, 8007fd0 <_vfiprintf_r+0x18>
 8007fc8:	6a03      	ldr	r3, [r0, #32]
 8007fca:	b90b      	cbnz	r3, 8007fd0 <_vfiprintf_r+0x18>
 8007fcc:	f7fe fbf0 	bl	80067b0 <__sinit>
 8007fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fd2:	07d9      	lsls	r1, r3, #31
 8007fd4:	d405      	bmi.n	8007fe2 <_vfiprintf_r+0x2a>
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	059a      	lsls	r2, r3, #22
 8007fda:	d402      	bmi.n	8007fe2 <_vfiprintf_r+0x2a>
 8007fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fde:	f7fe fcf0 	bl	80069c2 <__retarget_lock_acquire_recursive>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	071b      	lsls	r3, r3, #28
 8007fe6:	d501      	bpl.n	8007fec <_vfiprintf_r+0x34>
 8007fe8:	692b      	ldr	r3, [r5, #16]
 8007fea:	b99b      	cbnz	r3, 8008014 <_vfiprintf_r+0x5c>
 8007fec:	4629      	mov	r1, r5
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 f9e4 	bl	80083bc <__swsetup_r>
 8007ff4:	b170      	cbz	r0, 8008014 <_vfiprintf_r+0x5c>
 8007ff6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ff8:	07dc      	lsls	r4, r3, #31
 8007ffa:	d504      	bpl.n	8008006 <_vfiprintf_r+0x4e>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	b01d      	add	sp, #116	@ 0x74
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	0598      	lsls	r0, r3, #22
 800800a:	d4f7      	bmi.n	8007ffc <_vfiprintf_r+0x44>
 800800c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800800e:	f7fe fcd9 	bl	80069c4 <__retarget_lock_release_recursive>
 8008012:	e7f3      	b.n	8007ffc <_vfiprintf_r+0x44>
 8008014:	2300      	movs	r3, #0
 8008016:	9309      	str	r3, [sp, #36]	@ 0x24
 8008018:	2320      	movs	r3, #32
 800801a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800801e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008022:	2330      	movs	r3, #48	@ 0x30
 8008024:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081d4 <_vfiprintf_r+0x21c>
 8008028:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800802c:	f04f 0901 	mov.w	r9, #1
 8008030:	4623      	mov	r3, r4
 8008032:	469a      	mov	sl, r3
 8008034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008038:	b10a      	cbz	r2, 800803e <_vfiprintf_r+0x86>
 800803a:	2a25      	cmp	r2, #37	@ 0x25
 800803c:	d1f9      	bne.n	8008032 <_vfiprintf_r+0x7a>
 800803e:	ebba 0b04 	subs.w	fp, sl, r4
 8008042:	d00b      	beq.n	800805c <_vfiprintf_r+0xa4>
 8008044:	465b      	mov	r3, fp
 8008046:	4622      	mov	r2, r4
 8008048:	4629      	mov	r1, r5
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ffa1 	bl	8007f92 <__sfputs_r>
 8008050:	3001      	adds	r0, #1
 8008052:	f000 80a7 	beq.w	80081a4 <_vfiprintf_r+0x1ec>
 8008056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008058:	445a      	add	r2, fp
 800805a:	9209      	str	r2, [sp, #36]	@ 0x24
 800805c:	f89a 3000 	ldrb.w	r3, [sl]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 809f 	beq.w	80081a4 <_vfiprintf_r+0x1ec>
 8008066:	2300      	movs	r3, #0
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008070:	f10a 0a01 	add.w	sl, sl, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	9307      	str	r3, [sp, #28]
 8008078:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800807c:	931a      	str	r3, [sp, #104]	@ 0x68
 800807e:	4654      	mov	r4, sl
 8008080:	2205      	movs	r2, #5
 8008082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008086:	4853      	ldr	r0, [pc, #332]	@ (80081d4 <_vfiprintf_r+0x21c>)
 8008088:	f7f8 f8a2 	bl	80001d0 <memchr>
 800808c:	9a04      	ldr	r2, [sp, #16]
 800808e:	b9d8      	cbnz	r0, 80080c8 <_vfiprintf_r+0x110>
 8008090:	06d1      	lsls	r1, r2, #27
 8008092:	bf44      	itt	mi
 8008094:	2320      	movmi	r3, #32
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809a:	0713      	lsls	r3, r2, #28
 800809c:	bf44      	itt	mi
 800809e:	232b      	movmi	r3, #43	@ 0x2b
 80080a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080aa:	d015      	beq.n	80080d8 <_vfiprintf_r+0x120>
 80080ac:	9a07      	ldr	r2, [sp, #28]
 80080ae:	4654      	mov	r4, sl
 80080b0:	2000      	movs	r0, #0
 80080b2:	f04f 0c0a 	mov.w	ip, #10
 80080b6:	4621      	mov	r1, r4
 80080b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080bc:	3b30      	subs	r3, #48	@ 0x30
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d94b      	bls.n	800815a <_vfiprintf_r+0x1a2>
 80080c2:	b1b0      	cbz	r0, 80080f2 <_vfiprintf_r+0x13a>
 80080c4:	9207      	str	r2, [sp, #28]
 80080c6:	e014      	b.n	80080f2 <_vfiprintf_r+0x13a>
 80080c8:	eba0 0308 	sub.w	r3, r0, r8
 80080cc:	fa09 f303 	lsl.w	r3, r9, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	46a2      	mov	sl, r4
 80080d6:	e7d2      	b.n	800807e <_vfiprintf_r+0xc6>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	1d19      	adds	r1, r3, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	9103      	str	r1, [sp, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfbb      	ittet	lt
 80080e4:	425b      	neglt	r3, r3
 80080e6:	f042 0202 	orrlt.w	r2, r2, #2
 80080ea:	9307      	strge	r3, [sp, #28]
 80080ec:	9307      	strlt	r3, [sp, #28]
 80080ee:	bfb8      	it	lt
 80080f0:	9204      	strlt	r2, [sp, #16]
 80080f2:	7823      	ldrb	r3, [r4, #0]
 80080f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80080f6:	d10a      	bne.n	800810e <_vfiprintf_r+0x156>
 80080f8:	7863      	ldrb	r3, [r4, #1]
 80080fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80080fc:	d132      	bne.n	8008164 <_vfiprintf_r+0x1ac>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	9203      	str	r2, [sp, #12]
 8008106:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800810a:	3402      	adds	r4, #2
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081e4 <_vfiprintf_r+0x22c>
 8008112:	7821      	ldrb	r1, [r4, #0]
 8008114:	2203      	movs	r2, #3
 8008116:	4650      	mov	r0, sl
 8008118:	f7f8 f85a 	bl	80001d0 <memchr>
 800811c:	b138      	cbz	r0, 800812e <_vfiprintf_r+0x176>
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	eba0 000a 	sub.w	r0, r0, sl
 8008124:	2240      	movs	r2, #64	@ 0x40
 8008126:	4082      	lsls	r2, r0
 8008128:	4313      	orrs	r3, r2
 800812a:	3401      	adds	r4, #1
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008132:	4829      	ldr	r0, [pc, #164]	@ (80081d8 <_vfiprintf_r+0x220>)
 8008134:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008138:	2206      	movs	r2, #6
 800813a:	f7f8 f849 	bl	80001d0 <memchr>
 800813e:	2800      	cmp	r0, #0
 8008140:	d03f      	beq.n	80081c2 <_vfiprintf_r+0x20a>
 8008142:	4b26      	ldr	r3, [pc, #152]	@ (80081dc <_vfiprintf_r+0x224>)
 8008144:	bb1b      	cbnz	r3, 800818e <_vfiprintf_r+0x1d6>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	3307      	adds	r3, #7
 800814a:	f023 0307 	bic.w	r3, r3, #7
 800814e:	3308      	adds	r3, #8
 8008150:	9303      	str	r3, [sp, #12]
 8008152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008154:	443b      	add	r3, r7
 8008156:	9309      	str	r3, [sp, #36]	@ 0x24
 8008158:	e76a      	b.n	8008030 <_vfiprintf_r+0x78>
 800815a:	fb0c 3202 	mla	r2, ip, r2, r3
 800815e:	460c      	mov	r4, r1
 8008160:	2001      	movs	r0, #1
 8008162:	e7a8      	b.n	80080b6 <_vfiprintf_r+0xfe>
 8008164:	2300      	movs	r3, #0
 8008166:	3401      	adds	r4, #1
 8008168:	9305      	str	r3, [sp, #20]
 800816a:	4619      	mov	r1, r3
 800816c:	f04f 0c0a 	mov.w	ip, #10
 8008170:	4620      	mov	r0, r4
 8008172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008176:	3a30      	subs	r2, #48	@ 0x30
 8008178:	2a09      	cmp	r2, #9
 800817a:	d903      	bls.n	8008184 <_vfiprintf_r+0x1cc>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0c6      	beq.n	800810e <_vfiprintf_r+0x156>
 8008180:	9105      	str	r1, [sp, #20]
 8008182:	e7c4      	b.n	800810e <_vfiprintf_r+0x156>
 8008184:	fb0c 2101 	mla	r1, ip, r1, r2
 8008188:	4604      	mov	r4, r0
 800818a:	2301      	movs	r3, #1
 800818c:	e7f0      	b.n	8008170 <_vfiprintf_r+0x1b8>
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <_vfiprintf_r+0x228>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	4630      	mov	r0, r6
 800819a:	f7fd fec5 	bl	8005f28 <_printf_float>
 800819e:	4607      	mov	r7, r0
 80081a0:	1c78      	adds	r0, r7, #1
 80081a2:	d1d6      	bne.n	8008152 <_vfiprintf_r+0x19a>
 80081a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081a6:	07d9      	lsls	r1, r3, #31
 80081a8:	d405      	bmi.n	80081b6 <_vfiprintf_r+0x1fe>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	059a      	lsls	r2, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_vfiprintf_r+0x1fe>
 80081b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081b2:	f7fe fc07 	bl	80069c4 <__retarget_lock_release_recursive>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	065b      	lsls	r3, r3, #25
 80081ba:	f53f af1f 	bmi.w	8007ffc <_vfiprintf_r+0x44>
 80081be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c0:	e71e      	b.n	8008000 <_vfiprintf_r+0x48>
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	462a      	mov	r2, r5
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <_vfiprintf_r+0x228>)
 80081ca:	a904      	add	r1, sp, #16
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7fe f943 	bl	8006458 <_printf_i>
 80081d2:	e7e4      	b.n	800819e <_vfiprintf_r+0x1e6>
 80081d4:	08008980 	.word	0x08008980
 80081d8:	0800898a 	.word	0x0800898a
 80081dc:	08005f29 	.word	0x08005f29
 80081e0:	08007f93 	.word	0x08007f93
 80081e4:	08008986 	.word	0x08008986

080081e8 <__sflush_r>:
 80081e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	0716      	lsls	r6, r2, #28
 80081f2:	4605      	mov	r5, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	d454      	bmi.n	80082a2 <__sflush_r+0xba>
 80081f8:	684b      	ldr	r3, [r1, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dc02      	bgt.n	8008204 <__sflush_r+0x1c>
 80081fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	dd48      	ble.n	8008296 <__sflush_r+0xae>
 8008204:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008206:	2e00      	cmp	r6, #0
 8008208:	d045      	beq.n	8008296 <__sflush_r+0xae>
 800820a:	2300      	movs	r3, #0
 800820c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008210:	682f      	ldr	r7, [r5, #0]
 8008212:	6a21      	ldr	r1, [r4, #32]
 8008214:	602b      	str	r3, [r5, #0]
 8008216:	d030      	beq.n	800827a <__sflush_r+0x92>
 8008218:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	0759      	lsls	r1, r3, #29
 800821e:	d505      	bpl.n	800822c <__sflush_r+0x44>
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	1ad2      	subs	r2, r2, r3
 8008224:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008226:	b10b      	cbz	r3, 800822c <__sflush_r+0x44>
 8008228:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800822a:	1ad2      	subs	r2, r2, r3
 800822c:	2300      	movs	r3, #0
 800822e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008230:	6a21      	ldr	r1, [r4, #32]
 8008232:	4628      	mov	r0, r5
 8008234:	47b0      	blx	r6
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	d106      	bne.n	800824a <__sflush_r+0x62>
 800823c:	6829      	ldr	r1, [r5, #0]
 800823e:	291d      	cmp	r1, #29
 8008240:	d82b      	bhi.n	800829a <__sflush_r+0xb2>
 8008242:	4a2a      	ldr	r2, [pc, #168]	@ (80082ec <__sflush_r+0x104>)
 8008244:	410a      	asrs	r2, r1
 8008246:	07d6      	lsls	r6, r2, #31
 8008248:	d427      	bmi.n	800829a <__sflush_r+0xb2>
 800824a:	2200      	movs	r2, #0
 800824c:	6062      	str	r2, [r4, #4]
 800824e:	04d9      	lsls	r1, r3, #19
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	6022      	str	r2, [r4, #0]
 8008254:	d504      	bpl.n	8008260 <__sflush_r+0x78>
 8008256:	1c42      	adds	r2, r0, #1
 8008258:	d101      	bne.n	800825e <__sflush_r+0x76>
 800825a:	682b      	ldr	r3, [r5, #0]
 800825c:	b903      	cbnz	r3, 8008260 <__sflush_r+0x78>
 800825e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008262:	602f      	str	r7, [r5, #0]
 8008264:	b1b9      	cbz	r1, 8008296 <__sflush_r+0xae>
 8008266:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800826a:	4299      	cmp	r1, r3
 800826c:	d002      	beq.n	8008274 <__sflush_r+0x8c>
 800826e:	4628      	mov	r0, r5
 8008270:	f7ff f9f6 	bl	8007660 <_free_r>
 8008274:	2300      	movs	r3, #0
 8008276:	6363      	str	r3, [r4, #52]	@ 0x34
 8008278:	e00d      	b.n	8008296 <__sflush_r+0xae>
 800827a:	2301      	movs	r3, #1
 800827c:	4628      	mov	r0, r5
 800827e:	47b0      	blx	r6
 8008280:	4602      	mov	r2, r0
 8008282:	1c50      	adds	r0, r2, #1
 8008284:	d1c9      	bne.n	800821a <__sflush_r+0x32>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0c6      	beq.n	800821a <__sflush_r+0x32>
 800828c:	2b1d      	cmp	r3, #29
 800828e:	d001      	beq.n	8008294 <__sflush_r+0xac>
 8008290:	2b16      	cmp	r3, #22
 8008292:	d11e      	bne.n	80082d2 <__sflush_r+0xea>
 8008294:	602f      	str	r7, [r5, #0]
 8008296:	2000      	movs	r0, #0
 8008298:	e022      	b.n	80082e0 <__sflush_r+0xf8>
 800829a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800829e:	b21b      	sxth	r3, r3
 80082a0:	e01b      	b.n	80082da <__sflush_r+0xf2>
 80082a2:	690f      	ldr	r7, [r1, #16]
 80082a4:	2f00      	cmp	r7, #0
 80082a6:	d0f6      	beq.n	8008296 <__sflush_r+0xae>
 80082a8:	0793      	lsls	r3, r2, #30
 80082aa:	680e      	ldr	r6, [r1, #0]
 80082ac:	bf08      	it	eq
 80082ae:	694b      	ldreq	r3, [r1, #20]
 80082b0:	600f      	str	r7, [r1, #0]
 80082b2:	bf18      	it	ne
 80082b4:	2300      	movne	r3, #0
 80082b6:	eba6 0807 	sub.w	r8, r6, r7
 80082ba:	608b      	str	r3, [r1, #8]
 80082bc:	f1b8 0f00 	cmp.w	r8, #0
 80082c0:	dde9      	ble.n	8008296 <__sflush_r+0xae>
 80082c2:	6a21      	ldr	r1, [r4, #32]
 80082c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082c6:	4643      	mov	r3, r8
 80082c8:	463a      	mov	r2, r7
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b0      	blx	r6
 80082ce:	2800      	cmp	r0, #0
 80082d0:	dc08      	bgt.n	80082e4 <__sflush_r+0xfc>
 80082d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e4:	4407      	add	r7, r0
 80082e6:	eba8 0800 	sub.w	r8, r8, r0
 80082ea:	e7e7      	b.n	80082bc <__sflush_r+0xd4>
 80082ec:	dfbffffe 	.word	0xdfbffffe

080082f0 <_fflush_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	690b      	ldr	r3, [r1, #16]
 80082f4:	4605      	mov	r5, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	b913      	cbnz	r3, 8008300 <_fflush_r+0x10>
 80082fa:	2500      	movs	r5, #0
 80082fc:	4628      	mov	r0, r5
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	b118      	cbz	r0, 800830a <_fflush_r+0x1a>
 8008302:	6a03      	ldr	r3, [r0, #32]
 8008304:	b90b      	cbnz	r3, 800830a <_fflush_r+0x1a>
 8008306:	f7fe fa53 	bl	80067b0 <__sinit>
 800830a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0f3      	beq.n	80082fa <_fflush_r+0xa>
 8008312:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008314:	07d0      	lsls	r0, r2, #31
 8008316:	d404      	bmi.n	8008322 <_fflush_r+0x32>
 8008318:	0599      	lsls	r1, r3, #22
 800831a:	d402      	bmi.n	8008322 <_fflush_r+0x32>
 800831c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800831e:	f7fe fb50 	bl	80069c2 <__retarget_lock_acquire_recursive>
 8008322:	4628      	mov	r0, r5
 8008324:	4621      	mov	r1, r4
 8008326:	f7ff ff5f 	bl	80081e8 <__sflush_r>
 800832a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800832c:	07da      	lsls	r2, r3, #31
 800832e:	4605      	mov	r5, r0
 8008330:	d4e4      	bmi.n	80082fc <_fflush_r+0xc>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	059b      	lsls	r3, r3, #22
 8008336:	d4e1      	bmi.n	80082fc <_fflush_r+0xc>
 8008338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800833a:	f7fe fb43 	bl	80069c4 <__retarget_lock_release_recursive>
 800833e:	e7dd      	b.n	80082fc <_fflush_r+0xc>

08008340 <__swbuf_r>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	460e      	mov	r6, r1
 8008344:	4614      	mov	r4, r2
 8008346:	4605      	mov	r5, r0
 8008348:	b118      	cbz	r0, 8008352 <__swbuf_r+0x12>
 800834a:	6a03      	ldr	r3, [r0, #32]
 800834c:	b90b      	cbnz	r3, 8008352 <__swbuf_r+0x12>
 800834e:	f7fe fa2f 	bl	80067b0 <__sinit>
 8008352:	69a3      	ldr	r3, [r4, #24]
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	071a      	lsls	r2, r3, #28
 800835a:	d501      	bpl.n	8008360 <__swbuf_r+0x20>
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	b943      	cbnz	r3, 8008372 <__swbuf_r+0x32>
 8008360:	4621      	mov	r1, r4
 8008362:	4628      	mov	r0, r5
 8008364:	f000 f82a 	bl	80083bc <__swsetup_r>
 8008368:	b118      	cbz	r0, 8008372 <__swbuf_r+0x32>
 800836a:	f04f 37ff 	mov.w	r7, #4294967295
 800836e:	4638      	mov	r0, r7
 8008370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	1a98      	subs	r0, r3, r2
 8008378:	6963      	ldr	r3, [r4, #20]
 800837a:	b2f6      	uxtb	r6, r6
 800837c:	4283      	cmp	r3, r0
 800837e:	4637      	mov	r7, r6
 8008380:	dc05      	bgt.n	800838e <__swbuf_r+0x4e>
 8008382:	4621      	mov	r1, r4
 8008384:	4628      	mov	r0, r5
 8008386:	f7ff ffb3 	bl	80082f0 <_fflush_r>
 800838a:	2800      	cmp	r0, #0
 800838c:	d1ed      	bne.n	800836a <__swbuf_r+0x2a>
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	3b01      	subs	r3, #1
 8008392:	60a3      	str	r3, [r4, #8]
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	6022      	str	r2, [r4, #0]
 800839a:	701e      	strb	r6, [r3, #0]
 800839c:	6962      	ldr	r2, [r4, #20]
 800839e:	1c43      	adds	r3, r0, #1
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d004      	beq.n	80083ae <__swbuf_r+0x6e>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	07db      	lsls	r3, r3, #31
 80083a8:	d5e1      	bpl.n	800836e <__swbuf_r+0x2e>
 80083aa:	2e0a      	cmp	r6, #10
 80083ac:	d1df      	bne.n	800836e <__swbuf_r+0x2e>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7ff ff9d 	bl	80082f0 <_fflush_r>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0d9      	beq.n	800836e <__swbuf_r+0x2e>
 80083ba:	e7d6      	b.n	800836a <__swbuf_r+0x2a>

080083bc <__swsetup_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4b29      	ldr	r3, [pc, #164]	@ (8008464 <__swsetup_r+0xa8>)
 80083c0:	4605      	mov	r5, r0
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	460c      	mov	r4, r1
 80083c6:	b118      	cbz	r0, 80083d0 <__swsetup_r+0x14>
 80083c8:	6a03      	ldr	r3, [r0, #32]
 80083ca:	b90b      	cbnz	r3, 80083d0 <__swsetup_r+0x14>
 80083cc:	f7fe f9f0 	bl	80067b0 <__sinit>
 80083d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d4:	0719      	lsls	r1, r3, #28
 80083d6:	d422      	bmi.n	800841e <__swsetup_r+0x62>
 80083d8:	06da      	lsls	r2, r3, #27
 80083da:	d407      	bmi.n	80083ec <__swsetup_r+0x30>
 80083dc:	2209      	movs	r2, #9
 80083de:	602a      	str	r2, [r5, #0]
 80083e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ea:	e033      	b.n	8008454 <__swsetup_r+0x98>
 80083ec:	0758      	lsls	r0, r3, #29
 80083ee:	d512      	bpl.n	8008416 <__swsetup_r+0x5a>
 80083f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f2:	b141      	cbz	r1, 8008406 <__swsetup_r+0x4a>
 80083f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d002      	beq.n	8008402 <__swsetup_r+0x46>
 80083fc:	4628      	mov	r0, r5
 80083fe:	f7ff f92f 	bl	8007660 <_free_r>
 8008402:	2300      	movs	r3, #0
 8008404:	6363      	str	r3, [r4, #52]	@ 0x34
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	2300      	movs	r3, #0
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	f043 0308 	orr.w	r3, r3, #8
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	b94b      	cbnz	r3, 8008436 <__swsetup_r+0x7a>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800842c:	d003      	beq.n	8008436 <__swsetup_r+0x7a>
 800842e:	4621      	mov	r1, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f000 f8c1 	bl	80085b8 <__smakebuf_r>
 8008436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843a:	f013 0201 	ands.w	r2, r3, #1
 800843e:	d00a      	beq.n	8008456 <__swsetup_r+0x9a>
 8008440:	2200      	movs	r2, #0
 8008442:	60a2      	str	r2, [r4, #8]
 8008444:	6962      	ldr	r2, [r4, #20]
 8008446:	4252      	negs	r2, r2
 8008448:	61a2      	str	r2, [r4, #24]
 800844a:	6922      	ldr	r2, [r4, #16]
 800844c:	b942      	cbnz	r2, 8008460 <__swsetup_r+0xa4>
 800844e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008452:	d1c5      	bne.n	80083e0 <__swsetup_r+0x24>
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	0799      	lsls	r1, r3, #30
 8008458:	bf58      	it	pl
 800845a:	6962      	ldrpl	r2, [r4, #20]
 800845c:	60a2      	str	r2, [r4, #8]
 800845e:	e7f4      	b.n	800844a <__swsetup_r+0x8e>
 8008460:	2000      	movs	r0, #0
 8008462:	e7f7      	b.n	8008454 <__swsetup_r+0x98>
 8008464:	20000048 	.word	0x20000048

08008468 <_sbrk_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d06      	ldr	r5, [pc, #24]	@ (8008484 <_sbrk_r+0x1c>)
 800846c:	2300      	movs	r3, #0
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	f7f9 f81e 	bl	80014b4 <_sbrk>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_sbrk_r+0x1a>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_sbrk_r+0x1a>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	200004e0 	.word	0x200004e0

08008488 <memcpy>:
 8008488:	440a      	add	r2, r1
 800848a:	4291      	cmp	r1, r2
 800848c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008490:	d100      	bne.n	8008494 <memcpy+0xc>
 8008492:	4770      	bx	lr
 8008494:	b510      	push	{r4, lr}
 8008496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800849a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800849e:	4291      	cmp	r1, r2
 80084a0:	d1f9      	bne.n	8008496 <memcpy+0xe>
 80084a2:	bd10      	pop	{r4, pc}

080084a4 <__assert_func>:
 80084a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084a6:	4614      	mov	r4, r2
 80084a8:	461a      	mov	r2, r3
 80084aa:	4b09      	ldr	r3, [pc, #36]	@ (80084d0 <__assert_func+0x2c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4605      	mov	r5, r0
 80084b0:	68d8      	ldr	r0, [r3, #12]
 80084b2:	b954      	cbnz	r4, 80084ca <__assert_func+0x26>
 80084b4:	4b07      	ldr	r3, [pc, #28]	@ (80084d4 <__assert_func+0x30>)
 80084b6:	461c      	mov	r4, r3
 80084b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084bc:	9100      	str	r1, [sp, #0]
 80084be:	462b      	mov	r3, r5
 80084c0:	4905      	ldr	r1, [pc, #20]	@ (80084d8 <__assert_func+0x34>)
 80084c2:	f000 f841 	bl	8008548 <fiprintf>
 80084c6:	f000 f8d5 	bl	8008674 <abort>
 80084ca:	4b04      	ldr	r3, [pc, #16]	@ (80084dc <__assert_func+0x38>)
 80084cc:	e7f4      	b.n	80084b8 <__assert_func+0x14>
 80084ce:	bf00      	nop
 80084d0:	20000048 	.word	0x20000048
 80084d4:	080089d6 	.word	0x080089d6
 80084d8:	080089a8 	.word	0x080089a8
 80084dc:	0800899b 	.word	0x0800899b

080084e0 <_calloc_r>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	fba1 5402 	umull	r5, r4, r1, r2
 80084e6:	b93c      	cbnz	r4, 80084f8 <_calloc_r+0x18>
 80084e8:	4629      	mov	r1, r5
 80084ea:	f7ff f92d 	bl	8007748 <_malloc_r>
 80084ee:	4606      	mov	r6, r0
 80084f0:	b928      	cbnz	r0, 80084fe <_calloc_r+0x1e>
 80084f2:	2600      	movs	r6, #0
 80084f4:	4630      	mov	r0, r6
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	220c      	movs	r2, #12
 80084fa:	6002      	str	r2, [r0, #0]
 80084fc:	e7f9      	b.n	80084f2 <_calloc_r+0x12>
 80084fe:	462a      	mov	r2, r5
 8008500:	4621      	mov	r1, r4
 8008502:	f7fe f9e0 	bl	80068c6 <memset>
 8008506:	e7f5      	b.n	80084f4 <_calloc_r+0x14>

08008508 <__ascii_mbtowc>:
 8008508:	b082      	sub	sp, #8
 800850a:	b901      	cbnz	r1, 800850e <__ascii_mbtowc+0x6>
 800850c:	a901      	add	r1, sp, #4
 800850e:	b142      	cbz	r2, 8008522 <__ascii_mbtowc+0x1a>
 8008510:	b14b      	cbz	r3, 8008526 <__ascii_mbtowc+0x1e>
 8008512:	7813      	ldrb	r3, [r2, #0]
 8008514:	600b      	str	r3, [r1, #0]
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	1e10      	subs	r0, r2, #0
 800851a:	bf18      	it	ne
 800851c:	2001      	movne	r0, #1
 800851e:	b002      	add	sp, #8
 8008520:	4770      	bx	lr
 8008522:	4610      	mov	r0, r2
 8008524:	e7fb      	b.n	800851e <__ascii_mbtowc+0x16>
 8008526:	f06f 0001 	mvn.w	r0, #1
 800852a:	e7f8      	b.n	800851e <__ascii_mbtowc+0x16>

0800852c <__ascii_wctomb>:
 800852c:	4603      	mov	r3, r0
 800852e:	4608      	mov	r0, r1
 8008530:	b141      	cbz	r1, 8008544 <__ascii_wctomb+0x18>
 8008532:	2aff      	cmp	r2, #255	@ 0xff
 8008534:	d904      	bls.n	8008540 <__ascii_wctomb+0x14>
 8008536:	228a      	movs	r2, #138	@ 0x8a
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	4770      	bx	lr
 8008540:	700a      	strb	r2, [r1, #0]
 8008542:	2001      	movs	r0, #1
 8008544:	4770      	bx	lr
	...

08008548 <fiprintf>:
 8008548:	b40e      	push	{r1, r2, r3}
 800854a:	b503      	push	{r0, r1, lr}
 800854c:	4601      	mov	r1, r0
 800854e:	ab03      	add	r3, sp, #12
 8008550:	4805      	ldr	r0, [pc, #20]	@ (8008568 <fiprintf+0x20>)
 8008552:	f853 2b04 	ldr.w	r2, [r3], #4
 8008556:	6800      	ldr	r0, [r0, #0]
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	f7ff fd2d 	bl	8007fb8 <_vfiprintf_r>
 800855e:	b002      	add	sp, #8
 8008560:	f85d eb04 	ldr.w	lr, [sp], #4
 8008564:	b003      	add	sp, #12
 8008566:	4770      	bx	lr
 8008568:	20000048 	.word	0x20000048

0800856c <__swhatbuf_r>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	460c      	mov	r4, r1
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	2900      	cmp	r1, #0
 8008576:	b096      	sub	sp, #88	@ 0x58
 8008578:	4615      	mov	r5, r2
 800857a:	461e      	mov	r6, r3
 800857c:	da0d      	bge.n	800859a <__swhatbuf_r+0x2e>
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008584:	f04f 0100 	mov.w	r1, #0
 8008588:	bf14      	ite	ne
 800858a:	2340      	movne	r3, #64	@ 0x40
 800858c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008590:	2000      	movs	r0, #0
 8008592:	6031      	str	r1, [r6, #0]
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	b016      	add	sp, #88	@ 0x58
 8008598:	bd70      	pop	{r4, r5, r6, pc}
 800859a:	466a      	mov	r2, sp
 800859c:	f000 f848 	bl	8008630 <_fstat_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	dbec      	blt.n	800857e <__swhatbuf_r+0x12>
 80085a4:	9901      	ldr	r1, [sp, #4]
 80085a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085ae:	4259      	negs	r1, r3
 80085b0:	4159      	adcs	r1, r3
 80085b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085b6:	e7eb      	b.n	8008590 <__swhatbuf_r+0x24>

080085b8 <__smakebuf_r>:
 80085b8:	898b      	ldrh	r3, [r1, #12]
 80085ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085bc:	079d      	lsls	r5, r3, #30
 80085be:	4606      	mov	r6, r0
 80085c0:	460c      	mov	r4, r1
 80085c2:	d507      	bpl.n	80085d4 <__smakebuf_r+0x1c>
 80085c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	2301      	movs	r3, #1
 80085ce:	6163      	str	r3, [r4, #20]
 80085d0:	b003      	add	sp, #12
 80085d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d4:	ab01      	add	r3, sp, #4
 80085d6:	466a      	mov	r2, sp
 80085d8:	f7ff ffc8 	bl	800856c <__swhatbuf_r>
 80085dc:	9f00      	ldr	r7, [sp, #0]
 80085de:	4605      	mov	r5, r0
 80085e0:	4639      	mov	r1, r7
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7ff f8b0 	bl	8007748 <_malloc_r>
 80085e8:	b948      	cbnz	r0, 80085fe <__smakebuf_r+0x46>
 80085ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ee:	059a      	lsls	r2, r3, #22
 80085f0:	d4ee      	bmi.n	80085d0 <__smakebuf_r+0x18>
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	f043 0302 	orr.w	r3, r3, #2
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	e7e2      	b.n	80085c4 <__smakebuf_r+0xc>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	6020      	str	r0, [r4, #0]
 8008602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800860e:	b15b      	cbz	r3, 8008628 <__smakebuf_r+0x70>
 8008610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008614:	4630      	mov	r0, r6
 8008616:	f000 f81d 	bl	8008654 <_isatty_r>
 800861a:	b128      	cbz	r0, 8008628 <__smakebuf_r+0x70>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	431d      	orrs	r5, r3
 800862c:	81a5      	strh	r5, [r4, #12]
 800862e:	e7cf      	b.n	80085d0 <__smakebuf_r+0x18>

08008630 <_fstat_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d07      	ldr	r5, [pc, #28]	@ (8008650 <_fstat_r+0x20>)
 8008634:	2300      	movs	r3, #0
 8008636:	4604      	mov	r4, r0
 8008638:	4608      	mov	r0, r1
 800863a:	4611      	mov	r1, r2
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	f7f8 ff11 	bl	8001464 <_fstat>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d102      	bne.n	800864c <_fstat_r+0x1c>
 8008646:	682b      	ldr	r3, [r5, #0]
 8008648:	b103      	cbz	r3, 800864c <_fstat_r+0x1c>
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	bd38      	pop	{r3, r4, r5, pc}
 800864e:	bf00      	nop
 8008650:	200004e0 	.word	0x200004e0

08008654 <_isatty_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d06      	ldr	r5, [pc, #24]	@ (8008670 <_isatty_r+0x1c>)
 8008658:	2300      	movs	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f8 ff10 	bl	8001484 <_isatty>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_isatty_r+0x1a>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_isatty_r+0x1a>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	200004e0 	.word	0x200004e0

08008674 <abort>:
 8008674:	b508      	push	{r3, lr}
 8008676:	2006      	movs	r0, #6
 8008678:	f000 f82c 	bl	80086d4 <raise>
 800867c:	2001      	movs	r0, #1
 800867e:	f7f8 fea1 	bl	80013c4 <_exit>

08008682 <_raise_r>:
 8008682:	291f      	cmp	r1, #31
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4605      	mov	r5, r0
 8008688:	460c      	mov	r4, r1
 800868a:	d904      	bls.n	8008696 <_raise_r+0x14>
 800868c:	2316      	movs	r3, #22
 800868e:	6003      	str	r3, [r0, #0]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008698:	b112      	cbz	r2, 80086a0 <_raise_r+0x1e>
 800869a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800869e:	b94b      	cbnz	r3, 80086b4 <_raise_r+0x32>
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 f831 	bl	8008708 <_getpid_r>
 80086a6:	4622      	mov	r2, r4
 80086a8:	4601      	mov	r1, r0
 80086aa:	4628      	mov	r0, r5
 80086ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b0:	f000 b818 	b.w	80086e4 <_kill_r>
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d00a      	beq.n	80086ce <_raise_r+0x4c>
 80086b8:	1c59      	adds	r1, r3, #1
 80086ba:	d103      	bne.n	80086c4 <_raise_r+0x42>
 80086bc:	2316      	movs	r3, #22
 80086be:	6003      	str	r3, [r0, #0]
 80086c0:	2001      	movs	r0, #1
 80086c2:	e7e7      	b.n	8008694 <_raise_r+0x12>
 80086c4:	2100      	movs	r1, #0
 80086c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086ca:	4620      	mov	r0, r4
 80086cc:	4798      	blx	r3
 80086ce:	2000      	movs	r0, #0
 80086d0:	e7e0      	b.n	8008694 <_raise_r+0x12>
	...

080086d4 <raise>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	@ (80086e0 <raise+0xc>)
 80086d6:	4601      	mov	r1, r0
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	f7ff bfd2 	b.w	8008682 <_raise_r>
 80086de:	bf00      	nop
 80086e0:	20000048 	.word	0x20000048

080086e4 <_kill_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d07      	ldr	r5, [pc, #28]	@ (8008704 <_kill_r+0x20>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	f7f8 fe57 	bl	80013a4 <_kill>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d102      	bne.n	8008700 <_kill_r+0x1c>
 80086fa:	682b      	ldr	r3, [r5, #0]
 80086fc:	b103      	cbz	r3, 8008700 <_kill_r+0x1c>
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	200004e0 	.word	0x200004e0

08008708 <_getpid_r>:
 8008708:	f7f8 be44 	b.w	8001394 <_getpid>

0800870c <_init>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr

08008718 <_fini>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr
