
HoverCharge_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b80  08004b80  00005b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb8  08004bb8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb8  08004bb8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb8  08004bb8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb8  08004bb8  00005bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bbc  08004bbc  00005bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bc0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000220  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb4e  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000204e  00000000  00000000  00015b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00017bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af6  00000000  00000000  000189b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5b8  00000000  00000000  000194ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d3a  00000000  00000000  00034a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a831c  00000000  00000000  000467a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eeabc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aa4  00000000  00000000  000eeb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000f25a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b68 	.word	0x08004b68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004b68 	.word	0x08004b68

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fcc8 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa5e 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 fa36 	bl	8000648 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 fa04 	bl	80005e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80001e0:	f000 f94a 	bl	8000478 <MX_TIM1_Init>
  MX_ADC1_Init();
 80001e4:	f000 f85e 	bl	80002a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e8:	f000 f8da 	bl	80003a0 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	bf00      	nop
 80001ee:	e7fd      	b.n	80001ec <main+0x24>

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b096      	sub	sp, #88	@ 0x58
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f004 fc85 	bl	8004b0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 031c 	add.w	r3, r7, #28
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]
 8000222:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	2302      	movs	r3, #2
 8000226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022c:	2310      	movs	r3, #16
 800022e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000238:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800023c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fdfc 	bl	8001e40 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800024e:	f000 fa59 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000262:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	f107 031c 	add.w	r3, r7, #28
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fe24 	bl	8002ebc <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800027a:	f000 fa43 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800027e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000282:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000284:	2300      	movs	r3, #0
 8000286:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f003 f84c 	bl	8003328 <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000296:	f000 fa35 	bl	8000704 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	@ 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	@ 0x28
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002aa:	f107 031c 	add.w	r3, r7, #28
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
 80002c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c6:	4b35      	ldr	r3, [pc, #212]	@ (800039c <MX_ADC1_Init+0xf8>)
 80002c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80002ce:	4b33      	ldr	r3, [pc, #204]	@ (800039c <MX_ADC1_Init+0xf8>)
 80002d0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d6:	4b31      	ldr	r3, [pc, #196]	@ (800039c <MX_ADC1_Init+0xf8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002dc:	4b2f      	ldr	r3, [pc, #188]	@ (800039c <MX_ADC1_Init+0xf8>)
 80002de:	2201      	movs	r2, #1
 80002e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e2:	4b2e      	ldr	r3, [pc, #184]	@ (800039c <MX_ADC1_Init+0xf8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e8:	4b2c      	ldr	r3, [pc, #176]	@ (800039c <MX_ADC1_Init+0xf8>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80002f0:	4b2a      	ldr	r3, [pc, #168]	@ (800039c <MX_ADC1_Init+0xf8>)
 80002f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80002f8:	4b28      	ldr	r3, [pc, #160]	@ (800039c <MX_ADC1_Init+0xf8>)
 80002fa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80002fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <MX_ADC1_Init+0xf8>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000306:	4b25      	ldr	r3, [pc, #148]	@ (800039c <MX_ADC1_Init+0xf8>)
 8000308:	2202      	movs	r2, #2
 800030a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800030c:	4b23      	ldr	r3, [pc, #140]	@ (800039c <MX_ADC1_Init+0xf8>)
 800030e:	2201      	movs	r2, #1
 8000310:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000314:	4b21      	ldr	r3, [pc, #132]	@ (800039c <MX_ADC1_Init+0xf8>)
 8000316:	2204      	movs	r2, #4
 8000318:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800031a:	4b20      	ldr	r3, [pc, #128]	@ (800039c <MX_ADC1_Init+0xf8>)
 800031c:	2200      	movs	r2, #0
 800031e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000320:	4b1e      	ldr	r3, [pc, #120]	@ (800039c <MX_ADC1_Init+0xf8>)
 8000322:	2200      	movs	r2, #0
 8000324:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000326:	481d      	ldr	r0, [pc, #116]	@ (800039c <MX_ADC1_Init+0xf8>)
 8000328:	f000 fc80 	bl	8000c2c <HAL_ADC_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000332:	f000 f9e7 	bl	8000704 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800033a:	f107 031c 	add.w	r3, r7, #28
 800033e:	4619      	mov	r1, r3
 8000340:	4816      	ldr	r0, [pc, #88]	@ (800039c <MX_ADC1_Init+0xf8>)
 8000342:	f001 f8c3 	bl	80014cc <HAL_ADCEx_MultiModeConfigChannel>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800034c:	f000 f9da 	bl	8000704 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000350:	2301      	movs	r3, #1
 8000352:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000354:	2301      	movs	r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000358:	2300      	movs	r3, #0
 800035a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	480b      	ldr	r0, [pc, #44]	@ (800039c <MX_ADC1_Init+0xf8>)
 800036e:	f000 fdef 	bl	8000f50 <HAL_ADC_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000378:	f000 f9c4 	bl	8000704 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800037c:	2302      	movs	r3, #2
 800037e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_ADC1_Init+0xf8>)
 8000386:	f000 fde3 	bl	8000f50 <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000390:	f000 f9b8 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	3728      	adds	r7, #40	@ 0x28
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028

080003a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003a6:	463b      	mov	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000474 <MX_ADC2_Init+0xd4>)
 80003ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003ca:	4b29      	ldr	r3, [pc, #164]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003d0:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003d6:	4b26      	ldr	r3, [pc, #152]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003de:	4b24      	ldr	r3, [pc, #144]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80003e6:	4b22      	ldr	r3, [pc, #136]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003e8:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80003ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ee:	4b20      	ldr	r3, [pc, #128]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80003f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003f6:	2202      	movs	r2, #2
 80003f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80003fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000470 <MX_ADC2_Init+0xd0>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000402:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <MX_ADC2_Init+0xd0>)
 8000404:	2204      	movs	r2, #4
 8000406:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <MX_ADC2_Init+0xd0>)
 800040a:	2200      	movs	r2, #0
 800040c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800040e:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <MX_ADC2_Init+0xd0>)
 8000410:	2200      	movs	r2, #0
 8000412:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000414:	4816      	ldr	r0, [pc, #88]	@ (8000470 <MX_ADC2_Init+0xd0>)
 8000416:	f000 fc09 	bl	8000c2c <HAL_ADC_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000420:	f000 f970 	bl	8000704 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000424:	2301      	movs	r3, #1
 8000426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000428:	2301      	movs	r3, #1
 800042a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800043c:	463b      	mov	r3, r7
 800043e:	4619      	mov	r1, r3
 8000440:	480b      	ldr	r0, [pc, #44]	@ (8000470 <MX_ADC2_Init+0xd0>)
 8000442:	f000 fd85 	bl	8000f50 <HAL_ADC_ConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 800044c:	f000 f95a 	bl	8000704 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000450:	2302      	movs	r3, #2
 8000452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000454:	463b      	mov	r3, r7
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_ADC2_Init+0xd0>)
 800045a:	f000 fd79 	bl	8000f50 <HAL_ADC_ConfigChannel>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000464:	f000 f94e 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000078 	.word	0x20000078
 8000474:	50000100 	.word	0x50000100

08000478 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b09a      	sub	sp, #104	@ 0x68
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000498:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
 80004a6:	611a      	str	r2, [r3, #16]
 80004a8:	615a      	str	r2, [r3, #20]
 80004aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	222c      	movs	r2, #44	@ 0x2c
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f004 fb2b 	bl	8004b0e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b8:	4b49      	ldr	r3, [pc, #292]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80004ba:	4a4a      	ldr	r2, [pc, #296]	@ (80005e4 <MX_TIM1_Init+0x16c>)
 80004bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004be:	4b48      	ldr	r3, [pc, #288]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80004c4:	4b46      	ldr	r3, [pc, #280]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80004c6:	2220      	movs	r2, #32
 80004c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004ca:	4b45      	ldr	r3, [pc, #276]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80004cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d2:	4b43      	ldr	r3, [pc, #268]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80004d8:	4b41      	ldr	r3, [pc, #260]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80004da:	2201      	movs	r2, #1
 80004dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b40      	ldr	r3, [pc, #256]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004e4:	483e      	ldr	r0, [pc, #248]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80004e6:	f003 f845 	bl	8003574 <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004f0:	f000 f908 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004fe:	4619      	mov	r1, r3
 8000500:	4837      	ldr	r0, [pc, #220]	@ (80005e0 <MX_TIM1_Init+0x168>)
 8000502:	f003 fa03 	bl	800390c <HAL_TIM_ConfigClockSource>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800050c:	f000 f8fa 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000510:	4833      	ldr	r0, [pc, #204]	@ (80005e0 <MX_TIM1_Init+0x168>)
 8000512:	f003 f886 	bl	8003622 <HAL_TIM_PWM_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800051c:	f000 f8f2 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000520:	2320      	movs	r3, #32
 8000522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000524:	2300      	movs	r3, #0
 8000526:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800052c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000530:	4619      	mov	r1, r3
 8000532:	482b      	ldr	r0, [pc, #172]	@ (80005e0 <MX_TIM1_Init+0x168>)
 8000534:	f003 fe6c 	bl	8004210 <HAL_TIMEx_MasterConfigSynchronization>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800053e:	f000 f8e1 	bl	8000704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000542:	2360      	movs	r3, #96	@ 0x60
 8000544:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054a:	2300      	movs	r3, #0
 800054c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800054e:	2300      	movs	r3, #0
 8000550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000556:	2300      	movs	r3, #0
 8000558:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800055e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000562:	2200      	movs	r2, #0
 8000564:	4619      	mov	r1, r3
 8000566:	481e      	ldr	r0, [pc, #120]	@ (80005e0 <MX_TIM1_Init+0x168>)
 8000568:	f003 f8bc 	bl	80036e4 <HAL_TIM_PWM_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000572:	f000 f8c7 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000576:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800057a:	220c      	movs	r2, #12
 800057c:	4619      	mov	r1, r3
 800057e:	4818      	ldr	r0, [pc, #96]	@ (80005e0 <MX_TIM1_Init+0x168>)
 8000580:	f003 f8b0 	bl	80036e4 <HAL_TIM_PWM_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800058a:	f000 f8bb 	bl	8000704 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 800059a:	2332      	movs	r3, #50	@ 0x32
 800059c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80005c4:	f003 fe92 	bl	80042ec <HAL_TIMEx_ConfigBreakDeadTime>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80005ce:	f000 f899 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005d2:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <MX_TIM1_Init+0x168>)
 80005d4:	f000 f9b6 	bl	8000944 <HAL_TIM_MspPostInit>

}
 80005d8:	bf00      	nop
 80005da:	3768      	adds	r7, #104	@ 0x68
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000150 	.word	0x20000150
 80005e4:	40012c00 	.word	0x40012c00

080005e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 80005ee:	4a15      	ldr	r2, [pc, #84]	@ (8000644 <MX_USART2_UART_Init+0x5c>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_USART2_UART_Init+0x58>)
 800062c:	f003 fed6 	bl	80043dc <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 f865 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000019c 	.word	0x2000019c
 8000644:	40004400 	.word	0x40004400

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <MX_DMA_Init+0x48>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <MX_DMA_Init+0x48>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <MX_DMA_Init+0x48>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	200b      	movs	r0, #11
 800066c:	f001 f935 	bl	80018da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000670:	200b      	movs	r0, #11
 8000672:	f001 f94e 	bl	8001912 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200c      	movs	r0, #12
 800067c:	f001 f92d 	bl	80018da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000680:	200c      	movs	r0, #12
 8000682:	f001 f946 	bl	8001912 <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_GPIO_Init+0x68>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <MX_GPIO_Init+0x68>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_GPIO_Init+0x68>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_GPIO_Init+0x68>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <MX_GPIO_Init+0x68>)
 80006c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <MX_GPIO_Init+0x68>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : TAD_ZERO_CROSSING_Pin */
  GPIO_InitStruct.Pin = TAD_ZERO_CROSSING_Pin;
 80006da:	2340      	movs	r3, #64	@ 0x40
 80006dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TAD_ZERO_CROSSING_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_GPIO_Init+0x6c>)
 80006ee:	f001 fa35 	bl	8001b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <HAL_MspInit+0x44>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a0e      	ldr	r2, [pc, #56]	@ (8000754 <HAL_MspInit+0x44>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_MspInit+0x44>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_MspInit+0x44>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_MspInit+0x44>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_MspInit+0x44>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	@ 0x30
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000778:	d156      	bne.n	8000828 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800077a:	4b5b      	ldr	r3, [pc, #364]	@ (80008e8 <HAL_ADC_MspInit+0x190>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	4a59      	ldr	r2, [pc, #356]	@ (80008e8 <HAL_ADC_MspInit+0x190>)
 8000782:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000784:	4b58      	ldr	r3, [pc, #352]	@ (80008e8 <HAL_ADC_MspInit+0x190>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10b      	bne.n	80007a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800078c:	4b57      	ldr	r3, [pc, #348]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	4a56      	ldr	r2, [pc, #344]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6153      	str	r3, [r2, #20]
 8000798:	4b54      	ldr	r3, [pc, #336]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b51      	ldr	r3, [pc, #324]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a50      	ldr	r2, [pc, #320]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 80007aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ae:	6153      	str	r3, [r2, #20]
 80007b0:	4b4e      	ldr	r3, [pc, #312]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = V_DCDC_OUT_Pin|I_DCDC_OUT_Pin|GPIO_PIN_3;
 80007bc:	230b      	movs	r3, #11
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c0:	2303      	movs	r3, #3
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d2:	f001 f9c3 	bl	8001b5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007d6:	4b46      	ldr	r3, [pc, #280]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 80007d8:	4a46      	ldr	r2, [pc, #280]	@ (80008f4 <HAL_ADC_MspInit+0x19c>)
 80007da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007dc:	4b44      	ldr	r3, [pc, #272]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e2:	4b43      	ldr	r3, [pc, #268]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007e8:	4b41      	ldr	r3, [pc, #260]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 80007ea:	2280      	movs	r2, #128	@ 0x80
 80007ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ee:	4b40      	ldr	r3, [pc, #256]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 80007f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007f6:	4b3e      	ldr	r3, [pc, #248]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 80007f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007fe:	4b3c      	ldr	r3, [pc, #240]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 8000800:	2220      	movs	r2, #32
 8000802:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000804:	4b3a      	ldr	r3, [pc, #232]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800080a:	4839      	ldr	r0, [pc, #228]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 800080c:	f001 f89b 	bl	8001946 <HAL_DMA_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000816:	f7ff ff75 	bl	8000704 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a34      	ldr	r2, [pc, #208]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 800081e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000820:	4a33      	ldr	r2, [pc, #204]	@ (80008f0 <HAL_ADC_MspInit+0x198>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000826:	e05a      	b.n	80008de <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a32      	ldr	r2, [pc, #200]	@ (80008f8 <HAL_ADC_MspInit+0x1a0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d155      	bne.n	80008de <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000832:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <HAL_ADC_MspInit+0x190>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a2b      	ldr	r2, [pc, #172]	@ (80008e8 <HAL_ADC_MspInit+0x190>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800083c:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <HAL_ADC_MspInit+0x190>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000844:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084e:	6153      	str	r3, [r2, #20]
 8000850:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	4a22      	ldr	r2, [pc, #136]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 8000862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000866:	6153      	str	r3, [r2, #20]
 8000868:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <HAL_ADC_MspInit+0x194>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I_IND_Pin|I_DCAC_OUT_Pin;
 8000874:	2330      	movs	r3, #48	@ 0x30
 8000876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	2303      	movs	r3, #3
 800087a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f001 f967 	bl	8001b5c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <HAL_ADC_MspInit+0x1a8>)
 8000892:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 80008a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ac:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 80008b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008b4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 80008b8:	2220      	movs	r2, #32
 80008ba:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 80008c4:	f001 f83f 	bl	8001946 <HAL_DMA_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 80008ce:	f7ff ff19 	bl	8000704 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a09      	ldr	r2, [pc, #36]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 80008d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80008d8:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_ADC_MspInit+0x1a4>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	@ 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000224 	.word	0x20000224
 80008ec:	40021000 	.word	0x40021000
 80008f0:	200000c8 	.word	0x200000c8
 80008f4:	40020008 	.word	0x40020008
 80008f8:	50000100 	.word	0x50000100
 80008fc:	2000010c 	.word	0x2000010c
 8000900:	4002001c 	.word	0x4002001c

08000904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <HAL_TIM_Base_MspInit+0x38>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d10b      	bne.n	800092e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 800091c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40012c00 	.word	0x40012c00
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <HAL_TIM_MspPostInit+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12f      	bne.n	80009c6 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <HAL_TIM_MspPostInit+0x90>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a1a      	ldr	r2, [pc, #104]	@ (80009d4 <HAL_TIM_MspPostInit+0x90>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <HAL_TIM_MspPostInit+0x90>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800097e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000982:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000990:	2306      	movs	r3, #6
 8000992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099e:	f001 f8dd 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80009b4:	230b      	movs	r3, #11
 80009b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c2:	f001 f8cb 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <HAL_UART_MspInit+0x80>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d129      	bne.n	8000a4e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <HAL_UART_MspInit+0x84>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <HAL_UART_MspInit+0x84>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <HAL_UART_MspInit+0x84>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_UART_MspInit+0x84>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	4a11      	ldr	r2, [pc, #68]	@ (8000a5c <HAL_UART_MspInit+0x84>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1c:	6153      	str	r3, [r2, #20]
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_UART_MspInit+0x84>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000a2a:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4a:	f001 f887 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <MemManage_Handler+0x4>

08000a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f899 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ac6:	f000 ff85 	bl	80019d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000c8 	.word	0x200000c8

08000ad4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <DMA1_Channel2_IRQHandler+0x10>)
 8000ada:	f000 ff7b 	bl	80019d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000010c 	.word	0x2000010c

08000ae8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff ffea 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	@ (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f003 fff1 	bl	8004b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff fb43 	bl	80001c8 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b50:	08004bc0 	.word	0x08004bc0
  ldr r2, =_sbss
 8000b54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b58:	2000022c 	.word	0x2000022c

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <HAL_Init+0x28>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_Init+0x28>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 fea7 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fdc8 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 febf 	bl	800192e <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 fe87 	bl	80018da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000228 	.word	0x20000228

08000c14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000228 	.word	0x20000228

08000c2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09a      	sub	sp, #104	@ 0x68
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e172      	b.n	8000f32 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d176      	bne.n	8000d4c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d152      	bne.n	8000d0c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fd69 	bl	8000758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d13b      	bne.n	8000d0c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 fcdf 	bl	8001658 <ADC_Disable>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d12f      	bne.n	8000d0c <HAL_ADC_Init+0xe0>
 8000cac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d12b      	bne.n	8000d0c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cbc:	f023 0302 	bic.w	r3, r3, #2
 8000cc0:	f043 0202 	orr.w	r2, r3, #2
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000cd6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ce6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ce8:	4b94      	ldr	r3, [pc, #592]	@ (8000f3c <HAL_ADC_Init+0x310>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a94      	ldr	r2, [pc, #592]	@ (8000f40 <HAL_ADC_Init+0x314>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9a      	lsrs	r2, r3, #18
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cfe:	e002      	b.n	8000d06 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f9      	bne.n	8000d00 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d28:	d110      	bne.n	8000d4c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f023 0312 	bic.w	r3, r3, #18
 8000d32:	f043 0210 	orr.w	r2, r3, #16
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f043 0201 	orr.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f040 80df 	bne.w	8000f18 <HAL_ADC_Init+0x2ec>
 8000d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 80da 	bne.w	8000f18 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 80d2 	bne.w	8000f18 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000d7c:	f043 0202 	orr.w	r2, r3, #2
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d84:	4b6f      	ldr	r3, [pc, #444]	@ (8000f44 <HAL_ADC_Init+0x318>)
 8000d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d90:	d102      	bne.n	8000d98 <HAL_ADC_Init+0x16c>
 8000d92:	4b6d      	ldr	r3, [pc, #436]	@ (8000f48 <HAL_ADC_Init+0x31c>)
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e002      	b.n	8000d9e <HAL_ADC_Init+0x172>
 8000d98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d9c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d108      	bne.n	8000dbe <HAL_ADC_Init+0x192>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_ADC_Init+0x192>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <HAL_ADC_Init+0x194>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d11c      	bne.n	8000dfe <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d010      	beq.n	8000dec <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d107      	bne.n	8000de6 <HAL_ADC_Init+0x1ba>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Init+0x1ba>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_ADC_Init+0x1bc>
 8000de6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d108      	bne.n	8000dfe <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dfc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7e5b      	ldrb	r3, [r3, #25]
 8000e02:	035b      	lsls	r3, r3, #13
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e08:	2a01      	cmp	r2, #1
 8000e0a:	d002      	beq.n	8000e12 <HAL_ADC_Init+0x1e6>
 8000e0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e10:	e000      	b.n	8000e14 <HAL_ADC_Init+0x1e8>
 8000e12:	2200      	movs	r2, #0
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e24:	4313      	orrs	r3, r2
 8000e26:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d11b      	bne.n	8000e6a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7e5b      	ldrb	r3, [r3, #25]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	045a      	lsls	r2, r3, #17
 8000e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e44:	4313      	orrs	r3, r2
 8000e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e4c:	e00d      	b.n	8000e6a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000e56:	f043 0220 	orr.w	r2, r3, #32
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f043 0201 	orr.w	r2, r3, #1
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d007      	beq.n	8000e82 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d114      	bne.n	8000eba <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e9e:	f023 0302 	bic.w	r3, r3, #2
 8000ea2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7e1b      	ldrb	r3, [r3, #24]
 8000ea8:	039a      	lsls	r2, r3, #14
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <HAL_ADC_Init+0x320>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	f023 010f 	bic.w	r1, r3, #15
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eee:	e007      	b.n	8000f00 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 020f 	bic.w	r2, r2, #15
 8000efe:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f023 0303 	bic.w	r3, r3, #3
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f16:	e00a      	b.n	8000f2e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	f023 0312 	bic.w	r3, r3, #18
 8000f20:	f043 0210 	orr.w	r2, r3, #16
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3768      	adds	r7, #104	@ 0x68
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	431bde83 	.word	0x431bde83
 8000f44:	50000300 	.word	0x50000300
 8000f48:	50000100 	.word	0x50000100
 8000f4c:	fff0c007 	.word	0xfff0c007

08000f50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b09b      	sub	sp, #108	@ 0x6c
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d101      	bne.n	8000f72 <HAL_ADC_ConfigChannel+0x22>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e2a1      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x566>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f040 8285 	bne.w	8001494 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d81c      	bhi.n	8000fcc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	231f      	movs	r3, #31
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4019      	ands	r1, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fca:	e063      	b.n	8001094 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b09      	cmp	r3, #9
 8000fd2:	d81e      	bhi.n	8001012 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	3b1e      	subs	r3, #30
 8000fe8:	221f      	movs	r2, #31
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4019      	ands	r1, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	3b1e      	subs	r3, #30
 8001004:	fa00 f203 	lsl.w	r2, r0, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001010:	e040      	b.n	8001094 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b0e      	cmp	r3, #14
 8001018:	d81e      	bhi.n	8001058 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	3b3c      	subs	r3, #60	@ 0x3c
 800102e:	221f      	movs	r2, #31
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	4019      	ands	r1, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	3b3c      	subs	r3, #60	@ 0x3c
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38
 8001056:	e01d      	b.n	8001094 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	3b5a      	subs	r3, #90	@ 0x5a
 800106c:	221f      	movs	r2, #31
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	4019      	ands	r1, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	3b5a      	subs	r3, #90	@ 0x5a
 8001088:	fa00 f203 	lsl.w	r2, r0, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 80e5 	bne.w	800126e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	d91c      	bls.n	80010e6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6999      	ldr	r1, [r3, #24]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	3b1e      	subs	r3, #30
 80010be:	2207      	movs	r2, #7
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4019      	ands	r1, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6898      	ldr	r0, [r3, #8]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	3b1e      	subs	r3, #30
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	619a      	str	r2, [r3, #24]
 80010e4:	e019      	b.n	800111a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6959      	ldr	r1, [r3, #20]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	2207      	movs	r2, #7
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	4019      	ands	r1, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6898      	ldr	r0, [r3, #8]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	fa00 f203 	lsl.w	r2, r0, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	3b01      	subs	r3, #1
 8001138:	2b03      	cmp	r3, #3
 800113a:	d84f      	bhi.n	80011dc <HAL_ADC_ConfigChannel+0x28c>
 800113c:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <HAL_ADC_ConfigChannel+0x1f4>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001155 	.word	0x08001155
 8001148:	08001177 	.word	0x08001177
 800114c:	08001199 	.word	0x08001199
 8001150:	080011bb 	.word	0x080011bb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800115a:	4b9c      	ldr	r3, [pc, #624]	@ (80013cc <HAL_ADC_ConfigChannel+0x47c>)
 800115c:	4013      	ands	r3, r2
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	0691      	lsls	r1, r2, #26
 8001164:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001166:	430a      	orrs	r2, r1
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001172:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001174:	e07b      	b.n	800126e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800117c:	4b93      	ldr	r3, [pc, #588]	@ (80013cc <HAL_ADC_ConfigChannel+0x47c>)
 800117e:	4013      	ands	r3, r2
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	0691      	lsls	r1, r2, #26
 8001186:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001188:	430a      	orrs	r2, r1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001194:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001196:	e06a      	b.n	800126e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800119e:	4b8b      	ldr	r3, [pc, #556]	@ (80013cc <HAL_ADC_ConfigChannel+0x47c>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	0691      	lsls	r1, r2, #26
 80011a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011aa:	430a      	orrs	r2, r1
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80011b6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011b8:	e059      	b.n	800126e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80011c0:	4b82      	ldr	r3, [pc, #520]	@ (80013cc <HAL_ADC_ConfigChannel+0x47c>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	0691      	lsls	r1, r2, #26
 80011ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011cc:	430a      	orrs	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80011d8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011da:	e048      	b.n	800126e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	069b      	lsls	r3, r3, #26
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d107      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011fe:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	069b      	lsls	r3, r3, #26
 8001210:	429a      	cmp	r2, r3
 8001212:	d107      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001222:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800122a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	069b      	lsls	r3, r3, #26
 8001234:	429a      	cmp	r2, r3
 8001236:	d107      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001246:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800124e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	069b      	lsls	r3, r3, #26
 8001258:	429a      	cmp	r2, r3
 800125a:	d107      	bne.n	800126c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800126a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800126c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <HAL_ADC_ConfigChannel+0x33e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_ADC_ConfigChannel+0x33e>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_ADC_ConfigChannel+0x340>
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	f040 810a 	bne.w	80014aa <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d00f      	beq.n	80012be <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2201      	movs	r2, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43da      	mvns	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	400a      	ands	r2, r1
 80012b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80012bc:	e049      	b.n	8001352 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	409a      	lsls	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d91c      	bls.n	800131a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6999      	ldr	r1, [r3, #24]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	3b1b      	subs	r3, #27
 80012f2:	2207      	movs	r2, #7
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4019      	ands	r1, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6898      	ldr	r0, [r3, #8]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	3b1b      	subs	r3, #27
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	619a      	str	r2, [r3, #24]
 8001318:	e01b      	b.n	8001352 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6959      	ldr	r1, [r3, #20]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	2207      	movs	r2, #7
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	4019      	ands	r1, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	6898      	ldr	r0, [r3, #8]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	fa00 f203 	lsl.w	r2, r0, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <HAL_ADC_ConfigChannel+0x480>)
 8001354:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b10      	cmp	r3, #16
 800135c:	d105      	bne.n	800136a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800135e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001366:	2b00      	cmp	r3, #0
 8001368:	d015      	beq.n	8001396 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800136e:	2b11      	cmp	r3, #17
 8001370:	d105      	bne.n	800137e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001382:	2b12      	cmp	r3, #18
 8001384:	f040 8091 	bne.w	80014aa <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 808a 	bne.w	80014aa <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800139e:	d102      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x456>
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_ADC_ConfigChannel+0x484>)
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e002      	b.n	80013ac <HAL_ADC_ConfigChannel+0x45c>
 80013a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013aa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d10e      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x488>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d107      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x488>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e006      	b.n	80013da <HAL_ADC_ConfigChannel+0x48a>
 80013cc:	83fff000 	.word	0x83fff000
 80013d0:	50000300 	.word	0x50000300
 80013d4:	50000100 	.word	0x50000100
 80013d8:	2300      	movs	r3, #0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d150      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013de:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d010      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d107      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x4b0>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x4b0>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_ADC_ConfigChannel+0x4b2>
 8001400:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001402:	2b00      	cmp	r3, #0
 8001404:	d13c      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d11d      	bne.n	800144a <HAL_ADC_ConfigChannel+0x4fa>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001416:	d118      	bne.n	800144a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001422:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001424:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <HAL_ADC_ConfigChannel+0x574>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <HAL_ADC_ConfigChannel+0x578>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0c9a      	lsrs	r2, r3, #18
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800143a:	e002      	b.n	8001442 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3b01      	subs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f9      	bne.n	800143c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001448:	e02e      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b11      	cmp	r3, #17
 8001450:	d10b      	bne.n	800146a <HAL_ADC_ConfigChannel+0x51a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800145a:	d106      	bne.n	800146a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800145c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001466:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001468:	e01e      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b12      	cmp	r3, #18
 8001470:	d11a      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800147a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800147c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800147e:	e013      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f043 0220 	orr.w	r2, r3, #32
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001492:	e00a      	b.n	80014aa <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f043 0220 	orr.w	r2, r3, #32
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80014a6:	e000      	b.n	80014aa <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014a8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	376c      	adds	r7, #108	@ 0x6c
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	431bde83 	.word	0x431bde83

080014cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b099      	sub	sp, #100	@ 0x64
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014e4:	d102      	bne.n	80014ec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80014e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001650 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	e002      	b.n	80014f2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80014ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014f0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0a2      	b.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001506:	2302      	movs	r3, #2
 8001508:	e09b      	b.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d17f      	bne.n	8001620 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d179      	bne.n	8001620 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800152c:	4b49      	ldr	r3, [pc, #292]	@ (8001654 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800152e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d040      	beq.n	80015ba <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800154a:	035b      	lsls	r3, r3, #13
 800154c:	430b      	orrs	r3, r1
 800154e:	431a      	orrs	r2, r3
 8001550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001552:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d108      	bne.n	8001574 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001574:	2300      	movs	r3, #0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d15c      	bne.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001596:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001598:	2b00      	cmp	r3, #0
 800159a:	d14b      	bne.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800159c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80015a4:	f023 030f 	bic.w	r3, r3, #15
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	6811      	ldr	r1, [r2, #0]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	6892      	ldr	r2, [r2, #8]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	431a      	orrs	r2, r3
 80015b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015b6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015b8:	e03c      	b.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80015ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015c4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d108      	bne.n	80015e6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80015e6:	2300      	movs	r3, #0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d123      	bne.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001608:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800160a:	2b00      	cmp	r3, #0
 800160c:	d112      	bne.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800160e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001616:	f023 030f 	bic.w	r3, r3, #15
 800161a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800161c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800161e:	e009      	b.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f043 0220 	orr.w	r2, r3, #32
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001632:	e000      	b.n	8001636 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001634:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800163e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001642:	4618      	mov	r0, r3
 8001644:	3764      	adds	r7, #100	@ 0x64
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	50000100 	.word	0x50000100
 8001654:	50000300 	.word	0x50000300

08001658 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d108      	bne.n	8001684 <ADC_Disable+0x2c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <ADC_Disable+0x2c>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <ADC_Disable+0x2e>
 8001684:	2300      	movs	r3, #0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d047      	beq.n	800171a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030d 	and.w	r3, r3, #13
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10f      	bne.n	80016b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0202 	orr.w	r2, r2, #2
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2203      	movs	r2, #3
 80016ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80016b0:	f7ff fab0 	bl	8000c14 <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016b6:	e029      	b.n	800170c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f043 0210 	orr.w	r2, r3, #16
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e023      	b.n	800171c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016d4:	f7ff fa9e 	bl	8000c14 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d914      	bls.n	800170c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d10d      	bne.n	800170c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f043 0210 	orr.w	r2, r3, #16
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001700:	f043 0201 	orr.w	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e007      	b.n	800171c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d0dc      	beq.n	80016d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	@ (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	@ (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	@ (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	@ 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	@ 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001890:	d301      	bcc.n	8001896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001892:	2301      	movs	r3, #1
 8001894:	e00f      	b.n	80018b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <SysTick_Config+0x40>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189e:	210f      	movs	r1, #15
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f7ff ff8e 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <SysTick_Config+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <SysTick_Config+0x40>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff29 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff3e 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff8e 	bl	8001818 <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5d 	bl	80017c4 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff31 	bl	8001788 <__NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffa2 	bl	8001880 <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e037      	b.n	80019cc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001972:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001976:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8b4 	bl	8001b1c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}  
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2204      	movs	r2, #4
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d024      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x72>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01f      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0204 	bic.w	r2, r2, #4
 8001a22:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06a      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a44:	e065      	b.n	8001b12 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d02c      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0xdc>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d027      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0320 	and.w	r3, r3, #32
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10b      	bne.n	8001a86 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 020a 	bic.w	r2, r2, #10
 8001a7c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8e:	2102      	movs	r1, #2
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d035      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001aae:	e030      	b.n	8001b12 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d028      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x13e>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d023      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020e 	bic.w	r2, r2, #14
 8001ad8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
    }
  }
}  
 8001b10:	e7ff      	b.n	8001b12 <HAL_DMA_IRQHandler+0x13e>
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <DMA_CalcBaseAndBitshift+0x34>)
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a09      	ldr	r2, [pc, #36]	@ (8001b54 <DMA_CalcBaseAndBitshift+0x38>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	009a      	lsls	r2, r3, #2
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a06      	ldr	r2, [pc, #24]	@ (8001b58 <DMA_CalcBaseAndBitshift+0x3c>)
 8001b40:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	bffdfff8 	.word	0xbffdfff8
 8001b54:	cccccccd 	.word	0xcccccccd
 8001b58:	40020000 	.word	0x40020000

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	e14e      	b.n	8001e0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8140 	beq.w	8001e04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d005      	beq.n	8001b9c <HAL_GPIO_Init+0x40>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d130      	bne.n	8001bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 0201 	and.w	r2, r3, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d017      	beq.n	8001c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d123      	bne.n	8001c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	6939      	ldr	r1, [r7, #16]
 8001c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0203 	and.w	r2, r3, #3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 809a 	beq.w	8001e04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd0:	4b55      	ldr	r3, [pc, #340]	@ (8001e28 <HAL_GPIO_Init+0x2cc>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <HAL_GPIO_Init+0x2cc>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b52      	ldr	r3, [pc, #328]	@ (8001e28 <HAL_GPIO_Init+0x2cc>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce8:	4a50      	ldr	r2, [pc, #320]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d12:	d013      	beq.n	8001d3c <HAL_GPIO_Init+0x1e0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a46      	ldr	r2, [pc, #280]	@ (8001e30 <HAL_GPIO_Init+0x2d4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x1dc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <HAL_GPIO_Init+0x2d8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x1d8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a44      	ldr	r2, [pc, #272]	@ (8001e38 <HAL_GPIO_Init+0x2dc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x1d4>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e006      	b.n	8001d3e <HAL_GPIO_Init+0x1e2>
 8001d30:	2305      	movs	r3, #5
 8001d32:	e004      	b.n	8001d3e <HAL_GPIO_Init+0x1e2>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x1e2>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_GPIO_Init+0x1e2>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	f002 0203 	and.w	r2, r2, #3
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	4093      	lsls	r3, r2
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d4e:	4937      	ldr	r1, [pc, #220]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d80:	4a2e      	ldr	r2, [pc, #184]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d86:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001daa:	4a24      	ldr	r2, [pc, #144]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dd4:	4a19      	ldr	r2, [pc, #100]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f47f aea9 	bne.w	8001b6c <HAL_GPIO_Init+0x10>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	48000400 	.word	0x48000400
 8001e34:	48000800 	.word	0x48000800
 8001e38:	48000c00 	.word	0x48000c00
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f001 b823 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 817d 	beq.w	8002176 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e7c:	4bbc      	ldr	r3, [pc, #752]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d00c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e88:	4bb9      	ldr	r3, [pc, #740]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d15c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x10e>
 8001e94:	4bb6      	ldr	r3, [pc, #728]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea0:	d155      	bne.n	8001f4e <HAL_RCC_OscConfig+0x10e>
 8001ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x94>
 8001ece:	4ba8      	ldr	r3, [pc, #672]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	e015      	b.n	8001f00 <HAL_RCC_OscConfig+0xc0>
 8001ed4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ed8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ee8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eec:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ef0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001efc:	4b9c      	ldr	r3, [pc, #624]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f04:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001f08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f0c:	fa92 f2a2 	rbit	r2, r2
 8001f10:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001f14:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f002 021f 	and.w	r2, r2, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 811f 	beq.w	8002174 <HAL_RCC_OscConfig+0x334>
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 8116 	bne.w	8002174 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f000 bfaf 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12e>
 8001f60:	4b83      	ldr	r3, [pc, #524]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a82      	ldr	r2, [pc, #520]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e036      	b.n	8001fdc <HAL_RCC_OscConfig+0x19c>
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x158>
 8001f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7b      	ldr	r2, [pc, #492]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b79      	ldr	r3, [pc, #484]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a78      	ldr	r2, [pc, #480]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e021      	b.n	8001fdc <HAL_RCC_OscConfig+0x19c>
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x184>
 8001faa:	4b71      	ldr	r3, [pc, #452]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a70      	ldr	r2, [pc, #448]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6d      	ldr	r2, [pc, #436]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0x19c>
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a69      	ldr	r2, [pc, #420]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b67      	ldr	r3, [pc, #412]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a66      	ldr	r2, [pc, #408]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fdc:	4b64      	ldr	r3, [pc, #400]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	f023 020f 	bic.w	r2, r3, #15
 8001fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	495f      	ldr	r1, [pc, #380]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d059      	beq.n	80020ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fe05 	bl	8000c14 <HAL_GetTick>
 800200a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe fe00 	bl	8000c14 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	@ 0x64
 800201e:	d902      	bls.n	8002026 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	f000 bf43 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>
 8002026:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800202a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800203a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d102      	bne.n	8002058 <HAL_RCC_OscConfig+0x218>
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	e015      	b.n	8002084 <HAL_RCC_OscConfig+0x244>
 8002058:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800205c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800206c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002070:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002074:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002080:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002088:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800208c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002098:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 021f 	and.w	r2, r2, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ab      	beq.n	8002010 <HAL_RCC_OscConfig+0x1d0>
 80020b8:	e05d      	b.n	8002176 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe fdab 	bl	8000c14 <HAL_GetTick>
 80020be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c4:	f7fe fda6 	bl	8000c14 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	@ 0x64
 80020d2:	d902      	bls.n	80020da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f000 bee9 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>
 80020da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020de:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80020ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_RCC_OscConfig+0x2cc>
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	e015      	b.n	8002138 <HAL_RCC_OscConfig+0x2f8>
 800210c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002110:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002120:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002124:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002128:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_RCC_OscConfig+0x330>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800213c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002140:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800214c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f042 0220 	orr.w	r2, r2, #32
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f002 021f 	and.w	r2, r2, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ab      	bne.n	80020c4 <HAL_RCC_OscConfig+0x284>
 800216c:	e003      	b.n	8002176 <HAL_RCC_OscConfig+0x336>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 817d 	beq.w	8002486 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800218c:	4ba6      	ldr	r3, [pc, #664]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002198:	4ba3      	ldr	r3, [pc, #652]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d172      	bne.n	800228a <HAL_RCC_OscConfig+0x44a>
 80021a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d16c      	bne.n	800228a <HAL_RCC_OscConfig+0x44a>
 80021b0:	2302      	movs	r3, #2
 80021b2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80021c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <HAL_RCC_OscConfig+0x3a0>
 80021da:	4b93      	ldr	r3, [pc, #588]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e013      	b.n	8002208 <HAL_RCC_OscConfig+0x3c8>
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002204:	4b88      	ldr	r3, [pc, #544]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	2202      	movs	r2, #2
 800220a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800220e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002212:	fa92 f2a2 	rbit	r2, r2
 8002216:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800221a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800221e:	fab2 f282 	clz	r2, r2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f002 021f 	and.w	r2, r2, #31
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f202 	lsl.w	r2, r1, r2
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCC_OscConfig+0x410>
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d002      	beq.n	8002250 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f000 be2e 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b75      	ldr	r3, [pc, #468]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	21f8      	movs	r1, #248	@ 0xf8
 8002266:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800226e:	fa91 f1a1 	rbit	r1, r1
 8002272:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002276:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800227a:	fab1 f181 	clz	r1, r1
 800227e:	b2c9      	uxtb	r1, r1
 8002280:	408b      	lsls	r3, r1
 8002282:	4969      	ldr	r1, [pc, #420]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002288:	e0fd      	b.n	8002486 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8088 	beq.w	80023ac <HAL_RCC_OscConfig+0x56c>
 800229c:	2301      	movs	r3, #1
 800229e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80022ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	461a      	mov	r2, r3
 80022c4:	2301      	movs	r3, #1
 80022c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fca4 	bl	8000c14 <HAL_GetTick>
 80022cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fe fc9f 	bl	8000c14 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d902      	bls.n	80022e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	f000 bde2 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80022fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_RCC_OscConfig+0x4d8>
 8002312:	4b45      	ldr	r3, [pc, #276]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	e013      	b.n	8002340 <HAL_RCC_OscConfig+0x500>
 8002318:	2302      	movs	r3, #2
 800231a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002330:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800233c:	4b3a      	ldr	r3, [pc, #232]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	2202      	movs	r2, #2
 8002342:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002346:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800234a:	fa92 f2a2 	rbit	r2, r2
 800234e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002352:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002356:	fab2 f282 	clz	r2, r2
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f042 0220 	orr.w	r2, r2, #32
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	f002 021f 	and.w	r2, r2, #31
 8002366:	2101      	movs	r1, #1
 8002368:	fa01 f202 	lsl.w	r2, r1, r2
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0af      	beq.n	80022d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b2d      	ldr	r3, [pc, #180]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	21f8      	movs	r1, #248	@ 0xf8
 8002388:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002390:	fa91 f1a1 	rbit	r1, r1
 8002394:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002398:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800239c:	fab1 f181 	clz	r1, r1
 80023a0:	b2c9      	uxtb	r1, r1
 80023a2:	408b      	lsls	r3, r1
 80023a4:	4920      	ldr	r1, [pc, #128]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
 80023aa:	e06c      	b.n	8002486 <HAL_RCC_OscConfig+0x646>
 80023ac:	2301      	movs	r3, #1
 80023ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80023be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	461a      	mov	r2, r3
 80023d4:	2300      	movs	r3, #0
 80023d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fc1c 	bl	8000c14 <HAL_GetTick>
 80023dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fc17 	bl	8000c14 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d902      	bls.n	80023f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	f000 bd5a 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>
 80023f8:	2302      	movs	r3, #2
 80023fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800240a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d104      	bne.n	800242c <HAL_RCC_OscConfig+0x5ec>
 8002422:	4b01      	ldr	r3, [pc, #4]	@ (8002428 <HAL_RCC_OscConfig+0x5e8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	e015      	b.n	8002454 <HAL_RCC_OscConfig+0x614>
 8002428:	40021000 	.word	0x40021000
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800243e:	2302      	movs	r3, #2
 8002440:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002444:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002450:	4bc8      	ldr	r3, [pc, #800]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	2202      	movs	r2, #2
 8002456:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800245a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800245e:	fa92 f2a2 	rbit	r2, r2
 8002462:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002466:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800246a:	fab2 f282 	clz	r2, r2
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f042 0220 	orr.w	r2, r2, #32
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f002 021f 	and.w	r2, r2, #31
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f202 	lsl.w	r2, r1, r2
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ad      	bne.n	80023e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8110 	beq.w	80026bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d079      	beq.n	80025a0 <HAL_RCC_OscConfig+0x760>
 80024ac:	2301      	movs	r3, #1
 80024ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80024be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	4bab      	ldr	r3, [pc, #684]	@ (8002778 <HAL_RCC_OscConfig+0x938>)
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	461a      	mov	r2, r3
 80024d2:	2301      	movs	r3, #1
 80024d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7fe fb9d 	bl	8000c14 <HAL_GetTick>
 80024da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe fb98 	bl	8000c14 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d902      	bls.n	80024f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	f000 bcdb 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002510:	2202      	movs	r2, #2
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f2a3 	rbit	r2, r3
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002534:	2202      	movs	r2, #2
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800254e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002550:	4b88      	ldr	r3, [pc, #544]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 8002552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002558:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800255c:	2102      	movs	r1, #2
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f1a3 	rbit	r1, r3
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002576:	6019      	str	r1, [r3, #0]
  return result;
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0a0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x6a0>
 800259e:	e08d      	b.n	80026bc <HAL_RCC_OscConfig+0x87c>
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025c2:	601a      	str	r2, [r3, #0]
  return result;
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b68      	ldr	r3, [pc, #416]	@ (8002778 <HAL_RCC_OscConfig+0x938>)
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	461a      	mov	r2, r3
 80025de:	2300      	movs	r3, #0
 80025e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fb17 	bl	8000c14 <HAL_GetTick>
 80025e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fb12 	bl	8000c14 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d902      	bls.n	8002602 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	f000 bc55 	b.w	8002eac <HAL_RCC_OscConfig+0x106c>
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002652:	2202      	movs	r2, #2
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	fa93 f2a3 	rbit	r2, r3
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800266c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266e:	4b41      	ldr	r3, [pc, #260]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 8002670:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800267a:	2102      	movs	r1, #2
 800267c:	6019      	str	r1, [r3, #0]
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f1a3 	rbit	r1, r3
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002694:	6019      	str	r1, [r3, #0]
  return result;
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d197      	bne.n	80025ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 81a1 	beq.w	8002a14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d8:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d116      	bne.n	8002712 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b23      	ldr	r3, [pc, #140]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4a22      	ldr	r2, [pc, #136]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	61d3      	str	r3, [r2, #28]
 80026f0:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800270a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_RCC_OscConfig+0x93c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11a      	bne.n	8002754 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <HAL_RCC_OscConfig+0x93c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a16      	ldr	r2, [pc, #88]	@ (800277c <HAL_RCC_OscConfig+0x93c>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002728:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fa73 	bl	8000c14 <HAL_GetTick>
 800272e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	e009      	b.n	8002748 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002734:	f7fe fa6e 	bl	8000c14 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	@ 0x64
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e3b1      	b.n	8002eac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <HAL_RCC_OscConfig+0x93c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ef      	beq.n	8002734 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10d      	bne.n	8002780 <HAL_RCC_OscConfig+0x940>
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a02      	ldr	r2, [pc, #8]	@ (8002774 <HAL_RCC_OscConfig+0x934>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	e03c      	b.n	80027ec <HAL_RCC_OscConfig+0x9ac>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	10908120 	.word	0x10908120
 800277c:	40007000 	.word	0x40007000
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x96a>
 8002790:	4bc1      	ldr	r3, [pc, #772]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4ac0      	ldr	r2, [pc, #768]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	4bbe      	ldr	r3, [pc, #760]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4abd      	ldr	r2, [pc, #756]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e020      	b.n	80027ec <HAL_RCC_OscConfig+0x9ac>
 80027aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x994>
 80027ba:	4bb7      	ldr	r3, [pc, #732]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4ab6      	ldr	r2, [pc, #728]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6213      	str	r3, [r2, #32]
 80027c6:	4bb4      	ldr	r3, [pc, #720]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4ab3      	ldr	r2, [pc, #716]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x9ac>
 80027d4:	4bb0      	ldr	r3, [pc, #704]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4aaf      	ldr	r2, [pc, #700]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	4bad      	ldr	r3, [pc, #692]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4aac      	ldr	r2, [pc, #688]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8081 	beq.w	8002900 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe fa09 	bl	8000c14 <HAL_GetTick>
 8002802:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fa04 	bl	8000c14 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e345      	b.n	8002eac <HAL_RCC_OscConfig+0x106c>
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002828:	2202      	movs	r2, #2
 800282a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800284c:	2202      	movs	r2, #2
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002854:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002866:	601a      	str	r2, [r3, #0]
  return result;
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002870:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d102      	bne.n	800288c <HAL_RCC_OscConfig+0xa4c>
 8002886:	4b84      	ldr	r3, [pc, #528]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	e013      	b.n	80028b4 <HAL_RCC_OscConfig+0xa74>
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002894:	2202      	movs	r2, #2
 8002896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	4b79      	ldr	r3, [pc, #484]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80028bc:	2102      	movs	r1, #2
 80028be:	6011      	str	r1, [r2, #0]
 80028c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028c4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	fa92 f1a2 	rbit	r1, r2
 80028ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028d6:	6011      	str	r1, [r2, #0]
  return result;
 80028d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028dc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d084      	beq.n	8002808 <HAL_RCC_OscConfig+0x9c8>
 80028fe:	e07f      	b.n	8002a00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7fe f988 	bl	8000c14 <HAL_GetTick>
 8002904:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	e00b      	b.n	8002922 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe f983 	bl	8000c14 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e2c4      	b.n	8002eac <HAL_RCC_OscConfig+0x106c>
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800292a:	2202      	movs	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800294e:	2202      	movs	r2, #2
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002968:	601a      	str	r2, [r3, #0]
  return result;
 800296a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002972:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d102      	bne.n	800298e <HAL_RCC_OscConfig+0xb4e>
 8002988:	4b43      	ldr	r3, [pc, #268]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	e013      	b.n	80029b6 <HAL_RCC_OscConfig+0xb76>
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	4b39      	ldr	r3, [pc, #228]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80029be:	2102      	movs	r1, #2
 80029c0:	6011      	str	r1, [r2, #0]
 80029c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fa92 f1a2 	rbit	r1, r2
 80029d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029d8:	6011      	str	r1, [r2, #0]
  return result;
 80029da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029de:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f002 021f 	and.w	r2, r2, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d184      	bne.n	800290a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a00:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8242 	beq.w	8002eaa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a26:	4b1c      	ldr	r3, [pc, #112]	@ (8002a98 <HAL_RCC_OscConfig+0xc58>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	f000 8213 	beq.w	8002e5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	f040 8162 	bne.w	8002d0a <HAL_RCC_OscConfig+0xeca>
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a6a:	601a      	str	r2, [r3, #0]
  return result;
 8002a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	461a      	mov	r2, r3
 8002a88:	2300      	movs	r3, #0
 8002a8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f8c2 	bl	8000c14 <HAL_GetTick>
 8002a90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	e00c      	b.n	8002ab0 <HAL_RCC_OscConfig+0xc70>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe f8ba 	bl	8000c14 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1fd      	b.n	8002eac <HAL_RCC_OscConfig+0x106c>
 8002ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ab8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ad4:	601a      	str	r2, [r3, #0]
  return result;
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ade:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_OscConfig+0xcba>
 8002af4:	4bb0      	ldr	r3, [pc, #704]	@ (8002db8 <HAL_RCC_OscConfig+0xf78>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	e027      	b.n	8002b4a <HAL_RCC_OscConfig+0xd0a>
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b32:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	4b9c      	ldr	r3, [pc, #624]	@ (8002db8 <HAL_RCC_OscConfig+0xf78>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b4e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b52:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b56:	6011      	str	r1, [r2, #0]
 8002b58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b5c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	fa92 f1a2 	rbit	r1, r2
 8002b66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b6a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b6e:	6011      	str	r1, [r2, #0]
  return result;
 8002b70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b74:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	fab2 f282 	clz	r2, r2
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f042 0220 	orr.w	r2, r2, #32
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f002 021f 	and.w	r2, r2, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d182      	bne.n	8002a9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b96:	4b88      	ldr	r3, [pc, #544]	@ (8002db8 <HAL_RCC_OscConfig+0xf78>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	497f      	ldr	r1, [pc, #508]	@ (8002db8 <HAL_RCC_OscConfig+0xf78>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 8002bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002bc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bde:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002be2:	601a      	str	r2, [r3, #0]
  return result;
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bf8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2301      	movs	r3, #1
 8002c02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7fe f806 	bl	8000c14 <HAL_GetTick>
 8002c08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c0c:	e009      	b.n	8002c22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fe f801 	bl	8000c14 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e144      	b.n	8002eac <HAL_RCC_OscConfig+0x106c>
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_OscConfig+0xe2c>
 8002c66:	4b54      	ldr	r3, [pc, #336]	@ (8002db8 <HAL_RCC_OscConfig+0xf78>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e027      	b.n	8002cbc <HAL_RCC_OscConfig+0xe7c>
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fa93 f2a3 	rbit	r2, r3
 8002cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8002db8 <HAL_RCC_OscConfig+0xf78>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002cc4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cc8:	6011      	str	r1, [r2, #0]
 8002cca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cce:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	fa92 f1a2 	rbit	r1, r2
 8002cd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cdc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ce0:	6011      	str	r1, [r2, #0]
  return result;
 8002ce2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	fab2 f282 	clz	r2, r2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	f042 0220 	orr.w	r2, r2, #32
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	f002 021f 	and.w	r2, r2, #31
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d082      	beq.n	8002c0e <HAL_RCC_OscConfig+0xdce>
 8002d08:	e0cf      	b.n	8002eaa <HAL_RCC_OscConfig+0x106a>
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d2e:	601a      	str	r2, [r3, #0]
  return result;
 8002d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d34:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd ff60 	bl	8000c14 <HAL_GetTick>
 8002d54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d58:	e009      	b.n	8002d6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fd ff5b 	bl	8000c14 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e09e      	b.n	8002eac <HAL_RCC_OscConfig+0x106c>
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d92:	601a      	str	r2, [r3, #0]
  return result;
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d104      	bne.n	8002dbc <HAL_RCC_OscConfig+0xf7c>
 8002db2:	4b01      	ldr	r3, [pc, #4]	@ (8002db8 <HAL_RCC_OscConfig+0xf78>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	e029      	b.n	8002e0c <HAL_RCC_OscConfig+0xfcc>
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002dc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e02:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_RCC_OscConfig+0x1078>)
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e10:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e14:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e18:	6011      	str	r1, [r2, #0]
 8002e1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e1e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	fa92 f1a2 	rbit	r1, r2
 8002e28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e2c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e30:	6011      	str	r1, [r2, #0]
  return result;
 8002e32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e36:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	fab2 f282 	clz	r2, r2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f042 0220 	orr.w	r2, r2, #32
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f002 021f 	and.w	r2, r2, #31
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d180      	bne.n	8002d5a <HAL_RCC_OscConfig+0xf1a>
 8002e58:	e027      	b.n	8002eaa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e01e      	b.n	8002eac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <HAL_RCC_OscConfig+0x1078>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e7a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b09e      	sub	sp, #120	@ 0x78
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e162      	b.n	800319a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b90      	ldr	r3, [pc, #576]	@ (8003118 <HAL_RCC_ClockConfig+0x25c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d910      	bls.n	8002f04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8003118 <HAL_RCC_ClockConfig+0x25c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	498b      	ldr	r1, [pc, #556]	@ (8003118 <HAL_RCC_ClockConfig+0x25c>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b89      	ldr	r3, [pc, #548]	@ (8003118 <HAL_RCC_ClockConfig+0x25c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e14a      	b.n	800319a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b82      	ldr	r3, [pc, #520]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	497f      	ldr	r1, [pc, #508]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80dc 	beq.w	80030e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d13c      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xf6>
 8002f38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xa6>
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	e00f      	b.n	8002f82 <HAL_RCC_ClockConfig+0xc6>
 8002f62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f74:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f7e:	4b67      	ldr	r3, [pc, #412]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f86:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f8a:	fa92 f2a2 	rbit	r2, r2
 8002f8e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f92:	fab2 f282 	clz	r2, r2
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	f042 0220 	orr.w	r2, r2, #32
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	f002 021f 	and.w	r2, r2, #31
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d17b      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0f3      	b.n	800319a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d13c      	bne.n	8003034 <HAL_RCC_ClockConfig+0x178>
 8002fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fbe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d102      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x128>
 8002fde:	4b4f      	ldr	r3, [pc, #316]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	e00f      	b.n	8003004 <HAL_RCC_ClockConfig+0x148>
 8002fe4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ff6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003000:	4b46      	ldr	r3, [pc, #280]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003008:	63ba      	str	r2, [r7, #56]	@ 0x38
 800300a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800300c:	fa92 f2a2 	rbit	r2, r2
 8003010:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003012:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003014:	fab2 f282 	clz	r2, r2
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	f042 0220 	orr.w	r2, r2, #32
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f002 021f 	and.w	r2, r2, #31
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f202 	lsl.w	r2, r1, r2
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d13a      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b2      	b.n	800319a <HAL_RCC_ClockConfig+0x2de>
 8003034:	2302      	movs	r3, #2
 8003036:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d102      	bne.n	800305c <HAL_RCC_ClockConfig+0x1a0>
 8003056:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	e00d      	b.n	8003078 <HAL_RCC_ClockConfig+0x1bc>
 800305c:	2302      	movs	r3, #2
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	2302      	movs	r3, #2
 800306a:	623b      	str	r3, [r7, #32]
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	4b29      	ldr	r3, [pc, #164]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	2202      	movs	r2, #2
 800307a:	61ba      	str	r2, [r7, #24]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	fa92 f2a2 	rbit	r2, r2
 8003082:	617a      	str	r2, [r7, #20]
  return result;
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	fab2 f282 	clz	r2, r2
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f042 0220 	orr.w	r2, r2, #32
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f002 021f 	and.w	r2, r2, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e079      	b.n	800319a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	491a      	ldr	r1, [pc, #104]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fd fdac 	bl	8000c14 <HAL_GetTick>
 80030bc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fd fda8 	bl	8000c14 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e061      	b.n	800319a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_RCC_ClockConfig+0x260>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x25c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d214      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_RCC_ClockConfig+0x25c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0207 	bic.w	r2, r3, #7
 80030fe:	4906      	ldr	r1, [pc, #24]	@ (8003118 <HAL_RCC_ClockConfig+0x25c>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <HAL_RCC_ClockConfig+0x25c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e040      	b.n	800319a <HAL_RCC_ClockConfig+0x2de>
 8003118:	40022000 	.word	0x40022000
 800311c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <HAL_RCC_ClockConfig+0x2e8>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	491a      	ldr	r1, [pc, #104]	@ (80031a4 <HAL_RCC_ClockConfig+0x2e8>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314a:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <HAL_RCC_ClockConfig+0x2e8>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4912      	ldr	r1, [pc, #72]	@ (80031a4 <HAL_RCC_ClockConfig+0x2e8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800315e:	f000 f829 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003162:	4601      	mov	r1, r0
 8003164:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <HAL_RCC_ClockConfig+0x2e8>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800316c:	22f0      	movs	r2, #240	@ 0xf0
 800316e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	fa92 f2a2 	rbit	r2, r2
 8003176:	60fa      	str	r2, [r7, #12]
  return result;
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	40d3      	lsrs	r3, r2
 8003182:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <HAL_RCC_ClockConfig+0x2ec>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	fa21 f303 	lsr.w	r3, r1, r3
 800318a:	4a08      	ldr	r2, [pc, #32]	@ (80031ac <HAL_RCC_ClockConfig+0x2f0>)
 800318c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800318e:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <HAL_RCC_ClockConfig+0x2f4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fcfa 	bl	8000b8c <HAL_InitTick>
  
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3778      	adds	r7, #120	@ 0x78
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08004b80 	.word	0x08004b80
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b08b      	sub	sp, #44	@ 0x2c
 80031b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031ce:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x30>
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x36>
 80031e2:	e03c      	b.n	800325e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031e4:	4b24      	ldr	r3, [pc, #144]	@ (8003278 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031e6:	623b      	str	r3, [r7, #32]
      break;
 80031e8:	e03c      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80031f0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80031f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	fa92 f2a2 	rbit	r2, r2
 80031fc:	607a      	str	r2, [r7, #4]
  return result;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	fab2 f282 	clz	r2, r2
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	40d3      	lsrs	r3, r2
 8003208:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <HAL_RCC_GetSysClockFreq+0xc8>)
 800320a:	5cd3      	ldrb	r3, [r2, r3]
 800320c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800320e:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	220f      	movs	r2, #15
 8003218:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	fa92 f2a2 	rbit	r2, r2
 8003220:	60fa      	str	r2, [r7, #12]
  return result;
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	fab2 f282 	clz	r2, r2
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	40d3      	lsrs	r3, r2
 800322c:	4a14      	ldr	r2, [pc, #80]	@ (8003280 <HAL_RCC_GetSysClockFreq+0xcc>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800323c:	4a0e      	ldr	r2, [pc, #56]	@ (8003278 <HAL_RCC_GetSysClockFreq+0xc4>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	fbb2 f2f3 	udiv	r2, r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
 800324c:	e004      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4a0c      	ldr	r2, [pc, #48]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	623b      	str	r3, [r7, #32]
      break;
 800325c:	e002      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003260:	623b      	str	r3, [r7, #32]
      break;
 8003262:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003264:	6a3b      	ldr	r3, [r7, #32]
}
 8003266:	4618      	mov	r0, r3
 8003268:	372c      	adds	r7, #44	@ 0x2c
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	007a1200 	.word	0x007a1200
 800327c:	08004b98 	.word	0x08004b98
 8003280:	08004ba8 	.word	0x08004ba8
 8003284:	003d0900 	.word	0x003d0900

08003288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800328c:	4b03      	ldr	r3, [pc, #12]	@ (800329c <HAL_RCC_GetHCLKFreq+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032a6:	f7ff ffef 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 80032aa:	4601      	mov	r1, r0
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	fa92 f2a2 	rbit	r2, r2
 80032c0:	603a      	str	r2, [r7, #0]
  return result;
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	fab2 f282 	clz	r2, r2
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	40d3      	lsrs	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	@ (80032e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08004b90 	.word	0x08004b90

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032ea:	f7ff ffcd 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 80032ee:	4601      	mov	r1, r0
 80032f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80032f8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80032fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	fa92 f2a2 	rbit	r2, r2
 8003304:	603a      	str	r2, [r7, #0]
  return result;
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	fab2 f282 	clz	r2, r2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	40d3      	lsrs	r3, r2
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	08004b90 	.word	0x08004b90

08003328 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b092      	sub	sp, #72	@ 0x48
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80cd 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334c:	4b86      	ldr	r3, [pc, #536]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10e      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4b83      	ldr	r3, [pc, #524]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4a82      	ldr	r2, [pc, #520]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003362:	61d3      	str	r3, [r2, #28]
 8003364:	4b80      	ldr	r3, [pc, #512]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b7d      	ldr	r3, [pc, #500]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003382:	4b7a      	ldr	r3, [pc, #488]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a79      	ldr	r2, [pc, #484]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fd fc41 	bl	8000c14 <HAL_GetTick>
 8003392:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fd fc3d 	bl	8000c14 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b64      	cmp	r3, #100	@ 0x64
 80033a2:	d901      	bls.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0db      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b70      	ldr	r3, [pc, #448]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d07d      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d076      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d2:	4b65      	ldr	r3, [pc, #404]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80033ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	2301      	movs	r3, #1
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003404:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800340e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	4b55      	ldr	r3, [pc, #340]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	461a      	mov	r2, r3
 8003420:	2300      	movs	r3, #0
 8003422:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003424:	4a50      	ldr	r2, [pc, #320]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003428:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800342a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d045      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fd fbee 	bl	8000c14 <HAL_GetTick>
 8003438:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fd fbea 	bl	8000c14 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e086      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003452:	2302      	movs	r3, #2
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	61fb      	str	r3, [r7, #28]
  return result;
 800346a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f043 0302 	orr.w	r3, r3, #2
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d102      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003480:	4b39      	ldr	r3, [pc, #228]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	e007      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003486:	2302      	movs	r3, #2
 8003488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	4b35      	ldr	r3, [pc, #212]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	2202      	movs	r2, #2
 8003498:	613a      	str	r2, [r7, #16]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	fa92 f2a2 	rbit	r2, r2
 80034a0:	60fa      	str	r2, [r7, #12]
  return result;
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	f002 021f 	and.w	r2, r2, #31
 80034b4:	2101      	movs	r1, #1
 80034b6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0bd      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034c0:	4b29      	ldr	r3, [pc, #164]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4926      	ldr	r1, [pc, #152]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	491a      	ldr	r1, [pc, #104]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003500:	4313      	orrs	r3, r2
 8003502:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003510:	4b15      	ldr	r3, [pc, #84]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	f023 0210 	bic.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4912      	ldr	r1, [pc, #72]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800351e:	4313      	orrs	r3, r2
 8003520:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800352e:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	490b      	ldr	r1, [pc, #44]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800353c:	4313      	orrs	r3, r2
 800353e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003550:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	4903      	ldr	r1, [pc, #12]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800355a:	4313      	orrs	r3, r2
 800355c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3748      	adds	r7, #72	@ 0x48
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	40007000 	.word	0x40007000
 8003570:	10908100 	.word	0x10908100

08003574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e049      	b.n	800361a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd f9b2 	bl	8000904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4619      	mov	r1, r3
 80035b2:	4610      	mov	r0, r2
 80035b4:	f000 fa74 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e049      	b.n	80036c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d106      	bne.n	800364e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f841 	bl	80036d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f000 fa1d 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036fe:	2302      	movs	r3, #2
 8003700:	e0ff      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b14      	cmp	r3, #20
 800370e:	f200 80f0 	bhi.w	80038f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003712:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	0800376d 	.word	0x0800376d
 800371c:	080038f3 	.word	0x080038f3
 8003720:	080038f3 	.word	0x080038f3
 8003724:	080038f3 	.word	0x080038f3
 8003728:	080037ad 	.word	0x080037ad
 800372c:	080038f3 	.word	0x080038f3
 8003730:	080038f3 	.word	0x080038f3
 8003734:	080038f3 	.word	0x080038f3
 8003738:	080037ef 	.word	0x080037ef
 800373c:	080038f3 	.word	0x080038f3
 8003740:	080038f3 	.word	0x080038f3
 8003744:	080038f3 	.word	0x080038f3
 8003748:	0800382f 	.word	0x0800382f
 800374c:	080038f3 	.word	0x080038f3
 8003750:	080038f3 	.word	0x080038f3
 8003754:	080038f3 	.word	0x080038f3
 8003758:	08003871 	.word	0x08003871
 800375c:	080038f3 	.word	0x080038f3
 8003760:	080038f3 	.word	0x080038f3
 8003764:	080038f3 	.word	0x080038f3
 8003768:	080038b1 	.word	0x080038b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fa0c 	bl	8003b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0208 	orr.w	r2, r2, #8
 8003786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0204 	bic.w	r2, r2, #4
 8003796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6999      	ldr	r1, [r3, #24]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	619a      	str	r2, [r3, #24]
      break;
 80037aa:	e0a5      	b.n	80038f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fa72 	bl	8003c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6999      	ldr	r1, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	021a      	lsls	r2, r3, #8
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	619a      	str	r2, [r3, #24]
      break;
 80037ec:	e084      	b.n	80038f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fad1 	bl	8003d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0208 	orr.w	r2, r2, #8
 8003808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0204 	bic.w	r2, r2, #4
 8003818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69d9      	ldr	r1, [r3, #28]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	61da      	str	r2, [r3, #28]
      break;
 800382c:	e064      	b.n	80038f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fb2f 	bl	8003e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69d9      	ldr	r1, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	021a      	lsls	r2, r3, #8
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	61da      	str	r2, [r3, #28]
      break;
 800386e:	e043      	b.n	80038f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fb72 	bl	8003f60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0208 	orr.w	r2, r2, #8
 800388a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038ae:	e023      	b.n	80038f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fbb0 	bl	800401c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	021a      	lsls	r2, r3, #8
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038f0:	e002      	b.n	80038f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
      break;
 80038f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003900:	7dfb      	ldrb	r3, [r7, #23]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop

0800390c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_TIM_ConfigClockSource+0x1c>
 8003924:	2302      	movs	r3, #2
 8003926:	e0b6      	b.n	8003a96 <HAL_TIM_ConfigClockSource+0x18a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003946:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800394a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003964:	d03e      	beq.n	80039e4 <HAL_TIM_ConfigClockSource+0xd8>
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396a:	f200 8087 	bhi.w	8003a7c <HAL_TIM_ConfigClockSource+0x170>
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003972:	f000 8086 	beq.w	8003a82 <HAL_TIM_ConfigClockSource+0x176>
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397a:	d87f      	bhi.n	8003a7c <HAL_TIM_ConfigClockSource+0x170>
 800397c:	2b70      	cmp	r3, #112	@ 0x70
 800397e:	d01a      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0xaa>
 8003980:	2b70      	cmp	r3, #112	@ 0x70
 8003982:	d87b      	bhi.n	8003a7c <HAL_TIM_ConfigClockSource+0x170>
 8003984:	2b60      	cmp	r3, #96	@ 0x60
 8003986:	d050      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x11e>
 8003988:	2b60      	cmp	r3, #96	@ 0x60
 800398a:	d877      	bhi.n	8003a7c <HAL_TIM_ConfigClockSource+0x170>
 800398c:	2b50      	cmp	r3, #80	@ 0x50
 800398e:	d03c      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0xfe>
 8003990:	2b50      	cmp	r3, #80	@ 0x50
 8003992:	d873      	bhi.n	8003a7c <HAL_TIM_ConfigClockSource+0x170>
 8003994:	2b40      	cmp	r3, #64	@ 0x40
 8003996:	d058      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x13e>
 8003998:	2b40      	cmp	r3, #64	@ 0x40
 800399a:	d86f      	bhi.n	8003a7c <HAL_TIM_ConfigClockSource+0x170>
 800399c:	2b30      	cmp	r3, #48	@ 0x30
 800399e:	d064      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x15e>
 80039a0:	2b30      	cmp	r3, #48	@ 0x30
 80039a2:	d86b      	bhi.n	8003a7c <HAL_TIM_ConfigClockSource+0x170>
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d060      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x15e>
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d867      	bhi.n	8003a7c <HAL_TIM_ConfigClockSource+0x170>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d05c      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x15e>
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d05a      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x15e>
 80039b4:	e062      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039c6:	f000 fc03 	bl	80041d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	609a      	str	r2, [r3, #8]
      break;
 80039e2:	e04f      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f4:	f000 fbec 	bl	80041d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a06:	609a      	str	r2, [r3, #8]
      break;
 8003a08:	e03c      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a16:	461a      	mov	r2, r3
 8003a18:	f000 fb60 	bl	80040dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2150      	movs	r1, #80	@ 0x50
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fbb9 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003a28:	e02c      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a36:	461a      	mov	r2, r3
 8003a38:	f000 fb7f 	bl	800413a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2160      	movs	r1, #96	@ 0x60
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fba9 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003a48:	e01c      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	461a      	mov	r2, r3
 8003a58:	f000 fb40 	bl	80040dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2140      	movs	r1, #64	@ 0x40
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fb99 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003a68:	e00c      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f000 fb90 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003a7a:	e003      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a80:	e000      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a32      	ldr	r2, [pc, #200]	@ (8003b7c <TIM_Base_SetConfig+0xdc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_Base_SetConfig+0x28>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0x28>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b80 <TIM_Base_SetConfig+0xe0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a27      	ldr	r2, [pc, #156]	@ (8003b7c <TIM_Base_SetConfig+0xdc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <TIM_Base_SetConfig+0x6a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d00f      	beq.n	8003b0a <TIM_Base_SetConfig+0x6a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a24      	ldr	r2, [pc, #144]	@ (8003b80 <TIM_Base_SetConfig+0xe0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00b      	beq.n	8003b0a <TIM_Base_SetConfig+0x6a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <TIM_Base_SetConfig+0xe4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_Base_SetConfig+0x6a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <TIM_Base_SetConfig+0xe8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_Base_SetConfig+0x6a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a21      	ldr	r2, [pc, #132]	@ (8003b8c <TIM_Base_SetConfig+0xec>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d108      	bne.n	8003b1c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a0e      	ldr	r2, [pc, #56]	@ (8003b7c <TIM_Base_SetConfig+0xdc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <TIM_Base_SetConfig+0xc0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b84 <TIM_Base_SetConfig+0xe4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <TIM_Base_SetConfig+0xc0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0d      	ldr	r2, [pc, #52]	@ (8003b88 <TIM_Base_SetConfig+0xe8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_Base_SetConfig+0xc0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <TIM_Base_SetConfig+0xec>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800

08003b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0201 	bic.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 0302 	bic.w	r3, r3, #2
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a28      	ldr	r2, [pc, #160]	@ (8003c8c <TIM_OC1_SetConfig+0xfc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <TIM_OC1_SetConfig+0x78>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a27      	ldr	r2, [pc, #156]	@ (8003c90 <TIM_OC1_SetConfig+0x100>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_OC1_SetConfig+0x78>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a26      	ldr	r2, [pc, #152]	@ (8003c94 <TIM_OC1_SetConfig+0x104>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC1_SetConfig+0x78>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a25      	ldr	r2, [pc, #148]	@ (8003c98 <TIM_OC1_SetConfig+0x108>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10c      	bne.n	8003c22 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0308 	bic.w	r3, r3, #8
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a19      	ldr	r2, [pc, #100]	@ (8003c8c <TIM_OC1_SetConfig+0xfc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_OC1_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <TIM_OC1_SetConfig+0x100>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_OC1_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a17      	ldr	r2, [pc, #92]	@ (8003c94 <TIM_OC1_SetConfig+0x104>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_OC1_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a16      	ldr	r2, [pc, #88]	@ (8003c98 <TIM_OC1_SetConfig+0x108>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d111      	bne.n	8003c66 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40014400 	.word	0x40014400
 8003c98:	40014800 	.word	0x40014800

08003c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0210 	bic.w	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0320 	bic.w	r3, r3, #32
 8003cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a24      	ldr	r2, [pc, #144]	@ (8003d8c <TIM_OC2_SetConfig+0xf0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10d      	bne.n	8003d1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d8c <TIM_OC2_SetConfig+0xf0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_OC2_SetConfig+0xa0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1a      	ldr	r2, [pc, #104]	@ (8003d90 <TIM_OC2_SetConfig+0xf4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_OC2_SetConfig+0xa0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a19      	ldr	r2, [pc, #100]	@ (8003d94 <TIM_OC2_SetConfig+0xf8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC2_SetConfig+0xa0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a18      	ldr	r2, [pc, #96]	@ (8003d98 <TIM_OC2_SetConfig+0xfc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d113      	bne.n	8003d64 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d42:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d4a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40014400 	.word	0x40014400
 8003d98:	40014800 	.word	0x40014800

08003d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a23      	ldr	r2, [pc, #140]	@ (8003e88 <TIM_OC3_SetConfig+0xec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10d      	bne.n	8003e1a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e18:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e88 <TIM_OC3_SetConfig+0xec>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_OC3_SetConfig+0x9e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <TIM_OC3_SetConfig+0xf0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_OC3_SetConfig+0x9e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	@ (8003e90 <TIM_OC3_SetConfig+0xf4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_OC3_SetConfig+0x9e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a17      	ldr	r2, [pc, #92]	@ (8003e94 <TIM_OC3_SetConfig+0xf8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d113      	bne.n	8003e62 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800

08003e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	031b      	lsls	r3, r3, #12
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <TIM_OC4_SetConfig+0xb8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_OC4_SetConfig+0x7c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a15      	ldr	r2, [pc, #84]	@ (8003f54 <TIM_OC4_SetConfig+0xbc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_OC4_SetConfig+0x7c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <TIM_OC4_SetConfig+0xc0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_OC4_SetConfig+0x7c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a13      	ldr	r2, [pc, #76]	@ (8003f5c <TIM_OC4_SetConfig+0xc4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d109      	bne.n	8003f28 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	019b      	lsls	r3, r3, #6
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800

08003f60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003fa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a15      	ldr	r2, [pc, #84]	@ (800400c <TIM_OC5_SetConfig+0xac>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <TIM_OC5_SetConfig+0x72>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <TIM_OC5_SetConfig+0xb0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <TIM_OC5_SetConfig+0x72>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a13      	ldr	r2, [pc, #76]	@ (8004014 <TIM_OC5_SetConfig+0xb4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_OC5_SetConfig+0x72>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <TIM_OC5_SetConfig+0xb8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d109      	bne.n	8003fe6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800

0800401c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	051b      	lsls	r3, r3, #20
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <TIM_OC6_SetConfig+0xb0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_OC6_SetConfig+0x74>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a15      	ldr	r2, [pc, #84]	@ (80040d0 <TIM_OC6_SetConfig+0xb4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_OC6_SetConfig+0x74>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a14      	ldr	r2, [pc, #80]	@ (80040d4 <TIM_OC6_SetConfig+0xb8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_OC6_SetConfig+0x74>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a13      	ldr	r2, [pc, #76]	@ (80040d8 <TIM_OC6_SetConfig+0xbc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d109      	bne.n	80040a4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	029b      	lsls	r3, r3, #10
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800

080040dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0201 	bic.w	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f023 030a 	bic.w	r3, r3, #10
 8004118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413a:	b480      	push	{r7}
 800413c:	b087      	sub	sp, #28
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0210 	bic.w	r2, r3, #16
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f043 0307 	orr.w	r3, r3, #7
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004224:	2302      	movs	r3, #2
 8004226:	e054      	b.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004258:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a17      	ldr	r2, [pc, #92]	@ (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004290:	d009      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a13      	ldr	r2, [pc, #76]	@ (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10c      	bne.n	80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40014000 	.word	0x40014000

080042ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004304:	2302      	movs	r3, #2
 8004306:	e060      	b.n	80043ca <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a14      	ldr	r2, [pc, #80]	@ (80043d8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d115      	bne.n	80043b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	051b      	lsls	r3, r3, #20
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40012c00 	.word	0x40012c00

080043dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e040      	b.n	8004470 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fc faea 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	@ 0x24
 8004408:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f82c 	bl	8004478 <UART_SetConfig>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e022      	b.n	8004470 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f956 	bl	80046e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f9dd 	bl	8004828 <UART_CheckIdleState>
 800446e:	4603      	mov	r3, r0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b8a      	ldr	r3, [pc, #552]	@ (80046cc <UART_SetConfig+0x254>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6979      	ldr	r1, [r7, #20]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a78      	ldr	r2, [pc, #480]	@ (80046d0 <UART_SetConfig+0x258>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d120      	bne.n	8004536 <UART_SetConfig+0xbe>
 80044f4:	4b77      	ldr	r3, [pc, #476]	@ (80046d4 <UART_SetConfig+0x25c>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d817      	bhi.n	8004530 <UART_SetConfig+0xb8>
 8004500:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <UART_SetConfig+0x90>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	08004519 	.word	0x08004519
 800450c:	08004525 	.word	0x08004525
 8004510:	0800452b 	.word	0x0800452b
 8004514:	0800451f 	.word	0x0800451f
 8004518:	2300      	movs	r3, #0
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e01d      	b.n	800455a <UART_SetConfig+0xe2>
 800451e:	2302      	movs	r3, #2
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e01a      	b.n	800455a <UART_SetConfig+0xe2>
 8004524:	2304      	movs	r3, #4
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e017      	b.n	800455a <UART_SetConfig+0xe2>
 800452a:	2308      	movs	r3, #8
 800452c:	77fb      	strb	r3, [r7, #31]
 800452e:	e014      	b.n	800455a <UART_SetConfig+0xe2>
 8004530:	2310      	movs	r3, #16
 8004532:	77fb      	strb	r3, [r7, #31]
 8004534:	e011      	b.n	800455a <UART_SetConfig+0xe2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a67      	ldr	r2, [pc, #412]	@ (80046d8 <UART_SetConfig+0x260>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d102      	bne.n	8004546 <UART_SetConfig+0xce>
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e009      	b.n	800455a <UART_SetConfig+0xe2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a64      	ldr	r2, [pc, #400]	@ (80046dc <UART_SetConfig+0x264>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d102      	bne.n	8004556 <UART_SetConfig+0xde>
 8004550:	2300      	movs	r3, #0
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e001      	b.n	800455a <UART_SetConfig+0xe2>
 8004556:	2310      	movs	r3, #16
 8004558:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004562:	d15a      	bne.n	800461a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004564:	7ffb      	ldrb	r3, [r7, #31]
 8004566:	2b08      	cmp	r3, #8
 8004568:	d827      	bhi.n	80045ba <UART_SetConfig+0x142>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <UART_SetConfig+0xf8>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004595 	.word	0x08004595
 8004574:	0800459d 	.word	0x0800459d
 8004578:	080045a5 	.word	0x080045a5
 800457c:	080045bb 	.word	0x080045bb
 8004580:	080045ab 	.word	0x080045ab
 8004584:	080045bb 	.word	0x080045bb
 8004588:	080045bb 	.word	0x080045bb
 800458c:	080045bb 	.word	0x080045bb
 8004590:	080045b3 	.word	0x080045b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004594:	f7fe fe84 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 8004598:	61b8      	str	r0, [r7, #24]
        break;
 800459a:	e013      	b.n	80045c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800459c:	f7fe fea2 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 80045a0:	61b8      	str	r0, [r7, #24]
        break;
 80045a2:	e00f      	b.n	80045c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a4:	4b4e      	ldr	r3, [pc, #312]	@ (80046e0 <UART_SetConfig+0x268>)
 80045a6:	61bb      	str	r3, [r7, #24]
        break;
 80045a8:	e00c      	b.n	80045c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045aa:	f7fe fe03 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 80045ae:	61b8      	str	r0, [r7, #24]
        break;
 80045b0:	e008      	b.n	80045c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b6:	61bb      	str	r3, [r7, #24]
        break;
 80045b8:	e004      	b.n	80045c4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	77bb      	strb	r3, [r7, #30]
        break;
 80045c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d074      	beq.n	80046b4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	005a      	lsls	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b0f      	cmp	r3, #15
 80045e4:	d916      	bls.n	8004614 <UART_SetConfig+0x19c>
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ec:	d212      	bcs.n	8004614 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f023 030f 	bic.w	r3, r3, #15
 80045f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	b29a      	uxth	r2, r3
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	4313      	orrs	r3, r2
 8004608:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	89fa      	ldrh	r2, [r7, #14]
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	e04f      	b.n	80046b4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	77bb      	strb	r3, [r7, #30]
 8004618:	e04c      	b.n	80046b4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800461a:	7ffb      	ldrb	r3, [r7, #31]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d828      	bhi.n	8004672 <UART_SetConfig+0x1fa>
 8004620:	a201      	add	r2, pc, #4	@ (adr r2, 8004628 <UART_SetConfig+0x1b0>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	0800464d 	.word	0x0800464d
 800462c:	08004655 	.word	0x08004655
 8004630:	0800465d 	.word	0x0800465d
 8004634:	08004673 	.word	0x08004673
 8004638:	08004663 	.word	0x08004663
 800463c:	08004673 	.word	0x08004673
 8004640:	08004673 	.word	0x08004673
 8004644:	08004673 	.word	0x08004673
 8004648:	0800466b 	.word	0x0800466b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7fe fe28 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 8004650:	61b8      	str	r0, [r7, #24]
        break;
 8004652:	e013      	b.n	800467c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004654:	f7fe fe46 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8004658:	61b8      	str	r0, [r7, #24]
        break;
 800465a:	e00f      	b.n	800467c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800465c:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <UART_SetConfig+0x268>)
 800465e:	61bb      	str	r3, [r7, #24]
        break;
 8004660:	e00c      	b.n	800467c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004662:	f7fe fda7 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8004666:	61b8      	str	r0, [r7, #24]
        break;
 8004668:	e008      	b.n	800467c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800466e:	61bb      	str	r3, [r7, #24]
        break;
 8004670:	e004      	b.n	800467c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	77bb      	strb	r3, [r7, #30]
        break;
 800467a:	bf00      	nop
    }

    if (pclk != 0U)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d018      	beq.n	80046b4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	085a      	lsrs	r2, r3, #1
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	441a      	add	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b0f      	cmp	r3, #15
 800469a:	d909      	bls.n	80046b0 <UART_SetConfig+0x238>
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a2:	d205      	bcs.n	80046b0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	e001      	b.n	80046b4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	efff69f3 	.word	0xefff69f3
 80046d0:	40013800 	.word	0x40013800
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40004400 	.word	0x40004400
 80046dc:	40004800 	.word	0x40004800
 80046e0:	007a1200 	.word	0x007a1200

080046e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01a      	beq.n	80047fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047e2:	d10a      	bne.n	80047fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b098      	sub	sp, #96	@ 0x60
 800482c:	af02      	add	r7, sp, #8
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004838:	f7fc f9ec 	bl	8000c14 <HAL_GetTick>
 800483c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b08      	cmp	r3, #8
 800484a:	d12e      	bne.n	80048aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800484c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004854:	2200      	movs	r2, #0
 8004856:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f88c 	bl	8004978 <UART_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d021      	beq.n	80048aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800487a:	653b      	str	r3, [r7, #80]	@ 0x50
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004884:	647b      	str	r3, [r7, #68]	@ 0x44
 8004886:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800488a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e062      	b.n	8004970 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d149      	bne.n	800494c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c0:	2200      	movs	r2, #0
 80048c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f856 	bl	8004978 <UART_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d03c      	beq.n	800494c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	623b      	str	r3, [r7, #32]
   return(result);
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e6      	bne.n	80048d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	60fb      	str	r3, [r7, #12]
   return(result);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3308      	adds	r3, #8
 8004922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004924:	61fa      	str	r2, [r7, #28]
 8004926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	69b9      	ldr	r1, [r7, #24]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	617b      	str	r3, [r7, #20]
   return(result);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e5      	bne.n	8004904 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e011      	b.n	8004970 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3758      	adds	r7, #88	@ 0x58
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004988:	e049      	b.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d045      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004992:	f7fc f93f 	bl	8000c14 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e048      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d031      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d110      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2208      	movs	r2, #8
 80049ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f838 	bl	8004a46 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2208      	movs	r2, #8
 80049da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e029      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049f8:	d111      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f81e 	bl	8004a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e00f      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d0a6      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b095      	sub	sp, #84	@ 0x54
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d118      	bne.n	8004aee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f023 0310 	bic.w	r3, r3, #16
 8004ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6979      	ldr	r1, [r7, #20]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e6      	bne.n	8004abc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b02:	bf00      	nop
 8004b04:	3754      	adds	r7, #84	@ 0x54
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <memset>:
 8004b0e:	4402      	add	r2, r0
 8004b10:	4603      	mov	r3, r0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d100      	bne.n	8004b18 <memset+0xa>
 8004b16:	4770      	bx	lr
 8004b18:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1c:	e7f9      	b.n	8004b12 <memset+0x4>
	...

08004b20 <__libc_init_array>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4d0d      	ldr	r5, [pc, #52]	@ (8004b58 <__libc_init_array+0x38>)
 8004b24:	4c0d      	ldr	r4, [pc, #52]	@ (8004b5c <__libc_init_array+0x3c>)
 8004b26:	1b64      	subs	r4, r4, r5
 8004b28:	10a4      	asrs	r4, r4, #2
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	42a6      	cmp	r6, r4
 8004b2e:	d109      	bne.n	8004b44 <__libc_init_array+0x24>
 8004b30:	4d0b      	ldr	r5, [pc, #44]	@ (8004b60 <__libc_init_array+0x40>)
 8004b32:	4c0c      	ldr	r4, [pc, #48]	@ (8004b64 <__libc_init_array+0x44>)
 8004b34:	f000 f818 	bl	8004b68 <_init>
 8004b38:	1b64      	subs	r4, r4, r5
 8004b3a:	10a4      	asrs	r4, r4, #2
 8004b3c:	2600      	movs	r6, #0
 8004b3e:	42a6      	cmp	r6, r4
 8004b40:	d105      	bne.n	8004b4e <__libc_init_array+0x2e>
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b48:	4798      	blx	r3
 8004b4a:	3601      	adds	r6, #1
 8004b4c:	e7ee      	b.n	8004b2c <__libc_init_array+0xc>
 8004b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b52:	4798      	blx	r3
 8004b54:	3601      	adds	r6, #1
 8004b56:	e7f2      	b.n	8004b3e <__libc_init_array+0x1e>
 8004b58:	08004bb8 	.word	0x08004bb8
 8004b5c:	08004bb8 	.word	0x08004bb8
 8004b60:	08004bb8 	.word	0x08004bb8
 8004b64:	08004bbc 	.word	0x08004bbc

08004b68 <_init>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	bf00      	nop
 8004b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6e:	bc08      	pop	{r3}
 8004b70:	469e      	mov	lr, r3
 8004b72:	4770      	bx	lr

08004b74 <_fini>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr
