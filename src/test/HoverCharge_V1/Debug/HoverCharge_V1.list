
HoverCharge_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08008d20  08008d20  00009d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009128  08009128  0000b214  2**0
                  CONTENTS
  4 .ARM          00000008  08009128  08009128  0000a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009130  08009130  0000b214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009134  08009134  0000a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08009138  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b214  2**0
                  CONTENTS
 10 .bss          000003b8  20000214  20000214  0000b214  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005cc  200005cc  0000b214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001114c  00000000  00000000  0000b244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002488  00000000  00000000  0001c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  0001e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c20  00000000  00000000  0001f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d232  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001379d  00000000  00000000  0003d5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adce6  00000000  00000000  00050d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fea6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b0  00000000  00000000  000feab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00103c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d04 	.word	0x08008d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	08008d04 	.word	0x08008d04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFF);
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <__io_putchar+0x20>)
 8000bba:	f005 f83e 	bl	8005c3a <HAL_UART_Transmit>

	return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200003a4 	.word	0x200003a4

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 feee 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f8fc 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 fb40 	bl	8001260 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be0:	f000 fb18 	bl	8001214 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000be4:	f000 fae6 	bl	80011b4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000be8:	f000 fa38 	bl	800105c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000bec:	f000 f94c 	bl	8000e88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000bf0:	f000 f9c8 	bl	8000f84 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
   printf("%s", TxStartMessage);
 8000bf4:	4964      	ldr	r1, [pc, #400]	@ (8000d88 <main+0x1bc>)
 8000bf6:	4865      	ldr	r0, [pc, #404]	@ (8000d8c <main+0x1c0>)
 8000bf8:	f006 f90c 	bl	8006e14 <iprintf>

   PWM_Period = 64000000/(2*PWM_Freq)-1;
 8000bfc:	4b64      	ldr	r3, [pc, #400]	@ (8000d90 <main+0x1c4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4a64      	ldr	r2, [pc, #400]	@ (8000d94 <main+0x1c8>)
 8000c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b62      	ldr	r3, [pc, #392]	@ (8000d98 <main+0x1cc>)
 8000c0e:	601a      	str	r2, [r3, #0]
   PWM_PulseWidth_DCAC = (int)((PWM_Period*PWM_DutyC_DCAC)/100);
 8000c10:	4b61      	ldr	r3, [pc, #388]	@ (8000d98 <main+0x1cc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	@ (8000d9c <main+0x1d0>)
 8000c1e:	edd3 7a00 	vldr	s15, [r3]
 8000c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c26:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000da0 <main+0x1d4>
 8000c2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c32:	ee17 2a90 	vmov	r2, s15
 8000c36:	4b5b      	ldr	r3, [pc, #364]	@ (8000da4 <main+0x1d8>)
 8000c38:	601a      	str	r2, [r3, #0]
   PWM_PulseWidth_DCDC = (int)((PWM_Period*PWM_DutyC_DCDC)/100);
 8000c3a:	4b57      	ldr	r3, [pc, #348]	@ (8000d98 <main+0x1cc>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	ee07 3a90 	vmov	s15, r3
 8000c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c46:	4b58      	ldr	r3, [pc, #352]	@ (8000da8 <main+0x1dc>)
 8000c48:	edd3 7a00 	vldr	s15, [r3]
 8000c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c50:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8000da0 <main+0x1d4>
 8000c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c5c:	ee17 2a90 	vmov	r2, s15
 8000c60:	4b52      	ldr	r3, [pc, #328]	@ (8000dac <main+0x1e0>)
 8000c62:	601a      	str	r2, [r3, #0]

   __HAL_TIM_SET_AUTORELOAD(&htim1, PWM_Period);					//Timer 1 config
 8000c64:	4b4c      	ldr	r3, [pc, #304]	@ (8000d98 <main+0x1cc>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b51      	ldr	r3, [pc, #324]	@ (8000db0 <main+0x1e4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d98 <main+0x1cc>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b4e      	ldr	r3, [pc, #312]	@ (8000db0 <main+0x1e4>)
 8000c76:	60da      	str	r2, [r3, #12]

   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth_DCAC);	//Tim1 Channel 1 config
 8000c78:	4b4a      	ldr	r3, [pc, #296]	@ (8000da4 <main+0x1d8>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000db0 <main+0x1e4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	635a      	str	r2, [r3, #52]	@ 0x34
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c82:	2100      	movs	r1, #0
 8000c84:	484a      	ldr	r0, [pc, #296]	@ (8000db0 <main+0x1e4>)
 8000c86:	f003 ff31 	bl	8004aec <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4848      	ldr	r0, [pc, #288]	@ (8000db0 <main+0x1e4>)
 8000c8e:	f004 fdd5 	bl	800583c <HAL_TIMEx_PWMN_Start>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_PulseWidth_DCDC);	//Tim1 Channel 4 config
 8000c92:	4b46      	ldr	r3, [pc, #280]	@ (8000dac <main+0x1e0>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b46      	ldr	r3, [pc, #280]	@ (8000db0 <main+0x1e4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000c9c:	210c      	movs	r1, #12
 8000c9e:	4844      	ldr	r0, [pc, #272]	@ (8000db0 <main+0x1e4>)
 8000ca0:	f003 ff24 	bl	8004aec <HAL_TIM_PWM_Start>


   HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);				//ADC1 config
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4843      	ldr	r0, [pc, #268]	@ (8000db4 <main+0x1e8>)
 8000ca8:	f001 f98e 	bl	8001fc8 <HAL_ADCEx_Calibration_Start>
   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_Buff, 3);
 8000cac:	2203      	movs	r2, #3
 8000cae:	4942      	ldr	r1, [pc, #264]	@ (8000db8 <main+0x1ec>)
 8000cb0:	4840      	ldr	r0, [pc, #256]	@ (8000db4 <main+0x1e8>)
 8000cb2:	f001 f8af 	bl	8001e14 <HAL_ADC_Start_DMA>

   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);				//ADC2 config
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4840      	ldr	r0, [pc, #256]	@ (8000dbc <main+0x1f0>)
 8000cba:	f001 f985 	bl	8001fc8 <HAL_ADCEx_Calibration_Start>
   HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2_Buff, 2);
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	493f      	ldr	r1, [pc, #252]	@ (8000dc0 <main+0x1f4>)
 8000cc2:	483e      	ldr	r0, [pc, #248]	@ (8000dbc <main+0x1f0>)
 8000cc4:	f001 f8a6 	bl	8001e14 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PWM_DutyC_DCDC = V_DCDC_OUT*111.11f;
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc4 <main+0x1f8>)
 8000cca:	edd3 7a00 	vldr	s15, [r3]
 8000cce:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000dc8 <main+0x1fc>
 8000cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd6:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <main+0x1dc>)
 8000cd8:	edc3 7a00 	vstr	s15, [r3]
	  PWM_DutyC_DCAC = I_DCAC_OUT*111.11f;
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8000dcc <main+0x200>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000dc8 <main+0x1fc>
 8000ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cea:	4b2c      	ldr	r3, [pc, #176]	@ (8000d9c <main+0x1d0>)
 8000cec:	edc3 7a00 	vstr	s15, [r3]
	  // Conversion range 0-0.9V to 0-100%
	  PWM_PulseWidth_DCDC = (int)((PWM_Period * PWM_DutyC_DCDC)/100); //Hier is iets fout
 8000cf0:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <main+0x1cc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	ee07 3a90 	vmov	s15, r3
 8000cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <main+0x1dc>)
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000da0 <main+0x1d4>
 8000d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d12:	ee17 2a90 	vmov	r2, s15
 8000d16:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <main+0x1e0>)
 8000d18:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE (&htim1, TIM_CHANNEL_4, PWM_PulseWidth_DCDC);
 8000d1a:	4b24      	ldr	r3, [pc, #144]	@ (8000dac <main+0x1e0>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <main+0x1e4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	641a      	str	r2, [r3, #64]	@ 0x40

	  //PWM_PulseWidth_DCAC = (int)((PWM_Period * PWM_DutyC_DCAC)/100); //Hier is iets fout
	  __HAL_TIM_SET_COMPARE (&htim1, TIM_CHANNEL_1, PWM_PulseWidth_DCAC);
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <main+0x1d8>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <main+0x1e4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
	  printf("ADC Voltage DCDC: %.2f V Duty Cycle %.2f\r\n ADC Voltage DCAC: %.2f V Duty Cycle %.2f\r\n", V_DCDC_OUT, PWM_DutyC_DCDC,I_DCAC_OUT, PWM_DutyC_DCAC);
 8000d2e:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <main+0x1f8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fc08 	bl	8000548 <__aeabi_f2d>
 8000d38:	4682      	mov	sl, r0
 8000d3a:	468b      	mov	fp, r1
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <main+0x1dc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fc01 	bl	8000548 <__aeabi_f2d>
 8000d46:	4604      	mov	r4, r0
 8000d48:	460d      	mov	r5, r1
 8000d4a:	4b20      	ldr	r3, [pc, #128]	@ (8000dcc <main+0x200>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fbfa 	bl	8000548 <__aeabi_f2d>
 8000d54:	4680      	mov	r8, r0
 8000d56:	4689      	mov	r9, r1
 8000d58:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <main+0x1d0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fbf3 	bl	8000548 <__aeabi_f2d>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000d6a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000d6e:	e9cd 4500 	strd	r4, r5, [sp]
 8000d72:	4652      	mov	r2, sl
 8000d74:	465b      	mov	r3, fp
 8000d76:	4816      	ldr	r0, [pc, #88]	@ (8000dd0 <main+0x204>)
 8000d78:	f006 f84c 	bl	8006e14 <iprintf>
	  HAL_Delay(500);
 8000d7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d80:	f000 fe7e 	bl	8001a80 <HAL_Delay>
	  PWM_DutyC_DCDC = V_DCDC_OUT*111.11f;
 8000d84:	bf00      	nop
 8000d86:	e79f      	b.n	8000cc8 <main+0xfc>
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	08008d20 	.word	0x08008d20
 8000d90:	20000034 	.word	0x20000034
 8000d94:	03d09000 	.word	0x03d09000
 8000d98:	20000468 	.word	0x20000468
 8000d9c:	2000003c 	.word	0x2000003c
 8000da0:	42c80000 	.word	0x42c80000
 8000da4:	20000470 	.word	0x20000470
 8000da8:	20000038 	.word	0x20000038
 8000dac:	2000046c 	.word	0x2000046c
 8000db0:	20000358 	.word	0x20000358
 8000db4:	20000230 	.word	0x20000230
 8000db8:	2000042c 	.word	0x2000042c
 8000dbc:	20000280 	.word	0x20000280
 8000dc0:	20000438 	.word	0x20000438
 8000dc4:	20000444 	.word	0x20000444
 8000dc8:	42de3852 	.word	0x42de3852
 8000dcc:	20000464 	.word	0x20000464
 8000dd0:	08008d24 	.word	0x08008d24

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b096      	sub	sp, #88	@ 0x58
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dde:	2228      	movs	r2, #40	@ 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f006 f86b 	bl	8006ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e10:	2310      	movs	r3, #16
 8000e12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e14:	2302      	movs	r3, #2
 8000e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e1c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000e20:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 fa0e 	bl	8003248 <HAL_RCC_OscConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e32:	f000 fadd 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e36:	230f      	movs	r3, #15
 8000e38:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	2102      	movs	r1, #2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fa36 	bl	80042c4 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e5e:	f000 fac7 	bl	80013f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e66:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fc5e 	bl	8004730 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e7a:	f000 fab9 	bl	80013f0 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3758      	adds	r7, #88	@ 0x58
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000eac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000eb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000eb2:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000eb4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000ede:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee4:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000eea:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0a:	481d      	ldr	r0, [pc, #116]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000f0c:	f000 fdf0 	bl	8001af0 <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f16:	f000 fa6b 	bl	80013f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4816      	ldr	r0, [pc, #88]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000f26:	f001 fb7f 	bl	8002628 <HAL_ADCEx_MultiModeConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f30:	f000 fa5e 	bl	80013f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000f52:	f001 f8ab 	bl	80020ac <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f5c:	f000 fa48 	bl	80013f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_ADC1_Init+0xf8>)
 8000f6a:	f001 f89f 	bl	80020ac <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000f74:	f000 fa3c 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000230 	.word	0x20000230

08000f84 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001058 <MX_ADC2_Init+0xd4>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fa2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fae:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fc2:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000fca:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fcc:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fe8:	2204      	movs	r2, #4
 8000fea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ff8:	4816      	ldr	r0, [pc, #88]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8000ffa:	f000 fd79 	bl	8001af0 <HAL_ADC_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001004:	f000 f9f4 	bl	80013f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001008:	2301      	movs	r3, #1
 800100a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100c:	2301      	movs	r3, #1
 800100e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	480b      	ldr	r0, [pc, #44]	@ (8001054 <MX_ADC2_Init+0xd0>)
 8001026:	f001 f841 	bl	80020ac <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001030:	f000 f9de 	bl	80013f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001034:	2302      	movs	r3, #2
 8001036:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_ADC2_Init+0xd0>)
 800103e:	f001 f835 	bl	80020ac <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001048:	f000 f9d2 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000280 	.word	0x20000280
 8001058:	50000100 	.word	0x50000100

0800105c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09a      	sub	sp, #104	@ 0x68
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	222c      	movs	r2, #44	@ 0x2c
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f005 ff11 	bl	8006ebe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800109c:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <MX_TIM1_Init+0x150>)
 800109e:	4a44      	ldr	r2, [pc, #272]	@ (80011b0 <MX_TIM1_Init+0x154>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010a2:	4b42      	ldr	r3, [pc, #264]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b40      	ldr	r3, [pc, #256]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ae:	4b3f      	ldr	r3, [pc, #252]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b3d      	ldr	r3, [pc, #244]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80010bc:	4b3b      	ldr	r3, [pc, #236]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010be:	2201      	movs	r2, #1
 80010c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c8:	4838      	ldr	r0, [pc, #224]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010ca:	f003 fc57 	bl	800497c <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 f98c 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010e2:	4619      	mov	r1, r3
 80010e4:	4831      	ldr	r0, [pc, #196]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010e6:	f003 ff01 	bl	8004eec <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010f0:	f000 f97e 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010f4:	482d      	ldr	r0, [pc, #180]	@ (80011ac <MX_TIM1_Init+0x150>)
 80010f6:	f003 fc98 	bl	8004a2a <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001100:	f000 f976 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001104:	2320      	movs	r3, #32
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001110:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001114:	4619      	mov	r1, r3
 8001116:	4825      	ldr	r0, [pc, #148]	@ (80011ac <MX_TIM1_Init+0x150>)
 8001118:	f004 fc36 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001122:	f000 f965 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001126:	2360      	movs	r3, #96	@ 0x60
 8001128:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001142:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	4818      	ldr	r0, [pc, #96]	@ (80011ac <MX_TIM1_Init+0x150>)
 800114c:	f003 fdba 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001156:	f000 f94b 	bl	80013f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8001166:	2332      	movs	r3, #50	@ 0x32
 8001168:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800116e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001172:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800117c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4807      	ldr	r0, [pc, #28]	@ (80011ac <MX_TIM1_Init+0x150>)
 8001190:	f004 fc68 	bl	8005a64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800119a:	f000 f929 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800119e:	4803      	ldr	r0, [pc, #12]	@ (80011ac <MX_TIM1_Init+0x150>)
 80011a0:	f000 fa46 	bl	8001630 <HAL_TIM_MspPostInit>

}
 80011a4:	bf00      	nop
 80011a6:	3768      	adds	r7, #104	@ 0x68
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000358 	.word	0x20000358
 80011b0:	40012c00 	.word	0x40012c00

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011ba:	4a15      	ldr	r2, [pc, #84]	@ (8001210 <MX_USART2_UART_Init+0x5c>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_USART2_UART_Init+0x58>)
 80011f8:	f004 fcd1 	bl	8005b9e <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001202:	f000 f8f5 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200003a4 	.word	0x200003a4
 8001210:	40004400 	.word	0x40004400

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_DMA_Init+0x48>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	4a0f      	ldr	r2, [pc, #60]	@ (800125c <MX_DMA_Init+0x48>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6153      	str	r3, [r2, #20]
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <MX_DMA_Init+0x48>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	200b      	movs	r0, #11
 8001238:	f001 fcc7 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800123c:	200b      	movs	r0, #11
 800123e:	f001 fce0 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	200c      	movs	r0, #12
 8001248:	f001 fcbf 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800124c:	200c      	movs	r0, #12
 800124e:	f001 fcd8 	bl	8002c02 <HAL_NVIC_EnableIRQ>

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <MX_GPIO_Init+0x68>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <MX_GPIO_Init+0x68>)
 800127c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001280:	6153      	str	r3, [r2, #20]
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_GPIO_Init+0x68>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_GPIO_Init+0x68>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <MX_GPIO_Init+0x68>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001298:	6153      	str	r3, [r2, #20]
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_GPIO_Init+0x68>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : TAD_ZERO_CROSSING_Pin */
  GPIO_InitStruct.Pin = TAD_ZERO_CROSSING_Pin;
 80012a6:	2340      	movs	r3, #64	@ 0x40
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TAD_ZERO_CROSSING_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4619      	mov	r1, r3
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_GPIO_Init+0x6c>)
 80012ba:	f001 fe53 	bl	8002f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012be:	bf00      	nop
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000400 	.word	0x48000400

080012d0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

		adc_val_1 = ADC1_Buff[0];
 80012d8:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a37      	ldr	r2, [pc, #220]	@ (80013bc <HAL_ADC_ConvCpltCallback+0xec>)
 80012de:	6013      	str	r3, [r2, #0]
		V_DCDC_OUT = (((float)adc_val_1)/4095.0f)*3.3f;
 80012e0:	4b36      	ldr	r3, [pc, #216]	@ (80013bc <HAL_ADC_ConvCpltCallback+0xec>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ec:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80013c0 <HAL_ADC_ConvCpltCallback+0xf0>
 80012f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80013c4 <HAL_ADC_ConvCpltCallback+0xf4>
 80012f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <HAL_ADC_ConvCpltCallback+0xf8>)
 80012fe:	edc3 7a00 	vstr	s15, [r3]

		adc_val_2 = ADC1_Buff[1];
 8001302:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a31      	ldr	r2, [pc, #196]	@ (80013cc <HAL_ADC_ConvCpltCallback+0xfc>)
 8001308:	6013      	str	r3, [r2, #0]
		I_DCDC_OUT = (((float)adc_val_2)/4095.0f)*3.3f;
 800130a:	4b30      	ldr	r3, [pc, #192]	@ (80013cc <HAL_ADC_ConvCpltCallback+0xfc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001316:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80013c0 <HAL_ADC_ConvCpltCallback+0xf0>
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80013c4 <HAL_ADC_ConvCpltCallback+0xf4>
 8001322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <HAL_ADC_ConvCpltCallback+0x100>)
 8001328:	edc3 7a00 	vstr	s15, [r3]

		adc_val_3 = ADC1_Buff[2];
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4a28      	ldr	r2, [pc, #160]	@ (80013d4 <HAL_ADC_ConvCpltCallback+0x104>)
 8001332:	6013      	str	r3, [r2, #0]
		V_DCDC_IN = (((float)adc_val_3)/4095.0f)*3.3f;
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <HAL_ADC_ConvCpltCallback+0x104>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001340:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80013c0 <HAL_ADC_ConvCpltCallback+0xf0>
 8001344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001348:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80013c4 <HAL_ADC_ConvCpltCallback+0xf4>
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001350:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <HAL_ADC_ConvCpltCallback+0x108>)
 8001352:	edc3 7a00 	vstr	s15, [r3]

		adc_val_4 = ADC2_Buff[0];
 8001356:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <HAL_ADC_ConvCpltCallback+0x10c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a21      	ldr	r2, [pc, #132]	@ (80013e0 <HAL_ADC_ConvCpltCallback+0x110>)
 800135c:	6013      	str	r3, [r2, #0]
		I_IND = (((float)adc_val_4)/4095.0f)*3.3f;
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_ADC_ConvCpltCallback+0x110>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800136a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80013c0 <HAL_ADC_ConvCpltCallback+0xf0>
 800136e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001372:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013c4 <HAL_ADC_ConvCpltCallback+0xf4>
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_ADC_ConvCpltCallback+0x114>)
 800137c:	edc3 7a00 	vstr	s15, [r3]

		adc_val_5 = ADC2_Buff[1];
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <HAL_ADC_ConvCpltCallback+0x10c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a18      	ldr	r2, [pc, #96]	@ (80013e8 <HAL_ADC_ConvCpltCallback+0x118>)
 8001386:	6013      	str	r3, [r2, #0]
		I_DCAC_OUT = (((float)adc_val_5)/4095.0f)*3.3f;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <HAL_ADC_ConvCpltCallback+0x118>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001394:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80013c0 <HAL_ADC_ConvCpltCallback+0xf0>
 8001398:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80013c4 <HAL_ADC_ConvCpltCallback+0xf4>
 80013a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <HAL_ADC_ConvCpltCallback+0x11c>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000042c 	.word	0x2000042c
 80013bc:	20000440 	.word	0x20000440
 80013c0:	457ff000 	.word	0x457ff000
 80013c4:	40533333 	.word	0x40533333
 80013c8:	20000444 	.word	0x20000444
 80013cc:	20000448 	.word	0x20000448
 80013d0:	2000044c 	.word	0x2000044c
 80013d4:	20000450 	.word	0x20000450
 80013d8:	20000454 	.word	0x20000454
 80013dc:	20000438 	.word	0x20000438
 80013e0:	20000458 	.word	0x20000458
 80013e4:	2000045c 	.word	0x2000045c
 80013e8:	20000460 	.word	0x20000460
 80013ec:	20000464 	.word	0x20000464

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <Error_Handler+0x8>

080013fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_MspInit+0x44>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a0e      	ldr	r2, [pc, #56]	@ (8001440 <HAL_MspInit+0x44>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <HAL_MspInit+0x44>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_MspInit+0x44>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_MspInit+0x44>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_MspInit+0x44>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	@ 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001464:	d156      	bne.n	8001514 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001466:	4b5b      	ldr	r3, [pc, #364]	@ (80015d4 <HAL_ADC_MspInit+0x190>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a59      	ldr	r2, [pc, #356]	@ (80015d4 <HAL_ADC_MspInit+0x190>)
 800146e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001470:	4b58      	ldr	r3, [pc, #352]	@ (80015d4 <HAL_ADC_MspInit+0x190>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10b      	bne.n	8001490 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001478:	4b57      	ldr	r3, [pc, #348]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4a56      	ldr	r2, [pc, #344]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001482:	6153      	str	r3, [r2, #20]
 8001484:	4b54      	ldr	r3, [pc, #336]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b51      	ldr	r3, [pc, #324]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	4a50      	ldr	r2, [pc, #320]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 8001496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149a:	6153      	str	r3, [r2, #20]
 800149c:	4b4e      	ldr	r3, [pc, #312]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = V_DCDC_OUT_Pin|I_DCDC_OUT_Pin|GPIO_PIN_3;
 80014a8:	230b      	movs	r3, #11
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014be:	f001 fd51 	bl	8002f64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014c2:	4b46      	ldr	r3, [pc, #280]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014c4:	4a46      	ldr	r2, [pc, #280]	@ (80015e0 <HAL_ADC_MspInit+0x19c>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c8:	4b44      	ldr	r3, [pc, #272]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ce:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014d4:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014d6:	2280      	movs	r2, #128	@ 0x80
 80014d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014da:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014e2:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014ea:	4b3c      	ldr	r3, [pc, #240]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014ec:	2220      	movs	r2, #32
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014f0:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014f6:	4839      	ldr	r0, [pc, #228]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 80014f8:	f001 fb9d 	bl	8002c36 <HAL_DMA_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001502:	f7ff ff75 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a34      	ldr	r2, [pc, #208]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 800150a:	639a      	str	r2, [r3, #56]	@ 0x38
 800150c:	4a33      	ldr	r2, [pc, #204]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001512:	e05a      	b.n	80015ca <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <HAL_ADC_MspInit+0x1a0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d155      	bne.n	80015ca <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800151e:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <HAL_ADC_MspInit+0x190>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a2b      	ldr	r2, [pc, #172]	@ (80015d4 <HAL_ADC_MspInit+0x190>)
 8001526:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001528:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <HAL_ADC_MspInit+0x190>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10b      	bne.n	8001548 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	4a28      	ldr	r2, [pc, #160]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153a:	6153      	str	r3, [r2, #20]
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	4a22      	ldr	r2, [pc, #136]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001552:	6153      	str	r3, [r2, #20]
 8001554:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I_IND_Pin|I_DCAC_OUT_Pin;
 8001560:	2330      	movs	r3, #48	@ 0x30
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001576:	f001 fcf5 	bl	8002f64 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 800157c:	4a1b      	ldr	r2, [pc, #108]	@ (80015ec <HAL_ADC_MspInit+0x1a8>)
 800157e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 800158e:	2280      	movs	r2, #128	@ 0x80
 8001590:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 8001594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001598:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 800159c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 80015a4:	2220      	movs	r2, #32
 80015a6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80015ae:	480e      	ldr	r0, [pc, #56]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 80015b0:	f001 fb41 	bl	8002c36 <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 80015ba:	f7ff ff19 	bl	80013f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a09      	ldr	r2, [pc, #36]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 80015c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80015c4:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_ADC_MspInit+0x1a4>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	@ 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000474 	.word	0x20000474
 80015d8:	40021000 	.word	0x40021000
 80015dc:	200002d0 	.word	0x200002d0
 80015e0:	40020008 	.word	0x40020008
 80015e4:	50000100 	.word	0x50000100
 80015e8:	20000314 	.word	0x20000314
 80015ec:	4002001c 	.word	0x4002001c

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <HAL_TIM_Base_MspInit+0x38>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10b      	bne.n	800161a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_TIM_Base_MspInit+0x3c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a09      	ldr	r2, [pc, #36]	@ (800162c <HAL_TIM_Base_MspInit+0x3c>)
 8001608:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b07      	ldr	r3, [pc, #28]	@ (800162c <HAL_TIM_Base_MspInit+0x3c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40012c00 	.word	0x40012c00
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <HAL_TIM_MspPostInit+0x68>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d11d      	bne.n	800168e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_TIM_MspPostInit+0x6c>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a11      	ldr	r2, [pc, #68]	@ (800169c <HAL_TIM_MspPostInit+0x6c>)
 8001658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <HAL_TIM_MspPostInit+0x6c>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800166a:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800166e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800167c:	2306      	movs	r3, #6
 800167e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168a:	f001 fc6b 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40012c00 	.word	0x40012c00
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a18      	ldr	r2, [pc, #96]	@ (8001720 <HAL_UART_MspInit+0x80>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d129      	bne.n	8001716 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <HAL_UART_MspInit+0x84>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <HAL_UART_MspInit+0x84>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_UART_MspInit+0x84>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_UART_MspInit+0x84>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <HAL_UART_MspInit+0x84>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	6153      	str	r3, [r2, #20]
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_UART_MspInit+0x84>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80016f2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001704:	2307      	movs	r3, #7
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001712:	f001 fc27 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	@ 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40004400 	.word	0x40004400
 8001724:	40021000 	.word	0x40021000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <NMI_Handler+0x4>

08001730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <MemManage_Handler+0x4>

08001740 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <UsageFault_Handler+0x4>

08001750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 f95f 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA1_Channel1_IRQHandler+0x10>)
 800178e:	f001 faf8 	bl	8002d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002d0 	.word	0x200002d0

0800179c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <DMA1_Channel2_IRQHandler+0x10>)
 80017a2:	f001 faee 	bl	8002d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000314 	.word	0x20000314

080017b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return 1;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_kill>:

int _kill(int pid, int sig)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ca:	f005 fbcb 	bl	8006f64 <__errno>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2216      	movs	r2, #22
 80017d2:	601a      	str	r2, [r3, #0]
  return -1;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_exit>:

void _exit (int status)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe7 	bl	80017c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f2:	bf00      	nop
 80017f4:	e7fd      	b.n	80017f2 <_exit+0x12>

080017f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e00a      	b.n	800181e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001808:	f3af 8000 	nop.w
 800180c:	4601      	mov	r1, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	b2ca      	uxtb	r2, r1
 8001816:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbf0      	blt.n	8001808 <_read+0x12>
  }

  return len;
 8001826:	687b      	ldr	r3, [r7, #4]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e009      	b.n	8001856 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	60ba      	str	r2, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f9ac 	bl	8000ba8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbf1      	blt.n	8001842 <_write+0x12>
  }
  return len;
 800185e:	687b      	ldr	r3, [r7, #4]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_close>:

int _close(int file)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001890:	605a      	str	r2, [r3, #4]
  return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_isatty>:

int _isatty(int file)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f005 fb30 	bl	8006f64 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20003000 	.word	0x20003000
 8001930:	00000400 	.word	0x00000400
 8001934:	20000478 	.word	0x20000478
 8001938:	200005d0 	.word	0x200005d0

0800193c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <SystemInit+0x20>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <SystemInit+0x20>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001998 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001964:	f7ff ffea 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001968:	480c      	ldr	r0, [pc, #48]	@ (800199c <LoopForever+0x6>)
  ldr r1, =_edata
 800196a:	490d      	ldr	r1, [pc, #52]	@ (80019a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800196c:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <LoopForever+0xe>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001980:	4c0a      	ldr	r4, [pc, #40]	@ (80019ac <LoopForever+0x16>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198e:	f005 faef 	bl	8006f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001992:	f7ff f91b 	bl	8000bcc <main>

08001996 <LoopForever>:

LoopForever:
    b LoopForever
 8001996:	e7fe      	b.n	8001996 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001998:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80019a4:	08009138 	.word	0x08009138
  ldr r2, =_sbss
 80019a8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80019ac:	200005cc 	.word	0x200005cc

080019b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC1_2_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <HAL_Init+0x28>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <HAL_Init+0x28>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f001 f8f5 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fd14 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 f90d 	bl	8002c1e <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f001 f8d5 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	@ (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000040 	.word	0x20000040
 8001a38:	20000048 	.word	0x20000048
 8001a3c:	20000044 	.word	0x20000044

08001a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000048 	.word	0x20000048
 8001a64:	2000047c 	.word	0x2000047c

08001a68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000047c 	.word	0x2000047c

08001a80 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000048 	.word	0x20000048

08001ac8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b09a      	sub	sp, #104	@ 0x68
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e172      	b.n	8001df6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d176      	bne.n	8001c10 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d152      	bne.n	8001bd0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fc7d 	bl	8001444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d13b      	bne.n	8001bd0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fef5 	bl	8002948 <ADC_Disable>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d12f      	bne.n	8001bd0 <HAL_ADC_Init+0xe0>
 8001b70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d12b      	bne.n	8001bd0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b80:	f023 0302 	bic.w	r3, r3, #2
 8001b84:	f043 0202 	orr.w	r2, r3, #2
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b9a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001baa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bac:	4b94      	ldr	r3, [pc, #592]	@ (8001e00 <HAL_ADC_Init+0x310>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a94      	ldr	r2, [pc, #592]	@ (8001e04 <HAL_ADC_Init+0x314>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0c9a      	lsrs	r2, r3, #18
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc2:	e002      	b.n	8001bca <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f9      	bne.n	8001bc4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bec:	d110      	bne.n	8001c10 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f023 0312 	bic.w	r3, r3, #18
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f040 80df 	bne.w	8001ddc <HAL_ADC_Init+0x2ec>
 8001c1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80da 	bne.w	8001ddc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 80d2 	bne.w	8001ddc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c40:	f043 0202 	orr.w	r2, r3, #2
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c48:	4b6f      	ldr	r3, [pc, #444]	@ (8001e08 <HAL_ADC_Init+0x318>)
 8001c4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c54:	d102      	bne.n	8001c5c <HAL_ADC_Init+0x16c>
 8001c56:	4b6d      	ldr	r3, [pc, #436]	@ (8001e0c <HAL_ADC_Init+0x31c>)
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	e002      	b.n	8001c62 <HAL_ADC_Init+0x172>
 8001c5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c60:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d108      	bne.n	8001c82 <HAL_ADC_Init+0x192>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x192>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_ADC_Init+0x194>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11c      	bne.n	8001cc2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_ADC_Init+0x1ba>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x1ba>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_Init+0x1bc>
 8001caa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cc0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7e5b      	ldrb	r3, [r3, #25]
 8001cc6:	035b      	lsls	r3, r3, #13
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ccc:	2a01      	cmp	r2, #1
 8001cce:	d002      	beq.n	8001cd6 <HAL_ADC_Init+0x1e6>
 8001cd0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cd4:	e000      	b.n	8001cd8 <HAL_ADC_Init+0x1e8>
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d11b      	bne.n	8001d2e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7e5b      	ldrb	r3, [r3, #25]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	3b01      	subs	r3, #1
 8001d04:	045a      	lsls	r2, r3, #17
 8001d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d10:	e00d      	b.n	8001d2e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001d1a:	f043 0220 	orr.w	r2, r3, #32
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d007      	beq.n	8001d46 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d42:	4313      	orrs	r3, r2
 8001d44:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d114      	bne.n	8001d7e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d62:	f023 0302 	bic.w	r3, r3, #2
 8001d66:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7e1b      	ldrb	r3, [r3, #24]
 8001d6c:	039a      	lsls	r2, r3, #14
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4313      	orrs	r3, r2
 8001d78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <HAL_ADC_Init+0x320>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10c      	bne.n	8001db4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	f023 010f 	bic.w	r1, r3, #15
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db2:	e007      	b.n	8001dc4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 020f 	bic.w	r2, r2, #15
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f023 0303 	bic.w	r3, r3, #3
 8001dd2:	f043 0201 	orr.w	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dda:	e00a      	b.n	8001df2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f023 0312 	bic.w	r3, r3, #18
 8001de4:	f043 0210 	orr.w	r2, r3, #16
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001dec:	2301      	movs	r3, #1
 8001dee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001df2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3768      	adds	r7, #104	@ 0x68
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000040 	.word	0x20000040
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	50000300 	.word	0x50000300
 8001e0c:	50000100 	.word	0x50000100
 8001e10:	fff0c007 	.word	0xfff0c007

08001e14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80b9 	bne.w	8001fa6 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Start_DMA+0x2e>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e0b4      	b.n	8001fac <HAL_ADC_Start_DMA+0x198>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb4 <HAL_ADC_Start_DMA+0x1a0>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80a0 	bne.w	8001f98 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fd11 	bl	8002880 <ADC_Enable>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f040 8092 	bne.w	8001f8e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb4 <HAL_ADC_Start_DMA+0x1a0>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <HAL_ADC_Start_DMA+0x80>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e92:	d115      	bne.n	8001ec0 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d027      	beq.n	8001efe <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001eb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ebe:	e01e      	b.n	8001efe <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ed4:	d004      	beq.n	8001ee0 <HAL_ADC_Start_DMA+0xcc>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a37      	ldr	r2, [pc, #220]	@ (8001fb8 <HAL_ADC_Start_DMA+0x1a4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d10e      	bne.n	8001efe <HAL_ADC_Start_DMA+0xea>
 8001ee0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ef6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f023 0206 	bic.w	r2, r3, #6
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2c:	4a23      	ldr	r2, [pc, #140]	@ (8001fbc <HAL_ADC_Start_DMA+0x1a8>)
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f34:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <HAL_ADC_Start_DMA+0x1ac>)
 8001f36:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3c:	4a21      	ldr	r2, [pc, #132]	@ (8001fc4 <HAL_ADC_Start_DMA+0x1b0>)
 8001f3e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	221c      	movs	r2, #28
 8001f46:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0210 	orr.w	r2, r2, #16
 8001f56:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3340      	adds	r3, #64	@ 0x40
 8001f72:	4619      	mov	r1, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f000 fea4 	bl	8002cc4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0204 	orr.w	r2, r2, #4
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	e00d      	b.n	8001faa <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001f96:	e008      	b.n	8001faa <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001fa4:	e001      	b.n	8001faa <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	50000300 	.word	0x50000300
 8001fb8:	50000100 	.word	0x50000100
 8001fbc:	080027b5 	.word	0x080027b5
 8001fc0:	0800282f 	.word	0x0800282f
 8001fc4:	0800284b 	.word	0x0800284b

08001fc8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADCEx_Calibration_Start+0x1c>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e05f      	b.n	80020a4 <HAL_ADCEx_Calibration_Start+0xdc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fcab 	bl	8002948 <ADC_Disable>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d14e      	bne.n	800209a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8002010:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002026:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002036:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002038:	f7ff fd16 	bl	8001a68 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800203e:	e01c      	b.n	800207a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002040:	f7ff fd12 	bl	8001a68 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b0a      	cmp	r3, #10
 800204c:	d915      	bls.n	800207a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800205c:	d10d      	bne.n	800207a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f023 0312 	bic.w	r3, r3, #18
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e014      	b.n	80020a4 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002088:	d0da      	beq.n	8002040 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f023 0303 	bic.w	r3, r3, #3
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b09b      	sub	sp, #108	@ 0x6c
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x22>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e2a1      	b.n	8002612 <HAL_ADC_ConfigChannel+0x566>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 8285 	bne.w	80025f0 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d81c      	bhi.n	8002128 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	461a      	mov	r2, r3
 8002102:	231f      	movs	r3, #31
 8002104:	4093      	lsls	r3, r2
 8002106:	43db      	mvns	r3, r3
 8002108:	4019      	ands	r1, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	631a      	str	r2, [r3, #48]	@ 0x30
 8002126:	e063      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b09      	cmp	r3, #9
 800212e:	d81e      	bhi.n	800216e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	3b1e      	subs	r3, #30
 8002144:	221f      	movs	r2, #31
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	4019      	ands	r1, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	3b1e      	subs	r3, #30
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	635a      	str	r2, [r3, #52]	@ 0x34
 800216c:	e040      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b0e      	cmp	r3, #14
 8002174:	d81e      	bhi.n	80021b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	3b3c      	subs	r3, #60	@ 0x3c
 800218a:	221f      	movs	r2, #31
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	4019      	ands	r1, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	3b3c      	subs	r3, #60	@ 0x3c
 80021a6:	fa00 f203 	lsl.w	r2, r0, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80021b2:	e01d      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	3b5a      	subs	r3, #90	@ 0x5a
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	4019      	ands	r1, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	3b5a      	subs	r3, #90	@ 0x5a
 80021e4:	fa00 f203 	lsl.w	r2, r0, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 80e5 	bne.w	80023ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b09      	cmp	r3, #9
 8002206:	d91c      	bls.n	8002242 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6999      	ldr	r1, [r3, #24]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3b1e      	subs	r3, #30
 800221a:	2207      	movs	r2, #7
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	4019      	ands	r1, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6898      	ldr	r0, [r3, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	3b1e      	subs	r3, #30
 8002234:	fa00 f203 	lsl.w	r2, r0, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	619a      	str	r2, [r3, #24]
 8002240:	e019      	b.n	8002276 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6959      	ldr	r1, [r3, #20]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	2207      	movs	r2, #7
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	4019      	ands	r1, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6898      	ldr	r0, [r3, #8]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	fa00 f203 	lsl.w	r2, r0, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	3b01      	subs	r3, #1
 8002294:	2b03      	cmp	r3, #3
 8002296:	d84f      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x28c>
 8002298:	a201      	add	r2, pc, #4	@ (adr r2, 80022a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022b1 	.word	0x080022b1
 80022a4:	080022d3 	.word	0x080022d3
 80022a8:	080022f5 	.word	0x080022f5
 80022ac:	08002317 	.word	0x08002317
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022b6:	4b9c      	ldr	r3, [pc, #624]	@ (8002528 <HAL_ADC_ConfigChannel+0x47c>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	0691      	lsls	r1, r2, #26
 80022c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022c2:	430a      	orrs	r2, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022ce:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022d0:	e07b      	b.n	80023ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022d8:	4b93      	ldr	r3, [pc, #588]	@ (8002528 <HAL_ADC_ConfigChannel+0x47c>)
 80022da:	4013      	ands	r3, r2
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	0691      	lsls	r1, r2, #26
 80022e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022e4:	430a      	orrs	r2, r1
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022f0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022f2:	e06a      	b.n	80023ca <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002528 <HAL_ADC_ConfigChannel+0x47c>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	0691      	lsls	r1, r2, #26
 8002304:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002306:	430a      	orrs	r2, r1
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002312:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002314:	e059      	b.n	80023ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800231c:	4b82      	ldr	r3, [pc, #520]	@ (8002528 <HAL_ADC_ConfigChannel+0x47c>)
 800231e:	4013      	ands	r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	0691      	lsls	r1, r2, #26
 8002326:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002328:	430a      	orrs	r2, r1
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002334:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002336:	e048      	b.n	80023ca <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	069b      	lsls	r3, r3, #26
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800235a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002362:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	069b      	lsls	r3, r3, #26
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800237e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002386:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	069b      	lsls	r3, r3, #26
 8002390:	429a      	cmp	r2, r3
 8002392:	d107      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023a2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	069b      	lsls	r3, r3, #26
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80023c8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d108      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x33e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x33e>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_ADC_ConfigChannel+0x340>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 810a 	bne.w	8002606 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d00f      	beq.n	800241a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2201      	movs	r2, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43da      	mvns	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	400a      	ands	r2, r1
 8002414:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002418:	e049      	b.n	80024ae <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2201      	movs	r2, #1
 8002428:	409a      	lsls	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d91c      	bls.n	8002476 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6999      	ldr	r1, [r3, #24]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	3b1b      	subs	r3, #27
 800244e:	2207      	movs	r2, #7
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	4019      	ands	r1, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6898      	ldr	r0, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	3b1b      	subs	r3, #27
 8002468:	fa00 f203 	lsl.w	r2, r0, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e01b      	b.n	80024ae <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6959      	ldr	r1, [r3, #20]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	2207      	movs	r2, #7
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	4019      	ands	r1, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6898      	ldr	r0, [r3, #8]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ae:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <HAL_ADC_ConfigChannel+0x480>)
 80024b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d105      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024ca:	2b11      	cmp	r3, #17
 80024cc:	d105      	bne.n	80024da <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024de:	2b12      	cmp	r3, #18
 80024e0:	f040 8091 	bne.w	8002606 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 808a 	bne.w	8002606 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024fa:	d102      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x456>
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <HAL_ADC_ConfigChannel+0x484>)
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e002      	b.n	8002508 <HAL_ADC_ConfigChannel+0x45c>
 8002502:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002506:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d10e      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x488>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x488>
 8002524:	2301      	movs	r3, #1
 8002526:	e006      	b.n	8002536 <HAL_ADC_ConfigChannel+0x48a>
 8002528:	83fff000 	.word	0x83fff000
 800252c:	50000300 	.word	0x50000300
 8002530:	50000100 	.word	0x50000100
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d150      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800253a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800253c:	2b00      	cmp	r3, #0
 800253e:	d010      	beq.n	8002562 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_ADC_ConfigChannel+0x4b0>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x4b0>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_ADC_ConfigChannel+0x4b2>
 800255c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800255e:	2b00      	cmp	r3, #0
 8002560:	d13c      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b10      	cmp	r3, #16
 8002568:	d11d      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x4fa>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002572:	d118      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002574:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800257c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800257e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002580:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <HAL_ADC_ConfigChannel+0x574>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a27      	ldr	r2, [pc, #156]	@ (8002624 <HAL_ADC_ConfigChannel+0x578>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9a      	lsrs	r2, r3, #18
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002596:	e002      	b.n	800259e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	3b01      	subs	r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f9      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025a4:	e02e      	b.n	8002604 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b11      	cmp	r3, #17
 80025ac:	d10b      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x51a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b6:	d106      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80025c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025c2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025c4:	e01e      	b.n	8002604 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b12      	cmp	r3, #18
 80025cc:	d11a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80025ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025d8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025da:	e013      	b.n	8002604 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80025ee:	e00a      	b.n	8002606 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002602:	e000      	b.n	8002606 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002604:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800260e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002612:	4618      	mov	r0, r3
 8002614:	376c      	adds	r7, #108	@ 0x6c
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000040 	.word	0x20000040
 8002624:	431bde83 	.word	0x431bde83

08002628 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002628:	b480      	push	{r7}
 800262a:	b099      	sub	sp, #100	@ 0x64
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002640:	d102      	bne.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002642:	4b5a      	ldr	r3, [pc, #360]	@ (80027ac <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	e002      	b.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002648:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800264c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0a2      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002662:	2302      	movs	r3, #2
 8002664:	e09b      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d17f      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d179      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002688:	4b49      	ldr	r3, [pc, #292]	@ (80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800268a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d040      	beq.n	8002716 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002694:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026a6:	035b      	lsls	r3, r3, #13
 80026a8:	430b      	orrs	r3, r1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ae:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d15c      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d107      	bne.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80026f2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d14b      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002700:	f023 030f 	bic.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	6811      	ldr	r1, [r2, #0]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	6892      	ldr	r2, [r2, #8]
 800270c:	430a      	orrs	r2, r1
 800270e:	431a      	orrs	r2, r3
 8002710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002712:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002714:	e03c      	b.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002716:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800271e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002720:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d108      	bne.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d123      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002764:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002766:	2b00      	cmp	r3, #0
 8002768:	d112      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800276a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002772:	f023 030f 	bic.w	r3, r3, #15
 8002776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002778:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800277a:	e009      	b.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800278e:	e000      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002790:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800279a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800279e:	4618      	mov	r0, r3
 80027a0:	3764      	adds	r7, #100	@ 0x64
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	50000100 	.word	0x50000100
 80027b0:	50000300 	.word	0x50000300

080027b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d126      	bne.n	800281c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d115      	bne.n	8002814 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7fe fd5b 	bl	80012d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800281a:	e004      	b.n	8002826 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff f943 	bl	8001ac8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002868:	f043 0204 	orr.w	r2, r3, #4
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff f933 	bl	8001adc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d108      	bne.n	80028ac <ADC_Enable+0x2c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <ADC_Enable+0x2c>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <ADC_Enable+0x2e>
 80028ac:	2300      	movs	r3, #0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d143      	bne.n	800293a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b22      	ldr	r3, [pc, #136]	@ (8002944 <ADC_Enable+0xc4>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	f043 0210 	orr.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e02f      	b.n	800293c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80028ec:	f7ff f8bc 	bl	8001a68 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028f2:	e01b      	b.n	800292c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028f4:	f7ff f8b8 	bl	8001a68 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d914      	bls.n	800292c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d00d      	beq.n	800292c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f043 0210 	orr.w	r2, r3, #16
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e007      	b.n	800293c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d1dc      	bne.n	80028f4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	8000003f 	.word	0x8000003f

08002948 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d108      	bne.n	8002974 <ADC_Disable+0x2c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <ADC_Disable+0x2c>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <ADC_Disable+0x2e>
 8002974:	2300      	movs	r3, #0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d047      	beq.n	8002a0a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030d 	and.w	r3, r3, #13
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10f      	bne.n	80029a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0202 	orr.w	r2, r2, #2
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2203      	movs	r2, #3
 800299e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80029a0:	f7ff f862 	bl	8001a68 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029a6:	e029      	b.n	80029fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f043 0210 	orr.w	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e023      	b.n	8002a0c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029c4:	f7ff f850 	bl	8001a68 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d914      	bls.n	80029fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10d      	bne.n	80029fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f043 0210 	orr.w	r2, r3, #16
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e007      	b.n	8002a0c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d0dc      	beq.n	80029c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a46:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60d3      	str	r3, [r2, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4907      	ldr	r1, [pc, #28]	@ (8002ab0 <__NVIC_EnableIRQ+0x38>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	@ (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	@ (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff8e 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff29 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff3e 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff8e 	bl	8002b08 <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5d 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff31 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ffa2 	bl	8002b70 <SysTick_Config>
 8002c2c:	4603      	mov	r3, r0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e037      	b.n	8002cbc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c62:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f940 	bl	8002f24 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}  
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_DMA_Start_IT+0x20>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e04a      	b.n	8002d7a <HAL_DMA_Start_IT+0xb6>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d13a      	bne.n	8002d6c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f8d4 	bl	8002ec8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 020e 	orr.w	r2, r2, #14
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e00f      	b.n	8002d5a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 020a 	orr.w	r2, r2, #10
 8002d48:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e005      	b.n	8002d78 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
 8002d76:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	2204      	movs	r2, #4
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d024      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x72>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01f      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0204 	bic.w	r2, r2, #4
 8002dd0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dda:	2104      	movs	r1, #4
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d06a      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	e065      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	2202      	movs	r2, #2
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xdc>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 020a 	bic.w	r2, r2, #10
 8002e2a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d035      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e5c:	e030      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	2208      	movs	r2, #8
 8002e64:	409a      	lsls	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d028      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x13e>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 020e 	bic.w	r2, r2, #14
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
    }
  }
}  
 8002ebe:	e7ff      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x13e>
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d108      	bne.n	8002f08 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f06:	e007      	b.n	8002f18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <DMA_CalcBaseAndBitshift+0x34>)
 8002f34:	4413      	add	r3, r2
 8002f36:	4a09      	ldr	r2, [pc, #36]	@ (8002f5c <DMA_CalcBaseAndBitshift+0x38>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	009a      	lsls	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a06      	ldr	r2, [pc, #24]	@ (8002f60 <DMA_CalcBaseAndBitshift+0x3c>)
 8002f48:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	bffdfff8 	.word	0xbffdfff8
 8002f5c:	cccccccd 	.word	0xcccccccd
 8002f60:	40020000 	.word	0x40020000

08002f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f72:	e14e      	b.n	8003212 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8140 	beq.w	800320c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d005      	beq.n	8002fa4 <HAL_GPIO_Init+0x40>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d130      	bne.n	8003006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fda:	2201      	movs	r2, #1
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 0201 	and.w	r2, r3, #1
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b03      	cmp	r3, #3
 8003010:	d017      	beq.n	8003042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	2203      	movs	r2, #3
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d123      	bne.n	8003096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	08da      	lsrs	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3208      	adds	r2, #8
 8003056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	08da      	lsrs	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3208      	adds	r2, #8
 8003090:	6939      	ldr	r1, [r7, #16]
 8003092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2203      	movs	r2, #3
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0203 	and.w	r2, r3, #3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 809a 	beq.w	800320c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d8:	4b55      	ldr	r3, [pc, #340]	@ (8003230 <HAL_GPIO_Init+0x2cc>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	4a54      	ldr	r2, [pc, #336]	@ (8003230 <HAL_GPIO_Init+0x2cc>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6193      	str	r3, [r2, #24]
 80030e4:	4b52      	ldr	r3, [pc, #328]	@ (8003230 <HAL_GPIO_Init+0x2cc>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030f0:	4a50      	ldr	r2, [pc, #320]	@ (8003234 <HAL_GPIO_Init+0x2d0>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800311a:	d013      	beq.n	8003144 <HAL_GPIO_Init+0x1e0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a46      	ldr	r2, [pc, #280]	@ (8003238 <HAL_GPIO_Init+0x2d4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00d      	beq.n	8003140 <HAL_GPIO_Init+0x1dc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a45      	ldr	r2, [pc, #276]	@ (800323c <HAL_GPIO_Init+0x2d8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d007      	beq.n	800313c <HAL_GPIO_Init+0x1d8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a44      	ldr	r2, [pc, #272]	@ (8003240 <HAL_GPIO_Init+0x2dc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_GPIO_Init+0x1d4>
 8003134:	2303      	movs	r3, #3
 8003136:	e006      	b.n	8003146 <HAL_GPIO_Init+0x1e2>
 8003138:	2305      	movs	r3, #5
 800313a:	e004      	b.n	8003146 <HAL_GPIO_Init+0x1e2>
 800313c:	2302      	movs	r3, #2
 800313e:	e002      	b.n	8003146 <HAL_GPIO_Init+0x1e2>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_GPIO_Init+0x1e2>
 8003144:	2300      	movs	r3, #0
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	f002 0203 	and.w	r2, r2, #3
 800314c:	0092      	lsls	r2, r2, #2
 800314e:	4093      	lsls	r3, r2
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003156:	4937      	ldr	r1, [pc, #220]	@ (8003234 <HAL_GPIO_Init+0x2d0>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003164:	4b37      	ldr	r3, [pc, #220]	@ (8003244 <HAL_GPIO_Init+0x2e0>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003188:	4a2e      	ldr	r2, [pc, #184]	@ (8003244 <HAL_GPIO_Init+0x2e0>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318e:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_GPIO_Init+0x2e0>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	43db      	mvns	r3, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031b2:	4a24      	ldr	r2, [pc, #144]	@ (8003244 <HAL_GPIO_Init+0x2e0>)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b8:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <HAL_GPIO_Init+0x2e0>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031dc:	4a19      	ldr	r2, [pc, #100]	@ (8003244 <HAL_GPIO_Init+0x2e0>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e2:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <HAL_GPIO_Init+0x2e0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003206:	4a0f      	ldr	r2, [pc, #60]	@ (8003244 <HAL_GPIO_Init+0x2e0>)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3301      	adds	r3, #1
 8003210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f aea9 	bne.w	8002f74 <HAL_GPIO_Init+0x10>
  }
}
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40021000 	.word	0x40021000
 8003234:	40010000 	.word	0x40010000
 8003238:	48000400 	.word	0x48000400
 800323c:	48000800 	.word	0x48000800
 8003240:	48000c00 	.word	0x48000c00
 8003244:	40010400 	.word	0x40010400

08003248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800324e:	af00      	add	r7, sp, #0
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003258:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f001 b823 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 817d 	beq.w	800357e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003284:	4bbc      	ldr	r3, [pc, #752]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b04      	cmp	r3, #4
 800328e:	d00c      	beq.n	80032aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003290:	4bb9      	ldr	r3, [pc, #740]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d15c      	bne.n	8003356 <HAL_RCC_OscConfig+0x10e>
 800329c:	4bb6      	ldr	r3, [pc, #728]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a8:	d155      	bne.n	8003356 <HAL_RCC_OscConfig+0x10e>
 80032aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032ae:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_RCC_OscConfig+0x94>
 80032d6:	4ba8      	ldr	r3, [pc, #672]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e015      	b.n	8003308 <HAL_RCC_OscConfig+0xc0>
 80032dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032e0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80032f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032f4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80032f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003304:	4b9c      	ldr	r3, [pc, #624]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800330c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003310:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003314:	fa92 f2a2 	rbit	r2, r2
 8003318:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800331c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f042 0220 	orr.w	r2, r2, #32
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f002 021f 	and.w	r2, r2, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 811f 	beq.w	800357c <HAL_RCC_OscConfig+0x334>
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 8116 	bne.w	800357c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f000 bfaf 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x12e>
 8003368:	4b83      	ldr	r3, [pc, #524]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a82      	ldr	r2, [pc, #520]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e036      	b.n	80033e4 <HAL_RCC_OscConfig+0x19c>
 8003376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x158>
 8003386:	4b7c      	ldr	r3, [pc, #496]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7b      	ldr	r2, [pc, #492]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 800338c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b79      	ldr	r3, [pc, #484]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a78      	ldr	r2, [pc, #480]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 8003398:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e021      	b.n	80033e4 <HAL_RCC_OscConfig+0x19c>
 80033a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x184>
 80033b2:	4b71      	ldr	r3, [pc, #452]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a70      	ldr	r2, [pc, #448]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b6e      	ldr	r3, [pc, #440]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0x19c>
 80033cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a69      	ldr	r2, [pc, #420]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b67      	ldr	r3, [pc, #412]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a66      	ldr	r2, [pc, #408]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033e4:	4b64      	ldr	r3, [pc, #400]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	f023 020f 	bic.w	r2, r3, #15
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	495f      	ldr	r1, [pc, #380]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003402:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d059      	beq.n	80034c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fe fb2b 	bl	8001a68 <HAL_GetTick>
 8003412:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	e00a      	b.n	800342e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe fb26 	bl	8001a68 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b64      	cmp	r3, #100	@ 0x64
 8003426:	d902      	bls.n	800342e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	f000 bf43 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>
 800342e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003432:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003442:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0x218>
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	e015      	b.n	800348c <HAL_RCC_OscConfig+0x244>
 8003460:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003464:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003474:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003478:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800347c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003488:	4b3b      	ldr	r3, [pc, #236]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003490:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003494:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003498:	fa92 f2a2 	rbit	r2, r2
 800349c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80034a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	f042 0220 	orr.w	r2, r2, #32
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	f002 021f 	and.w	r2, r2, #31
 80034b4:	2101      	movs	r1, #1
 80034b6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ab      	beq.n	8003418 <HAL_RCC_OscConfig+0x1d0>
 80034c0:	e05d      	b.n	800357e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fad1 	bl	8001a68 <HAL_GetTick>
 80034c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fe facc 	bl	8001a68 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b64      	cmp	r3, #100	@ 0x64
 80034da:	d902      	bls.n	80034e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	f000 bee9 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>
 80034e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034e6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80034f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0x2cc>
 800350e:	4b1a      	ldr	r3, [pc, #104]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	e015      	b.n	8003540 <HAL_RCC_OscConfig+0x2f8>
 8003514:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003518:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003528:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800352c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003530:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800353c:	4b0e      	ldr	r3, [pc, #56]	@ (8003578 <HAL_RCC_OscConfig+0x330>)
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003544:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003548:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800354c:	fa92 f2a2 	rbit	r2, r2
 8003550:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003554:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003558:	fab2 f282 	clz	r2, r2
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f042 0220 	orr.w	r2, r2, #32
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	f002 021f 	and.w	r2, r2, #31
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f202 	lsl.w	r2, r1, r2
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ab      	bne.n	80034cc <HAL_RCC_OscConfig+0x284>
 8003574:	e003      	b.n	800357e <HAL_RCC_OscConfig+0x336>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003582:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 817d 	beq.w	800388e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003594:	4ba6      	ldr	r3, [pc, #664]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035a0:	4ba3      	ldr	r3, [pc, #652]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d172      	bne.n	8003692 <HAL_RCC_OscConfig+0x44a>
 80035ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d16c      	bne.n	8003692 <HAL_RCC_OscConfig+0x44a>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80035ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_OscConfig+0x3a0>
 80035e2:	4b93      	ldr	r3, [pc, #588]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e013      	b.n	8003610 <HAL_RCC_OscConfig+0x3c8>
 80035e8:	2302      	movs	r3, #2
 80035ea:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80035fa:	2302      	movs	r3, #2
 80035fc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003600:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800360c:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	2202      	movs	r2, #2
 8003612:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003616:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800361a:	fa92 f2a2 	rbit	r2, r2
 800361e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003622:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003626:	fab2 f282 	clz	r2, r2
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f042 0220 	orr.w	r2, r2, #32
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f002 021f 	and.w	r2, r2, #31
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCC_OscConfig+0x410>
 8003642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003646:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d002      	beq.n	8003658 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f000 be2e 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003658:	4b75      	ldr	r3, [pc, #468]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	21f8      	movs	r1, #248	@ 0xf8
 800366e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003676:	fa91 f1a1 	rbit	r1, r1
 800367a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800367e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003682:	fab1 f181 	clz	r1, r1
 8003686:	b2c9      	uxtb	r1, r1
 8003688:	408b      	lsls	r3, r1
 800368a:	4969      	ldr	r1, [pc, #420]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003690:	e0fd      	b.n	800388e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003696:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8088 	beq.w	80037b4 <HAL_RCC_OscConfig+0x56c>
 80036a4:	2301      	movs	r3, #1
 80036a6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80036b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	461a      	mov	r2, r3
 80036cc:	2301      	movs	r3, #1
 80036ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe f9ca 	bl	8001a68 <HAL_GetTick>
 80036d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7fe f9c5 	bl	8001a68 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d902      	bls.n	80036f0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	f000 bde2 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>
 80036f0:	2302      	movs	r3, #2
 80036f2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003702:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d102      	bne.n	8003720 <HAL_RCC_OscConfig+0x4d8>
 800371a:	4b45      	ldr	r3, [pc, #276]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	e013      	b.n	8003748 <HAL_RCC_OscConfig+0x500>
 8003720:	2302      	movs	r3, #2
 8003722:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003732:	2302      	movs	r3, #2
 8003734:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003738:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003744:	4b3a      	ldr	r3, [pc, #232]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	2202      	movs	r2, #2
 800374a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800374e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003752:	fa92 f2a2 	rbit	r2, r2
 8003756:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800375a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800375e:	fab2 f282 	clz	r2, r2
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f042 0220 	orr.w	r2, r2, #32
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	f002 021f 	and.w	r2, r2, #31
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f202 	lsl.w	r2, r1, r2
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0af      	beq.n	80036da <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b2d      	ldr	r3, [pc, #180]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003786:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	21f8      	movs	r1, #248	@ 0xf8
 8003790:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003798:	fa91 f1a1 	rbit	r1, r1
 800379c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80037a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80037a4:	fab1 f181 	clz	r1, r1
 80037a8:	b2c9      	uxtb	r1, r1
 80037aa:	408b      	lsls	r3, r1
 80037ac:	4920      	ldr	r1, [pc, #128]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
 80037b2:	e06c      	b.n	800388e <HAL_RCC_OscConfig+0x646>
 80037b4:	2301      	movs	r3, #1
 80037b6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80037c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	461a      	mov	r2, r3
 80037dc:	2300      	movs	r3, #0
 80037de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe f942 	bl	8001a68 <HAL_GetTick>
 80037e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ea:	f7fe f93d 	bl	8001a68 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	f000 bd5a 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>
 8003800:	2302      	movs	r3, #2
 8003802:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003812:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d104      	bne.n	8003834 <HAL_RCC_OscConfig+0x5ec>
 800382a:	4b01      	ldr	r3, [pc, #4]	@ (8003830 <HAL_RCC_OscConfig+0x5e8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	e015      	b.n	800385c <HAL_RCC_OscConfig+0x614>
 8003830:	40021000 	.word	0x40021000
 8003834:	2302      	movs	r3, #2
 8003836:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003846:	2302      	movs	r3, #2
 8003848:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800384c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003858:	4bc8      	ldr	r3, [pc, #800]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	2202      	movs	r2, #2
 800385e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003862:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003866:	fa92 f2a2 	rbit	r2, r2
 800386a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800386e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003872:	fab2 f282 	clz	r2, r2
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f042 0220 	orr.w	r2, r2, #32
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f002 021f 	and.w	r2, r2, #31
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ad      	bne.n	80037ea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003892:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8110 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d079      	beq.n	80039a8 <HAL_RCC_OscConfig+0x760>
 80038b4:	2301      	movs	r3, #1
 80038b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80038c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	4bab      	ldr	r3, [pc, #684]	@ (8003b80 <HAL_RCC_OscConfig+0x938>)
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	461a      	mov	r2, r3
 80038da:	2301      	movs	r3, #1
 80038dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038de:	f7fe f8c3 	bl	8001a68 <HAL_GetTick>
 80038e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fe f8be 	bl	8001a68 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d902      	bls.n	80038fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	f000 bcdb 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>
 80038fe:	2302      	movs	r3, #2
 8003900:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003914:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003918:	2202      	movs	r2, #2
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f2a3 	rbit	r2, r3
 800392a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800393c:	2202      	movs	r2, #2
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	fa93 f2a3 	rbit	r2, r3
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003956:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003958:	4b88      	ldr	r3, [pc, #544]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 800395a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800395c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003960:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003964:	2102      	movs	r1, #2
 8003966:	6019      	str	r1, [r3, #0]
 8003968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fa93 f1a3 	rbit	r1, r3
 8003976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800397e:	6019      	str	r1, [r3, #0]
  return result;
 8003980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003984:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0a0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x6a0>
 80039a6:	e08d      	b.n	8003ac4 <HAL_RCC_OscConfig+0x87c>
 80039a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	fa93 f2a3 	rbit	r2, r3
 80039c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039ca:	601a      	str	r2, [r3, #0]
  return result;
 80039cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	4b68      	ldr	r3, [pc, #416]	@ (8003b80 <HAL_RCC_OscConfig+0x938>)
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	461a      	mov	r2, r3
 80039e6:	2300      	movs	r3, #0
 80039e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fe f83d 	bl	8001a68 <HAL_GetTick>
 80039ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f4:	f7fe f838 	bl	8001a68 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d902      	bls.n	8003a0a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	f000 bc55 	b.w	80042b4 <HAL_RCC_OscConfig+0x106c>
 8003a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a12:	2202      	movs	r2, #2
 8003a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f2a3 	rbit	r2, r3
 8003a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a28:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a32:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a36:	2202      	movs	r2, #2
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	fa93 f2a3 	rbit	r2, r3
 8003a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	fa93 f2a3 	rbit	r2, r3
 8003a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a76:	4b41      	ldr	r3, [pc, #260]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 8003a78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a82:	2102      	movs	r1, #2
 8003a84:	6019      	str	r1, [r3, #0]
 8003a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	fa93 f1a3 	rbit	r1, r3
 8003a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a9c:	6019      	str	r1, [r3, #0]
  return result;
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d197      	bne.n	80039f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 81a1 	beq.w	8003e1c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae0:	4b26      	ldr	r3, [pc, #152]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d116      	bne.n	8003b1a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b23      	ldr	r3, [pc, #140]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4a22      	ldr	r2, [pc, #136]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	61d3      	str	r3, [r2, #28]
 8003af8:	4b20      	ldr	r3, [pc, #128]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b04:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b12:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b84 <HAL_RCC_OscConfig+0x93c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11a      	bne.n	8003b5c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b26:	4b17      	ldr	r3, [pc, #92]	@ (8003b84 <HAL_RCC_OscConfig+0x93c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a16      	ldr	r2, [pc, #88]	@ (8003b84 <HAL_RCC_OscConfig+0x93c>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b32:	f7fd ff99 	bl	8001a68 <HAL_GetTick>
 8003b36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	e009      	b.n	8003b50 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fd ff94 	bl	8001a68 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	@ 0x64
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e3b1      	b.n	80042b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <HAL_RCC_OscConfig+0x93c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ef      	beq.n	8003b3c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCC_OscConfig+0x940>
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a02      	ldr	r2, [pc, #8]	@ (8003b7c <HAL_RCC_OscConfig+0x934>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	e03c      	b.n	8003bf4 <HAL_RCC_OscConfig+0x9ac>
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	10908120 	.word	0x10908120
 8003b84:	40007000 	.word	0x40007000
 8003b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x96a>
 8003b98:	4bc1      	ldr	r3, [pc, #772]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4ac0      	ldr	r2, [pc, #768]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6213      	str	r3, [r2, #32]
 8003ba4:	4bbe      	ldr	r3, [pc, #760]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4abd      	ldr	r2, [pc, #756]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003baa:	f023 0304 	bic.w	r3, r3, #4
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e020      	b.n	8003bf4 <HAL_RCC_OscConfig+0x9ac>
 8003bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x994>
 8003bc2:	4bb7      	ldr	r3, [pc, #732]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4ab6      	ldr	r2, [pc, #728]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003bc8:	f043 0304 	orr.w	r3, r3, #4
 8003bcc:	6213      	str	r3, [r2, #32]
 8003bce:	4bb4      	ldr	r3, [pc, #720]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4ab3      	ldr	r2, [pc, #716]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6213      	str	r3, [r2, #32]
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x9ac>
 8003bdc:	4bb0      	ldr	r3, [pc, #704]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4aaf      	ldr	r2, [pc, #700]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	6213      	str	r3, [r2, #32]
 8003be8:	4bad      	ldr	r3, [pc, #692]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4aac      	ldr	r2, [pc, #688]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003bee:	f023 0304 	bic.w	r3, r3, #4
 8003bf2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8081 	beq.w	8003d08 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c06:	f7fd ff2f 	bl	8001a68 <HAL_GetTick>
 8003c0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fd ff2a 	bl	8001a68 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e345      	b.n	80042b4 <HAL_RCC_OscConfig+0x106c>
 8003c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c30:	2202      	movs	r2, #2
 8003c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c38:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	fa93 f2a3 	rbit	r2, r3
 8003c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c46:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c50:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c54:	2202      	movs	r2, #2
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	fa93 f2a3 	rbit	r2, r3
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c6e:	601a      	str	r2, [r3, #0]
  return result;
 8003c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c74:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_OscConfig+0xa4c>
 8003c8e:	4b84      	ldr	r3, [pc, #528]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	e013      	b.n	8003cbc <HAL_RCC_OscConfig+0xa74>
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f2a3 	rbit	r2, r3
 8003cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	4b79      	ldr	r3, [pc, #484]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cc0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	6011      	str	r1, [r2, #0]
 8003cc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ccc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	fa92 f1a2 	rbit	r1, r2
 8003cd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cda:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003cde:	6011      	str	r1, [r2, #0]
  return result;
 8003ce0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ce4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	fab2 f282 	clz	r2, r2
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	f002 021f 	and.w	r2, r2, #31
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d084      	beq.n	8003c10 <HAL_RCC_OscConfig+0x9c8>
 8003d06:	e07f      	b.n	8003e08 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d08:	f7fd feae 	bl	8001a68 <HAL_GetTick>
 8003d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d10:	e00b      	b.n	8003d2a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fd fea9 	bl	8001a68 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e2c4      	b.n	80042b4 <HAL_RCC_OscConfig+0x106c>
 8003d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d32:	2202      	movs	r2, #2
 8003d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	fa93 f2a3 	rbit	r2, r3
 8003d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d48:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d52:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d56:	2202      	movs	r2, #2
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	fa93 f2a3 	rbit	r2, r3
 8003d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d70:	601a      	str	r2, [r3, #0]
  return result;
 8003d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d76:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d102      	bne.n	8003d96 <HAL_RCC_OscConfig+0xb4e>
 8003d90:	4b43      	ldr	r3, [pc, #268]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	e013      	b.n	8003dbe <HAL_RCC_OscConfig+0xb76>
 8003d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d9e:	2202      	movs	r2, #2
 8003da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	4b39      	ldr	r3, [pc, #228]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dc2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	6011      	str	r1, [r2, #0]
 8003dca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dce:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	fa92 f1a2 	rbit	r1, r2
 8003dd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ddc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003de0:	6011      	str	r1, [r2, #0]
  return result;
 8003de2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003de6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	fab2 f282 	clz	r2, r2
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	f002 021f 	and.w	r2, r2, #31
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d184      	bne.n	8003d12 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e08:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	4a22      	ldr	r2, [pc, #136]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8242 	beq.w	80042b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <HAL_RCC_OscConfig+0xc58>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	f000 8213 	beq.w	8004262 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	f040 8162 	bne.w	8004112 <HAL_RCC_OscConfig+0xeca>
 8003e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e52:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e60:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	fa93 f2a3 	rbit	r2, r3
 8003e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e72:	601a      	str	r2, [r3, #0]
  return result;
 8003e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e78:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fd fde8 	bl	8001a68 <HAL_GetTick>
 8003e98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9c:	e00c      	b.n	8003eb8 <HAL_RCC_OscConfig+0xc70>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd fde0 	bl	8001a68 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1fd      	b.n	80042b4 <HAL_RCC_OscConfig+0x106c>
 8003eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ebc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ec0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	fa93 f2a3 	rbit	r2, r3
 8003ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003edc:	601a      	str	r2, [r3, #0]
  return result;
 8003ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ee6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee8:	fab3 f383 	clz	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d102      	bne.n	8003f02 <HAL_RCC_OscConfig+0xcba>
 8003efc:	4bb0      	ldr	r3, [pc, #704]	@ (80041c0 <HAL_RCC_OscConfig+0xf78>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	e027      	b.n	8003f52 <HAL_RCC_OscConfig+0xd0a>
 8003f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f06:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f14:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	fa93 f2a3 	rbit	r2, r3
 8003f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f22:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f2a3 	rbit	r2, r3
 8003f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f48:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	4b9c      	ldr	r3, [pc, #624]	@ (80041c0 <HAL_RCC_OscConfig+0xf78>)
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f56:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f5a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f5e:	6011      	str	r1, [r2, #0]
 8003f60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f64:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	fa92 f1a2 	rbit	r1, r2
 8003f6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f72:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f76:	6011      	str	r1, [r2, #0]
  return result;
 8003f78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f7c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	fab2 f282 	clz	r2, r2
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f042 0220 	orr.w	r2, r2, #32
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	f002 021f 	and.w	r2, r2, #31
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f202 	lsl.w	r2, r1, r2
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d182      	bne.n	8003ea4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9e:	4b88      	ldr	r3, [pc, #544]	@ (80041c0 <HAL_RCC_OscConfig+0xf78>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003faa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	497f      	ldr	r1, [pc, #508]	@ (80041c0 <HAL_RCC_OscConfig+0xf78>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
 8003fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fca:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	fa93 f2a3 	rbit	r2, r3
 8003fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fea:	601a      	str	r2, [r3, #0]
  return result;
 8003fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ff4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004000:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	461a      	mov	r2, r3
 8004008:	2301      	movs	r3, #1
 800400a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd fd2c 	bl	8001a68 <HAL_GetTick>
 8004010:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004014:	e009      	b.n	800402a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7fd fd27 	bl	8001a68 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e144      	b.n	80042b4 <HAL_RCC_OscConfig+0x106c>
 800402a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004032:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	fa93 f2a3 	rbit	r2, r3
 8004046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800404e:	601a      	str	r2, [r3, #0]
  return result;
 8004050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004054:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004058:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <HAL_RCC_OscConfig+0xe2c>
 800406e:	4b54      	ldr	r3, [pc, #336]	@ (80041c0 <HAL_RCC_OscConfig+0xf78>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	e027      	b.n	80040c4 <HAL_RCC_OscConfig+0xe7c>
 8004074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004078:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800407c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004086:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004094:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80040a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ac:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	fa93 f2a3 	rbit	r2, r3
 80040b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	4b3f      	ldr	r3, [pc, #252]	@ (80041c0 <HAL_RCC_OscConfig+0xf78>)
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040c8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040d0:	6011      	str	r1, [r2, #0]
 80040d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040d6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	fa92 f1a2 	rbit	r1, r2
 80040e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040e4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040e8:	6011      	str	r1, [r2, #0]
  return result;
 80040ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fab2 f282 	clz	r2, r2
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	f042 0220 	orr.w	r2, r2, #32
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	f002 021f 	and.w	r2, r2, #31
 8004104:	2101      	movs	r1, #1
 8004106:	fa01 f202 	lsl.w	r2, r1, r2
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d082      	beq.n	8004016 <HAL_RCC_OscConfig+0xdce>
 8004110:	e0cf      	b.n	80042b2 <HAL_RCC_OscConfig+0x106a>
 8004112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004116:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800411a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800411e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004124:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	fa93 f2a3 	rbit	r2, r3
 800412e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004132:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004136:	601a      	str	r2, [r3, #0]
  return result;
 8004138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004140:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800414c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	461a      	mov	r2, r3
 8004154:	2300      	movs	r3, #0
 8004156:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd fc86 	bl	8001a68 <HAL_GetTick>
 800415c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	e009      	b.n	8004176 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fd fc81 	bl	8001a68 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e09e      	b.n	80042b4 <HAL_RCC_OscConfig+0x106c>
 8004176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800417e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004188:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	fa93 f2a3 	rbit	r2, r3
 8004192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004196:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800419a:	601a      	str	r2, [r3, #0]
  return result;
 800419c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80041a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d104      	bne.n	80041c4 <HAL_RCC_OscConfig+0xf7c>
 80041ba:	4b01      	ldr	r3, [pc, #4]	@ (80041c0 <HAL_RCC_OscConfig+0xf78>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	e029      	b.n	8004214 <HAL_RCC_OscConfig+0xfcc>
 80041c0:	40021000 	.word	0x40021000
 80041c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80041cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	fa93 f2a3 	rbit	r2, r3
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	fa93 f2a3 	rbit	r2, r3
 8004206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	4b2b      	ldr	r3, [pc, #172]	@ (80042c0 <HAL_RCC_OscConfig+0x1078>)
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004218:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800421c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004220:	6011      	str	r1, [r2, #0]
 8004222:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004226:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	fa92 f1a2 	rbit	r1, r2
 8004230:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004234:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004238:	6011      	str	r1, [r2, #0]
  return result;
 800423a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800423e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	fab2 f282 	clz	r2, r2
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	f042 0220 	orr.w	r2, r2, #32
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	f002 021f 	and.w	r2, r2, #31
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f202 	lsl.w	r2, r1, r2
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d180      	bne.n	8004162 <HAL_RCC_OscConfig+0xf1a>
 8004260:	e027      	b.n	80042b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004266:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e01e      	b.n	80042b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004276:	4b12      	ldr	r3, [pc, #72]	@ (80042c0 <HAL_RCC_OscConfig+0x1078>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800427e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004282:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	429a      	cmp	r2, r3
 8004294:	d10b      	bne.n	80042ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004296:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800429a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800429e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d001      	beq.n	80042b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000

080042c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b09e      	sub	sp, #120	@ 0x78
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e162      	b.n	80045a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042dc:	4b90      	ldr	r3, [pc, #576]	@ (8004520 <HAL_RCC_ClockConfig+0x25c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d910      	bls.n	800430c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004520 <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 0207 	bic.w	r2, r3, #7
 80042f2:	498b      	ldr	r1, [pc, #556]	@ (8004520 <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b89      	ldr	r3, [pc, #548]	@ (8004520 <HAL_RCC_ClockConfig+0x25c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e14a      	b.n	80045a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b82      	ldr	r3, [pc, #520]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	497f      	ldr	r1, [pc, #508]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80dc 	beq.w	80044f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d13c      	bne.n	80043ba <HAL_RCC_ClockConfig+0xf6>
 8004340:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004344:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004348:	fa93 f3a3 	rbit	r3, r3
 800434c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800434e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004350:	fab3 f383 	clz	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d102      	bne.n	800436a <HAL_RCC_ClockConfig+0xa6>
 8004364:	4b6f      	ldr	r3, [pc, #444]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	e00f      	b.n	800438a <HAL_RCC_ClockConfig+0xc6>
 800436a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800436e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	667b      	str	r3, [r7, #100]	@ 0x64
 8004378:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800437c:	663b      	str	r3, [r7, #96]	@ 0x60
 800437e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004386:	4b67      	ldr	r3, [pc, #412]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800438e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004390:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004392:	fa92 f2a2 	rbit	r2, r2
 8004396:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004398:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800439a:	fab2 f282 	clz	r2, r2
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	f042 0220 	orr.w	r2, r2, #32
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	f002 021f 	and.w	r2, r2, #31
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f202 	lsl.w	r2, r1, r2
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d17b      	bne.n	80044ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0f3      	b.n	80045a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d13c      	bne.n	800443c <HAL_RCC_ClockConfig+0x178>
 80043c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d102      	bne.n	80043ec <HAL_RCC_ClockConfig+0x128>
 80043e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	e00f      	b.n	800440c <HAL_RCC_ClockConfig+0x148>
 80043ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004408:	4b46      	ldr	r3, [pc, #280]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004410:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004412:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004414:	fa92 f2a2 	rbit	r2, r2
 8004418:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800441a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800441c:	fab2 f282 	clz	r2, r2
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	f042 0220 	orr.w	r2, r2, #32
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	f002 021f 	and.w	r2, r2, #31
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f202 	lsl.w	r2, r1, r2
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d13a      	bne.n	80044ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0b2      	b.n	80045a2 <HAL_RCC_ClockConfig+0x2de>
 800443c:	2302      	movs	r3, #2
 800443e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d102      	bne.n	8004464 <HAL_RCC_ClockConfig+0x1a0>
 800445e:	4b31      	ldr	r3, [pc, #196]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	e00d      	b.n	8004480 <HAL_RCC_ClockConfig+0x1bc>
 8004464:	2302      	movs	r3, #2
 8004466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004470:	2302      	movs	r3, #2
 8004472:	623b      	str	r3, [r7, #32]
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	4b29      	ldr	r3, [pc, #164]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	2202      	movs	r2, #2
 8004482:	61ba      	str	r2, [r7, #24]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	fa92 f2a2 	rbit	r2, r2
 800448a:	617a      	str	r2, [r7, #20]
  return result;
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	fab2 f282 	clz	r2, r2
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	f042 0220 	orr.w	r2, r2, #32
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	f002 021f 	and.w	r2, r2, #31
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f202 	lsl.w	r2, r1, r2
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e079      	b.n	80045a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	491a      	ldr	r1, [pc, #104]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c0:	f7fd fad2 	bl	8001a68 <HAL_GetTick>
 80044c4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	e00a      	b.n	80044de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c8:	f7fd face 	bl	8001a68 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e061      	b.n	80045a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	4b11      	ldr	r3, [pc, #68]	@ (8004524 <HAL_RCC_ClockConfig+0x260>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 020c 	and.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1eb      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <HAL_RCC_ClockConfig+0x25c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d214      	bcs.n	8004528 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b08      	ldr	r3, [pc, #32]	@ (8004520 <HAL_RCC_ClockConfig+0x25c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 0207 	bic.w	r2, r3, #7
 8004506:	4906      	ldr	r1, [pc, #24]	@ (8004520 <HAL_RCC_ClockConfig+0x25c>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <HAL_RCC_ClockConfig+0x25c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e040      	b.n	80045a2 <HAL_RCC_ClockConfig+0x2de>
 8004520:	40022000 	.word	0x40022000
 8004524:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004534:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <HAL_RCC_ClockConfig+0x2e8>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	491a      	ldr	r1, [pc, #104]	@ (80045ac <HAL_RCC_ClockConfig+0x2e8>)
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004552:	4b16      	ldr	r3, [pc, #88]	@ (80045ac <HAL_RCC_ClockConfig+0x2e8>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4912      	ldr	r1, [pc, #72]	@ (80045ac <HAL_RCC_ClockConfig+0x2e8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004566:	f000 f829 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800456a:	4601      	mov	r1, r0
 800456c:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <HAL_RCC_ClockConfig+0x2e8>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004574:	22f0      	movs	r2, #240	@ 0xf0
 8004576:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	fa92 f2a2 	rbit	r2, r2
 800457e:	60fa      	str	r2, [r7, #12]
  return result;
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	fab2 f282 	clz	r2, r2
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	40d3      	lsrs	r3, r2
 800458a:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <HAL_RCC_ClockConfig+0x2ec>)
 800458c:	5cd3      	ldrb	r3, [r2, r3]
 800458e:	fa21 f303 	lsr.w	r3, r1, r3
 8004592:	4a08      	ldr	r2, [pc, #32]	@ (80045b4 <HAL_RCC_ClockConfig+0x2f0>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <HAL_RCC_ClockConfig+0x2f4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fd fa20 	bl	80019e0 <HAL_InitTick>
  
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3778      	adds	r7, #120	@ 0x78
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	08008d7c 	.word	0x08008d7c
 80045b4:	20000040 	.word	0x20000040
 80045b8:	20000044 	.word	0x20000044

080045bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	b08b      	sub	sp, #44	@ 0x2c
 80045c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	2300      	movs	r3, #0
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	2300      	movs	r3, #0
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045d6:	4b29      	ldr	r3, [pc, #164]	@ (800467c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d002      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x30>
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x36>
 80045ea:	e03c      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045ec:	4b24      	ldr	r3, [pc, #144]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045ee:	623b      	str	r3, [r7, #32]
      break;
 80045f0:	e03c      	b.n	800466c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80045f8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80045fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	fa92 f2a2 	rbit	r2, r2
 8004604:	607a      	str	r2, [r7, #4]
  return result;
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	fab2 f282 	clz	r2, r2
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	40d3      	lsrs	r3, r2
 8004610:	4a1c      	ldr	r2, [pc, #112]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004612:	5cd3      	ldrb	r3, [r2, r3]
 8004614:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004616:	4b19      	ldr	r3, [pc, #100]	@ (800467c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	220f      	movs	r2, #15
 8004620:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	fa92 f2a2 	rbit	r2, r2
 8004628:	60fa      	str	r2, [r7, #12]
  return result;
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	fab2 f282 	clz	r2, r2
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	40d3      	lsrs	r3, r2
 8004634:	4a14      	ldr	r2, [pc, #80]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004636:	5cd3      	ldrb	r3, [r2, r3]
 8004638:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004644:	4a0e      	ldr	r2, [pc, #56]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	fbb2 f2f3 	udiv	r2, r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
 8004654:	e004      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	4a0c      	ldr	r2, [pc, #48]	@ (800468c <HAL_RCC_GetSysClockFreq+0xd0>)
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	623b      	str	r3, [r7, #32]
      break;
 8004664:	e002      	b.n	800466c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004666:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004668:	623b      	str	r3, [r7, #32]
      break;
 800466a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466c:	6a3b      	ldr	r3, [r7, #32]
}
 800466e:	4618      	mov	r0, r3
 8004670:	372c      	adds	r7, #44	@ 0x2c
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	007a1200 	.word	0x007a1200
 8004684:	08008d94 	.word	0x08008d94
 8004688:	08008da4 	.word	0x08008da4
 800468c:	003d0900 	.word	0x003d0900

08004690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004694:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000040 	.word	0x20000040

080046a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80046ae:	f7ff ffef 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046b2:	4601      	mov	r1, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046bc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80046c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	fa92 f2a2 	rbit	r2, r2
 80046c8:	603a      	str	r2, [r7, #0]
  return result;
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	fab2 f282 	clz	r2, r2
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	40d3      	lsrs	r3, r2
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	08008d8c 	.word	0x08008d8c

080046ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046f2:	f7ff ffcd 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046f6:	4601      	mov	r1, r0
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004700:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004704:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	fa92 f2a2 	rbit	r2, r2
 800470c:	603a      	str	r2, [r7, #0]
  return result;
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	fab2 f282 	clz	r2, r2
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	40d3      	lsrs	r3, r2
 8004718:	4a04      	ldr	r2, [pc, #16]	@ (800472c <HAL_RCC_GetPCLK2Freq+0x40>)
 800471a:	5cd3      	ldrb	r3, [r2, r3]
 800471c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40021000 	.word	0x40021000
 800472c:	08008d8c 	.word	0x08008d8c

08004730 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b092      	sub	sp, #72	@ 0x48
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004740:	2300      	movs	r3, #0
 8004742:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80cd 	beq.w	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004754:	4b86      	ldr	r3, [pc, #536]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10e      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004760:	4b83      	ldr	r3, [pc, #524]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4a82      	ldr	r2, [pc, #520]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476a:	61d3      	str	r3, [r2, #28]
 800476c:	4b80      	ldr	r3, [pc, #512]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b7d      	ldr	r3, [pc, #500]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d118      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478a:	4b7a      	ldr	r3, [pc, #488]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a79      	ldr	r2, [pc, #484]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004794:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004796:	f7fd f967 	bl	8001a68 <HAL_GetTick>
 800479a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	e008      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479e:	f7fd f963 	bl	8001a68 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	@ 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0db      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b0:	4b70      	ldr	r3, [pc, #448]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d07d      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d076      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047da:	4b65      	ldr	r3, [pc, #404]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047e8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80047f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	461a      	mov	r2, r3
 8004804:	2301      	movs	r3, #1
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800480c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004810:	fa93 f3a3 	rbit	r3, r3
 8004814:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004818:	fab3 f383 	clz	r3, r3
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	4b55      	ldr	r3, [pc, #340]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	461a      	mov	r2, r3
 8004828:	2300      	movs	r3, #0
 800482a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800482c:	4a50      	ldr	r2, [pc, #320]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800482e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004830:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d045      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7fd f914 	bl	8001a68 <HAL_GetTick>
 8004840:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	e00a      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fd f910 	bl	8001a68 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e086      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800485a:	2302      	movs	r3, #2
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004860:	fa93 f3a3 	rbit	r3, r3
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
 8004866:	2302      	movs	r3, #2
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	fa93 f3a3 	rbit	r3, r3
 8004870:	61fb      	str	r3, [r7, #28]
  return result;
 8004872:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f043 0302 	orr.w	r3, r3, #2
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d102      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004888:	4b39      	ldr	r3, [pc, #228]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	e007      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800488e:	2302      	movs	r3, #2
 8004890:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	fa93 f3a3 	rbit	r3, r3
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	4b35      	ldr	r3, [pc, #212]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	2202      	movs	r2, #2
 80048a0:	613a      	str	r2, [r7, #16]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	fa92 f2a2 	rbit	r2, r2
 80048a8:	60fa      	str	r2, [r7, #12]
  return result;
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	fab2 f282 	clz	r2, r2
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	f002 021f 	and.w	r2, r2, #31
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f202 	lsl.w	r2, r1, r2
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0bd      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048c8:	4b29      	ldr	r3, [pc, #164]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4926      	ldr	r1, [pc, #152]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d105      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e2:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4a22      	ldr	r2, [pc, #136]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	491a      	ldr	r1, [pc, #104]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004908:	4313      	orrs	r3, r2
 800490a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004918:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	f023 0210 	bic.w	r2, r3, #16
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4912      	ldr	r1, [pc, #72]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004926:	4313      	orrs	r3, r2
 8004928:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004936:	4b0e      	ldr	r3, [pc, #56]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	490b      	ldr	r1, [pc, #44]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004944:	4313      	orrs	r3, r2
 8004946:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	4903      	ldr	r1, [pc, #12]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004962:	4313      	orrs	r3, r2
 8004964:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3748      	adds	r7, #72	@ 0x48
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000
 8004974:	40007000 	.word	0x40007000
 8004978:	10908100 	.word	0x10908100

0800497c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e049      	b.n	8004a22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fc fe24 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fb60 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e049      	b.n	8004ad0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f841 	bl	8004ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f000 fb09 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <HAL_TIM_PWM_Start+0x24>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	bf14      	ite	ne
 8004b08:	2301      	movne	r3, #1
 8004b0a:	2300      	moveq	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e03c      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d109      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x3e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	bf14      	ite	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	2300      	moveq	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	e02f      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d109      	bne.n	8004b44 <HAL_TIM_PWM_Start+0x58>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	bf14      	ite	ne
 8004b3c:	2301      	movne	r3, #1
 8004b3e:	2300      	moveq	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e022      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d109      	bne.n	8004b5e <HAL_TIM_PWM_Start+0x72>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	e015      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d109      	bne.n	8004b78 <HAL_TIM_PWM_Start+0x8c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e008      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e088      	b.n	8004ca4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0xb6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba0:	e023      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xc6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb0:	e01b      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xd6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bc0:	e013      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0xe6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bd0:	e00b      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_PWM_Start+0xf6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004be0:	e003      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fdfc 	bl	80057f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004cac <HAL_TIM_PWM_Start+0x1c0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x134>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb0 <HAL_TIM_PWM_Start+0x1c4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x134>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a28      	ldr	r2, [pc, #160]	@ (8004cb4 <HAL_TIM_PWM_Start+0x1c8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x134>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a27      	ldr	r2, [pc, #156]	@ (8004cb8 <HAL_TIM_PWM_Start+0x1cc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_PWM_Start+0x138>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <HAL_TIM_PWM_Start+0x13a>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cac <HAL_TIM_PWM_Start+0x1c0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x176>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x176>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <HAL_TIM_PWM_Start+0x1d0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x176>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a14      	ldr	r2, [pc, #80]	@ (8004cb0 <HAL_TIM_PWM_Start+0x1c4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d115      	bne.n	8004c8e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <HAL_TIM_PWM_Start+0x1d4>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d015      	beq.n	8004ca0 <HAL_TIM_PWM_Start+0x1b4>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7a:	d011      	beq.n	8004ca0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	e008      	b.n	8004ca0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e000      	b.n	8004ca2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40014000 	.word	0x40014000
 8004cb4:	40014400 	.word	0x40014400
 8004cb8:	40014800 	.word	0x40014800
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	00010007 	.word	0x00010007

08004cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0ff      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b14      	cmp	r3, #20
 8004cee:	f200 80f0 	bhi.w	8004ed2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004ed3 	.word	0x08004ed3
 8004d00:	08004ed3 	.word	0x08004ed3
 8004d04:	08004ed3 	.word	0x08004ed3
 8004d08:	08004d8d 	.word	0x08004d8d
 8004d0c:	08004ed3 	.word	0x08004ed3
 8004d10:	08004ed3 	.word	0x08004ed3
 8004d14:	08004ed3 	.word	0x08004ed3
 8004d18:	08004dcf 	.word	0x08004dcf
 8004d1c:	08004ed3 	.word	0x08004ed3
 8004d20:	08004ed3 	.word	0x08004ed3
 8004d24:	08004ed3 	.word	0x08004ed3
 8004d28:	08004e0f 	.word	0x08004e0f
 8004d2c:	08004ed3 	.word	0x08004ed3
 8004d30:	08004ed3 	.word	0x08004ed3
 8004d34:	08004ed3 	.word	0x08004ed3
 8004d38:	08004e51 	.word	0x08004e51
 8004d3c:	08004ed3 	.word	0x08004ed3
 8004d40:	08004ed3 	.word	0x08004ed3
 8004d44:	08004ed3 	.word	0x08004ed3
 8004d48:	08004e91 	.word	0x08004e91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fa0c 	bl	8005170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0208 	orr.w	r2, r2, #8
 8004d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6999      	ldr	r1, [r3, #24]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	619a      	str	r2, [r3, #24]
      break;
 8004d8a:	e0a5      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fa72 	bl	800527c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	619a      	str	r2, [r3, #24]
      break;
 8004dcc:	e084      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fad1 	bl	800537c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0208 	orr.w	r2, r2, #8
 8004de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0204 	bic.w	r2, r2, #4
 8004df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69d9      	ldr	r1, [r3, #28]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	61da      	str	r2, [r3, #28]
      break;
 8004e0c:	e064      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fb2f 	bl	8005478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	021a      	lsls	r2, r3, #8
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	61da      	str	r2, [r3, #28]
      break;
 8004e4e:	e043      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb72 	bl	8005540 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e8e:	e023      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fbb0 	bl	80055fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	021a      	lsls	r2, r3, #8
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ed0:	e002      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop

08004eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e0b6      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x18a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f44:	d03e      	beq.n	8004fc4 <HAL_TIM_ConfigClockSource+0xd8>
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f4a:	f200 8087 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x170>
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f52:	f000 8086 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x176>
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5a:	d87f      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x170>
 8004f5c:	2b70      	cmp	r3, #112	@ 0x70
 8004f5e:	d01a      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0xaa>
 8004f60:	2b70      	cmp	r3, #112	@ 0x70
 8004f62:	d87b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x170>
 8004f64:	2b60      	cmp	r3, #96	@ 0x60
 8004f66:	d050      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x11e>
 8004f68:	2b60      	cmp	r3, #96	@ 0x60
 8004f6a:	d877      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x170>
 8004f6c:	2b50      	cmp	r3, #80	@ 0x50
 8004f6e:	d03c      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0xfe>
 8004f70:	2b50      	cmp	r3, #80	@ 0x50
 8004f72:	d873      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x170>
 8004f74:	2b40      	cmp	r3, #64	@ 0x40
 8004f76:	d058      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x13e>
 8004f78:	2b40      	cmp	r3, #64	@ 0x40
 8004f7a:	d86f      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x170>
 8004f7c:	2b30      	cmp	r3, #48	@ 0x30
 8004f7e:	d064      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15e>
 8004f80:	2b30      	cmp	r3, #48	@ 0x30
 8004f82:	d86b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x170>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d060      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15e>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d867      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x170>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05c      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15e>
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d05a      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15e>
 8004f94:	e062      	b.n	800505c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fa6:	f000 fc03 	bl	80057b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	609a      	str	r2, [r3, #8]
      break;
 8004fc2:	e04f      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd4:	f000 fbec 	bl	80057b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fe6:	609a      	str	r2, [r3, #8]
      break;
 8004fe8:	e03c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f000 fb60 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2150      	movs	r1, #80	@ 0x50
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fbb9 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8005008:	e02c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005016:	461a      	mov	r2, r3
 8005018:	f000 fb7f 	bl	800571a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2160      	movs	r1, #96	@ 0x60
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fba9 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8005028:	e01c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005036:	461a      	mov	r2, r3
 8005038:	f000 fb40 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2140      	movs	r1, #64	@ 0x40
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb99 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8005048:	e00c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f000 fb90 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 800505a:	e003      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e000      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a32      	ldr	r2, [pc, #200]	@ (800515c <TIM_Base_SetConfig+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d007      	beq.n	80050a8 <TIM_Base_SetConfig+0x28>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509e:	d003      	beq.n	80050a8 <TIM_Base_SetConfig+0x28>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005160 <TIM_Base_SetConfig+0xe0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d108      	bne.n	80050ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a27      	ldr	r2, [pc, #156]	@ (800515c <TIM_Base_SetConfig+0xdc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c8:	d00f      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a24      	ldr	r2, [pc, #144]	@ (8005160 <TIM_Base_SetConfig+0xe0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00b      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a23      	ldr	r2, [pc, #140]	@ (8005164 <TIM_Base_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a22      	ldr	r2, [pc, #136]	@ (8005168 <TIM_Base_SetConfig+0xe8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a21      	ldr	r2, [pc, #132]	@ (800516c <TIM_Base_SetConfig+0xec>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a0e      	ldr	r2, [pc, #56]	@ (800515c <TIM_Base_SetConfig+0xdc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <TIM_Base_SetConfig+0xc0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0e      	ldr	r2, [pc, #56]	@ (8005164 <TIM_Base_SetConfig+0xe4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_Base_SetConfig+0xc0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a0d      	ldr	r2, [pc, #52]	@ (8005168 <TIM_Base_SetConfig+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_Base_SetConfig+0xc0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a0c      	ldr	r2, [pc, #48]	@ (800516c <TIM_Base_SetConfig+0xec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d103      	bne.n	8005148 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	615a      	str	r2, [r3, #20]
}
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40000400 	.word	0x40000400
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0201 	bic.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 0302 	bic.w	r3, r3, #2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a28      	ldr	r2, [pc, #160]	@ (800526c <TIM_OC1_SetConfig+0xfc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00b      	beq.n	80051e8 <TIM_OC1_SetConfig+0x78>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <TIM_OC1_SetConfig+0x100>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d007      	beq.n	80051e8 <TIM_OC1_SetConfig+0x78>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a26      	ldr	r2, [pc, #152]	@ (8005274 <TIM_OC1_SetConfig+0x104>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_OC1_SetConfig+0x78>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a25      	ldr	r2, [pc, #148]	@ (8005278 <TIM_OC1_SetConfig+0x108>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10c      	bne.n	8005202 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0308 	bic.w	r3, r3, #8
 80051ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 0304 	bic.w	r3, r3, #4
 8005200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a19      	ldr	r2, [pc, #100]	@ (800526c <TIM_OC1_SetConfig+0xfc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_OC1_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <TIM_OC1_SetConfig+0x100>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_OC1_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <TIM_OC1_SetConfig+0x104>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC1_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <TIM_OC1_SetConfig+0x108>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d111      	bne.n	8005246 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800

0800527c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0210 	bic.w	r2, r3, #16
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0320 	bic.w	r3, r3, #32
 80052ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a24      	ldr	r2, [pc, #144]	@ (800536c <TIM_OC2_SetConfig+0xf0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1b      	ldr	r2, [pc, #108]	@ (800536c <TIM_OC2_SetConfig+0xf0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_OC2_SetConfig+0xa0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1a      	ldr	r2, [pc, #104]	@ (8005370 <TIM_OC2_SetConfig+0xf4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC2_SetConfig+0xa0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a19      	ldr	r2, [pc, #100]	@ (8005374 <TIM_OC2_SetConfig+0xf8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC2_SetConfig+0xa0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <TIM_OC2_SetConfig+0xfc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d113      	bne.n	8005344 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005322:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800532a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a23      	ldr	r2, [pc, #140]	@ (8005468 <TIM_OC3_SetConfig+0xec>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10d      	bne.n	80053fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053f8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005468 <TIM_OC3_SetConfig+0xec>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_OC3_SetConfig+0x9e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a19      	ldr	r2, [pc, #100]	@ (800546c <TIM_OC3_SetConfig+0xf0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC3_SetConfig+0x9e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a18      	ldr	r2, [pc, #96]	@ (8005470 <TIM_OC3_SetConfig+0xf4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC3_SetConfig+0x9e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a17      	ldr	r2, [pc, #92]	@ (8005474 <TIM_OC3_SetConfig+0xf8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d113      	bne.n	8005442 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	031b      	lsls	r3, r3, #12
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a16      	ldr	r2, [pc, #88]	@ (8005530 <TIM_OC4_SetConfig+0xb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC4_SetConfig+0x7c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <TIM_OC4_SetConfig+0xbc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC4_SetConfig+0x7c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a14      	ldr	r2, [pc, #80]	@ (8005538 <TIM_OC4_SetConfig+0xc0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC4_SetConfig+0x7c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a13      	ldr	r2, [pc, #76]	@ (800553c <TIM_OC4_SetConfig+0xc4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d109      	bne.n	8005508 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	019b      	lsls	r3, r3, #6
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800

08005540 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005584:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a15      	ldr	r2, [pc, #84]	@ (80055ec <TIM_OC5_SetConfig+0xac>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_OC5_SetConfig+0x72>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a14      	ldr	r2, [pc, #80]	@ (80055f0 <TIM_OC5_SetConfig+0xb0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <TIM_OC5_SetConfig+0x72>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a13      	ldr	r2, [pc, #76]	@ (80055f4 <TIM_OC5_SetConfig+0xb4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_OC5_SetConfig+0x72>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a12      	ldr	r2, [pc, #72]	@ (80055f8 <TIM_OC5_SetConfig+0xb8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d109      	bne.n	80055c6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	621a      	str	r2, [r3, #32]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800

080055fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	051b      	lsls	r3, r3, #20
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a16      	ldr	r2, [pc, #88]	@ (80056ac <TIM_OC6_SetConfig+0xb0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_OC6_SetConfig+0x74>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a15      	ldr	r2, [pc, #84]	@ (80056b0 <TIM_OC6_SetConfig+0xb4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_OC6_SetConfig+0x74>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a14      	ldr	r2, [pc, #80]	@ (80056b4 <TIM_OC6_SetConfig+0xb8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC6_SetConfig+0x74>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a13      	ldr	r2, [pc, #76]	@ (80056b8 <TIM_OC6_SetConfig+0xbc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d109      	bne.n	8005684 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	029b      	lsls	r3, r3, #10
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800

080056bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 030a 	bic.w	r3, r3, #10
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800571a:	b480      	push	{r7}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0210 	bic.w	r2, r3, #16
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	031b      	lsls	r3, r3, #12
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	f043 0307 	orr.w	r3, r3, #7
 800579c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2201      	movs	r2, #1
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1a      	ldr	r2, [r3, #32]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	43db      	mvns	r3, r3
 8005812:	401a      	ands	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1a      	ldr	r2, [r3, #32]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	fa01 f303 	lsl.w	r3, r1, r3
 8005828:	431a      	orrs	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <HAL_TIMEx_PWMN_Start+0x24>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	bf14      	ite	ne
 8005858:	2301      	movne	r3, #1
 800585a:	2300      	moveq	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e022      	b.n	80058a6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b04      	cmp	r3, #4
 8005864:	d109      	bne.n	800587a <HAL_TIMEx_PWMN_Start+0x3e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	bf14      	ite	ne
 8005872:	2301      	movne	r3, #1
 8005874:	2300      	moveq	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e015      	b.n	80058a6 <HAL_TIMEx_PWMN_Start+0x6a>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d109      	bne.n	8005894 <HAL_TIMEx_PWMN_Start+0x58>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e008      	b.n	80058a6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e05f      	b.n	800596e <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <HAL_TIMEx_PWMN_Start+0x82>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058bc:	e013      	b.n	80058e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d104      	bne.n	80058ce <HAL_TIMEx_PWMN_Start+0x92>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058cc:	e00b      	b.n	80058e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d104      	bne.n	80058de <HAL_TIMEx_PWMN_Start+0xa2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058dc:	e003      	b.n	80058e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2204      	movs	r2, #4
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f930 	bl	8005b54 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005902:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1b      	ldr	r2, [pc, #108]	@ (8005978 <HAL_TIMEx_PWMN_Start+0x13c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_TIMEx_PWMN_Start+0xf0>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005916:	d009      	beq.n	800592c <HAL_TIMEx_PWMN_Start+0xf0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a17      	ldr	r2, [pc, #92]	@ (800597c <HAL_TIMEx_PWMN_Start+0x140>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIMEx_PWMN_Start+0xf0>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a16      	ldr	r2, [pc, #88]	@ (8005980 <HAL_TIMEx_PWMN_Start+0x144>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d115      	bne.n	8005958 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	4b14      	ldr	r3, [pc, #80]	@ (8005984 <HAL_TIMEx_PWMN_Start+0x148>)
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b06      	cmp	r3, #6
 800593c:	d015      	beq.n	800596a <HAL_TIMEx_PWMN_Start+0x12e>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005944:	d011      	beq.n	800596a <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005956:	e008      	b.n	800596a <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e000      	b.n	800596c <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40000400 	.word	0x40000400
 8005980:	40014000 	.word	0x40014000
 8005984:	00010007 	.word	0x00010007

08005988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e054      	b.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a24      	ldr	r2, [pc, #144]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a17      	ldr	r2, [pc, #92]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a08:	d009      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a13      	ldr	r2, [pc, #76]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a11      	ldr	r2, [pc, #68]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d10c      	bne.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40014000 	.word	0x40014000

08005a64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e060      	b.n	8005b42 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	041b      	lsls	r3, r3, #16
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a14      	ldr	r2, [pc, #80]	@ (8005b50 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d115      	bne.n	8005b30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	051b      	lsls	r3, r3, #20
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00

08005b54 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2204      	movs	r2, #4
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	43db      	mvns	r3, r3
 8005b76:	401a      	ands	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a1a      	ldr	r2, [r3, #32]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e040      	b.n	8005c32 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fb fd6d 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2224      	movs	r2, #36	@ 0x24
 8005bca:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8b5 	bl	8005d4c <UART_SetConfig>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e022      	b.n	8005c32 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f9df 	bl	8005fb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0201 	orr.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa66 	bl	80060fc <UART_CheckIdleState>
 8005c30:	4603      	mov	r3, r0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b08a      	sub	sp, #40	@ 0x28
 8005c3e:	af02      	add	r7, sp, #8
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d177      	bne.n	8005d42 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_UART_Transmit+0x24>
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e070      	b.n	8005d44 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2221      	movs	r2, #33	@ 0x21
 8005c6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c70:	f7fb fefa 	bl	8001a68 <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	88fa      	ldrh	r2, [r7, #6]
 8005c82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8e:	d108      	bne.n	8005ca2 <HAL_UART_Transmit+0x68>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	e003      	b.n	8005caa <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005caa:	e02f      	b.n	8005d0c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2180      	movs	r1, #128	@ 0x80
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fac8 	bl	800624c <UART_WaitOnFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e03b      	b.n	8005d44 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10b      	bne.n	8005cea <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	881a      	ldrh	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cde:	b292      	uxth	r2, r2
 8005ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	e007      	b.n	8005cfa <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1c9      	bne.n	8005cac <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2140      	movs	r1, #64	@ 0x40
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fa92 	bl	800624c <UART_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e005      	b.n	8005d44 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e000      	b.n	8005d44 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b8a      	ldr	r3, [pc, #552]	@ (8005fa0 <UART_SetConfig+0x254>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	6979      	ldr	r1, [r7, #20]
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a78      	ldr	r2, [pc, #480]	@ (8005fa4 <UART_SetConfig+0x258>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d120      	bne.n	8005e0a <UART_SetConfig+0xbe>
 8005dc8:	4b77      	ldr	r3, [pc, #476]	@ (8005fa8 <UART_SetConfig+0x25c>)
 8005dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d817      	bhi.n	8005e04 <UART_SetConfig+0xb8>
 8005dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x90>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005dff 	.word	0x08005dff
 8005de8:	08005df3 	.word	0x08005df3
 8005dec:	2300      	movs	r3, #0
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e01d      	b.n	8005e2e <UART_SetConfig+0xe2>
 8005df2:	2302      	movs	r3, #2
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e01a      	b.n	8005e2e <UART_SetConfig+0xe2>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e017      	b.n	8005e2e <UART_SetConfig+0xe2>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e014      	b.n	8005e2e <UART_SetConfig+0xe2>
 8005e04:	2310      	movs	r3, #16
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e011      	b.n	8005e2e <UART_SetConfig+0xe2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a67      	ldr	r2, [pc, #412]	@ (8005fac <UART_SetConfig+0x260>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d102      	bne.n	8005e1a <UART_SetConfig+0xce>
 8005e14:	2300      	movs	r3, #0
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e009      	b.n	8005e2e <UART_SetConfig+0xe2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a64      	ldr	r2, [pc, #400]	@ (8005fb0 <UART_SetConfig+0x264>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d102      	bne.n	8005e2a <UART_SetConfig+0xde>
 8005e24:	2300      	movs	r3, #0
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e001      	b.n	8005e2e <UART_SetConfig+0xe2>
 8005e2a:	2310      	movs	r3, #16
 8005e2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e36:	d15a      	bne.n	8005eee <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005e38:	7ffb      	ldrb	r3, [r7, #31]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d827      	bhi.n	8005e8e <UART_SetConfig+0x142>
 8005e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <UART_SetConfig+0xf8>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	08005e8f 	.word	0x08005e8f
 8005e54:	08005e7f 	.word	0x08005e7f
 8005e58:	08005e8f 	.word	0x08005e8f
 8005e5c:	08005e8f 	.word	0x08005e8f
 8005e60:	08005e8f 	.word	0x08005e8f
 8005e64:	08005e87 	.word	0x08005e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fc1e 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	61b8      	str	r0, [r7, #24]
        break;
 8005e6e:	e013      	b.n	8005e98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e70:	f7fe fc3c 	bl	80046ec <HAL_RCC_GetPCLK2Freq>
 8005e74:	61b8      	str	r0, [r7, #24]
        break;
 8005e76:	e00f      	b.n	8005e98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e78:	4b4e      	ldr	r3, [pc, #312]	@ (8005fb4 <UART_SetConfig+0x268>)
 8005e7a:	61bb      	str	r3, [r7, #24]
        break;
 8005e7c:	e00c      	b.n	8005e98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7e:	f7fe fb9d 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8005e82:	61b8      	str	r0, [r7, #24]
        break;
 8005e84:	e008      	b.n	8005e98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e8a:	61bb      	str	r3, [r7, #24]
        break;
 8005e8c:	e004      	b.n	8005e98 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	77bb      	strb	r3, [r7, #30]
        break;
 8005e96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d074      	beq.n	8005f88 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	005a      	lsls	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	441a      	add	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	d916      	bls.n	8005ee8 <UART_SetConfig+0x19c>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ec0:	d212      	bcs.n	8005ee8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f023 030f 	bic.w	r3, r3, #15
 8005eca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	89fa      	ldrh	r2, [r7, #14]
 8005ee4:	60da      	str	r2, [r3, #12]
 8005ee6:	e04f      	b.n	8005f88 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	77bb      	strb	r3, [r7, #30]
 8005eec:	e04c      	b.n	8005f88 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eee:	7ffb      	ldrb	r3, [r7, #31]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d828      	bhi.n	8005f46 <UART_SetConfig+0x1fa>
 8005ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8005efc <UART_SetConfig+0x1b0>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f29 	.word	0x08005f29
 8005f04:	08005f31 	.word	0x08005f31
 8005f08:	08005f47 	.word	0x08005f47
 8005f0c:	08005f37 	.word	0x08005f37
 8005f10:	08005f47 	.word	0x08005f47
 8005f14:	08005f47 	.word	0x08005f47
 8005f18:	08005f47 	.word	0x08005f47
 8005f1c:	08005f3f 	.word	0x08005f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f20:	f7fe fbc2 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8005f24:	61b8      	str	r0, [r7, #24]
        break;
 8005f26:	e013      	b.n	8005f50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f28:	f7fe fbe0 	bl	80046ec <HAL_RCC_GetPCLK2Freq>
 8005f2c:	61b8      	str	r0, [r7, #24]
        break;
 8005f2e:	e00f      	b.n	8005f50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f30:	4b20      	ldr	r3, [pc, #128]	@ (8005fb4 <UART_SetConfig+0x268>)
 8005f32:	61bb      	str	r3, [r7, #24]
        break;
 8005f34:	e00c      	b.n	8005f50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f36:	f7fe fb41 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8005f3a:	61b8      	str	r0, [r7, #24]
        break;
 8005f3c:	e008      	b.n	8005f50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f42:	61bb      	str	r3, [r7, #24]
        break;
 8005f44:	e004      	b.n	8005f50 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	77bb      	strb	r3, [r7, #30]
        break;
 8005f4e:	bf00      	nop
    }

    if (pclk != 0U)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	085a      	lsrs	r2, r3, #1
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	441a      	add	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b0f      	cmp	r3, #15
 8005f6e:	d909      	bls.n	8005f84 <UART_SetConfig+0x238>
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f76:	d205      	bcs.n	8005f84 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	e001      	b.n	8005f88 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f94:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	efff69f3 	.word	0xefff69f3
 8005fa4:	40013800 	.word	0x40013800
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40004400 	.word	0x40004400
 8005fb0:	40004800 	.word	0x40004800
 8005fb4:	007a1200 	.word	0x007a1200

08005fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01a      	beq.n	80060ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060b6:	d10a      	bne.n	80060ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	605a      	str	r2, [r3, #4]
  }
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b098      	sub	sp, #96	@ 0x60
 8006100:	af02      	add	r7, sp, #8
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800610c:	f7fb fcac 	bl	8001a68 <HAL_GetTick>
 8006110:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b08      	cmp	r3, #8
 800611e:	d12e      	bne.n	800617e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006120:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006128:	2200      	movs	r2, #0
 800612a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f88c 	bl	800624c <UART_WaitOnFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d021      	beq.n	800617e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800614e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006158:	647b      	str	r3, [r7, #68]	@ 0x44
 800615a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800615e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e6      	bne.n	800613a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e062      	b.n	8006244 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b04      	cmp	r3, #4
 800618a:	d149      	bne.n	8006220 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f856 	bl	800624c <UART_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d03c      	beq.n	8006220 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	623b      	str	r3, [r7, #32]
   return(result);
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0301 	bic.w	r3, r3, #1
 80061ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3308      	adds	r3, #8
 80061f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061f8:	61fa      	str	r2, [r7, #28]
 80061fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	617b      	str	r3, [r7, #20]
   return(result);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e011      	b.n	8006244 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3758      	adds	r7, #88	@ 0x58
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625c:	e049      	b.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d045      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006266:	f7fb fbff 	bl	8001a68 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	429a      	cmp	r2, r3
 8006274:	d302      	bcc.n	800627c <UART_WaitOnFlagUntilTimeout+0x30>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e048      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d031      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d110      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2208      	movs	r2, #8
 80062a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f838 	bl	800631a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2208      	movs	r2, #8
 80062ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e029      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062cc:	d111      	bne.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f81e 	bl	800631a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e00f      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4013      	ands	r3, r2
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	bf0c      	ite	eq
 8006302:	2301      	moveq	r3, #1
 8006304:	2300      	movne	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	429a      	cmp	r2, r3
 800630e:	d0a6      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800631a:	b480      	push	{r7}
 800631c:	b095      	sub	sp, #84	@ 0x54
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006340:	643b      	str	r3, [r7, #64]	@ 0x40
 8006342:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	61fb      	str	r3, [r7, #28]
   return(result);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006376:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800637a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800638c:	2b01      	cmp	r3, #1
 800638e:	d118      	bne.n	80063c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	60bb      	str	r3, [r7, #8]
   return(result);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f023 0310 	bic.w	r3, r3, #16
 80063a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6979      	ldr	r1, [r7, #20]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	613b      	str	r3, [r7, #16]
   return(result);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e6      	bne.n	8006390 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063d6:	bf00      	nop
 80063d8:	3754      	adds	r7, #84	@ 0x54
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <__cvt>:
 80063e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e6:	ec57 6b10 	vmov	r6, r7, d0
 80063ea:	2f00      	cmp	r7, #0
 80063ec:	460c      	mov	r4, r1
 80063ee:	4619      	mov	r1, r3
 80063f0:	463b      	mov	r3, r7
 80063f2:	bfbb      	ittet	lt
 80063f4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063f8:	461f      	movlt	r7, r3
 80063fa:	2300      	movge	r3, #0
 80063fc:	232d      	movlt	r3, #45	@ 0x2d
 80063fe:	700b      	strb	r3, [r1, #0]
 8006400:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006402:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006406:	4691      	mov	r9, r2
 8006408:	f023 0820 	bic.w	r8, r3, #32
 800640c:	bfbc      	itt	lt
 800640e:	4632      	movlt	r2, r6
 8006410:	4616      	movlt	r6, r2
 8006412:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006416:	d005      	beq.n	8006424 <__cvt+0x42>
 8006418:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800641c:	d100      	bne.n	8006420 <__cvt+0x3e>
 800641e:	3401      	adds	r4, #1
 8006420:	2102      	movs	r1, #2
 8006422:	e000      	b.n	8006426 <__cvt+0x44>
 8006424:	2103      	movs	r1, #3
 8006426:	ab03      	add	r3, sp, #12
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	ab02      	add	r3, sp, #8
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	ec47 6b10 	vmov	d0, r6, r7
 8006432:	4653      	mov	r3, sl
 8006434:	4622      	mov	r2, r4
 8006436:	f000 fe4b 	bl	80070d0 <_dtoa_r>
 800643a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800643e:	4605      	mov	r5, r0
 8006440:	d119      	bne.n	8006476 <__cvt+0x94>
 8006442:	f019 0f01 	tst.w	r9, #1
 8006446:	d00e      	beq.n	8006466 <__cvt+0x84>
 8006448:	eb00 0904 	add.w	r9, r0, r4
 800644c:	2200      	movs	r2, #0
 800644e:	2300      	movs	r3, #0
 8006450:	4630      	mov	r0, r6
 8006452:	4639      	mov	r1, r7
 8006454:	f7fa fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006458:	b108      	cbz	r0, 800645e <__cvt+0x7c>
 800645a:	f8cd 900c 	str.w	r9, [sp, #12]
 800645e:	2230      	movs	r2, #48	@ 0x30
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	454b      	cmp	r3, r9
 8006464:	d31e      	bcc.n	80064a4 <__cvt+0xc2>
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800646a:	1b5b      	subs	r3, r3, r5
 800646c:	4628      	mov	r0, r5
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	b004      	add	sp, #16
 8006472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006476:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800647a:	eb00 0904 	add.w	r9, r0, r4
 800647e:	d1e5      	bne.n	800644c <__cvt+0x6a>
 8006480:	7803      	ldrb	r3, [r0, #0]
 8006482:	2b30      	cmp	r3, #48	@ 0x30
 8006484:	d10a      	bne.n	800649c <__cvt+0xba>
 8006486:	2200      	movs	r2, #0
 8006488:	2300      	movs	r3, #0
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7fa fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006492:	b918      	cbnz	r0, 800649c <__cvt+0xba>
 8006494:	f1c4 0401 	rsb	r4, r4, #1
 8006498:	f8ca 4000 	str.w	r4, [sl]
 800649c:	f8da 3000 	ldr.w	r3, [sl]
 80064a0:	4499      	add	r9, r3
 80064a2:	e7d3      	b.n	800644c <__cvt+0x6a>
 80064a4:	1c59      	adds	r1, r3, #1
 80064a6:	9103      	str	r1, [sp, #12]
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e7d9      	b.n	8006460 <__cvt+0x7e>

080064ac <__exponent>:
 80064ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ae:	2900      	cmp	r1, #0
 80064b0:	bfba      	itte	lt
 80064b2:	4249      	neglt	r1, r1
 80064b4:	232d      	movlt	r3, #45	@ 0x2d
 80064b6:	232b      	movge	r3, #43	@ 0x2b
 80064b8:	2909      	cmp	r1, #9
 80064ba:	7002      	strb	r2, [r0, #0]
 80064bc:	7043      	strb	r3, [r0, #1]
 80064be:	dd29      	ble.n	8006514 <__exponent+0x68>
 80064c0:	f10d 0307 	add.w	r3, sp, #7
 80064c4:	461d      	mov	r5, r3
 80064c6:	270a      	movs	r7, #10
 80064c8:	461a      	mov	r2, r3
 80064ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80064ce:	fb07 1416 	mls	r4, r7, r6, r1
 80064d2:	3430      	adds	r4, #48	@ 0x30
 80064d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064d8:	460c      	mov	r4, r1
 80064da:	2c63      	cmp	r4, #99	@ 0x63
 80064dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80064e0:	4631      	mov	r1, r6
 80064e2:	dcf1      	bgt.n	80064c8 <__exponent+0x1c>
 80064e4:	3130      	adds	r1, #48	@ 0x30
 80064e6:	1e94      	subs	r4, r2, #2
 80064e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064ec:	1c41      	adds	r1, r0, #1
 80064ee:	4623      	mov	r3, r4
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	d30a      	bcc.n	800650a <__exponent+0x5e>
 80064f4:	f10d 0309 	add.w	r3, sp, #9
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	42ac      	cmp	r4, r5
 80064fc:	bf88      	it	hi
 80064fe:	2300      	movhi	r3, #0
 8006500:	3302      	adds	r3, #2
 8006502:	4403      	add	r3, r0
 8006504:	1a18      	subs	r0, r3, r0
 8006506:	b003      	add	sp, #12
 8006508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800650a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800650e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006512:	e7ed      	b.n	80064f0 <__exponent+0x44>
 8006514:	2330      	movs	r3, #48	@ 0x30
 8006516:	3130      	adds	r1, #48	@ 0x30
 8006518:	7083      	strb	r3, [r0, #2]
 800651a:	70c1      	strb	r1, [r0, #3]
 800651c:	1d03      	adds	r3, r0, #4
 800651e:	e7f1      	b.n	8006504 <__exponent+0x58>

08006520 <_printf_float>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	b08d      	sub	sp, #52	@ 0x34
 8006526:	460c      	mov	r4, r1
 8006528:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800652c:	4616      	mov	r6, r2
 800652e:	461f      	mov	r7, r3
 8006530:	4605      	mov	r5, r0
 8006532:	f000 fccd 	bl	8006ed0 <_localeconv_r>
 8006536:	6803      	ldr	r3, [r0, #0]
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	4618      	mov	r0, r3
 800653c:	f7f9 fe98 	bl	8000270 <strlen>
 8006540:	2300      	movs	r3, #0
 8006542:	930a      	str	r3, [sp, #40]	@ 0x28
 8006544:	f8d8 3000 	ldr.w	r3, [r8]
 8006548:	9005      	str	r0, [sp, #20]
 800654a:	3307      	adds	r3, #7
 800654c:	f023 0307 	bic.w	r3, r3, #7
 8006550:	f103 0208 	add.w	r2, r3, #8
 8006554:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006558:	f8d4 b000 	ldr.w	fp, [r4]
 800655c:	f8c8 2000 	str.w	r2, [r8]
 8006560:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006564:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	f8cd 8018 	str.w	r8, [sp, #24]
 800656e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006576:	4b9c      	ldr	r3, [pc, #624]	@ (80067e8 <_printf_float+0x2c8>)
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	f7fa fad6 	bl	8000b2c <__aeabi_dcmpun>
 8006580:	bb70      	cbnz	r0, 80065e0 <_printf_float+0xc0>
 8006582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006586:	4b98      	ldr	r3, [pc, #608]	@ (80067e8 <_printf_float+0x2c8>)
 8006588:	f04f 32ff 	mov.w	r2, #4294967295
 800658c:	f7fa fab0 	bl	8000af0 <__aeabi_dcmple>
 8006590:	bb30      	cbnz	r0, 80065e0 <_printf_float+0xc0>
 8006592:	2200      	movs	r2, #0
 8006594:	2300      	movs	r3, #0
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7fa fa9f 	bl	8000adc <__aeabi_dcmplt>
 800659e:	b110      	cbz	r0, 80065a6 <_printf_float+0x86>
 80065a0:	232d      	movs	r3, #45	@ 0x2d
 80065a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a6:	4a91      	ldr	r2, [pc, #580]	@ (80067ec <_printf_float+0x2cc>)
 80065a8:	4b91      	ldr	r3, [pc, #580]	@ (80067f0 <_printf_float+0x2d0>)
 80065aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065ae:	bf94      	ite	ls
 80065b0:	4690      	movls	r8, r2
 80065b2:	4698      	movhi	r8, r3
 80065b4:	2303      	movs	r3, #3
 80065b6:	6123      	str	r3, [r4, #16]
 80065b8:	f02b 0304 	bic.w	r3, fp, #4
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	f04f 0900 	mov.w	r9, #0
 80065c2:	9700      	str	r7, [sp, #0]
 80065c4:	4633      	mov	r3, r6
 80065c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065c8:	4621      	mov	r1, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 f9d2 	bl	8006974 <_printf_common>
 80065d0:	3001      	adds	r0, #1
 80065d2:	f040 808d 	bne.w	80066f0 <_printf_float+0x1d0>
 80065d6:	f04f 30ff 	mov.w	r0, #4294967295
 80065da:	b00d      	add	sp, #52	@ 0x34
 80065dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e0:	4642      	mov	r2, r8
 80065e2:	464b      	mov	r3, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	4649      	mov	r1, r9
 80065e8:	f7fa faa0 	bl	8000b2c <__aeabi_dcmpun>
 80065ec:	b140      	cbz	r0, 8006600 <_printf_float+0xe0>
 80065ee:	464b      	mov	r3, r9
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bfbc      	itt	lt
 80065f4:	232d      	movlt	r3, #45	@ 0x2d
 80065f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065fa:	4a7e      	ldr	r2, [pc, #504]	@ (80067f4 <_printf_float+0x2d4>)
 80065fc:	4b7e      	ldr	r3, [pc, #504]	@ (80067f8 <_printf_float+0x2d8>)
 80065fe:	e7d4      	b.n	80065aa <_printf_float+0x8a>
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006606:	9206      	str	r2, [sp, #24]
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	d13b      	bne.n	8006684 <_printf_float+0x164>
 800660c:	2306      	movs	r3, #6
 800660e:	6063      	str	r3, [r4, #4]
 8006610:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006614:	2300      	movs	r3, #0
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	ab0a      	add	r3, sp, #40	@ 0x28
 800661c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006620:	ab09      	add	r3, sp, #36	@ 0x24
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	6861      	ldr	r1, [r4, #4]
 8006626:	ec49 8b10 	vmov	d0, r8, r9
 800662a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800662e:	4628      	mov	r0, r5
 8006630:	f7ff fed7 	bl	80063e2 <__cvt>
 8006634:	9b06      	ldr	r3, [sp, #24]
 8006636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006638:	2b47      	cmp	r3, #71	@ 0x47
 800663a:	4680      	mov	r8, r0
 800663c:	d129      	bne.n	8006692 <_printf_float+0x172>
 800663e:	1cc8      	adds	r0, r1, #3
 8006640:	db02      	blt.n	8006648 <_printf_float+0x128>
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	4299      	cmp	r1, r3
 8006646:	dd41      	ble.n	80066cc <_printf_float+0x1ac>
 8006648:	f1aa 0a02 	sub.w	sl, sl, #2
 800664c:	fa5f fa8a 	uxtb.w	sl, sl
 8006650:	3901      	subs	r1, #1
 8006652:	4652      	mov	r2, sl
 8006654:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006658:	9109      	str	r1, [sp, #36]	@ 0x24
 800665a:	f7ff ff27 	bl	80064ac <__exponent>
 800665e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006660:	1813      	adds	r3, r2, r0
 8006662:	2a01      	cmp	r2, #1
 8006664:	4681      	mov	r9, r0
 8006666:	6123      	str	r3, [r4, #16]
 8006668:	dc02      	bgt.n	8006670 <_printf_float+0x150>
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	07d2      	lsls	r2, r2, #31
 800666e:	d501      	bpl.n	8006674 <_printf_float+0x154>
 8006670:	3301      	adds	r3, #1
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0a2      	beq.n	80065c2 <_printf_float+0xa2>
 800667c:	232d      	movs	r3, #45	@ 0x2d
 800667e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006682:	e79e      	b.n	80065c2 <_printf_float+0xa2>
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	2a47      	cmp	r2, #71	@ 0x47
 8006688:	d1c2      	bne.n	8006610 <_printf_float+0xf0>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1c0      	bne.n	8006610 <_printf_float+0xf0>
 800668e:	2301      	movs	r3, #1
 8006690:	e7bd      	b.n	800660e <_printf_float+0xee>
 8006692:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006696:	d9db      	bls.n	8006650 <_printf_float+0x130>
 8006698:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800669c:	d118      	bne.n	80066d0 <_printf_float+0x1b0>
 800669e:	2900      	cmp	r1, #0
 80066a0:	6863      	ldr	r3, [r4, #4]
 80066a2:	dd0b      	ble.n	80066bc <_printf_float+0x19c>
 80066a4:	6121      	str	r1, [r4, #16]
 80066a6:	b913      	cbnz	r3, 80066ae <_printf_float+0x18e>
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	07d0      	lsls	r0, r2, #31
 80066ac:	d502      	bpl.n	80066b4 <_printf_float+0x194>
 80066ae:	3301      	adds	r3, #1
 80066b0:	440b      	add	r3, r1
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066b6:	f04f 0900 	mov.w	r9, #0
 80066ba:	e7db      	b.n	8006674 <_printf_float+0x154>
 80066bc:	b913      	cbnz	r3, 80066c4 <_printf_float+0x1a4>
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	07d2      	lsls	r2, r2, #31
 80066c2:	d501      	bpl.n	80066c8 <_printf_float+0x1a8>
 80066c4:	3302      	adds	r3, #2
 80066c6:	e7f4      	b.n	80066b2 <_printf_float+0x192>
 80066c8:	2301      	movs	r3, #1
 80066ca:	e7f2      	b.n	80066b2 <_printf_float+0x192>
 80066cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066d2:	4299      	cmp	r1, r3
 80066d4:	db05      	blt.n	80066e2 <_printf_float+0x1c2>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	6121      	str	r1, [r4, #16]
 80066da:	07d8      	lsls	r0, r3, #31
 80066dc:	d5ea      	bpl.n	80066b4 <_printf_float+0x194>
 80066de:	1c4b      	adds	r3, r1, #1
 80066e0:	e7e7      	b.n	80066b2 <_printf_float+0x192>
 80066e2:	2900      	cmp	r1, #0
 80066e4:	bfd4      	ite	le
 80066e6:	f1c1 0202 	rsble	r2, r1, #2
 80066ea:	2201      	movgt	r2, #1
 80066ec:	4413      	add	r3, r2
 80066ee:	e7e0      	b.n	80066b2 <_printf_float+0x192>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	055a      	lsls	r2, r3, #21
 80066f4:	d407      	bmi.n	8006706 <_printf_float+0x1e6>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	4642      	mov	r2, r8
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	d12b      	bne.n	800675c <_printf_float+0x23c>
 8006704:	e767      	b.n	80065d6 <_printf_float+0xb6>
 8006706:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800670a:	f240 80dd 	bls.w	80068c8 <_printf_float+0x3a8>
 800670e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006712:	2200      	movs	r2, #0
 8006714:	2300      	movs	r3, #0
 8006716:	f7fa f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800671a:	2800      	cmp	r0, #0
 800671c:	d033      	beq.n	8006786 <_printf_float+0x266>
 800671e:	4a37      	ldr	r2, [pc, #220]	@ (80067fc <_printf_float+0x2dc>)
 8006720:	2301      	movs	r3, #1
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f af54 	beq.w	80065d6 <_printf_float+0xb6>
 800672e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006732:	4543      	cmp	r3, r8
 8006734:	db02      	blt.n	800673c <_printf_float+0x21c>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	07d8      	lsls	r0, r3, #31
 800673a:	d50f      	bpl.n	800675c <_printf_float+0x23c>
 800673c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f af45 	beq.w	80065d6 <_printf_float+0xb6>
 800674c:	f04f 0900 	mov.w	r9, #0
 8006750:	f108 38ff 	add.w	r8, r8, #4294967295
 8006754:	f104 0a1a 	add.w	sl, r4, #26
 8006758:	45c8      	cmp	r8, r9
 800675a:	dc09      	bgt.n	8006770 <_printf_float+0x250>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	079b      	lsls	r3, r3, #30
 8006760:	f100 8103 	bmi.w	800696a <_printf_float+0x44a>
 8006764:	68e0      	ldr	r0, [r4, #12]
 8006766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006768:	4298      	cmp	r0, r3
 800676a:	bfb8      	it	lt
 800676c:	4618      	movlt	r0, r3
 800676e:	e734      	b.n	80065da <_printf_float+0xba>
 8006770:	2301      	movs	r3, #1
 8006772:	4652      	mov	r2, sl
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af2b 	beq.w	80065d6 <_printf_float+0xb6>
 8006780:	f109 0901 	add.w	r9, r9, #1
 8006784:	e7e8      	b.n	8006758 <_printf_float+0x238>
 8006786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	dc39      	bgt.n	8006800 <_printf_float+0x2e0>
 800678c:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <_printf_float+0x2dc>)
 800678e:	2301      	movs	r3, #1
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	f43f af1d 	beq.w	80065d6 <_printf_float+0xb6>
 800679c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067a0:	ea59 0303 	orrs.w	r3, r9, r3
 80067a4:	d102      	bne.n	80067ac <_printf_float+0x28c>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	07d9      	lsls	r1, r3, #31
 80067aa:	d5d7      	bpl.n	800675c <_printf_float+0x23c>
 80067ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f af0d 	beq.w	80065d6 <_printf_float+0xb6>
 80067bc:	f04f 0a00 	mov.w	sl, #0
 80067c0:	f104 0b1a 	add.w	fp, r4, #26
 80067c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c6:	425b      	negs	r3, r3
 80067c8:	4553      	cmp	r3, sl
 80067ca:	dc01      	bgt.n	80067d0 <_printf_float+0x2b0>
 80067cc:	464b      	mov	r3, r9
 80067ce:	e793      	b.n	80066f8 <_printf_float+0x1d8>
 80067d0:	2301      	movs	r3, #1
 80067d2:	465a      	mov	r2, fp
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f aefb 	beq.w	80065d6 <_printf_float+0xb6>
 80067e0:	f10a 0a01 	add.w	sl, sl, #1
 80067e4:	e7ee      	b.n	80067c4 <_printf_float+0x2a4>
 80067e6:	bf00      	nop
 80067e8:	7fefffff 	.word	0x7fefffff
 80067ec:	08008db4 	.word	0x08008db4
 80067f0:	08008db8 	.word	0x08008db8
 80067f4:	08008dbc 	.word	0x08008dbc
 80067f8:	08008dc0 	.word	0x08008dc0
 80067fc:	08008dc4 	.word	0x08008dc4
 8006800:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006802:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006806:	4553      	cmp	r3, sl
 8006808:	bfa8      	it	ge
 800680a:	4653      	movge	r3, sl
 800680c:	2b00      	cmp	r3, #0
 800680e:	4699      	mov	r9, r3
 8006810:	dc36      	bgt.n	8006880 <_printf_float+0x360>
 8006812:	f04f 0b00 	mov.w	fp, #0
 8006816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800681a:	f104 021a 	add.w	r2, r4, #26
 800681e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006820:	9306      	str	r3, [sp, #24]
 8006822:	eba3 0309 	sub.w	r3, r3, r9
 8006826:	455b      	cmp	r3, fp
 8006828:	dc31      	bgt.n	800688e <_printf_float+0x36e>
 800682a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800682c:	459a      	cmp	sl, r3
 800682e:	dc3a      	bgt.n	80068a6 <_printf_float+0x386>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	07da      	lsls	r2, r3, #31
 8006834:	d437      	bmi.n	80068a6 <_printf_float+0x386>
 8006836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006838:	ebaa 0903 	sub.w	r9, sl, r3
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	ebaa 0303 	sub.w	r3, sl, r3
 8006842:	4599      	cmp	r9, r3
 8006844:	bfa8      	it	ge
 8006846:	4699      	movge	r9, r3
 8006848:	f1b9 0f00 	cmp.w	r9, #0
 800684c:	dc33      	bgt.n	80068b6 <_printf_float+0x396>
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006856:	f104 0b1a 	add.w	fp, r4, #26
 800685a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685c:	ebaa 0303 	sub.w	r3, sl, r3
 8006860:	eba3 0309 	sub.w	r3, r3, r9
 8006864:	4543      	cmp	r3, r8
 8006866:	f77f af79 	ble.w	800675c <_printf_float+0x23c>
 800686a:	2301      	movs	r3, #1
 800686c:	465a      	mov	r2, fp
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	f43f aeae 	beq.w	80065d6 <_printf_float+0xb6>
 800687a:	f108 0801 	add.w	r8, r8, #1
 800687e:	e7ec      	b.n	800685a <_printf_float+0x33a>
 8006880:	4642      	mov	r2, r8
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	d1c2      	bne.n	8006812 <_printf_float+0x2f2>
 800688c:	e6a3      	b.n	80065d6 <_printf_float+0xb6>
 800688e:	2301      	movs	r3, #1
 8006890:	4631      	mov	r1, r6
 8006892:	4628      	mov	r0, r5
 8006894:	9206      	str	r2, [sp, #24]
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f ae9c 	beq.w	80065d6 <_printf_float+0xb6>
 800689e:	9a06      	ldr	r2, [sp, #24]
 80068a0:	f10b 0b01 	add.w	fp, fp, #1
 80068a4:	e7bb      	b.n	800681e <_printf_float+0x2fe>
 80068a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d1c0      	bne.n	8006836 <_printf_float+0x316>
 80068b4:	e68f      	b.n	80065d6 <_printf_float+0xb6>
 80068b6:	9a06      	ldr	r2, [sp, #24]
 80068b8:	464b      	mov	r3, r9
 80068ba:	4442      	add	r2, r8
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	d1c3      	bne.n	800684e <_printf_float+0x32e>
 80068c6:	e686      	b.n	80065d6 <_printf_float+0xb6>
 80068c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068cc:	f1ba 0f01 	cmp.w	sl, #1
 80068d0:	dc01      	bgt.n	80068d6 <_printf_float+0x3b6>
 80068d2:	07db      	lsls	r3, r3, #31
 80068d4:	d536      	bpl.n	8006944 <_printf_float+0x424>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4642      	mov	r2, r8
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae78 	beq.w	80065d6 <_printf_float+0xb6>
 80068e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f ae70 	beq.w	80065d6 <_printf_float+0xb6>
 80068f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068fa:	2200      	movs	r2, #0
 80068fc:	2300      	movs	r3, #0
 80068fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006902:	f7fa f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006906:	b9c0      	cbnz	r0, 800693a <_printf_float+0x41a>
 8006908:	4653      	mov	r3, sl
 800690a:	f108 0201 	add.w	r2, r8, #1
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	d10c      	bne.n	8006932 <_printf_float+0x412>
 8006918:	e65d      	b.n	80065d6 <_printf_float+0xb6>
 800691a:	2301      	movs	r3, #1
 800691c:	465a      	mov	r2, fp
 800691e:	4631      	mov	r1, r6
 8006920:	4628      	mov	r0, r5
 8006922:	47b8      	blx	r7
 8006924:	3001      	adds	r0, #1
 8006926:	f43f ae56 	beq.w	80065d6 <_printf_float+0xb6>
 800692a:	f108 0801 	add.w	r8, r8, #1
 800692e:	45d0      	cmp	r8, sl
 8006930:	dbf3      	blt.n	800691a <_printf_float+0x3fa>
 8006932:	464b      	mov	r3, r9
 8006934:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006938:	e6df      	b.n	80066fa <_printf_float+0x1da>
 800693a:	f04f 0800 	mov.w	r8, #0
 800693e:	f104 0b1a 	add.w	fp, r4, #26
 8006942:	e7f4      	b.n	800692e <_printf_float+0x40e>
 8006944:	2301      	movs	r3, #1
 8006946:	4642      	mov	r2, r8
 8006948:	e7e1      	b.n	800690e <_printf_float+0x3ee>
 800694a:	2301      	movs	r3, #1
 800694c:	464a      	mov	r2, r9
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f ae3e 	beq.w	80065d6 <_printf_float+0xb6>
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006962:	1a5b      	subs	r3, r3, r1
 8006964:	4543      	cmp	r3, r8
 8006966:	dcf0      	bgt.n	800694a <_printf_float+0x42a>
 8006968:	e6fc      	b.n	8006764 <_printf_float+0x244>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	f104 0919 	add.w	r9, r4, #25
 8006972:	e7f4      	b.n	800695e <_printf_float+0x43e>

08006974 <_printf_common>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	4616      	mov	r6, r2
 800697a:	4698      	mov	r8, r3
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006984:	4293      	cmp	r3, r2
 8006986:	bfb8      	it	lt
 8006988:	4613      	movlt	r3, r2
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006990:	4607      	mov	r7, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b10a      	cbz	r2, 800699a <_printf_common+0x26>
 8006996:	3301      	adds	r3, #1
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	0699      	lsls	r1, r3, #26
 800699e:	bf42      	ittt	mi
 80069a0:	6833      	ldrmi	r3, [r6, #0]
 80069a2:	3302      	addmi	r3, #2
 80069a4:	6033      	strmi	r3, [r6, #0]
 80069a6:	6825      	ldr	r5, [r4, #0]
 80069a8:	f015 0506 	ands.w	r5, r5, #6
 80069ac:	d106      	bne.n	80069bc <_printf_common+0x48>
 80069ae:	f104 0a19 	add.w	sl, r4, #25
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dc26      	bgt.n	8006a0a <_printf_common+0x96>
 80069bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	3b00      	subs	r3, #0
 80069c4:	bf18      	it	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	0692      	lsls	r2, r2, #26
 80069ca:	d42b      	bmi.n	8006a24 <_printf_common+0xb0>
 80069cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069d0:	4641      	mov	r1, r8
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c8      	blx	r9
 80069d6:	3001      	adds	r0, #1
 80069d8:	d01e      	beq.n	8006a18 <_printf_common+0xa4>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	f003 0306 	and.w	r3, r3, #6
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	bf02      	ittt	eq
 80069e6:	68e5      	ldreq	r5, [r4, #12]
 80069e8:	6833      	ldreq	r3, [r6, #0]
 80069ea:	1aed      	subeq	r5, r5, r3
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	bf0c      	ite	eq
 80069f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069f4:	2500      	movne	r5, #0
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bfc4      	itt	gt
 80069fa:	1a9b      	subgt	r3, r3, r2
 80069fc:	18ed      	addgt	r5, r5, r3
 80069fe:	2600      	movs	r6, #0
 8006a00:	341a      	adds	r4, #26
 8006a02:	42b5      	cmp	r5, r6
 8006a04:	d11a      	bne.n	8006a3c <_printf_common+0xc8>
 8006a06:	2000      	movs	r0, #0
 8006a08:	e008      	b.n	8006a1c <_printf_common+0xa8>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	4641      	mov	r1, r8
 8006a10:	4638      	mov	r0, r7
 8006a12:	47c8      	blx	r9
 8006a14:	3001      	adds	r0, #1
 8006a16:	d103      	bne.n	8006a20 <_printf_common+0xac>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	3501      	adds	r5, #1
 8006a22:	e7c6      	b.n	80069b2 <_printf_common+0x3e>
 8006a24:	18e1      	adds	r1, r4, r3
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	2030      	movs	r0, #48	@ 0x30
 8006a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a2e:	4422      	add	r2, r4
 8006a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a38:	3302      	adds	r3, #2
 8006a3a:	e7c7      	b.n	80069cc <_printf_common+0x58>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4641      	mov	r1, r8
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c8      	blx	r9
 8006a46:	3001      	adds	r0, #1
 8006a48:	d0e6      	beq.n	8006a18 <_printf_common+0xa4>
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7d9      	b.n	8006a02 <_printf_common+0x8e>
	...

08006a50 <_printf_i>:
 8006a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	7e0f      	ldrb	r7, [r1, #24]
 8006a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a58:	2f78      	cmp	r7, #120	@ 0x78
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	469a      	mov	sl, r3
 8006a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a66:	d807      	bhi.n	8006a78 <_printf_i+0x28>
 8006a68:	2f62      	cmp	r7, #98	@ 0x62
 8006a6a:	d80a      	bhi.n	8006a82 <_printf_i+0x32>
 8006a6c:	2f00      	cmp	r7, #0
 8006a6e:	f000 80d2 	beq.w	8006c16 <_printf_i+0x1c6>
 8006a72:	2f58      	cmp	r7, #88	@ 0x58
 8006a74:	f000 80b9 	beq.w	8006bea <_printf_i+0x19a>
 8006a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a80:	e03a      	b.n	8006af8 <_printf_i+0xa8>
 8006a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a86:	2b15      	cmp	r3, #21
 8006a88:	d8f6      	bhi.n	8006a78 <_printf_i+0x28>
 8006a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a90 <_printf_i+0x40>)
 8006a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006a79 	.word	0x08006a79
 8006a9c:	08006a79 	.word	0x08006a79
 8006aa0:	08006a79 	.word	0x08006a79
 8006aa4:	08006a79 	.word	0x08006a79
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006a79 	.word	0x08006a79
 8006ab0:	08006a79 	.word	0x08006a79
 8006ab4:	08006a79 	.word	0x08006a79
 8006ab8:	08006a79 	.word	0x08006a79
 8006abc:	08006bfd 	.word	0x08006bfd
 8006ac0:	08006b27 	.word	0x08006b27
 8006ac4:	08006bb7 	.word	0x08006bb7
 8006ac8:	08006a79 	.word	0x08006a79
 8006acc:	08006a79 	.word	0x08006a79
 8006ad0:	08006c1f 	.word	0x08006c1f
 8006ad4:	08006a79 	.word	0x08006a79
 8006ad8:	08006b27 	.word	0x08006b27
 8006adc:	08006a79 	.word	0x08006a79
 8006ae0:	08006a79 	.word	0x08006a79
 8006ae4:	08006bbf 	.word	0x08006bbf
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6032      	str	r2, [r6, #0]
 8006af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006af8:	2301      	movs	r3, #1
 8006afa:	e09d      	b.n	8006c38 <_printf_i+0x1e8>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	1d19      	adds	r1, r3, #4
 8006b02:	6031      	str	r1, [r6, #0]
 8006b04:	0606      	lsls	r6, r0, #24
 8006b06:	d501      	bpl.n	8006b0c <_printf_i+0xbc>
 8006b08:	681d      	ldr	r5, [r3, #0]
 8006b0a:	e003      	b.n	8006b14 <_printf_i+0xc4>
 8006b0c:	0645      	lsls	r5, r0, #25
 8006b0e:	d5fb      	bpl.n	8006b08 <_printf_i+0xb8>
 8006b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b14:	2d00      	cmp	r5, #0
 8006b16:	da03      	bge.n	8006b20 <_printf_i+0xd0>
 8006b18:	232d      	movs	r3, #45	@ 0x2d
 8006b1a:	426d      	negs	r5, r5
 8006b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b20:	4859      	ldr	r0, [pc, #356]	@ (8006c88 <_printf_i+0x238>)
 8006b22:	230a      	movs	r3, #10
 8006b24:	e011      	b.n	8006b4a <_printf_i+0xfa>
 8006b26:	6821      	ldr	r1, [r4, #0]
 8006b28:	6833      	ldr	r3, [r6, #0]
 8006b2a:	0608      	lsls	r0, r1, #24
 8006b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b30:	d402      	bmi.n	8006b38 <_printf_i+0xe8>
 8006b32:	0649      	lsls	r1, r1, #25
 8006b34:	bf48      	it	mi
 8006b36:	b2ad      	uxthmi	r5, r5
 8006b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b3a:	4853      	ldr	r0, [pc, #332]	@ (8006c88 <_printf_i+0x238>)
 8006b3c:	6033      	str	r3, [r6, #0]
 8006b3e:	bf14      	ite	ne
 8006b40:	230a      	movne	r3, #10
 8006b42:	2308      	moveq	r3, #8
 8006b44:	2100      	movs	r1, #0
 8006b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b4a:	6866      	ldr	r6, [r4, #4]
 8006b4c:	60a6      	str	r6, [r4, #8]
 8006b4e:	2e00      	cmp	r6, #0
 8006b50:	bfa2      	ittt	ge
 8006b52:	6821      	ldrge	r1, [r4, #0]
 8006b54:	f021 0104 	bicge.w	r1, r1, #4
 8006b58:	6021      	strge	r1, [r4, #0]
 8006b5a:	b90d      	cbnz	r5, 8006b60 <_printf_i+0x110>
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	d04b      	beq.n	8006bf8 <_printf_i+0x1a8>
 8006b60:	4616      	mov	r6, r2
 8006b62:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b66:	fb03 5711 	mls	r7, r3, r1, r5
 8006b6a:	5dc7      	ldrb	r7, [r0, r7]
 8006b6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b70:	462f      	mov	r7, r5
 8006b72:	42bb      	cmp	r3, r7
 8006b74:	460d      	mov	r5, r1
 8006b76:	d9f4      	bls.n	8006b62 <_printf_i+0x112>
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d10b      	bne.n	8006b94 <_printf_i+0x144>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	07df      	lsls	r7, r3, #31
 8006b80:	d508      	bpl.n	8006b94 <_printf_i+0x144>
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	6861      	ldr	r1, [r4, #4]
 8006b86:	4299      	cmp	r1, r3
 8006b88:	bfde      	ittt	le
 8006b8a:	2330      	movle	r3, #48	@ 0x30
 8006b8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b94:	1b92      	subs	r2, r2, r6
 8006b96:	6122      	str	r2, [r4, #16]
 8006b98:	f8cd a000 	str.w	sl, [sp]
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	aa03      	add	r2, sp, #12
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	f7ff fee6 	bl	8006974 <_printf_common>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d14a      	bne.n	8006c42 <_printf_i+0x1f2>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	b004      	add	sp, #16
 8006bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f043 0320 	orr.w	r3, r3, #32
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	4833      	ldr	r0, [pc, #204]	@ (8006c8c <_printf_i+0x23c>)
 8006bc0:	2778      	movs	r7, #120	@ 0x78
 8006bc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	6831      	ldr	r1, [r6, #0]
 8006bca:	061f      	lsls	r7, r3, #24
 8006bcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bd0:	d402      	bmi.n	8006bd8 <_printf_i+0x188>
 8006bd2:	065f      	lsls	r7, r3, #25
 8006bd4:	bf48      	it	mi
 8006bd6:	b2ad      	uxthmi	r5, r5
 8006bd8:	6031      	str	r1, [r6, #0]
 8006bda:	07d9      	lsls	r1, r3, #31
 8006bdc:	bf44      	itt	mi
 8006bde:	f043 0320 	orrmi.w	r3, r3, #32
 8006be2:	6023      	strmi	r3, [r4, #0]
 8006be4:	b11d      	cbz	r5, 8006bee <_printf_i+0x19e>
 8006be6:	2310      	movs	r3, #16
 8006be8:	e7ac      	b.n	8006b44 <_printf_i+0xf4>
 8006bea:	4827      	ldr	r0, [pc, #156]	@ (8006c88 <_printf_i+0x238>)
 8006bec:	e7e9      	b.n	8006bc2 <_printf_i+0x172>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	f023 0320 	bic.w	r3, r3, #32
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	e7f6      	b.n	8006be6 <_printf_i+0x196>
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	e7bd      	b.n	8006b78 <_printf_i+0x128>
 8006bfc:	6833      	ldr	r3, [r6, #0]
 8006bfe:	6825      	ldr	r5, [r4, #0]
 8006c00:	6961      	ldr	r1, [r4, #20]
 8006c02:	1d18      	adds	r0, r3, #4
 8006c04:	6030      	str	r0, [r6, #0]
 8006c06:	062e      	lsls	r6, r5, #24
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	d501      	bpl.n	8006c10 <_printf_i+0x1c0>
 8006c0c:	6019      	str	r1, [r3, #0]
 8006c0e:	e002      	b.n	8006c16 <_printf_i+0x1c6>
 8006c10:	0668      	lsls	r0, r5, #25
 8006c12:	d5fb      	bpl.n	8006c0c <_printf_i+0x1bc>
 8006c14:	8019      	strh	r1, [r3, #0]
 8006c16:	2300      	movs	r3, #0
 8006c18:	6123      	str	r3, [r4, #16]
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	e7bc      	b.n	8006b98 <_printf_i+0x148>
 8006c1e:	6833      	ldr	r3, [r6, #0]
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	6032      	str	r2, [r6, #0]
 8006c24:	681e      	ldr	r6, [r3, #0]
 8006c26:	6862      	ldr	r2, [r4, #4]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7f9 fad0 	bl	80001d0 <memchr>
 8006c30:	b108      	cbz	r0, 8006c36 <_printf_i+0x1e6>
 8006c32:	1b80      	subs	r0, r0, r6
 8006c34:	6060      	str	r0, [r4, #4]
 8006c36:	6863      	ldr	r3, [r4, #4]
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c40:	e7aa      	b.n	8006b98 <_printf_i+0x148>
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	4632      	mov	r2, r6
 8006c46:	4649      	mov	r1, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	47d0      	blx	sl
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d0ad      	beq.n	8006bac <_printf_i+0x15c>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	079b      	lsls	r3, r3, #30
 8006c54:	d413      	bmi.n	8006c7e <_printf_i+0x22e>
 8006c56:	68e0      	ldr	r0, [r4, #12]
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	4298      	cmp	r0, r3
 8006c5c:	bfb8      	it	lt
 8006c5e:	4618      	movlt	r0, r3
 8006c60:	e7a6      	b.n	8006bb0 <_printf_i+0x160>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4632      	mov	r2, r6
 8006c66:	4649      	mov	r1, r9
 8006c68:	4640      	mov	r0, r8
 8006c6a:	47d0      	blx	sl
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d09d      	beq.n	8006bac <_printf_i+0x15c>
 8006c70:	3501      	adds	r5, #1
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	9903      	ldr	r1, [sp, #12]
 8006c76:	1a5b      	subs	r3, r3, r1
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dcf2      	bgt.n	8006c62 <_printf_i+0x212>
 8006c7c:	e7eb      	b.n	8006c56 <_printf_i+0x206>
 8006c7e:	2500      	movs	r5, #0
 8006c80:	f104 0619 	add.w	r6, r4, #25
 8006c84:	e7f5      	b.n	8006c72 <_printf_i+0x222>
 8006c86:	bf00      	nop
 8006c88:	08008dc6 	.word	0x08008dc6
 8006c8c:	08008dd7 	.word	0x08008dd7

08006c90 <std>:
 8006c90:	2300      	movs	r3, #0
 8006c92:	b510      	push	{r4, lr}
 8006c94:	4604      	mov	r4, r0
 8006c96:	e9c0 3300 	strd	r3, r3, [r0]
 8006c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c9e:	6083      	str	r3, [r0, #8]
 8006ca0:	8181      	strh	r1, [r0, #12]
 8006ca2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ca4:	81c2      	strh	r2, [r0, #14]
 8006ca6:	6183      	str	r3, [r0, #24]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	2208      	movs	r2, #8
 8006cac:	305c      	adds	r0, #92	@ 0x5c
 8006cae:	f000 f906 	bl	8006ebe <memset>
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <std+0x58>)
 8006cb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <std+0x5c>)
 8006cb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cba:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <std+0x60>)
 8006cbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf4 <std+0x64>)
 8006cc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <std+0x68>)
 8006cc4:	6224      	str	r4, [r4, #32]
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d006      	beq.n	8006cd8 <std+0x48>
 8006cca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cce:	4294      	cmp	r4, r2
 8006cd0:	d002      	beq.n	8006cd8 <std+0x48>
 8006cd2:	33d0      	adds	r3, #208	@ 0xd0
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	d105      	bne.n	8006ce4 <std+0x54>
 8006cd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce0:	f000 b96a 	b.w	8006fb8 <__retarget_lock_init_recursive>
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08006e39 	.word	0x08006e39
 8006cec:	08006e5b 	.word	0x08006e5b
 8006cf0:	08006e93 	.word	0x08006e93
 8006cf4:	08006eb7 	.word	0x08006eb7
 8006cf8:	20000480 	.word	0x20000480

08006cfc <stdio_exit_handler>:
 8006cfc:	4a02      	ldr	r2, [pc, #8]	@ (8006d08 <stdio_exit_handler+0xc>)
 8006cfe:	4903      	ldr	r1, [pc, #12]	@ (8006d0c <stdio_exit_handler+0x10>)
 8006d00:	4803      	ldr	r0, [pc, #12]	@ (8006d10 <stdio_exit_handler+0x14>)
 8006d02:	f000 b869 	b.w	8006dd8 <_fwalk_sglue>
 8006d06:	bf00      	nop
 8006d08:	2000004c 	.word	0x2000004c
 8006d0c:	080088e9 	.word	0x080088e9
 8006d10:	2000005c 	.word	0x2000005c

08006d14 <cleanup_stdio>:
 8006d14:	6841      	ldr	r1, [r0, #4]
 8006d16:	4b0c      	ldr	r3, [pc, #48]	@ (8006d48 <cleanup_stdio+0x34>)
 8006d18:	4299      	cmp	r1, r3
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	d001      	beq.n	8006d24 <cleanup_stdio+0x10>
 8006d20:	f001 fde2 	bl	80088e8 <_fflush_r>
 8006d24:	68a1      	ldr	r1, [r4, #8]
 8006d26:	4b09      	ldr	r3, [pc, #36]	@ (8006d4c <cleanup_stdio+0x38>)
 8006d28:	4299      	cmp	r1, r3
 8006d2a:	d002      	beq.n	8006d32 <cleanup_stdio+0x1e>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f001 fddb 	bl	80088e8 <_fflush_r>
 8006d32:	68e1      	ldr	r1, [r4, #12]
 8006d34:	4b06      	ldr	r3, [pc, #24]	@ (8006d50 <cleanup_stdio+0x3c>)
 8006d36:	4299      	cmp	r1, r3
 8006d38:	d004      	beq.n	8006d44 <cleanup_stdio+0x30>
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d40:	f001 bdd2 	b.w	80088e8 <_fflush_r>
 8006d44:	bd10      	pop	{r4, pc}
 8006d46:	bf00      	nop
 8006d48:	20000480 	.word	0x20000480
 8006d4c:	200004e8 	.word	0x200004e8
 8006d50:	20000550 	.word	0x20000550

08006d54 <global_stdio_init.part.0>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <global_stdio_init.part.0+0x30>)
 8006d58:	4c0b      	ldr	r4, [pc, #44]	@ (8006d88 <global_stdio_init.part.0+0x34>)
 8006d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d8c <global_stdio_init.part.0+0x38>)
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	2200      	movs	r2, #0
 8006d62:	2104      	movs	r1, #4
 8006d64:	f7ff ff94 	bl	8006c90 <std>
 8006d68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	2109      	movs	r1, #9
 8006d70:	f7ff ff8e 	bl	8006c90 <std>
 8006d74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d78:	2202      	movs	r2, #2
 8006d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7e:	2112      	movs	r1, #18
 8006d80:	f7ff bf86 	b.w	8006c90 <std>
 8006d84:	200005b8 	.word	0x200005b8
 8006d88:	20000480 	.word	0x20000480
 8006d8c:	08006cfd 	.word	0x08006cfd

08006d90 <__sfp_lock_acquire>:
 8006d90:	4801      	ldr	r0, [pc, #4]	@ (8006d98 <__sfp_lock_acquire+0x8>)
 8006d92:	f000 b912 	b.w	8006fba <__retarget_lock_acquire_recursive>
 8006d96:	bf00      	nop
 8006d98:	200005c1 	.word	0x200005c1

08006d9c <__sfp_lock_release>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	@ (8006da4 <__sfp_lock_release+0x8>)
 8006d9e:	f000 b90d 	b.w	8006fbc <__retarget_lock_release_recursive>
 8006da2:	bf00      	nop
 8006da4:	200005c1 	.word	0x200005c1

08006da8 <__sinit>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4604      	mov	r4, r0
 8006dac:	f7ff fff0 	bl	8006d90 <__sfp_lock_acquire>
 8006db0:	6a23      	ldr	r3, [r4, #32]
 8006db2:	b11b      	cbz	r3, 8006dbc <__sinit+0x14>
 8006db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db8:	f7ff bff0 	b.w	8006d9c <__sfp_lock_release>
 8006dbc:	4b04      	ldr	r3, [pc, #16]	@ (8006dd0 <__sinit+0x28>)
 8006dbe:	6223      	str	r3, [r4, #32]
 8006dc0:	4b04      	ldr	r3, [pc, #16]	@ (8006dd4 <__sinit+0x2c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f5      	bne.n	8006db4 <__sinit+0xc>
 8006dc8:	f7ff ffc4 	bl	8006d54 <global_stdio_init.part.0>
 8006dcc:	e7f2      	b.n	8006db4 <__sinit+0xc>
 8006dce:	bf00      	nop
 8006dd0:	08006d15 	.word	0x08006d15
 8006dd4:	200005b8 	.word	0x200005b8

08006dd8 <_fwalk_sglue>:
 8006dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ddc:	4607      	mov	r7, r0
 8006dde:	4688      	mov	r8, r1
 8006de0:	4614      	mov	r4, r2
 8006de2:	2600      	movs	r6, #0
 8006de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006de8:	f1b9 0901 	subs.w	r9, r9, #1
 8006dec:	d505      	bpl.n	8006dfa <_fwalk_sglue+0x22>
 8006dee:	6824      	ldr	r4, [r4, #0]
 8006df0:	2c00      	cmp	r4, #0
 8006df2:	d1f7      	bne.n	8006de4 <_fwalk_sglue+0xc>
 8006df4:	4630      	mov	r0, r6
 8006df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d907      	bls.n	8006e10 <_fwalk_sglue+0x38>
 8006e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e04:	3301      	adds	r3, #1
 8006e06:	d003      	beq.n	8006e10 <_fwalk_sglue+0x38>
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	47c0      	blx	r8
 8006e0e:	4306      	orrs	r6, r0
 8006e10:	3568      	adds	r5, #104	@ 0x68
 8006e12:	e7e9      	b.n	8006de8 <_fwalk_sglue+0x10>

08006e14 <iprintf>:
 8006e14:	b40f      	push	{r0, r1, r2, r3}
 8006e16:	b507      	push	{r0, r1, r2, lr}
 8006e18:	4906      	ldr	r1, [pc, #24]	@ (8006e34 <iprintf+0x20>)
 8006e1a:	ab04      	add	r3, sp, #16
 8006e1c:	6808      	ldr	r0, [r1, #0]
 8006e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e22:	6881      	ldr	r1, [r0, #8]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	f001 fbc3 	bl	80085b0 <_vfiprintf_r>
 8006e2a:	b003      	add	sp, #12
 8006e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e30:	b004      	add	sp, #16
 8006e32:	4770      	bx	lr
 8006e34:	20000058 	.word	0x20000058

08006e38 <__sread>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e40:	f000 f86c 	bl	8006f1c <_read_r>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	bfab      	itete	ge
 8006e48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e4c:	181b      	addge	r3, r3, r0
 8006e4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e52:	bfac      	ite	ge
 8006e54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e56:	81a3      	strhlt	r3, [r4, #12]
 8006e58:	bd10      	pop	{r4, pc}

08006e5a <__swrite>:
 8006e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5e:	461f      	mov	r7, r3
 8006e60:	898b      	ldrh	r3, [r1, #12]
 8006e62:	05db      	lsls	r3, r3, #23
 8006e64:	4605      	mov	r5, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	4616      	mov	r6, r2
 8006e6a:	d505      	bpl.n	8006e78 <__swrite+0x1e>
 8006e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e70:	2302      	movs	r3, #2
 8006e72:	2200      	movs	r2, #0
 8006e74:	f000 f840 	bl	8006ef8 <_lseek_r>
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e82:	81a3      	strh	r3, [r4, #12]
 8006e84:	4632      	mov	r2, r6
 8006e86:	463b      	mov	r3, r7
 8006e88:	4628      	mov	r0, r5
 8006e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8e:	f000 b857 	b.w	8006f40 <_write_r>

08006e92 <__sseek>:
 8006e92:	b510      	push	{r4, lr}
 8006e94:	460c      	mov	r4, r1
 8006e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9a:	f000 f82d 	bl	8006ef8 <_lseek_r>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	bf15      	itete	ne
 8006ea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eae:	81a3      	strheq	r3, [r4, #12]
 8006eb0:	bf18      	it	ne
 8006eb2:	81a3      	strhne	r3, [r4, #12]
 8006eb4:	bd10      	pop	{r4, pc}

08006eb6 <__sclose>:
 8006eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eba:	f000 b80d 	b.w	8006ed8 <_close_r>

08006ebe <memset>:
 8006ebe:	4402      	add	r2, r0
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d100      	bne.n	8006ec8 <memset+0xa>
 8006ec6:	4770      	bx	lr
 8006ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8006ecc:	e7f9      	b.n	8006ec2 <memset+0x4>
	...

08006ed0 <_localeconv_r>:
 8006ed0:	4800      	ldr	r0, [pc, #0]	@ (8006ed4 <_localeconv_r+0x4>)
 8006ed2:	4770      	bx	lr
 8006ed4:	20000198 	.word	0x20000198

08006ed8 <_close_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	@ (8006ef4 <_close_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa fcc0 	bl	8001868 <_close>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_close_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_close_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	200005bc 	.word	0x200005bc

08006ef8 <_lseek_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d07      	ldr	r5, [pc, #28]	@ (8006f18 <_lseek_r+0x20>)
 8006efc:	4604      	mov	r4, r0
 8006efe:	4608      	mov	r0, r1
 8006f00:	4611      	mov	r1, r2
 8006f02:	2200      	movs	r2, #0
 8006f04:	602a      	str	r2, [r5, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f7fa fcd5 	bl	80018b6 <_lseek>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_lseek_r+0x1e>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_lseek_r+0x1e>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	200005bc 	.word	0x200005bc

08006f1c <_read_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	@ (8006f3c <_read_r+0x20>)
 8006f20:	4604      	mov	r4, r0
 8006f22:	4608      	mov	r0, r1
 8006f24:	4611      	mov	r1, r2
 8006f26:	2200      	movs	r2, #0
 8006f28:	602a      	str	r2, [r5, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f7fa fc63 	bl	80017f6 <_read>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_read_r+0x1e>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_read_r+0x1e>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	200005bc 	.word	0x200005bc

08006f40 <_write_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d07      	ldr	r5, [pc, #28]	@ (8006f60 <_write_r+0x20>)
 8006f44:	4604      	mov	r4, r0
 8006f46:	4608      	mov	r0, r1
 8006f48:	4611      	mov	r1, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	602a      	str	r2, [r5, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f7fa fc6e 	bl	8001830 <_write>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_write_r+0x1e>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_write_r+0x1e>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	200005bc 	.word	0x200005bc

08006f64 <__errno>:
 8006f64:	4b01      	ldr	r3, [pc, #4]	@ (8006f6c <__errno+0x8>)
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000058 	.word	0x20000058

08006f70 <__libc_init_array>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	4d0d      	ldr	r5, [pc, #52]	@ (8006fa8 <__libc_init_array+0x38>)
 8006f74:	4c0d      	ldr	r4, [pc, #52]	@ (8006fac <__libc_init_array+0x3c>)
 8006f76:	1b64      	subs	r4, r4, r5
 8006f78:	10a4      	asrs	r4, r4, #2
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	42a6      	cmp	r6, r4
 8006f7e:	d109      	bne.n	8006f94 <__libc_init_array+0x24>
 8006f80:	4d0b      	ldr	r5, [pc, #44]	@ (8006fb0 <__libc_init_array+0x40>)
 8006f82:	4c0c      	ldr	r4, [pc, #48]	@ (8006fb4 <__libc_init_array+0x44>)
 8006f84:	f001 febe 	bl	8008d04 <_init>
 8006f88:	1b64      	subs	r4, r4, r5
 8006f8a:	10a4      	asrs	r4, r4, #2
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	42a6      	cmp	r6, r4
 8006f90:	d105      	bne.n	8006f9e <__libc_init_array+0x2e>
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f98:	4798      	blx	r3
 8006f9a:	3601      	adds	r6, #1
 8006f9c:	e7ee      	b.n	8006f7c <__libc_init_array+0xc>
 8006f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa2:	4798      	blx	r3
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	e7f2      	b.n	8006f8e <__libc_init_array+0x1e>
 8006fa8:	08009130 	.word	0x08009130
 8006fac:	08009130 	.word	0x08009130
 8006fb0:	08009130 	.word	0x08009130
 8006fb4:	08009134 	.word	0x08009134

08006fb8 <__retarget_lock_init_recursive>:
 8006fb8:	4770      	bx	lr

08006fba <__retarget_lock_acquire_recursive>:
 8006fba:	4770      	bx	lr

08006fbc <__retarget_lock_release_recursive>:
 8006fbc:	4770      	bx	lr

08006fbe <quorem>:
 8006fbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc2:	6903      	ldr	r3, [r0, #16]
 8006fc4:	690c      	ldr	r4, [r1, #16]
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	4607      	mov	r7, r0
 8006fca:	db7e      	blt.n	80070ca <quorem+0x10c>
 8006fcc:	3c01      	subs	r4, #1
 8006fce:	f101 0814 	add.w	r8, r1, #20
 8006fd2:	00a3      	lsls	r3, r4, #2
 8006fd4:	f100 0514 	add.w	r5, r0, #20
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ff4:	d32e      	bcc.n	8007054 <quorem+0x96>
 8006ff6:	f04f 0a00 	mov.w	sl, #0
 8006ffa:	46c4      	mov	ip, r8
 8006ffc:	46ae      	mov	lr, r5
 8006ffe:	46d3      	mov	fp, sl
 8007000:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007004:	b298      	uxth	r0, r3
 8007006:	fb06 a000 	mla	r0, r6, r0, sl
 800700a:	0c02      	lsrs	r2, r0, #16
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	fb06 2303 	mla	r3, r6, r3, r2
 8007012:	f8de 2000 	ldr.w	r2, [lr]
 8007016:	b280      	uxth	r0, r0
 8007018:	b292      	uxth	r2, r2
 800701a:	1a12      	subs	r2, r2, r0
 800701c:	445a      	add	r2, fp
 800701e:	f8de 0000 	ldr.w	r0, [lr]
 8007022:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007026:	b29b      	uxth	r3, r3
 8007028:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800702c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007030:	b292      	uxth	r2, r2
 8007032:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007036:	45e1      	cmp	r9, ip
 8007038:	f84e 2b04 	str.w	r2, [lr], #4
 800703c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007040:	d2de      	bcs.n	8007000 <quorem+0x42>
 8007042:	9b00      	ldr	r3, [sp, #0]
 8007044:	58eb      	ldr	r3, [r5, r3]
 8007046:	b92b      	cbnz	r3, 8007054 <quorem+0x96>
 8007048:	9b01      	ldr	r3, [sp, #4]
 800704a:	3b04      	subs	r3, #4
 800704c:	429d      	cmp	r5, r3
 800704e:	461a      	mov	r2, r3
 8007050:	d32f      	bcc.n	80070b2 <quorem+0xf4>
 8007052:	613c      	str	r4, [r7, #16]
 8007054:	4638      	mov	r0, r7
 8007056:	f001 f979 	bl	800834c <__mcmp>
 800705a:	2800      	cmp	r0, #0
 800705c:	db25      	blt.n	80070aa <quorem+0xec>
 800705e:	4629      	mov	r1, r5
 8007060:	2000      	movs	r0, #0
 8007062:	f858 2b04 	ldr.w	r2, [r8], #4
 8007066:	f8d1 c000 	ldr.w	ip, [r1]
 800706a:	fa1f fe82 	uxth.w	lr, r2
 800706e:	fa1f f38c 	uxth.w	r3, ip
 8007072:	eba3 030e 	sub.w	r3, r3, lr
 8007076:	4403      	add	r3, r0
 8007078:	0c12      	lsrs	r2, r2, #16
 800707a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800707e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007082:	b29b      	uxth	r3, r3
 8007084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007088:	45c1      	cmp	r9, r8
 800708a:	f841 3b04 	str.w	r3, [r1], #4
 800708e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007092:	d2e6      	bcs.n	8007062 <quorem+0xa4>
 8007094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800709c:	b922      	cbnz	r2, 80070a8 <quorem+0xea>
 800709e:	3b04      	subs	r3, #4
 80070a0:	429d      	cmp	r5, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	d30b      	bcc.n	80070be <quorem+0x100>
 80070a6:	613c      	str	r4, [r7, #16]
 80070a8:	3601      	adds	r6, #1
 80070aa:	4630      	mov	r0, r6
 80070ac:	b003      	add	sp, #12
 80070ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	3b04      	subs	r3, #4
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	d1cb      	bne.n	8007052 <quorem+0x94>
 80070ba:	3c01      	subs	r4, #1
 80070bc:	e7c6      	b.n	800704c <quorem+0x8e>
 80070be:	6812      	ldr	r2, [r2, #0]
 80070c0:	3b04      	subs	r3, #4
 80070c2:	2a00      	cmp	r2, #0
 80070c4:	d1ef      	bne.n	80070a6 <quorem+0xe8>
 80070c6:	3c01      	subs	r4, #1
 80070c8:	e7ea      	b.n	80070a0 <quorem+0xe2>
 80070ca:	2000      	movs	r0, #0
 80070cc:	e7ee      	b.n	80070ac <quorem+0xee>
	...

080070d0 <_dtoa_r>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	69c7      	ldr	r7, [r0, #28]
 80070d6:	b099      	sub	sp, #100	@ 0x64
 80070d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80070dc:	ec55 4b10 	vmov	r4, r5, d0
 80070e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80070e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80070e4:	4683      	mov	fp, r0
 80070e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80070e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070ea:	b97f      	cbnz	r7, 800710c <_dtoa_r+0x3c>
 80070ec:	2010      	movs	r0, #16
 80070ee:	f000 fdfd 	bl	8007cec <malloc>
 80070f2:	4602      	mov	r2, r0
 80070f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80070f8:	b920      	cbnz	r0, 8007104 <_dtoa_r+0x34>
 80070fa:	4ba7      	ldr	r3, [pc, #668]	@ (8007398 <_dtoa_r+0x2c8>)
 80070fc:	21ef      	movs	r1, #239	@ 0xef
 80070fe:	48a7      	ldr	r0, [pc, #668]	@ (800739c <_dtoa_r+0x2cc>)
 8007100:	f001 fccc 	bl	8008a9c <__assert_func>
 8007104:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007108:	6007      	str	r7, [r0, #0]
 800710a:	60c7      	str	r7, [r0, #12]
 800710c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	b159      	cbz	r1, 800712c <_dtoa_r+0x5c>
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	604a      	str	r2, [r1, #4]
 8007118:	2301      	movs	r3, #1
 800711a:	4093      	lsls	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
 800711e:	4658      	mov	r0, fp
 8007120:	f000 feda 	bl	8007ed8 <_Bfree>
 8007124:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	1e2b      	subs	r3, r5, #0
 800712e:	bfb9      	ittee	lt
 8007130:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007134:	9303      	strlt	r3, [sp, #12]
 8007136:	2300      	movge	r3, #0
 8007138:	6033      	strge	r3, [r6, #0]
 800713a:	9f03      	ldr	r7, [sp, #12]
 800713c:	4b98      	ldr	r3, [pc, #608]	@ (80073a0 <_dtoa_r+0x2d0>)
 800713e:	bfbc      	itt	lt
 8007140:	2201      	movlt	r2, #1
 8007142:	6032      	strlt	r2, [r6, #0]
 8007144:	43bb      	bics	r3, r7
 8007146:	d112      	bne.n	800716e <_dtoa_r+0x9e>
 8007148:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800714a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007154:	4323      	orrs	r3, r4
 8007156:	f000 854d 	beq.w	8007bf4 <_dtoa_r+0xb24>
 800715a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800715c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80073b4 <_dtoa_r+0x2e4>
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 854f 	beq.w	8007c04 <_dtoa_r+0xb34>
 8007166:	f10a 0303 	add.w	r3, sl, #3
 800716a:	f000 bd49 	b.w	8007c00 <_dtoa_r+0xb30>
 800716e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	ec51 0b17 	vmov	r0, r1, d7
 8007178:	2300      	movs	r3, #0
 800717a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800717e:	f7f9 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007182:	4680      	mov	r8, r0
 8007184:	b158      	cbz	r0, 800719e <_dtoa_r+0xce>
 8007186:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007188:	2301      	movs	r3, #1
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800718e:	b113      	cbz	r3, 8007196 <_dtoa_r+0xc6>
 8007190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007192:	4b84      	ldr	r3, [pc, #528]	@ (80073a4 <_dtoa_r+0x2d4>)
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80073b8 <_dtoa_r+0x2e8>
 800719a:	f000 bd33 	b.w	8007c04 <_dtoa_r+0xb34>
 800719e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80071a2:	aa16      	add	r2, sp, #88	@ 0x58
 80071a4:	a917      	add	r1, sp, #92	@ 0x5c
 80071a6:	4658      	mov	r0, fp
 80071a8:	f001 f980 	bl	80084ac <__d2b>
 80071ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80071b0:	4681      	mov	r9, r0
 80071b2:	2e00      	cmp	r6, #0
 80071b4:	d077      	beq.n	80072a6 <_dtoa_r+0x1d6>
 80071b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80071bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80071c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80071cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80071d0:	4619      	mov	r1, r3
 80071d2:	2200      	movs	r2, #0
 80071d4:	4b74      	ldr	r3, [pc, #464]	@ (80073a8 <_dtoa_r+0x2d8>)
 80071d6:	f7f9 f857 	bl	8000288 <__aeabi_dsub>
 80071da:	a369      	add	r3, pc, #420	@ (adr r3, 8007380 <_dtoa_r+0x2b0>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 fa0a 	bl	80005f8 <__aeabi_dmul>
 80071e4:	a368      	add	r3, pc, #416	@ (adr r3, 8007388 <_dtoa_r+0x2b8>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f7f9 f84f 	bl	800028c <__adddf3>
 80071ee:	4604      	mov	r4, r0
 80071f0:	4630      	mov	r0, r6
 80071f2:	460d      	mov	r5, r1
 80071f4:	f7f9 f996 	bl	8000524 <__aeabi_i2d>
 80071f8:	a365      	add	r3, pc, #404	@ (adr r3, 8007390 <_dtoa_r+0x2c0>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	f7f9 f9fb 	bl	80005f8 <__aeabi_dmul>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	f7f9 f83f 	bl	800028c <__adddf3>
 800720e:	4604      	mov	r4, r0
 8007210:	460d      	mov	r5, r1
 8007212:	f7f9 fca1 	bl	8000b58 <__aeabi_d2iz>
 8007216:	2200      	movs	r2, #0
 8007218:	4607      	mov	r7, r0
 800721a:	2300      	movs	r3, #0
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 fc5c 	bl	8000adc <__aeabi_dcmplt>
 8007224:	b140      	cbz	r0, 8007238 <_dtoa_r+0x168>
 8007226:	4638      	mov	r0, r7
 8007228:	f7f9 f97c 	bl	8000524 <__aeabi_i2d>
 800722c:	4622      	mov	r2, r4
 800722e:	462b      	mov	r3, r5
 8007230:	f7f9 fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007234:	b900      	cbnz	r0, 8007238 <_dtoa_r+0x168>
 8007236:	3f01      	subs	r7, #1
 8007238:	2f16      	cmp	r7, #22
 800723a:	d851      	bhi.n	80072e0 <_dtoa_r+0x210>
 800723c:	4b5b      	ldr	r3, [pc, #364]	@ (80073ac <_dtoa_r+0x2dc>)
 800723e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800724a:	f7f9 fc47 	bl	8000adc <__aeabi_dcmplt>
 800724e:	2800      	cmp	r0, #0
 8007250:	d048      	beq.n	80072e4 <_dtoa_r+0x214>
 8007252:	3f01      	subs	r7, #1
 8007254:	2300      	movs	r3, #0
 8007256:	9312      	str	r3, [sp, #72]	@ 0x48
 8007258:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800725a:	1b9b      	subs	r3, r3, r6
 800725c:	1e5a      	subs	r2, r3, #1
 800725e:	bf44      	itt	mi
 8007260:	f1c3 0801 	rsbmi	r8, r3, #1
 8007264:	2300      	movmi	r3, #0
 8007266:	9208      	str	r2, [sp, #32]
 8007268:	bf54      	ite	pl
 800726a:	f04f 0800 	movpl.w	r8, #0
 800726e:	9308      	strmi	r3, [sp, #32]
 8007270:	2f00      	cmp	r7, #0
 8007272:	db39      	blt.n	80072e8 <_dtoa_r+0x218>
 8007274:	9b08      	ldr	r3, [sp, #32]
 8007276:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007278:	443b      	add	r3, r7
 800727a:	9308      	str	r3, [sp, #32]
 800727c:	2300      	movs	r3, #0
 800727e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007282:	2b09      	cmp	r3, #9
 8007284:	d864      	bhi.n	8007350 <_dtoa_r+0x280>
 8007286:	2b05      	cmp	r3, #5
 8007288:	bfc4      	itt	gt
 800728a:	3b04      	subgt	r3, #4
 800728c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800728e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007290:	f1a3 0302 	sub.w	r3, r3, #2
 8007294:	bfcc      	ite	gt
 8007296:	2400      	movgt	r4, #0
 8007298:	2401      	movle	r4, #1
 800729a:	2b03      	cmp	r3, #3
 800729c:	d863      	bhi.n	8007366 <_dtoa_r+0x296>
 800729e:	e8df f003 	tbb	[pc, r3]
 80072a2:	372a      	.short	0x372a
 80072a4:	5535      	.short	0x5535
 80072a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80072aa:	441e      	add	r6, r3
 80072ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	bfc1      	itttt	gt
 80072b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072b8:	409f      	lslgt	r7, r3
 80072ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80072be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80072c2:	bfd6      	itet	le
 80072c4:	f1c3 0320 	rsble	r3, r3, #32
 80072c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80072cc:	fa04 f003 	lslle.w	r0, r4, r3
 80072d0:	f7f9 f918 	bl	8000504 <__aeabi_ui2d>
 80072d4:	2201      	movs	r2, #1
 80072d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072da:	3e01      	subs	r6, #1
 80072dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80072de:	e777      	b.n	80071d0 <_dtoa_r+0x100>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e7b8      	b.n	8007256 <_dtoa_r+0x186>
 80072e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80072e6:	e7b7      	b.n	8007258 <_dtoa_r+0x188>
 80072e8:	427b      	negs	r3, r7
 80072ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80072ec:	2300      	movs	r3, #0
 80072ee:	eba8 0807 	sub.w	r8, r8, r7
 80072f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072f4:	e7c4      	b.n	8007280 <_dtoa_r+0x1b0>
 80072f6:	2300      	movs	r3, #0
 80072f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dc35      	bgt.n	800736c <_dtoa_r+0x29c>
 8007300:	2301      	movs	r3, #1
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	9307      	str	r3, [sp, #28]
 8007306:	461a      	mov	r2, r3
 8007308:	920e      	str	r2, [sp, #56]	@ 0x38
 800730a:	e00b      	b.n	8007324 <_dtoa_r+0x254>
 800730c:	2301      	movs	r3, #1
 800730e:	e7f3      	b.n	80072f8 <_dtoa_r+0x228>
 8007310:	2300      	movs	r3, #0
 8007312:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	2b01      	cmp	r3, #1
 800731e:	9307      	str	r3, [sp, #28]
 8007320:	bfb8      	it	lt
 8007322:	2301      	movlt	r3, #1
 8007324:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007328:	2100      	movs	r1, #0
 800732a:	2204      	movs	r2, #4
 800732c:	f102 0514 	add.w	r5, r2, #20
 8007330:	429d      	cmp	r5, r3
 8007332:	d91f      	bls.n	8007374 <_dtoa_r+0x2a4>
 8007334:	6041      	str	r1, [r0, #4]
 8007336:	4658      	mov	r0, fp
 8007338:	f000 fd8e 	bl	8007e58 <_Balloc>
 800733c:	4682      	mov	sl, r0
 800733e:	2800      	cmp	r0, #0
 8007340:	d13c      	bne.n	80073bc <_dtoa_r+0x2ec>
 8007342:	4b1b      	ldr	r3, [pc, #108]	@ (80073b0 <_dtoa_r+0x2e0>)
 8007344:	4602      	mov	r2, r0
 8007346:	f240 11af 	movw	r1, #431	@ 0x1af
 800734a:	e6d8      	b.n	80070fe <_dtoa_r+0x2e>
 800734c:	2301      	movs	r3, #1
 800734e:	e7e0      	b.n	8007312 <_dtoa_r+0x242>
 8007350:	2401      	movs	r4, #1
 8007352:	2300      	movs	r3, #0
 8007354:	9309      	str	r3, [sp, #36]	@ 0x24
 8007356:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007358:	f04f 33ff 	mov.w	r3, #4294967295
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	9307      	str	r3, [sp, #28]
 8007360:	2200      	movs	r2, #0
 8007362:	2312      	movs	r3, #18
 8007364:	e7d0      	b.n	8007308 <_dtoa_r+0x238>
 8007366:	2301      	movs	r3, #1
 8007368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800736a:	e7f5      	b.n	8007358 <_dtoa_r+0x288>
 800736c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	9307      	str	r3, [sp, #28]
 8007372:	e7d7      	b.n	8007324 <_dtoa_r+0x254>
 8007374:	3101      	adds	r1, #1
 8007376:	0052      	lsls	r2, r2, #1
 8007378:	e7d8      	b.n	800732c <_dtoa_r+0x25c>
 800737a:	bf00      	nop
 800737c:	f3af 8000 	nop.w
 8007380:	636f4361 	.word	0x636f4361
 8007384:	3fd287a7 	.word	0x3fd287a7
 8007388:	8b60c8b3 	.word	0x8b60c8b3
 800738c:	3fc68a28 	.word	0x3fc68a28
 8007390:	509f79fb 	.word	0x509f79fb
 8007394:	3fd34413 	.word	0x3fd34413
 8007398:	08008df5 	.word	0x08008df5
 800739c:	08008e0c 	.word	0x08008e0c
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	08008dc5 	.word	0x08008dc5
 80073a8:	3ff80000 	.word	0x3ff80000
 80073ac:	08008f08 	.word	0x08008f08
 80073b0:	08008e64 	.word	0x08008e64
 80073b4:	08008df1 	.word	0x08008df1
 80073b8:	08008dc4 	.word	0x08008dc4
 80073bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073c0:	6018      	str	r0, [r3, #0]
 80073c2:	9b07      	ldr	r3, [sp, #28]
 80073c4:	2b0e      	cmp	r3, #14
 80073c6:	f200 80a4 	bhi.w	8007512 <_dtoa_r+0x442>
 80073ca:	2c00      	cmp	r4, #0
 80073cc:	f000 80a1 	beq.w	8007512 <_dtoa_r+0x442>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	dd33      	ble.n	800743c <_dtoa_r+0x36c>
 80073d4:	4bad      	ldr	r3, [pc, #692]	@ (800768c <_dtoa_r+0x5bc>)
 80073d6:	f007 020f 	and.w	r2, r7, #15
 80073da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073de:	ed93 7b00 	vldr	d7, [r3]
 80073e2:	05f8      	lsls	r0, r7, #23
 80073e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80073e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073ec:	d516      	bpl.n	800741c <_dtoa_r+0x34c>
 80073ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007690 <_dtoa_r+0x5c0>)
 80073f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073f8:	f7f9 fa28 	bl	800084c <__aeabi_ddiv>
 80073fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007400:	f004 040f 	and.w	r4, r4, #15
 8007404:	2603      	movs	r6, #3
 8007406:	4da2      	ldr	r5, [pc, #648]	@ (8007690 <_dtoa_r+0x5c0>)
 8007408:	b954      	cbnz	r4, 8007420 <_dtoa_r+0x350>
 800740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007412:	f7f9 fa1b 	bl	800084c <__aeabi_ddiv>
 8007416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800741a:	e028      	b.n	800746e <_dtoa_r+0x39e>
 800741c:	2602      	movs	r6, #2
 800741e:	e7f2      	b.n	8007406 <_dtoa_r+0x336>
 8007420:	07e1      	lsls	r1, r4, #31
 8007422:	d508      	bpl.n	8007436 <_dtoa_r+0x366>
 8007424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800742c:	f7f9 f8e4 	bl	80005f8 <__aeabi_dmul>
 8007430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007434:	3601      	adds	r6, #1
 8007436:	1064      	asrs	r4, r4, #1
 8007438:	3508      	adds	r5, #8
 800743a:	e7e5      	b.n	8007408 <_dtoa_r+0x338>
 800743c:	f000 80d2 	beq.w	80075e4 <_dtoa_r+0x514>
 8007440:	427c      	negs	r4, r7
 8007442:	4b92      	ldr	r3, [pc, #584]	@ (800768c <_dtoa_r+0x5bc>)
 8007444:	4d92      	ldr	r5, [pc, #584]	@ (8007690 <_dtoa_r+0x5c0>)
 8007446:	f004 020f 	and.w	r2, r4, #15
 800744a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007456:	f7f9 f8cf 	bl	80005f8 <__aeabi_dmul>
 800745a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800745e:	1124      	asrs	r4, r4, #4
 8007460:	2300      	movs	r3, #0
 8007462:	2602      	movs	r6, #2
 8007464:	2c00      	cmp	r4, #0
 8007466:	f040 80b2 	bne.w	80075ce <_dtoa_r+0x4fe>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1d3      	bne.n	8007416 <_dtoa_r+0x346>
 800746e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007470:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80b7 	beq.w	80075e8 <_dtoa_r+0x518>
 800747a:	4b86      	ldr	r3, [pc, #536]	@ (8007694 <_dtoa_r+0x5c4>)
 800747c:	2200      	movs	r2, #0
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	f7f9 fb2b 	bl	8000adc <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f000 80ae 	beq.w	80075e8 <_dtoa_r+0x518>
 800748c:	9b07      	ldr	r3, [sp, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 80aa 	beq.w	80075e8 <_dtoa_r+0x518>
 8007494:	9b00      	ldr	r3, [sp, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	dd37      	ble.n	800750a <_dtoa_r+0x43a>
 800749a:	1e7b      	subs	r3, r7, #1
 800749c:	9304      	str	r3, [sp, #16]
 800749e:	4620      	mov	r0, r4
 80074a0:	4b7d      	ldr	r3, [pc, #500]	@ (8007698 <_dtoa_r+0x5c8>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	4629      	mov	r1, r5
 80074a6:	f7f9 f8a7 	bl	80005f8 <__aeabi_dmul>
 80074aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ae:	9c00      	ldr	r4, [sp, #0]
 80074b0:	3601      	adds	r6, #1
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7f9 f836 	bl	8000524 <__aeabi_i2d>
 80074b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074bc:	f7f9 f89c 	bl	80005f8 <__aeabi_dmul>
 80074c0:	4b76      	ldr	r3, [pc, #472]	@ (800769c <_dtoa_r+0x5cc>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	f7f8 fee2 	bl	800028c <__adddf3>
 80074c8:	4605      	mov	r5, r0
 80074ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80074ce:	2c00      	cmp	r4, #0
 80074d0:	f040 808d 	bne.w	80075ee <_dtoa_r+0x51e>
 80074d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d8:	4b71      	ldr	r3, [pc, #452]	@ (80076a0 <_dtoa_r+0x5d0>)
 80074da:	2200      	movs	r2, #0
 80074dc:	f7f8 fed4 	bl	8000288 <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074e8:	462a      	mov	r2, r5
 80074ea:	4633      	mov	r3, r6
 80074ec:	f7f9 fb14 	bl	8000b18 <__aeabi_dcmpgt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	f040 828b 	bne.w	8007a0c <_dtoa_r+0x93c>
 80074f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fa:	462a      	mov	r2, r5
 80074fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007500:	f7f9 faec 	bl	8000adc <__aeabi_dcmplt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f040 8128 	bne.w	800775a <_dtoa_r+0x68a>
 800750a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800750e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007514:	2b00      	cmp	r3, #0
 8007516:	f2c0 815a 	blt.w	80077ce <_dtoa_r+0x6fe>
 800751a:	2f0e      	cmp	r7, #14
 800751c:	f300 8157 	bgt.w	80077ce <_dtoa_r+0x6fe>
 8007520:	4b5a      	ldr	r3, [pc, #360]	@ (800768c <_dtoa_r+0x5bc>)
 8007522:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007526:	ed93 7b00 	vldr	d7, [r3]
 800752a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800752c:	2b00      	cmp	r3, #0
 800752e:	ed8d 7b00 	vstr	d7, [sp]
 8007532:	da03      	bge.n	800753c <_dtoa_r+0x46c>
 8007534:	9b07      	ldr	r3, [sp, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f340 8101 	ble.w	800773e <_dtoa_r+0x66e>
 800753c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007540:	4656      	mov	r6, sl
 8007542:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 f97f 	bl	800084c <__aeabi_ddiv>
 800754e:	f7f9 fb03 	bl	8000b58 <__aeabi_d2iz>
 8007552:	4680      	mov	r8, r0
 8007554:	f7f8 ffe6 	bl	8000524 <__aeabi_i2d>
 8007558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800755c:	f7f9 f84c 	bl	80005f8 <__aeabi_dmul>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800756c:	f7f8 fe8c 	bl	8000288 <__aeabi_dsub>
 8007570:	f806 4b01 	strb.w	r4, [r6], #1
 8007574:	9d07      	ldr	r5, [sp, #28]
 8007576:	eba6 040a 	sub.w	r4, r6, sl
 800757a:	42a5      	cmp	r5, r4
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	f040 8117 	bne.w	80077b2 <_dtoa_r+0x6e2>
 8007584:	f7f8 fe82 	bl	800028c <__adddf3>
 8007588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800758c:	4604      	mov	r4, r0
 800758e:	460d      	mov	r5, r1
 8007590:	f7f9 fac2 	bl	8000b18 <__aeabi_dcmpgt>
 8007594:	2800      	cmp	r0, #0
 8007596:	f040 80f9 	bne.w	800778c <_dtoa_r+0x6bc>
 800759a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f9 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80075a6:	b118      	cbz	r0, 80075b0 <_dtoa_r+0x4e0>
 80075a8:	f018 0f01 	tst.w	r8, #1
 80075ac:	f040 80ee 	bne.w	800778c <_dtoa_r+0x6bc>
 80075b0:	4649      	mov	r1, r9
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fc90 	bl	8007ed8 <_Bfree>
 80075b8:	2300      	movs	r3, #0
 80075ba:	7033      	strb	r3, [r6, #0]
 80075bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075be:	3701      	adds	r7, #1
 80075c0:	601f      	str	r7, [r3, #0]
 80075c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 831d 	beq.w	8007c04 <_dtoa_r+0xb34>
 80075ca:	601e      	str	r6, [r3, #0]
 80075cc:	e31a      	b.n	8007c04 <_dtoa_r+0xb34>
 80075ce:	07e2      	lsls	r2, r4, #31
 80075d0:	d505      	bpl.n	80075de <_dtoa_r+0x50e>
 80075d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d6:	f7f9 f80f 	bl	80005f8 <__aeabi_dmul>
 80075da:	3601      	adds	r6, #1
 80075dc:	2301      	movs	r3, #1
 80075de:	1064      	asrs	r4, r4, #1
 80075e0:	3508      	adds	r5, #8
 80075e2:	e73f      	b.n	8007464 <_dtoa_r+0x394>
 80075e4:	2602      	movs	r6, #2
 80075e6:	e742      	b.n	800746e <_dtoa_r+0x39e>
 80075e8:	9c07      	ldr	r4, [sp, #28]
 80075ea:	9704      	str	r7, [sp, #16]
 80075ec:	e761      	b.n	80074b2 <_dtoa_r+0x3e2>
 80075ee:	4b27      	ldr	r3, [pc, #156]	@ (800768c <_dtoa_r+0x5bc>)
 80075f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075fa:	4454      	add	r4, sl
 80075fc:	2900      	cmp	r1, #0
 80075fe:	d053      	beq.n	80076a8 <_dtoa_r+0x5d8>
 8007600:	4928      	ldr	r1, [pc, #160]	@ (80076a4 <_dtoa_r+0x5d4>)
 8007602:	2000      	movs	r0, #0
 8007604:	f7f9 f922 	bl	800084c <__aeabi_ddiv>
 8007608:	4633      	mov	r3, r6
 800760a:	462a      	mov	r2, r5
 800760c:	f7f8 fe3c 	bl	8000288 <__aeabi_dsub>
 8007610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007614:	4656      	mov	r6, sl
 8007616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761a:	f7f9 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800761e:	4605      	mov	r5, r0
 8007620:	f7f8 ff80 	bl	8000524 <__aeabi_i2d>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762c:	f7f8 fe2c 	bl	8000288 <__aeabi_dsub>
 8007630:	3530      	adds	r5, #48	@ 0x30
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800763a:	f806 5b01 	strb.w	r5, [r6], #1
 800763e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007642:	f7f9 fa4b 	bl	8000adc <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	d171      	bne.n	800772e <_dtoa_r+0x65e>
 800764a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800764e:	4911      	ldr	r1, [pc, #68]	@ (8007694 <_dtoa_r+0x5c4>)
 8007650:	2000      	movs	r0, #0
 8007652:	f7f8 fe19 	bl	8000288 <__aeabi_dsub>
 8007656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800765a:	f7f9 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800765e:	2800      	cmp	r0, #0
 8007660:	f040 8095 	bne.w	800778e <_dtoa_r+0x6be>
 8007664:	42a6      	cmp	r6, r4
 8007666:	f43f af50 	beq.w	800750a <_dtoa_r+0x43a>
 800766a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800766e:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <_dtoa_r+0x5c8>)
 8007670:	2200      	movs	r2, #0
 8007672:	f7f8 ffc1 	bl	80005f8 <__aeabi_dmul>
 8007676:	4b08      	ldr	r3, [pc, #32]	@ (8007698 <_dtoa_r+0x5c8>)
 8007678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800767c:	2200      	movs	r2, #0
 800767e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007682:	f7f8 ffb9 	bl	80005f8 <__aeabi_dmul>
 8007686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800768a:	e7c4      	b.n	8007616 <_dtoa_r+0x546>
 800768c:	08008f08 	.word	0x08008f08
 8007690:	08008ee0 	.word	0x08008ee0
 8007694:	3ff00000 	.word	0x3ff00000
 8007698:	40240000 	.word	0x40240000
 800769c:	401c0000 	.word	0x401c0000
 80076a0:	40140000 	.word	0x40140000
 80076a4:	3fe00000 	.word	0x3fe00000
 80076a8:	4631      	mov	r1, r6
 80076aa:	4628      	mov	r0, r5
 80076ac:	f7f8 ffa4 	bl	80005f8 <__aeabi_dmul>
 80076b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80076b6:	4656      	mov	r6, sl
 80076b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076bc:	f7f9 fa4c 	bl	8000b58 <__aeabi_d2iz>
 80076c0:	4605      	mov	r5, r0
 80076c2:	f7f8 ff2f 	bl	8000524 <__aeabi_i2d>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ce:	f7f8 fddb 	bl	8000288 <__aeabi_dsub>
 80076d2:	3530      	adds	r5, #48	@ 0x30
 80076d4:	f806 5b01 	strb.w	r5, [r6], #1
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	42a6      	cmp	r6, r4
 80076de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	d124      	bne.n	8007732 <_dtoa_r+0x662>
 80076e8:	4bac      	ldr	r3, [pc, #688]	@ (800799c <_dtoa_r+0x8cc>)
 80076ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076ee:	f7f8 fdcd 	bl	800028c <__adddf3>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076fa:	f7f9 fa0d 	bl	8000b18 <__aeabi_dcmpgt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d145      	bne.n	800778e <_dtoa_r+0x6be>
 8007702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007706:	49a5      	ldr	r1, [pc, #660]	@ (800799c <_dtoa_r+0x8cc>)
 8007708:	2000      	movs	r0, #0
 800770a:	f7f8 fdbd 	bl	8000288 <__aeabi_dsub>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007716:	f7f9 f9e1 	bl	8000adc <__aeabi_dcmplt>
 800771a:	2800      	cmp	r0, #0
 800771c:	f43f aef5 	beq.w	800750a <_dtoa_r+0x43a>
 8007720:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007722:	1e73      	subs	r3, r6, #1
 8007724:	9315      	str	r3, [sp, #84]	@ 0x54
 8007726:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800772a:	2b30      	cmp	r3, #48	@ 0x30
 800772c:	d0f8      	beq.n	8007720 <_dtoa_r+0x650>
 800772e:	9f04      	ldr	r7, [sp, #16]
 8007730:	e73e      	b.n	80075b0 <_dtoa_r+0x4e0>
 8007732:	4b9b      	ldr	r3, [pc, #620]	@ (80079a0 <_dtoa_r+0x8d0>)
 8007734:	f7f8 ff60 	bl	80005f8 <__aeabi_dmul>
 8007738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800773c:	e7bc      	b.n	80076b8 <_dtoa_r+0x5e8>
 800773e:	d10c      	bne.n	800775a <_dtoa_r+0x68a>
 8007740:	4b98      	ldr	r3, [pc, #608]	@ (80079a4 <_dtoa_r+0x8d4>)
 8007742:	2200      	movs	r2, #0
 8007744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007748:	f7f8 ff56 	bl	80005f8 <__aeabi_dmul>
 800774c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007750:	f7f9 f9d8 	bl	8000b04 <__aeabi_dcmpge>
 8007754:	2800      	cmp	r0, #0
 8007756:	f000 8157 	beq.w	8007a08 <_dtoa_r+0x938>
 800775a:	2400      	movs	r4, #0
 800775c:	4625      	mov	r5, r4
 800775e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007760:	43db      	mvns	r3, r3
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	4656      	mov	r6, sl
 8007766:	2700      	movs	r7, #0
 8007768:	4621      	mov	r1, r4
 800776a:	4658      	mov	r0, fp
 800776c:	f000 fbb4 	bl	8007ed8 <_Bfree>
 8007770:	2d00      	cmp	r5, #0
 8007772:	d0dc      	beq.n	800772e <_dtoa_r+0x65e>
 8007774:	b12f      	cbz	r7, 8007782 <_dtoa_r+0x6b2>
 8007776:	42af      	cmp	r7, r5
 8007778:	d003      	beq.n	8007782 <_dtoa_r+0x6b2>
 800777a:	4639      	mov	r1, r7
 800777c:	4658      	mov	r0, fp
 800777e:	f000 fbab 	bl	8007ed8 <_Bfree>
 8007782:	4629      	mov	r1, r5
 8007784:	4658      	mov	r0, fp
 8007786:	f000 fba7 	bl	8007ed8 <_Bfree>
 800778a:	e7d0      	b.n	800772e <_dtoa_r+0x65e>
 800778c:	9704      	str	r7, [sp, #16]
 800778e:	4633      	mov	r3, r6
 8007790:	461e      	mov	r6, r3
 8007792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007796:	2a39      	cmp	r2, #57	@ 0x39
 8007798:	d107      	bne.n	80077aa <_dtoa_r+0x6da>
 800779a:	459a      	cmp	sl, r3
 800779c:	d1f8      	bne.n	8007790 <_dtoa_r+0x6c0>
 800779e:	9a04      	ldr	r2, [sp, #16]
 80077a0:	3201      	adds	r2, #1
 80077a2:	9204      	str	r2, [sp, #16]
 80077a4:	2230      	movs	r2, #48	@ 0x30
 80077a6:	f88a 2000 	strb.w	r2, [sl]
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	3201      	adds	r2, #1
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	e7bd      	b.n	800772e <_dtoa_r+0x65e>
 80077b2:	4b7b      	ldr	r3, [pc, #492]	@ (80079a0 <_dtoa_r+0x8d0>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	f7f8 ff1f 	bl	80005f8 <__aeabi_dmul>
 80077ba:	2200      	movs	r2, #0
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	460d      	mov	r5, r1
 80077c2:	f7f9 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f aebb 	beq.w	8007542 <_dtoa_r+0x472>
 80077cc:	e6f0      	b.n	80075b0 <_dtoa_r+0x4e0>
 80077ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	f000 80db 	beq.w	800798c <_dtoa_r+0x8bc>
 80077d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077d8:	2a01      	cmp	r2, #1
 80077da:	f300 80bf 	bgt.w	800795c <_dtoa_r+0x88c>
 80077de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80077e0:	2a00      	cmp	r2, #0
 80077e2:	f000 80b7 	beq.w	8007954 <_dtoa_r+0x884>
 80077e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077ec:	4646      	mov	r6, r8
 80077ee:	9a08      	ldr	r2, [sp, #32]
 80077f0:	2101      	movs	r1, #1
 80077f2:	441a      	add	r2, r3
 80077f4:	4658      	mov	r0, fp
 80077f6:	4498      	add	r8, r3
 80077f8:	9208      	str	r2, [sp, #32]
 80077fa:	f000 fc21 	bl	8008040 <__i2b>
 80077fe:	4605      	mov	r5, r0
 8007800:	b15e      	cbz	r6, 800781a <_dtoa_r+0x74a>
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd08      	ble.n	800781a <_dtoa_r+0x74a>
 8007808:	42b3      	cmp	r3, r6
 800780a:	9a08      	ldr	r2, [sp, #32]
 800780c:	bfa8      	it	ge
 800780e:	4633      	movge	r3, r6
 8007810:	eba8 0803 	sub.w	r8, r8, r3
 8007814:	1af6      	subs	r6, r6, r3
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	9308      	str	r3, [sp, #32]
 800781a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800781c:	b1f3      	cbz	r3, 800785c <_dtoa_r+0x78c>
 800781e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80b7 	beq.w	8007994 <_dtoa_r+0x8c4>
 8007826:	b18c      	cbz	r4, 800784c <_dtoa_r+0x77c>
 8007828:	4629      	mov	r1, r5
 800782a:	4622      	mov	r2, r4
 800782c:	4658      	mov	r0, fp
 800782e:	f000 fcc7 	bl	80081c0 <__pow5mult>
 8007832:	464a      	mov	r2, r9
 8007834:	4601      	mov	r1, r0
 8007836:	4605      	mov	r5, r0
 8007838:	4658      	mov	r0, fp
 800783a:	f000 fc17 	bl	800806c <__multiply>
 800783e:	4649      	mov	r1, r9
 8007840:	9004      	str	r0, [sp, #16]
 8007842:	4658      	mov	r0, fp
 8007844:	f000 fb48 	bl	8007ed8 <_Bfree>
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	4699      	mov	r9, r3
 800784c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800784e:	1b1a      	subs	r2, r3, r4
 8007850:	d004      	beq.n	800785c <_dtoa_r+0x78c>
 8007852:	4649      	mov	r1, r9
 8007854:	4658      	mov	r0, fp
 8007856:	f000 fcb3 	bl	80081c0 <__pow5mult>
 800785a:	4681      	mov	r9, r0
 800785c:	2101      	movs	r1, #1
 800785e:	4658      	mov	r0, fp
 8007860:	f000 fbee 	bl	8008040 <__i2b>
 8007864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007866:	4604      	mov	r4, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 81cf 	beq.w	8007c0c <_dtoa_r+0xb3c>
 800786e:	461a      	mov	r2, r3
 8007870:	4601      	mov	r1, r0
 8007872:	4658      	mov	r0, fp
 8007874:	f000 fca4 	bl	80081c0 <__pow5mult>
 8007878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787a:	2b01      	cmp	r3, #1
 800787c:	4604      	mov	r4, r0
 800787e:	f300 8095 	bgt.w	80079ac <_dtoa_r+0x8dc>
 8007882:	9b02      	ldr	r3, [sp, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 8087 	bne.w	8007998 <_dtoa_r+0x8c8>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007890:	2b00      	cmp	r3, #0
 8007892:	f040 8089 	bne.w	80079a8 <_dtoa_r+0x8d8>
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800789c:	0d1b      	lsrs	r3, r3, #20
 800789e:	051b      	lsls	r3, r3, #20
 80078a0:	b12b      	cbz	r3, 80078ae <_dtoa_r+0x7de>
 80078a2:	9b08      	ldr	r3, [sp, #32]
 80078a4:	3301      	adds	r3, #1
 80078a6:	9308      	str	r3, [sp, #32]
 80078a8:	f108 0801 	add.w	r8, r8, #1
 80078ac:	2301      	movs	r3, #1
 80078ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 81b0 	beq.w	8007c18 <_dtoa_r+0xb48>
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078be:	6918      	ldr	r0, [r3, #16]
 80078c0:	f000 fb72 	bl	8007fa8 <__hi0bits>
 80078c4:	f1c0 0020 	rsb	r0, r0, #32
 80078c8:	9b08      	ldr	r3, [sp, #32]
 80078ca:	4418      	add	r0, r3
 80078cc:	f010 001f 	ands.w	r0, r0, #31
 80078d0:	d077      	beq.n	80079c2 <_dtoa_r+0x8f2>
 80078d2:	f1c0 0320 	rsb	r3, r0, #32
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	dd6b      	ble.n	80079b2 <_dtoa_r+0x8e2>
 80078da:	9b08      	ldr	r3, [sp, #32]
 80078dc:	f1c0 001c 	rsb	r0, r0, #28
 80078e0:	4403      	add	r3, r0
 80078e2:	4480      	add	r8, r0
 80078e4:	4406      	add	r6, r0
 80078e6:	9308      	str	r3, [sp, #32]
 80078e8:	f1b8 0f00 	cmp.w	r8, #0
 80078ec:	dd05      	ble.n	80078fa <_dtoa_r+0x82a>
 80078ee:	4649      	mov	r1, r9
 80078f0:	4642      	mov	r2, r8
 80078f2:	4658      	mov	r0, fp
 80078f4:	f000 fcbe 	bl	8008274 <__lshift>
 80078f8:	4681      	mov	r9, r0
 80078fa:	9b08      	ldr	r3, [sp, #32]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	dd05      	ble.n	800790c <_dtoa_r+0x83c>
 8007900:	4621      	mov	r1, r4
 8007902:	461a      	mov	r2, r3
 8007904:	4658      	mov	r0, fp
 8007906:	f000 fcb5 	bl	8008274 <__lshift>
 800790a:	4604      	mov	r4, r0
 800790c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800790e:	2b00      	cmp	r3, #0
 8007910:	d059      	beq.n	80079c6 <_dtoa_r+0x8f6>
 8007912:	4621      	mov	r1, r4
 8007914:	4648      	mov	r0, r9
 8007916:	f000 fd19 	bl	800834c <__mcmp>
 800791a:	2800      	cmp	r0, #0
 800791c:	da53      	bge.n	80079c6 <_dtoa_r+0x8f6>
 800791e:	1e7b      	subs	r3, r7, #1
 8007920:	9304      	str	r3, [sp, #16]
 8007922:	4649      	mov	r1, r9
 8007924:	2300      	movs	r3, #0
 8007926:	220a      	movs	r2, #10
 8007928:	4658      	mov	r0, fp
 800792a:	f000 faf7 	bl	8007f1c <__multadd>
 800792e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007930:	4681      	mov	r9, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 8172 	beq.w	8007c1c <_dtoa_r+0xb4c>
 8007938:	2300      	movs	r3, #0
 800793a:	4629      	mov	r1, r5
 800793c:	220a      	movs	r2, #10
 800793e:	4658      	mov	r0, fp
 8007940:	f000 faec 	bl	8007f1c <__multadd>
 8007944:	9b00      	ldr	r3, [sp, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	4605      	mov	r5, r0
 800794a:	dc67      	bgt.n	8007a1c <_dtoa_r+0x94c>
 800794c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800794e:	2b02      	cmp	r3, #2
 8007950:	dc41      	bgt.n	80079d6 <_dtoa_r+0x906>
 8007952:	e063      	b.n	8007a1c <_dtoa_r+0x94c>
 8007954:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007956:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800795a:	e746      	b.n	80077ea <_dtoa_r+0x71a>
 800795c:	9b07      	ldr	r3, [sp, #28]
 800795e:	1e5c      	subs	r4, r3, #1
 8007960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007962:	42a3      	cmp	r3, r4
 8007964:	bfbf      	itttt	lt
 8007966:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007968:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800796a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800796c:	1ae3      	sublt	r3, r4, r3
 800796e:	bfb4      	ite	lt
 8007970:	18d2      	addlt	r2, r2, r3
 8007972:	1b1c      	subge	r4, r3, r4
 8007974:	9b07      	ldr	r3, [sp, #28]
 8007976:	bfbc      	itt	lt
 8007978:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800797a:	2400      	movlt	r4, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfb5      	itete	lt
 8007980:	eba8 0603 	sublt.w	r6, r8, r3
 8007984:	9b07      	ldrge	r3, [sp, #28]
 8007986:	2300      	movlt	r3, #0
 8007988:	4646      	movge	r6, r8
 800798a:	e730      	b.n	80077ee <_dtoa_r+0x71e>
 800798c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800798e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007990:	4646      	mov	r6, r8
 8007992:	e735      	b.n	8007800 <_dtoa_r+0x730>
 8007994:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007996:	e75c      	b.n	8007852 <_dtoa_r+0x782>
 8007998:	2300      	movs	r3, #0
 800799a:	e788      	b.n	80078ae <_dtoa_r+0x7de>
 800799c:	3fe00000 	.word	0x3fe00000
 80079a0:	40240000 	.word	0x40240000
 80079a4:	40140000 	.word	0x40140000
 80079a8:	9b02      	ldr	r3, [sp, #8]
 80079aa:	e780      	b.n	80078ae <_dtoa_r+0x7de>
 80079ac:	2300      	movs	r3, #0
 80079ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b0:	e782      	b.n	80078b8 <_dtoa_r+0x7e8>
 80079b2:	d099      	beq.n	80078e8 <_dtoa_r+0x818>
 80079b4:	9a08      	ldr	r2, [sp, #32]
 80079b6:	331c      	adds	r3, #28
 80079b8:	441a      	add	r2, r3
 80079ba:	4498      	add	r8, r3
 80079bc:	441e      	add	r6, r3
 80079be:	9208      	str	r2, [sp, #32]
 80079c0:	e792      	b.n	80078e8 <_dtoa_r+0x818>
 80079c2:	4603      	mov	r3, r0
 80079c4:	e7f6      	b.n	80079b4 <_dtoa_r+0x8e4>
 80079c6:	9b07      	ldr	r3, [sp, #28]
 80079c8:	9704      	str	r7, [sp, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	dc20      	bgt.n	8007a10 <_dtoa_r+0x940>
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	dd1e      	ble.n	8007a14 <_dtoa_r+0x944>
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f47f aec0 	bne.w	800775e <_dtoa_r+0x68e>
 80079de:	4621      	mov	r1, r4
 80079e0:	2205      	movs	r2, #5
 80079e2:	4658      	mov	r0, fp
 80079e4:	f000 fa9a 	bl	8007f1c <__multadd>
 80079e8:	4601      	mov	r1, r0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4648      	mov	r0, r9
 80079ee:	f000 fcad 	bl	800834c <__mcmp>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f77f aeb3 	ble.w	800775e <_dtoa_r+0x68e>
 80079f8:	4656      	mov	r6, sl
 80079fa:	2331      	movs	r3, #49	@ 0x31
 80079fc:	f806 3b01 	strb.w	r3, [r6], #1
 8007a00:	9b04      	ldr	r3, [sp, #16]
 8007a02:	3301      	adds	r3, #1
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	e6ae      	b.n	8007766 <_dtoa_r+0x696>
 8007a08:	9c07      	ldr	r4, [sp, #28]
 8007a0a:	9704      	str	r7, [sp, #16]
 8007a0c:	4625      	mov	r5, r4
 8007a0e:	e7f3      	b.n	80079f8 <_dtoa_r+0x928>
 8007a10:	9b07      	ldr	r3, [sp, #28]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8104 	beq.w	8007c24 <_dtoa_r+0xb54>
 8007a1c:	2e00      	cmp	r6, #0
 8007a1e:	dd05      	ble.n	8007a2c <_dtoa_r+0x95c>
 8007a20:	4629      	mov	r1, r5
 8007a22:	4632      	mov	r2, r6
 8007a24:	4658      	mov	r0, fp
 8007a26:	f000 fc25 	bl	8008274 <__lshift>
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d05a      	beq.n	8007ae8 <_dtoa_r+0xa18>
 8007a32:	6869      	ldr	r1, [r5, #4]
 8007a34:	4658      	mov	r0, fp
 8007a36:	f000 fa0f 	bl	8007e58 <_Balloc>
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	b928      	cbnz	r0, 8007a4a <_dtoa_r+0x97a>
 8007a3e:	4b84      	ldr	r3, [pc, #528]	@ (8007c50 <_dtoa_r+0xb80>)
 8007a40:	4602      	mov	r2, r0
 8007a42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a46:	f7ff bb5a 	b.w	80070fe <_dtoa_r+0x2e>
 8007a4a:	692a      	ldr	r2, [r5, #16]
 8007a4c:	3202      	adds	r2, #2
 8007a4e:	0092      	lsls	r2, r2, #2
 8007a50:	f105 010c 	add.w	r1, r5, #12
 8007a54:	300c      	adds	r0, #12
 8007a56:	f001 f813 	bl	8008a80 <memcpy>
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4658      	mov	r0, fp
 8007a60:	f000 fc08 	bl	8008274 <__lshift>
 8007a64:	f10a 0301 	add.w	r3, sl, #1
 8007a68:	9307      	str	r3, [sp, #28]
 8007a6a:	9b00      	ldr	r3, [sp, #0]
 8007a6c:	4453      	add	r3, sl
 8007a6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a70:	9b02      	ldr	r3, [sp, #8]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	462f      	mov	r7, r5
 8007a78:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	9b07      	ldr	r3, [sp, #28]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	3b01      	subs	r3, #1
 8007a82:	4648      	mov	r0, r9
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	f7ff fa9a 	bl	8006fbe <quorem>
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	9002      	str	r0, [sp, #8]
 8007a8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a92:	4648      	mov	r0, r9
 8007a94:	f000 fc5a 	bl	800834c <__mcmp>
 8007a98:	462a      	mov	r2, r5
 8007a9a:	9008      	str	r0, [sp, #32]
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4658      	mov	r0, fp
 8007aa0:	f000 fc70 	bl	8008384 <__mdiff>
 8007aa4:	68c2      	ldr	r2, [r0, #12]
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	bb02      	cbnz	r2, 8007aec <_dtoa_r+0xa1c>
 8007aaa:	4601      	mov	r1, r0
 8007aac:	4648      	mov	r0, r9
 8007aae:	f000 fc4d 	bl	800834c <__mcmp>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aba:	f000 fa0d 	bl	8007ed8 <_Bfree>
 8007abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ac2:	9e07      	ldr	r6, [sp, #28]
 8007ac4:	ea43 0102 	orr.w	r1, r3, r2
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aca:	4319      	orrs	r1, r3
 8007acc:	d110      	bne.n	8007af0 <_dtoa_r+0xa20>
 8007ace:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ad2:	d029      	beq.n	8007b28 <_dtoa_r+0xa58>
 8007ad4:	9b08      	ldr	r3, [sp, #32]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dd02      	ble.n	8007ae0 <_dtoa_r+0xa10>
 8007ada:	9b02      	ldr	r3, [sp, #8]
 8007adc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ae0:	9b00      	ldr	r3, [sp, #0]
 8007ae2:	f883 8000 	strb.w	r8, [r3]
 8007ae6:	e63f      	b.n	8007768 <_dtoa_r+0x698>
 8007ae8:	4628      	mov	r0, r5
 8007aea:	e7bb      	b.n	8007a64 <_dtoa_r+0x994>
 8007aec:	2201      	movs	r2, #1
 8007aee:	e7e1      	b.n	8007ab4 <_dtoa_r+0x9e4>
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	db04      	blt.n	8007b00 <_dtoa_r+0xa30>
 8007af6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007af8:	430b      	orrs	r3, r1
 8007afa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007afc:	430b      	orrs	r3, r1
 8007afe:	d120      	bne.n	8007b42 <_dtoa_r+0xa72>
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	dded      	ble.n	8007ae0 <_dtoa_r+0xa10>
 8007b04:	4649      	mov	r1, r9
 8007b06:	2201      	movs	r2, #1
 8007b08:	4658      	mov	r0, fp
 8007b0a:	f000 fbb3 	bl	8008274 <__lshift>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4681      	mov	r9, r0
 8007b12:	f000 fc1b 	bl	800834c <__mcmp>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	dc03      	bgt.n	8007b22 <_dtoa_r+0xa52>
 8007b1a:	d1e1      	bne.n	8007ae0 <_dtoa_r+0xa10>
 8007b1c:	f018 0f01 	tst.w	r8, #1
 8007b20:	d0de      	beq.n	8007ae0 <_dtoa_r+0xa10>
 8007b22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b26:	d1d8      	bne.n	8007ada <_dtoa_r+0xa0a>
 8007b28:	9a00      	ldr	r2, [sp, #0]
 8007b2a:	2339      	movs	r3, #57	@ 0x39
 8007b2c:	7013      	strb	r3, [r2, #0]
 8007b2e:	4633      	mov	r3, r6
 8007b30:	461e      	mov	r6, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b38:	2a39      	cmp	r2, #57	@ 0x39
 8007b3a:	d052      	beq.n	8007be2 <_dtoa_r+0xb12>
 8007b3c:	3201      	adds	r2, #1
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	e612      	b.n	8007768 <_dtoa_r+0x698>
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	dd07      	ble.n	8007b56 <_dtoa_r+0xa86>
 8007b46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b4a:	d0ed      	beq.n	8007b28 <_dtoa_r+0xa58>
 8007b4c:	9a00      	ldr	r2, [sp, #0]
 8007b4e:	f108 0301 	add.w	r3, r8, #1
 8007b52:	7013      	strb	r3, [r2, #0]
 8007b54:	e608      	b.n	8007768 <_dtoa_r+0x698>
 8007b56:	9b07      	ldr	r3, [sp, #28]
 8007b58:	9a07      	ldr	r2, [sp, #28]
 8007b5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d028      	beq.n	8007bb6 <_dtoa_r+0xae6>
 8007b64:	4649      	mov	r1, r9
 8007b66:	2300      	movs	r3, #0
 8007b68:	220a      	movs	r2, #10
 8007b6a:	4658      	mov	r0, fp
 8007b6c:	f000 f9d6 	bl	8007f1c <__multadd>
 8007b70:	42af      	cmp	r7, r5
 8007b72:	4681      	mov	r9, r0
 8007b74:	f04f 0300 	mov.w	r3, #0
 8007b78:	f04f 020a 	mov.w	r2, #10
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	4658      	mov	r0, fp
 8007b80:	d107      	bne.n	8007b92 <_dtoa_r+0xac2>
 8007b82:	f000 f9cb 	bl	8007f1c <__multadd>
 8007b86:	4607      	mov	r7, r0
 8007b88:	4605      	mov	r5, r0
 8007b8a:	9b07      	ldr	r3, [sp, #28]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	9307      	str	r3, [sp, #28]
 8007b90:	e774      	b.n	8007a7c <_dtoa_r+0x9ac>
 8007b92:	f000 f9c3 	bl	8007f1c <__multadd>
 8007b96:	4629      	mov	r1, r5
 8007b98:	4607      	mov	r7, r0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	220a      	movs	r2, #10
 8007b9e:	4658      	mov	r0, fp
 8007ba0:	f000 f9bc 	bl	8007f1c <__multadd>
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	e7f0      	b.n	8007b8a <_dtoa_r+0xaba>
 8007ba8:	9b00      	ldr	r3, [sp, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bfcc      	ite	gt
 8007bae:	461e      	movgt	r6, r3
 8007bb0:	2601      	movle	r6, #1
 8007bb2:	4456      	add	r6, sl
 8007bb4:	2700      	movs	r7, #0
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4658      	mov	r0, fp
 8007bbc:	f000 fb5a 	bl	8008274 <__lshift>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4681      	mov	r9, r0
 8007bc4:	f000 fbc2 	bl	800834c <__mcmp>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	dcb0      	bgt.n	8007b2e <_dtoa_r+0xa5e>
 8007bcc:	d102      	bne.n	8007bd4 <_dtoa_r+0xb04>
 8007bce:	f018 0f01 	tst.w	r8, #1
 8007bd2:	d1ac      	bne.n	8007b2e <_dtoa_r+0xa5e>
 8007bd4:	4633      	mov	r3, r6
 8007bd6:	461e      	mov	r6, r3
 8007bd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bdc:	2a30      	cmp	r2, #48	@ 0x30
 8007bde:	d0fa      	beq.n	8007bd6 <_dtoa_r+0xb06>
 8007be0:	e5c2      	b.n	8007768 <_dtoa_r+0x698>
 8007be2:	459a      	cmp	sl, r3
 8007be4:	d1a4      	bne.n	8007b30 <_dtoa_r+0xa60>
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	3301      	adds	r3, #1
 8007bea:	9304      	str	r3, [sp, #16]
 8007bec:	2331      	movs	r3, #49	@ 0x31
 8007bee:	f88a 3000 	strb.w	r3, [sl]
 8007bf2:	e5b9      	b.n	8007768 <_dtoa_r+0x698>
 8007bf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c54 <_dtoa_r+0xb84>
 8007bfa:	b11b      	cbz	r3, 8007c04 <_dtoa_r+0xb34>
 8007bfc:	f10a 0308 	add.w	r3, sl, #8
 8007c00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	4650      	mov	r0, sl
 8007c06:	b019      	add	sp, #100	@ 0x64
 8007c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	f77f ae37 	ble.w	8007882 <_dtoa_r+0x7b2>
 8007c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c18:	2001      	movs	r0, #1
 8007c1a:	e655      	b.n	80078c8 <_dtoa_r+0x7f8>
 8007c1c:	9b00      	ldr	r3, [sp, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f77f aed6 	ble.w	80079d0 <_dtoa_r+0x900>
 8007c24:	4656      	mov	r6, sl
 8007c26:	4621      	mov	r1, r4
 8007c28:	4648      	mov	r0, r9
 8007c2a:	f7ff f9c8 	bl	8006fbe <quorem>
 8007c2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c32:	f806 8b01 	strb.w	r8, [r6], #1
 8007c36:	9b00      	ldr	r3, [sp, #0]
 8007c38:	eba6 020a 	sub.w	r2, r6, sl
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	ddb3      	ble.n	8007ba8 <_dtoa_r+0xad8>
 8007c40:	4649      	mov	r1, r9
 8007c42:	2300      	movs	r3, #0
 8007c44:	220a      	movs	r2, #10
 8007c46:	4658      	mov	r0, fp
 8007c48:	f000 f968 	bl	8007f1c <__multadd>
 8007c4c:	4681      	mov	r9, r0
 8007c4e:	e7ea      	b.n	8007c26 <_dtoa_r+0xb56>
 8007c50:	08008e64 	.word	0x08008e64
 8007c54:	08008de8 	.word	0x08008de8

08007c58 <_free_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d041      	beq.n	8007ce4 <_free_r+0x8c>
 8007c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c64:	1f0c      	subs	r4, r1, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bfb8      	it	lt
 8007c6a:	18e4      	addlt	r4, r4, r3
 8007c6c:	f000 f8e8 	bl	8007e40 <__malloc_lock>
 8007c70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce8 <_free_r+0x90>)
 8007c72:	6813      	ldr	r3, [r2, #0]
 8007c74:	b933      	cbnz	r3, 8007c84 <_free_r+0x2c>
 8007c76:	6063      	str	r3, [r4, #4]
 8007c78:	6014      	str	r4, [r2, #0]
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c80:	f000 b8e4 	b.w	8007e4c <__malloc_unlock>
 8007c84:	42a3      	cmp	r3, r4
 8007c86:	d908      	bls.n	8007c9a <_free_r+0x42>
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	1821      	adds	r1, r4, r0
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	bf01      	itttt	eq
 8007c90:	6819      	ldreq	r1, [r3, #0]
 8007c92:	685b      	ldreq	r3, [r3, #4]
 8007c94:	1809      	addeq	r1, r1, r0
 8007c96:	6021      	streq	r1, [r4, #0]
 8007c98:	e7ed      	b.n	8007c76 <_free_r+0x1e>
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	b10b      	cbz	r3, 8007ca4 <_free_r+0x4c>
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	d9fa      	bls.n	8007c9a <_free_r+0x42>
 8007ca4:	6811      	ldr	r1, [r2, #0]
 8007ca6:	1850      	adds	r0, r2, r1
 8007ca8:	42a0      	cmp	r0, r4
 8007caa:	d10b      	bne.n	8007cc4 <_free_r+0x6c>
 8007cac:	6820      	ldr	r0, [r4, #0]
 8007cae:	4401      	add	r1, r0
 8007cb0:	1850      	adds	r0, r2, r1
 8007cb2:	4283      	cmp	r3, r0
 8007cb4:	6011      	str	r1, [r2, #0]
 8007cb6:	d1e0      	bne.n	8007c7a <_free_r+0x22>
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	6053      	str	r3, [r2, #4]
 8007cbe:	4408      	add	r0, r1
 8007cc0:	6010      	str	r0, [r2, #0]
 8007cc2:	e7da      	b.n	8007c7a <_free_r+0x22>
 8007cc4:	d902      	bls.n	8007ccc <_free_r+0x74>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	e7d6      	b.n	8007c7a <_free_r+0x22>
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	1821      	adds	r1, r4, r0
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	bf04      	itt	eq
 8007cd4:	6819      	ldreq	r1, [r3, #0]
 8007cd6:	685b      	ldreq	r3, [r3, #4]
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	bf04      	itt	eq
 8007cdc:	1809      	addeq	r1, r1, r0
 8007cde:	6021      	streq	r1, [r4, #0]
 8007ce0:	6054      	str	r4, [r2, #4]
 8007ce2:	e7ca      	b.n	8007c7a <_free_r+0x22>
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200005c8 	.word	0x200005c8

08007cec <malloc>:
 8007cec:	4b02      	ldr	r3, [pc, #8]	@ (8007cf8 <malloc+0xc>)
 8007cee:	4601      	mov	r1, r0
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	f000 b825 	b.w	8007d40 <_malloc_r>
 8007cf6:	bf00      	nop
 8007cf8:	20000058 	.word	0x20000058

08007cfc <sbrk_aligned>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8007d3c <sbrk_aligned+0x40>)
 8007d00:	460c      	mov	r4, r1
 8007d02:	6831      	ldr	r1, [r6, #0]
 8007d04:	4605      	mov	r5, r0
 8007d06:	b911      	cbnz	r1, 8007d0e <sbrk_aligned+0x12>
 8007d08:	f000 feaa 	bl	8008a60 <_sbrk_r>
 8007d0c:	6030      	str	r0, [r6, #0]
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 fea5 	bl	8008a60 <_sbrk_r>
 8007d16:	1c43      	adds	r3, r0, #1
 8007d18:	d103      	bne.n	8007d22 <sbrk_aligned+0x26>
 8007d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d1e:	4620      	mov	r0, r4
 8007d20:	bd70      	pop	{r4, r5, r6, pc}
 8007d22:	1cc4      	adds	r4, r0, #3
 8007d24:	f024 0403 	bic.w	r4, r4, #3
 8007d28:	42a0      	cmp	r0, r4
 8007d2a:	d0f8      	beq.n	8007d1e <sbrk_aligned+0x22>
 8007d2c:	1a21      	subs	r1, r4, r0
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f000 fe96 	bl	8008a60 <_sbrk_r>
 8007d34:	3001      	adds	r0, #1
 8007d36:	d1f2      	bne.n	8007d1e <sbrk_aligned+0x22>
 8007d38:	e7ef      	b.n	8007d1a <sbrk_aligned+0x1e>
 8007d3a:	bf00      	nop
 8007d3c:	200005c4 	.word	0x200005c4

08007d40 <_malloc_r>:
 8007d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d44:	1ccd      	adds	r5, r1, #3
 8007d46:	f025 0503 	bic.w	r5, r5, #3
 8007d4a:	3508      	adds	r5, #8
 8007d4c:	2d0c      	cmp	r5, #12
 8007d4e:	bf38      	it	cc
 8007d50:	250c      	movcc	r5, #12
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	4606      	mov	r6, r0
 8007d56:	db01      	blt.n	8007d5c <_malloc_r+0x1c>
 8007d58:	42a9      	cmp	r1, r5
 8007d5a:	d904      	bls.n	8007d66 <_malloc_r+0x26>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	6033      	str	r3, [r6, #0]
 8007d60:	2000      	movs	r0, #0
 8007d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e3c <_malloc_r+0xfc>
 8007d6a:	f000 f869 	bl	8007e40 <__malloc_lock>
 8007d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d72:	461c      	mov	r4, r3
 8007d74:	bb44      	cbnz	r4, 8007dc8 <_malloc_r+0x88>
 8007d76:	4629      	mov	r1, r5
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7ff ffbf 	bl	8007cfc <sbrk_aligned>
 8007d7e:	1c43      	adds	r3, r0, #1
 8007d80:	4604      	mov	r4, r0
 8007d82:	d158      	bne.n	8007e36 <_malloc_r+0xf6>
 8007d84:	f8d8 4000 	ldr.w	r4, [r8]
 8007d88:	4627      	mov	r7, r4
 8007d8a:	2f00      	cmp	r7, #0
 8007d8c:	d143      	bne.n	8007e16 <_malloc_r+0xd6>
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	d04b      	beq.n	8007e2a <_malloc_r+0xea>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	4639      	mov	r1, r7
 8007d96:	4630      	mov	r0, r6
 8007d98:	eb04 0903 	add.w	r9, r4, r3
 8007d9c:	f000 fe60 	bl	8008a60 <_sbrk_r>
 8007da0:	4581      	cmp	r9, r0
 8007da2:	d142      	bne.n	8007e2a <_malloc_r+0xea>
 8007da4:	6821      	ldr	r1, [r4, #0]
 8007da6:	1a6d      	subs	r5, r5, r1
 8007da8:	4629      	mov	r1, r5
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff ffa6 	bl	8007cfc <sbrk_aligned>
 8007db0:	3001      	adds	r0, #1
 8007db2:	d03a      	beq.n	8007e2a <_malloc_r+0xea>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	442b      	add	r3, r5
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	f8d8 3000 	ldr.w	r3, [r8]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	bb62      	cbnz	r2, 8007e1c <_malloc_r+0xdc>
 8007dc2:	f8c8 7000 	str.w	r7, [r8]
 8007dc6:	e00f      	b.n	8007de8 <_malloc_r+0xa8>
 8007dc8:	6822      	ldr	r2, [r4, #0]
 8007dca:	1b52      	subs	r2, r2, r5
 8007dcc:	d420      	bmi.n	8007e10 <_malloc_r+0xd0>
 8007dce:	2a0b      	cmp	r2, #11
 8007dd0:	d917      	bls.n	8007e02 <_malloc_r+0xc2>
 8007dd2:	1961      	adds	r1, r4, r5
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	6025      	str	r5, [r4, #0]
 8007dd8:	bf18      	it	ne
 8007dda:	6059      	strne	r1, [r3, #4]
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	bf08      	it	eq
 8007de0:	f8c8 1000 	streq.w	r1, [r8]
 8007de4:	5162      	str	r2, [r4, r5]
 8007de6:	604b      	str	r3, [r1, #4]
 8007de8:	4630      	mov	r0, r6
 8007dea:	f000 f82f 	bl	8007e4c <__malloc_unlock>
 8007dee:	f104 000b 	add.w	r0, r4, #11
 8007df2:	1d23      	adds	r3, r4, #4
 8007df4:	f020 0007 	bic.w	r0, r0, #7
 8007df8:	1ac2      	subs	r2, r0, r3
 8007dfa:	bf1c      	itt	ne
 8007dfc:	1a1b      	subne	r3, r3, r0
 8007dfe:	50a3      	strne	r3, [r4, r2]
 8007e00:	e7af      	b.n	8007d62 <_malloc_r+0x22>
 8007e02:	6862      	ldr	r2, [r4, #4]
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	bf0c      	ite	eq
 8007e08:	f8c8 2000 	streq.w	r2, [r8]
 8007e0c:	605a      	strne	r2, [r3, #4]
 8007e0e:	e7eb      	b.n	8007de8 <_malloc_r+0xa8>
 8007e10:	4623      	mov	r3, r4
 8007e12:	6864      	ldr	r4, [r4, #4]
 8007e14:	e7ae      	b.n	8007d74 <_malloc_r+0x34>
 8007e16:	463c      	mov	r4, r7
 8007e18:	687f      	ldr	r7, [r7, #4]
 8007e1a:	e7b6      	b.n	8007d8a <_malloc_r+0x4a>
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d1fb      	bne.n	8007e1c <_malloc_r+0xdc>
 8007e24:	2300      	movs	r3, #0
 8007e26:	6053      	str	r3, [r2, #4]
 8007e28:	e7de      	b.n	8007de8 <_malloc_r+0xa8>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	6033      	str	r3, [r6, #0]
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f000 f80c 	bl	8007e4c <__malloc_unlock>
 8007e34:	e794      	b.n	8007d60 <_malloc_r+0x20>
 8007e36:	6005      	str	r5, [r0, #0]
 8007e38:	e7d6      	b.n	8007de8 <_malloc_r+0xa8>
 8007e3a:	bf00      	nop
 8007e3c:	200005c8 	.word	0x200005c8

08007e40 <__malloc_lock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	@ (8007e48 <__malloc_lock+0x8>)
 8007e42:	f7ff b8ba 	b.w	8006fba <__retarget_lock_acquire_recursive>
 8007e46:	bf00      	nop
 8007e48:	200005c0 	.word	0x200005c0

08007e4c <__malloc_unlock>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	@ (8007e54 <__malloc_unlock+0x8>)
 8007e4e:	f7ff b8b5 	b.w	8006fbc <__retarget_lock_release_recursive>
 8007e52:	bf00      	nop
 8007e54:	200005c0 	.word	0x200005c0

08007e58 <_Balloc>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	69c6      	ldr	r6, [r0, #28]
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	460d      	mov	r5, r1
 8007e60:	b976      	cbnz	r6, 8007e80 <_Balloc+0x28>
 8007e62:	2010      	movs	r0, #16
 8007e64:	f7ff ff42 	bl	8007cec <malloc>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	61e0      	str	r0, [r4, #28]
 8007e6c:	b920      	cbnz	r0, 8007e78 <_Balloc+0x20>
 8007e6e:	4b18      	ldr	r3, [pc, #96]	@ (8007ed0 <_Balloc+0x78>)
 8007e70:	4818      	ldr	r0, [pc, #96]	@ (8007ed4 <_Balloc+0x7c>)
 8007e72:	216b      	movs	r1, #107	@ 0x6b
 8007e74:	f000 fe12 	bl	8008a9c <__assert_func>
 8007e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e7c:	6006      	str	r6, [r0, #0]
 8007e7e:	60c6      	str	r6, [r0, #12]
 8007e80:	69e6      	ldr	r6, [r4, #28]
 8007e82:	68f3      	ldr	r3, [r6, #12]
 8007e84:	b183      	cbz	r3, 8007ea8 <_Balloc+0x50>
 8007e86:	69e3      	ldr	r3, [r4, #28]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e8e:	b9b8      	cbnz	r0, 8007ec0 <_Balloc+0x68>
 8007e90:	2101      	movs	r1, #1
 8007e92:	fa01 f605 	lsl.w	r6, r1, r5
 8007e96:	1d72      	adds	r2, r6, #5
 8007e98:	0092      	lsls	r2, r2, #2
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 fe1c 	bl	8008ad8 <_calloc_r>
 8007ea0:	b160      	cbz	r0, 8007ebc <_Balloc+0x64>
 8007ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ea6:	e00e      	b.n	8007ec6 <_Balloc+0x6e>
 8007ea8:	2221      	movs	r2, #33	@ 0x21
 8007eaa:	2104      	movs	r1, #4
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fe13 	bl	8008ad8 <_calloc_r>
 8007eb2:	69e3      	ldr	r3, [r4, #28]
 8007eb4:	60f0      	str	r0, [r6, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e4      	bne.n	8007e86 <_Balloc+0x2e>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	6802      	ldr	r2, [r0, #0]
 8007ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ecc:	e7f7      	b.n	8007ebe <_Balloc+0x66>
 8007ece:	bf00      	nop
 8007ed0:	08008df5 	.word	0x08008df5
 8007ed4:	08008e75 	.word	0x08008e75

08007ed8 <_Bfree>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	69c6      	ldr	r6, [r0, #28]
 8007edc:	4605      	mov	r5, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	b976      	cbnz	r6, 8007f00 <_Bfree+0x28>
 8007ee2:	2010      	movs	r0, #16
 8007ee4:	f7ff ff02 	bl	8007cec <malloc>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	61e8      	str	r0, [r5, #28]
 8007eec:	b920      	cbnz	r0, 8007ef8 <_Bfree+0x20>
 8007eee:	4b09      	ldr	r3, [pc, #36]	@ (8007f14 <_Bfree+0x3c>)
 8007ef0:	4809      	ldr	r0, [pc, #36]	@ (8007f18 <_Bfree+0x40>)
 8007ef2:	218f      	movs	r1, #143	@ 0x8f
 8007ef4:	f000 fdd2 	bl	8008a9c <__assert_func>
 8007ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007efc:	6006      	str	r6, [r0, #0]
 8007efe:	60c6      	str	r6, [r0, #12]
 8007f00:	b13c      	cbz	r4, 8007f12 <_Bfree+0x3a>
 8007f02:	69eb      	ldr	r3, [r5, #28]
 8007f04:	6862      	ldr	r2, [r4, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f0c:	6021      	str	r1, [r4, #0]
 8007f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	08008df5 	.word	0x08008df5
 8007f18:	08008e75 	.word	0x08008e75

08007f1c <__multadd>:
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	690d      	ldr	r5, [r1, #16]
 8007f22:	4607      	mov	r7, r0
 8007f24:	460c      	mov	r4, r1
 8007f26:	461e      	mov	r6, r3
 8007f28:	f101 0c14 	add.w	ip, r1, #20
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f32:	b299      	uxth	r1, r3
 8007f34:	fb02 6101 	mla	r1, r2, r1, r6
 8007f38:	0c1e      	lsrs	r6, r3, #16
 8007f3a:	0c0b      	lsrs	r3, r1, #16
 8007f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8007f40:	b289      	uxth	r1, r1
 8007f42:	3001      	adds	r0, #1
 8007f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f48:	4285      	cmp	r5, r0
 8007f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f52:	dcec      	bgt.n	8007f2e <__multadd+0x12>
 8007f54:	b30e      	cbz	r6, 8007f9a <__multadd+0x7e>
 8007f56:	68a3      	ldr	r3, [r4, #8]
 8007f58:	42ab      	cmp	r3, r5
 8007f5a:	dc19      	bgt.n	8007f90 <__multadd+0x74>
 8007f5c:	6861      	ldr	r1, [r4, #4]
 8007f5e:	4638      	mov	r0, r7
 8007f60:	3101      	adds	r1, #1
 8007f62:	f7ff ff79 	bl	8007e58 <_Balloc>
 8007f66:	4680      	mov	r8, r0
 8007f68:	b928      	cbnz	r0, 8007f76 <__multadd+0x5a>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa0 <__multadd+0x84>)
 8007f6e:	480d      	ldr	r0, [pc, #52]	@ (8007fa4 <__multadd+0x88>)
 8007f70:	21ba      	movs	r1, #186	@ 0xba
 8007f72:	f000 fd93 	bl	8008a9c <__assert_func>
 8007f76:	6922      	ldr	r2, [r4, #16]
 8007f78:	3202      	adds	r2, #2
 8007f7a:	f104 010c 	add.w	r1, r4, #12
 8007f7e:	0092      	lsls	r2, r2, #2
 8007f80:	300c      	adds	r0, #12
 8007f82:	f000 fd7d 	bl	8008a80 <memcpy>
 8007f86:	4621      	mov	r1, r4
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f7ff ffa5 	bl	8007ed8 <_Bfree>
 8007f8e:	4644      	mov	r4, r8
 8007f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f94:	3501      	adds	r5, #1
 8007f96:	615e      	str	r6, [r3, #20]
 8007f98:	6125      	str	r5, [r4, #16]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa0:	08008e64 	.word	0x08008e64
 8007fa4:	08008e75 	.word	0x08008e75

08007fa8 <__hi0bits>:
 8007fa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007fac:	4603      	mov	r3, r0
 8007fae:	bf36      	itet	cc
 8007fb0:	0403      	lslcc	r3, r0, #16
 8007fb2:	2000      	movcs	r0, #0
 8007fb4:	2010      	movcc	r0, #16
 8007fb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fba:	bf3c      	itt	cc
 8007fbc:	021b      	lslcc	r3, r3, #8
 8007fbe:	3008      	addcc	r0, #8
 8007fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fc4:	bf3c      	itt	cc
 8007fc6:	011b      	lslcc	r3, r3, #4
 8007fc8:	3004      	addcc	r0, #4
 8007fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fce:	bf3c      	itt	cc
 8007fd0:	009b      	lslcc	r3, r3, #2
 8007fd2:	3002      	addcc	r0, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	db05      	blt.n	8007fe4 <__hi0bits+0x3c>
 8007fd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fdc:	f100 0001 	add.w	r0, r0, #1
 8007fe0:	bf08      	it	eq
 8007fe2:	2020      	moveq	r0, #32
 8007fe4:	4770      	bx	lr

08007fe6 <__lo0bits>:
 8007fe6:	6803      	ldr	r3, [r0, #0]
 8007fe8:	4602      	mov	r2, r0
 8007fea:	f013 0007 	ands.w	r0, r3, #7
 8007fee:	d00b      	beq.n	8008008 <__lo0bits+0x22>
 8007ff0:	07d9      	lsls	r1, r3, #31
 8007ff2:	d421      	bmi.n	8008038 <__lo0bits+0x52>
 8007ff4:	0798      	lsls	r0, r3, #30
 8007ff6:	bf49      	itett	mi
 8007ff8:	085b      	lsrmi	r3, r3, #1
 8007ffa:	089b      	lsrpl	r3, r3, #2
 8007ffc:	2001      	movmi	r0, #1
 8007ffe:	6013      	strmi	r3, [r2, #0]
 8008000:	bf5c      	itt	pl
 8008002:	6013      	strpl	r3, [r2, #0]
 8008004:	2002      	movpl	r0, #2
 8008006:	4770      	bx	lr
 8008008:	b299      	uxth	r1, r3
 800800a:	b909      	cbnz	r1, 8008010 <__lo0bits+0x2a>
 800800c:	0c1b      	lsrs	r3, r3, #16
 800800e:	2010      	movs	r0, #16
 8008010:	b2d9      	uxtb	r1, r3
 8008012:	b909      	cbnz	r1, 8008018 <__lo0bits+0x32>
 8008014:	3008      	adds	r0, #8
 8008016:	0a1b      	lsrs	r3, r3, #8
 8008018:	0719      	lsls	r1, r3, #28
 800801a:	bf04      	itt	eq
 800801c:	091b      	lsreq	r3, r3, #4
 800801e:	3004      	addeq	r0, #4
 8008020:	0799      	lsls	r1, r3, #30
 8008022:	bf04      	itt	eq
 8008024:	089b      	lsreq	r3, r3, #2
 8008026:	3002      	addeq	r0, #2
 8008028:	07d9      	lsls	r1, r3, #31
 800802a:	d403      	bmi.n	8008034 <__lo0bits+0x4e>
 800802c:	085b      	lsrs	r3, r3, #1
 800802e:	f100 0001 	add.w	r0, r0, #1
 8008032:	d003      	beq.n	800803c <__lo0bits+0x56>
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	4770      	bx	lr
 8008038:	2000      	movs	r0, #0
 800803a:	4770      	bx	lr
 800803c:	2020      	movs	r0, #32
 800803e:	4770      	bx	lr

08008040 <__i2b>:
 8008040:	b510      	push	{r4, lr}
 8008042:	460c      	mov	r4, r1
 8008044:	2101      	movs	r1, #1
 8008046:	f7ff ff07 	bl	8007e58 <_Balloc>
 800804a:	4602      	mov	r2, r0
 800804c:	b928      	cbnz	r0, 800805a <__i2b+0x1a>
 800804e:	4b05      	ldr	r3, [pc, #20]	@ (8008064 <__i2b+0x24>)
 8008050:	4805      	ldr	r0, [pc, #20]	@ (8008068 <__i2b+0x28>)
 8008052:	f240 1145 	movw	r1, #325	@ 0x145
 8008056:	f000 fd21 	bl	8008a9c <__assert_func>
 800805a:	2301      	movs	r3, #1
 800805c:	6144      	str	r4, [r0, #20]
 800805e:	6103      	str	r3, [r0, #16]
 8008060:	bd10      	pop	{r4, pc}
 8008062:	bf00      	nop
 8008064:	08008e64 	.word	0x08008e64
 8008068:	08008e75 	.word	0x08008e75

0800806c <__multiply>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	4614      	mov	r4, r2
 8008072:	690a      	ldr	r2, [r1, #16]
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	429a      	cmp	r2, r3
 8008078:	bfa8      	it	ge
 800807a:	4623      	movge	r3, r4
 800807c:	460f      	mov	r7, r1
 800807e:	bfa4      	itt	ge
 8008080:	460c      	movge	r4, r1
 8008082:	461f      	movge	r7, r3
 8008084:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008088:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800808c:	68a3      	ldr	r3, [r4, #8]
 800808e:	6861      	ldr	r1, [r4, #4]
 8008090:	eb0a 0609 	add.w	r6, sl, r9
 8008094:	42b3      	cmp	r3, r6
 8008096:	b085      	sub	sp, #20
 8008098:	bfb8      	it	lt
 800809a:	3101      	addlt	r1, #1
 800809c:	f7ff fedc 	bl	8007e58 <_Balloc>
 80080a0:	b930      	cbnz	r0, 80080b0 <__multiply+0x44>
 80080a2:	4602      	mov	r2, r0
 80080a4:	4b44      	ldr	r3, [pc, #272]	@ (80081b8 <__multiply+0x14c>)
 80080a6:	4845      	ldr	r0, [pc, #276]	@ (80081bc <__multiply+0x150>)
 80080a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80080ac:	f000 fcf6 	bl	8008a9c <__assert_func>
 80080b0:	f100 0514 	add.w	r5, r0, #20
 80080b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080b8:	462b      	mov	r3, r5
 80080ba:	2200      	movs	r2, #0
 80080bc:	4543      	cmp	r3, r8
 80080be:	d321      	bcc.n	8008104 <__multiply+0x98>
 80080c0:	f107 0114 	add.w	r1, r7, #20
 80080c4:	f104 0214 	add.w	r2, r4, #20
 80080c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80080cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80080d0:	9302      	str	r3, [sp, #8]
 80080d2:	1b13      	subs	r3, r2, r4
 80080d4:	3b15      	subs	r3, #21
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	3304      	adds	r3, #4
 80080dc:	f104 0715 	add.w	r7, r4, #21
 80080e0:	42ba      	cmp	r2, r7
 80080e2:	bf38      	it	cc
 80080e4:	2304      	movcc	r3, #4
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	9b02      	ldr	r3, [sp, #8]
 80080ea:	9103      	str	r1, [sp, #12]
 80080ec:	428b      	cmp	r3, r1
 80080ee:	d80c      	bhi.n	800810a <__multiply+0x9e>
 80080f0:	2e00      	cmp	r6, #0
 80080f2:	dd03      	ble.n	80080fc <__multiply+0x90>
 80080f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d05b      	beq.n	80081b4 <__multiply+0x148>
 80080fc:	6106      	str	r6, [r0, #16]
 80080fe:	b005      	add	sp, #20
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	f843 2b04 	str.w	r2, [r3], #4
 8008108:	e7d8      	b.n	80080bc <__multiply+0x50>
 800810a:	f8b1 a000 	ldrh.w	sl, [r1]
 800810e:	f1ba 0f00 	cmp.w	sl, #0
 8008112:	d024      	beq.n	800815e <__multiply+0xf2>
 8008114:	f104 0e14 	add.w	lr, r4, #20
 8008118:	46a9      	mov	r9, r5
 800811a:	f04f 0c00 	mov.w	ip, #0
 800811e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008122:	f8d9 3000 	ldr.w	r3, [r9]
 8008126:	fa1f fb87 	uxth.w	fp, r7
 800812a:	b29b      	uxth	r3, r3
 800812c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008130:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008134:	f8d9 7000 	ldr.w	r7, [r9]
 8008138:	4463      	add	r3, ip
 800813a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800813e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008142:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008146:	b29b      	uxth	r3, r3
 8008148:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800814c:	4572      	cmp	r2, lr
 800814e:	f849 3b04 	str.w	r3, [r9], #4
 8008152:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008156:	d8e2      	bhi.n	800811e <__multiply+0xb2>
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	f845 c003 	str.w	ip, [r5, r3]
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008164:	3104      	adds	r1, #4
 8008166:	f1b9 0f00 	cmp.w	r9, #0
 800816a:	d021      	beq.n	80081b0 <__multiply+0x144>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	f104 0c14 	add.w	ip, r4, #20
 8008172:	46ae      	mov	lr, r5
 8008174:	f04f 0a00 	mov.w	sl, #0
 8008178:	f8bc b000 	ldrh.w	fp, [ip]
 800817c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008180:	fb09 770b 	mla	r7, r9, fp, r7
 8008184:	4457      	add	r7, sl
 8008186:	b29b      	uxth	r3, r3
 8008188:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800818c:	f84e 3b04 	str.w	r3, [lr], #4
 8008190:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008194:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008198:	f8be 3000 	ldrh.w	r3, [lr]
 800819c:	fb09 330a 	mla	r3, r9, sl, r3
 80081a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80081a4:	4562      	cmp	r2, ip
 80081a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081aa:	d8e5      	bhi.n	8008178 <__multiply+0x10c>
 80081ac:	9f01      	ldr	r7, [sp, #4]
 80081ae:	51eb      	str	r3, [r5, r7]
 80081b0:	3504      	adds	r5, #4
 80081b2:	e799      	b.n	80080e8 <__multiply+0x7c>
 80081b4:	3e01      	subs	r6, #1
 80081b6:	e79b      	b.n	80080f0 <__multiply+0x84>
 80081b8:	08008e64 	.word	0x08008e64
 80081bc:	08008e75 	.word	0x08008e75

080081c0 <__pow5mult>:
 80081c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c4:	4615      	mov	r5, r2
 80081c6:	f012 0203 	ands.w	r2, r2, #3
 80081ca:	4607      	mov	r7, r0
 80081cc:	460e      	mov	r6, r1
 80081ce:	d007      	beq.n	80081e0 <__pow5mult+0x20>
 80081d0:	4c25      	ldr	r4, [pc, #148]	@ (8008268 <__pow5mult+0xa8>)
 80081d2:	3a01      	subs	r2, #1
 80081d4:	2300      	movs	r3, #0
 80081d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081da:	f7ff fe9f 	bl	8007f1c <__multadd>
 80081de:	4606      	mov	r6, r0
 80081e0:	10ad      	asrs	r5, r5, #2
 80081e2:	d03d      	beq.n	8008260 <__pow5mult+0xa0>
 80081e4:	69fc      	ldr	r4, [r7, #28]
 80081e6:	b97c      	cbnz	r4, 8008208 <__pow5mult+0x48>
 80081e8:	2010      	movs	r0, #16
 80081ea:	f7ff fd7f 	bl	8007cec <malloc>
 80081ee:	4602      	mov	r2, r0
 80081f0:	61f8      	str	r0, [r7, #28]
 80081f2:	b928      	cbnz	r0, 8008200 <__pow5mult+0x40>
 80081f4:	4b1d      	ldr	r3, [pc, #116]	@ (800826c <__pow5mult+0xac>)
 80081f6:	481e      	ldr	r0, [pc, #120]	@ (8008270 <__pow5mult+0xb0>)
 80081f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081fc:	f000 fc4e 	bl	8008a9c <__assert_func>
 8008200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008204:	6004      	str	r4, [r0, #0]
 8008206:	60c4      	str	r4, [r0, #12]
 8008208:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800820c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008210:	b94c      	cbnz	r4, 8008226 <__pow5mult+0x66>
 8008212:	f240 2171 	movw	r1, #625	@ 0x271
 8008216:	4638      	mov	r0, r7
 8008218:	f7ff ff12 	bl	8008040 <__i2b>
 800821c:	2300      	movs	r3, #0
 800821e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008222:	4604      	mov	r4, r0
 8008224:	6003      	str	r3, [r0, #0]
 8008226:	f04f 0900 	mov.w	r9, #0
 800822a:	07eb      	lsls	r3, r5, #31
 800822c:	d50a      	bpl.n	8008244 <__pow5mult+0x84>
 800822e:	4631      	mov	r1, r6
 8008230:	4622      	mov	r2, r4
 8008232:	4638      	mov	r0, r7
 8008234:	f7ff ff1a 	bl	800806c <__multiply>
 8008238:	4631      	mov	r1, r6
 800823a:	4680      	mov	r8, r0
 800823c:	4638      	mov	r0, r7
 800823e:	f7ff fe4b 	bl	8007ed8 <_Bfree>
 8008242:	4646      	mov	r6, r8
 8008244:	106d      	asrs	r5, r5, #1
 8008246:	d00b      	beq.n	8008260 <__pow5mult+0xa0>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	b938      	cbnz	r0, 800825c <__pow5mult+0x9c>
 800824c:	4622      	mov	r2, r4
 800824e:	4621      	mov	r1, r4
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ff0b 	bl	800806c <__multiply>
 8008256:	6020      	str	r0, [r4, #0]
 8008258:	f8c0 9000 	str.w	r9, [r0]
 800825c:	4604      	mov	r4, r0
 800825e:	e7e4      	b.n	800822a <__pow5mult+0x6a>
 8008260:	4630      	mov	r0, r6
 8008262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008266:	bf00      	nop
 8008268:	08008ed0 	.word	0x08008ed0
 800826c:	08008df5 	.word	0x08008df5
 8008270:	08008e75 	.word	0x08008e75

08008274 <__lshift>:
 8008274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	460c      	mov	r4, r1
 800827a:	6849      	ldr	r1, [r1, #4]
 800827c:	6923      	ldr	r3, [r4, #16]
 800827e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	4607      	mov	r7, r0
 8008286:	4691      	mov	r9, r2
 8008288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800828c:	f108 0601 	add.w	r6, r8, #1
 8008290:	42b3      	cmp	r3, r6
 8008292:	db0b      	blt.n	80082ac <__lshift+0x38>
 8008294:	4638      	mov	r0, r7
 8008296:	f7ff fddf 	bl	8007e58 <_Balloc>
 800829a:	4605      	mov	r5, r0
 800829c:	b948      	cbnz	r0, 80082b2 <__lshift+0x3e>
 800829e:	4602      	mov	r2, r0
 80082a0:	4b28      	ldr	r3, [pc, #160]	@ (8008344 <__lshift+0xd0>)
 80082a2:	4829      	ldr	r0, [pc, #164]	@ (8008348 <__lshift+0xd4>)
 80082a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082a8:	f000 fbf8 	bl	8008a9c <__assert_func>
 80082ac:	3101      	adds	r1, #1
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	e7ee      	b.n	8008290 <__lshift+0x1c>
 80082b2:	2300      	movs	r3, #0
 80082b4:	f100 0114 	add.w	r1, r0, #20
 80082b8:	f100 0210 	add.w	r2, r0, #16
 80082bc:	4618      	mov	r0, r3
 80082be:	4553      	cmp	r3, sl
 80082c0:	db33      	blt.n	800832a <__lshift+0xb6>
 80082c2:	6920      	ldr	r0, [r4, #16]
 80082c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082c8:	f104 0314 	add.w	r3, r4, #20
 80082cc:	f019 091f 	ands.w	r9, r9, #31
 80082d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082d8:	d02b      	beq.n	8008332 <__lshift+0xbe>
 80082da:	f1c9 0e20 	rsb	lr, r9, #32
 80082de:	468a      	mov	sl, r1
 80082e0:	2200      	movs	r2, #0
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	fa00 f009 	lsl.w	r0, r0, r9
 80082e8:	4310      	orrs	r0, r2
 80082ea:	f84a 0b04 	str.w	r0, [sl], #4
 80082ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f2:	459c      	cmp	ip, r3
 80082f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80082f8:	d8f3      	bhi.n	80082e2 <__lshift+0x6e>
 80082fa:	ebac 0304 	sub.w	r3, ip, r4
 80082fe:	3b15      	subs	r3, #21
 8008300:	f023 0303 	bic.w	r3, r3, #3
 8008304:	3304      	adds	r3, #4
 8008306:	f104 0015 	add.w	r0, r4, #21
 800830a:	4584      	cmp	ip, r0
 800830c:	bf38      	it	cc
 800830e:	2304      	movcc	r3, #4
 8008310:	50ca      	str	r2, [r1, r3]
 8008312:	b10a      	cbz	r2, 8008318 <__lshift+0xa4>
 8008314:	f108 0602 	add.w	r6, r8, #2
 8008318:	3e01      	subs	r6, #1
 800831a:	4638      	mov	r0, r7
 800831c:	612e      	str	r6, [r5, #16]
 800831e:	4621      	mov	r1, r4
 8008320:	f7ff fdda 	bl	8007ed8 <_Bfree>
 8008324:	4628      	mov	r0, r5
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	f842 0f04 	str.w	r0, [r2, #4]!
 800832e:	3301      	adds	r3, #1
 8008330:	e7c5      	b.n	80082be <__lshift+0x4a>
 8008332:	3904      	subs	r1, #4
 8008334:	f853 2b04 	ldr.w	r2, [r3], #4
 8008338:	f841 2f04 	str.w	r2, [r1, #4]!
 800833c:	459c      	cmp	ip, r3
 800833e:	d8f9      	bhi.n	8008334 <__lshift+0xc0>
 8008340:	e7ea      	b.n	8008318 <__lshift+0xa4>
 8008342:	bf00      	nop
 8008344:	08008e64 	.word	0x08008e64
 8008348:	08008e75 	.word	0x08008e75

0800834c <__mcmp>:
 800834c:	690a      	ldr	r2, [r1, #16]
 800834e:	4603      	mov	r3, r0
 8008350:	6900      	ldr	r0, [r0, #16]
 8008352:	1a80      	subs	r0, r0, r2
 8008354:	b530      	push	{r4, r5, lr}
 8008356:	d10e      	bne.n	8008376 <__mcmp+0x2a>
 8008358:	3314      	adds	r3, #20
 800835a:	3114      	adds	r1, #20
 800835c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008360:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008364:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008368:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800836c:	4295      	cmp	r5, r2
 800836e:	d003      	beq.n	8008378 <__mcmp+0x2c>
 8008370:	d205      	bcs.n	800837e <__mcmp+0x32>
 8008372:	f04f 30ff 	mov.w	r0, #4294967295
 8008376:	bd30      	pop	{r4, r5, pc}
 8008378:	42a3      	cmp	r3, r4
 800837a:	d3f3      	bcc.n	8008364 <__mcmp+0x18>
 800837c:	e7fb      	b.n	8008376 <__mcmp+0x2a>
 800837e:	2001      	movs	r0, #1
 8008380:	e7f9      	b.n	8008376 <__mcmp+0x2a>
	...

08008384 <__mdiff>:
 8008384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	4689      	mov	r9, r1
 800838a:	4606      	mov	r6, r0
 800838c:	4611      	mov	r1, r2
 800838e:	4648      	mov	r0, r9
 8008390:	4614      	mov	r4, r2
 8008392:	f7ff ffdb 	bl	800834c <__mcmp>
 8008396:	1e05      	subs	r5, r0, #0
 8008398:	d112      	bne.n	80083c0 <__mdiff+0x3c>
 800839a:	4629      	mov	r1, r5
 800839c:	4630      	mov	r0, r6
 800839e:	f7ff fd5b 	bl	8007e58 <_Balloc>
 80083a2:	4602      	mov	r2, r0
 80083a4:	b928      	cbnz	r0, 80083b2 <__mdiff+0x2e>
 80083a6:	4b3f      	ldr	r3, [pc, #252]	@ (80084a4 <__mdiff+0x120>)
 80083a8:	f240 2137 	movw	r1, #567	@ 0x237
 80083ac:	483e      	ldr	r0, [pc, #248]	@ (80084a8 <__mdiff+0x124>)
 80083ae:	f000 fb75 	bl	8008a9c <__assert_func>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083b8:	4610      	mov	r0, r2
 80083ba:	b003      	add	sp, #12
 80083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	bfbc      	itt	lt
 80083c2:	464b      	movlt	r3, r9
 80083c4:	46a1      	movlt	r9, r4
 80083c6:	4630      	mov	r0, r6
 80083c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083cc:	bfba      	itte	lt
 80083ce:	461c      	movlt	r4, r3
 80083d0:	2501      	movlt	r5, #1
 80083d2:	2500      	movge	r5, #0
 80083d4:	f7ff fd40 	bl	8007e58 <_Balloc>
 80083d8:	4602      	mov	r2, r0
 80083da:	b918      	cbnz	r0, 80083e4 <__mdiff+0x60>
 80083dc:	4b31      	ldr	r3, [pc, #196]	@ (80084a4 <__mdiff+0x120>)
 80083de:	f240 2145 	movw	r1, #581	@ 0x245
 80083e2:	e7e3      	b.n	80083ac <__mdiff+0x28>
 80083e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083e8:	6926      	ldr	r6, [r4, #16]
 80083ea:	60c5      	str	r5, [r0, #12]
 80083ec:	f109 0310 	add.w	r3, r9, #16
 80083f0:	f109 0514 	add.w	r5, r9, #20
 80083f4:	f104 0e14 	add.w	lr, r4, #20
 80083f8:	f100 0b14 	add.w	fp, r0, #20
 80083fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008400:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	46d9      	mov	r9, fp
 8008408:	f04f 0c00 	mov.w	ip, #0
 800840c:	9b01      	ldr	r3, [sp, #4]
 800840e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008412:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	fa1f f38a 	uxth.w	r3, sl
 800841c:	4619      	mov	r1, r3
 800841e:	b283      	uxth	r3, r0
 8008420:	1acb      	subs	r3, r1, r3
 8008422:	0c00      	lsrs	r0, r0, #16
 8008424:	4463      	add	r3, ip
 8008426:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800842a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800842e:	b29b      	uxth	r3, r3
 8008430:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008434:	4576      	cmp	r6, lr
 8008436:	f849 3b04 	str.w	r3, [r9], #4
 800843a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800843e:	d8e5      	bhi.n	800840c <__mdiff+0x88>
 8008440:	1b33      	subs	r3, r6, r4
 8008442:	3b15      	subs	r3, #21
 8008444:	f023 0303 	bic.w	r3, r3, #3
 8008448:	3415      	adds	r4, #21
 800844a:	3304      	adds	r3, #4
 800844c:	42a6      	cmp	r6, r4
 800844e:	bf38      	it	cc
 8008450:	2304      	movcc	r3, #4
 8008452:	441d      	add	r5, r3
 8008454:	445b      	add	r3, fp
 8008456:	461e      	mov	r6, r3
 8008458:	462c      	mov	r4, r5
 800845a:	4544      	cmp	r4, r8
 800845c:	d30e      	bcc.n	800847c <__mdiff+0xf8>
 800845e:	f108 0103 	add.w	r1, r8, #3
 8008462:	1b49      	subs	r1, r1, r5
 8008464:	f021 0103 	bic.w	r1, r1, #3
 8008468:	3d03      	subs	r5, #3
 800846a:	45a8      	cmp	r8, r5
 800846c:	bf38      	it	cc
 800846e:	2100      	movcc	r1, #0
 8008470:	440b      	add	r3, r1
 8008472:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008476:	b191      	cbz	r1, 800849e <__mdiff+0x11a>
 8008478:	6117      	str	r7, [r2, #16]
 800847a:	e79d      	b.n	80083b8 <__mdiff+0x34>
 800847c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008480:	46e6      	mov	lr, ip
 8008482:	0c08      	lsrs	r0, r1, #16
 8008484:	fa1c fc81 	uxtah	ip, ip, r1
 8008488:	4471      	add	r1, lr
 800848a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800848e:	b289      	uxth	r1, r1
 8008490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008494:	f846 1b04 	str.w	r1, [r6], #4
 8008498:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800849c:	e7dd      	b.n	800845a <__mdiff+0xd6>
 800849e:	3f01      	subs	r7, #1
 80084a0:	e7e7      	b.n	8008472 <__mdiff+0xee>
 80084a2:	bf00      	nop
 80084a4:	08008e64 	.word	0x08008e64
 80084a8:	08008e75 	.word	0x08008e75

080084ac <__d2b>:
 80084ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084b0:	460f      	mov	r7, r1
 80084b2:	2101      	movs	r1, #1
 80084b4:	ec59 8b10 	vmov	r8, r9, d0
 80084b8:	4616      	mov	r6, r2
 80084ba:	f7ff fccd 	bl	8007e58 <_Balloc>
 80084be:	4604      	mov	r4, r0
 80084c0:	b930      	cbnz	r0, 80084d0 <__d2b+0x24>
 80084c2:	4602      	mov	r2, r0
 80084c4:	4b23      	ldr	r3, [pc, #140]	@ (8008554 <__d2b+0xa8>)
 80084c6:	4824      	ldr	r0, [pc, #144]	@ (8008558 <__d2b+0xac>)
 80084c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80084cc:	f000 fae6 	bl	8008a9c <__assert_func>
 80084d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084d8:	b10d      	cbz	r5, 80084de <__d2b+0x32>
 80084da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	f1b8 0300 	subs.w	r3, r8, #0
 80084e4:	d023      	beq.n	800852e <__d2b+0x82>
 80084e6:	4668      	mov	r0, sp
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	f7ff fd7c 	bl	8007fe6 <__lo0bits>
 80084ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084f2:	b1d0      	cbz	r0, 800852a <__d2b+0x7e>
 80084f4:	f1c0 0320 	rsb	r3, r0, #32
 80084f8:	fa02 f303 	lsl.w	r3, r2, r3
 80084fc:	430b      	orrs	r3, r1
 80084fe:	40c2      	lsrs	r2, r0
 8008500:	6163      	str	r3, [r4, #20]
 8008502:	9201      	str	r2, [sp, #4]
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	61a3      	str	r3, [r4, #24]
 8008508:	2b00      	cmp	r3, #0
 800850a:	bf0c      	ite	eq
 800850c:	2201      	moveq	r2, #1
 800850e:	2202      	movne	r2, #2
 8008510:	6122      	str	r2, [r4, #16]
 8008512:	b1a5      	cbz	r5, 800853e <__d2b+0x92>
 8008514:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008518:	4405      	add	r5, r0
 800851a:	603d      	str	r5, [r7, #0]
 800851c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008520:	6030      	str	r0, [r6, #0]
 8008522:	4620      	mov	r0, r4
 8008524:	b003      	add	sp, #12
 8008526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800852a:	6161      	str	r1, [r4, #20]
 800852c:	e7ea      	b.n	8008504 <__d2b+0x58>
 800852e:	a801      	add	r0, sp, #4
 8008530:	f7ff fd59 	bl	8007fe6 <__lo0bits>
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	6163      	str	r3, [r4, #20]
 8008538:	3020      	adds	r0, #32
 800853a:	2201      	movs	r2, #1
 800853c:	e7e8      	b.n	8008510 <__d2b+0x64>
 800853e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008542:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008546:	6038      	str	r0, [r7, #0]
 8008548:	6918      	ldr	r0, [r3, #16]
 800854a:	f7ff fd2d 	bl	8007fa8 <__hi0bits>
 800854e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008552:	e7e5      	b.n	8008520 <__d2b+0x74>
 8008554:	08008e64 	.word	0x08008e64
 8008558:	08008e75 	.word	0x08008e75

0800855c <__sfputc_r>:
 800855c:	6893      	ldr	r3, [r2, #8]
 800855e:	3b01      	subs	r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	b410      	push	{r4}
 8008564:	6093      	str	r3, [r2, #8]
 8008566:	da08      	bge.n	800857a <__sfputc_r+0x1e>
 8008568:	6994      	ldr	r4, [r2, #24]
 800856a:	42a3      	cmp	r3, r4
 800856c:	db01      	blt.n	8008572 <__sfputc_r+0x16>
 800856e:	290a      	cmp	r1, #10
 8008570:	d103      	bne.n	800857a <__sfputc_r+0x1e>
 8008572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008576:	f000 b9df 	b.w	8008938 <__swbuf_r>
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	1c58      	adds	r0, r3, #1
 800857e:	6010      	str	r0, [r2, #0]
 8008580:	7019      	strb	r1, [r3, #0]
 8008582:	4608      	mov	r0, r1
 8008584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008588:	4770      	bx	lr

0800858a <__sfputs_r>:
 800858a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858c:	4606      	mov	r6, r0
 800858e:	460f      	mov	r7, r1
 8008590:	4614      	mov	r4, r2
 8008592:	18d5      	adds	r5, r2, r3
 8008594:	42ac      	cmp	r4, r5
 8008596:	d101      	bne.n	800859c <__sfputs_r+0x12>
 8008598:	2000      	movs	r0, #0
 800859a:	e007      	b.n	80085ac <__sfputs_r+0x22>
 800859c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a0:	463a      	mov	r2, r7
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ffda 	bl	800855c <__sfputc_r>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d1f3      	bne.n	8008594 <__sfputs_r+0xa>
 80085ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085b0 <_vfiprintf_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	460d      	mov	r5, r1
 80085b6:	b09d      	sub	sp, #116	@ 0x74
 80085b8:	4614      	mov	r4, r2
 80085ba:	4698      	mov	r8, r3
 80085bc:	4606      	mov	r6, r0
 80085be:	b118      	cbz	r0, 80085c8 <_vfiprintf_r+0x18>
 80085c0:	6a03      	ldr	r3, [r0, #32]
 80085c2:	b90b      	cbnz	r3, 80085c8 <_vfiprintf_r+0x18>
 80085c4:	f7fe fbf0 	bl	8006da8 <__sinit>
 80085c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085ca:	07d9      	lsls	r1, r3, #31
 80085cc:	d405      	bmi.n	80085da <_vfiprintf_r+0x2a>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	059a      	lsls	r2, r3, #22
 80085d2:	d402      	bmi.n	80085da <_vfiprintf_r+0x2a>
 80085d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085d6:	f7fe fcf0 	bl	8006fba <__retarget_lock_acquire_recursive>
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	071b      	lsls	r3, r3, #28
 80085de:	d501      	bpl.n	80085e4 <_vfiprintf_r+0x34>
 80085e0:	692b      	ldr	r3, [r5, #16]
 80085e2:	b99b      	cbnz	r3, 800860c <_vfiprintf_r+0x5c>
 80085e4:	4629      	mov	r1, r5
 80085e6:	4630      	mov	r0, r6
 80085e8:	f000 f9e4 	bl	80089b4 <__swsetup_r>
 80085ec:	b170      	cbz	r0, 800860c <_vfiprintf_r+0x5c>
 80085ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085f0:	07dc      	lsls	r4, r3, #31
 80085f2:	d504      	bpl.n	80085fe <_vfiprintf_r+0x4e>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	b01d      	add	sp, #116	@ 0x74
 80085fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	0598      	lsls	r0, r3, #22
 8008602:	d4f7      	bmi.n	80085f4 <_vfiprintf_r+0x44>
 8008604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008606:	f7fe fcd9 	bl	8006fbc <__retarget_lock_release_recursive>
 800860a:	e7f3      	b.n	80085f4 <_vfiprintf_r+0x44>
 800860c:	2300      	movs	r3, #0
 800860e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008610:	2320      	movs	r3, #32
 8008612:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008616:	f8cd 800c 	str.w	r8, [sp, #12]
 800861a:	2330      	movs	r3, #48	@ 0x30
 800861c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087cc <_vfiprintf_r+0x21c>
 8008620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008624:	f04f 0901 	mov.w	r9, #1
 8008628:	4623      	mov	r3, r4
 800862a:	469a      	mov	sl, r3
 800862c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008630:	b10a      	cbz	r2, 8008636 <_vfiprintf_r+0x86>
 8008632:	2a25      	cmp	r2, #37	@ 0x25
 8008634:	d1f9      	bne.n	800862a <_vfiprintf_r+0x7a>
 8008636:	ebba 0b04 	subs.w	fp, sl, r4
 800863a:	d00b      	beq.n	8008654 <_vfiprintf_r+0xa4>
 800863c:	465b      	mov	r3, fp
 800863e:	4622      	mov	r2, r4
 8008640:	4629      	mov	r1, r5
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff ffa1 	bl	800858a <__sfputs_r>
 8008648:	3001      	adds	r0, #1
 800864a:	f000 80a7 	beq.w	800879c <_vfiprintf_r+0x1ec>
 800864e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008650:	445a      	add	r2, fp
 8008652:	9209      	str	r2, [sp, #36]	@ 0x24
 8008654:	f89a 3000 	ldrb.w	r3, [sl]
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 809f 	beq.w	800879c <_vfiprintf_r+0x1ec>
 800865e:	2300      	movs	r3, #0
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008668:	f10a 0a01 	add.w	sl, sl, #1
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008674:	931a      	str	r3, [sp, #104]	@ 0x68
 8008676:	4654      	mov	r4, sl
 8008678:	2205      	movs	r2, #5
 800867a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867e:	4853      	ldr	r0, [pc, #332]	@ (80087cc <_vfiprintf_r+0x21c>)
 8008680:	f7f7 fda6 	bl	80001d0 <memchr>
 8008684:	9a04      	ldr	r2, [sp, #16]
 8008686:	b9d8      	cbnz	r0, 80086c0 <_vfiprintf_r+0x110>
 8008688:	06d1      	lsls	r1, r2, #27
 800868a:	bf44      	itt	mi
 800868c:	2320      	movmi	r3, #32
 800868e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008692:	0713      	lsls	r3, r2, #28
 8008694:	bf44      	itt	mi
 8008696:	232b      	movmi	r3, #43	@ 0x2b
 8008698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800869c:	f89a 3000 	ldrb.w	r3, [sl]
 80086a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a2:	d015      	beq.n	80086d0 <_vfiprintf_r+0x120>
 80086a4:	9a07      	ldr	r2, [sp, #28]
 80086a6:	4654      	mov	r4, sl
 80086a8:	2000      	movs	r0, #0
 80086aa:	f04f 0c0a 	mov.w	ip, #10
 80086ae:	4621      	mov	r1, r4
 80086b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086b4:	3b30      	subs	r3, #48	@ 0x30
 80086b6:	2b09      	cmp	r3, #9
 80086b8:	d94b      	bls.n	8008752 <_vfiprintf_r+0x1a2>
 80086ba:	b1b0      	cbz	r0, 80086ea <_vfiprintf_r+0x13a>
 80086bc:	9207      	str	r2, [sp, #28]
 80086be:	e014      	b.n	80086ea <_vfiprintf_r+0x13a>
 80086c0:	eba0 0308 	sub.w	r3, r0, r8
 80086c4:	fa09 f303 	lsl.w	r3, r9, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	46a2      	mov	sl, r4
 80086ce:	e7d2      	b.n	8008676 <_vfiprintf_r+0xc6>
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	1d19      	adds	r1, r3, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	9103      	str	r1, [sp, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bfbb      	ittet	lt
 80086dc:	425b      	neglt	r3, r3
 80086de:	f042 0202 	orrlt.w	r2, r2, #2
 80086e2:	9307      	strge	r3, [sp, #28]
 80086e4:	9307      	strlt	r3, [sp, #28]
 80086e6:	bfb8      	it	lt
 80086e8:	9204      	strlt	r2, [sp, #16]
 80086ea:	7823      	ldrb	r3, [r4, #0]
 80086ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80086ee:	d10a      	bne.n	8008706 <_vfiprintf_r+0x156>
 80086f0:	7863      	ldrb	r3, [r4, #1]
 80086f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086f4:	d132      	bne.n	800875c <_vfiprintf_r+0x1ac>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	1d1a      	adds	r2, r3, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	9203      	str	r2, [sp, #12]
 80086fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008702:	3402      	adds	r4, #2
 8008704:	9305      	str	r3, [sp, #20]
 8008706:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087dc <_vfiprintf_r+0x22c>
 800870a:	7821      	ldrb	r1, [r4, #0]
 800870c:	2203      	movs	r2, #3
 800870e:	4650      	mov	r0, sl
 8008710:	f7f7 fd5e 	bl	80001d0 <memchr>
 8008714:	b138      	cbz	r0, 8008726 <_vfiprintf_r+0x176>
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	eba0 000a 	sub.w	r0, r0, sl
 800871c:	2240      	movs	r2, #64	@ 0x40
 800871e:	4082      	lsls	r2, r0
 8008720:	4313      	orrs	r3, r2
 8008722:	3401      	adds	r4, #1
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872a:	4829      	ldr	r0, [pc, #164]	@ (80087d0 <_vfiprintf_r+0x220>)
 800872c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008730:	2206      	movs	r2, #6
 8008732:	f7f7 fd4d 	bl	80001d0 <memchr>
 8008736:	2800      	cmp	r0, #0
 8008738:	d03f      	beq.n	80087ba <_vfiprintf_r+0x20a>
 800873a:	4b26      	ldr	r3, [pc, #152]	@ (80087d4 <_vfiprintf_r+0x224>)
 800873c:	bb1b      	cbnz	r3, 8008786 <_vfiprintf_r+0x1d6>
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	3307      	adds	r3, #7
 8008742:	f023 0307 	bic.w	r3, r3, #7
 8008746:	3308      	adds	r3, #8
 8008748:	9303      	str	r3, [sp, #12]
 800874a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800874c:	443b      	add	r3, r7
 800874e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008750:	e76a      	b.n	8008628 <_vfiprintf_r+0x78>
 8008752:	fb0c 3202 	mla	r2, ip, r2, r3
 8008756:	460c      	mov	r4, r1
 8008758:	2001      	movs	r0, #1
 800875a:	e7a8      	b.n	80086ae <_vfiprintf_r+0xfe>
 800875c:	2300      	movs	r3, #0
 800875e:	3401      	adds	r4, #1
 8008760:	9305      	str	r3, [sp, #20]
 8008762:	4619      	mov	r1, r3
 8008764:	f04f 0c0a 	mov.w	ip, #10
 8008768:	4620      	mov	r0, r4
 800876a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800876e:	3a30      	subs	r2, #48	@ 0x30
 8008770:	2a09      	cmp	r2, #9
 8008772:	d903      	bls.n	800877c <_vfiprintf_r+0x1cc>
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0c6      	beq.n	8008706 <_vfiprintf_r+0x156>
 8008778:	9105      	str	r1, [sp, #20]
 800877a:	e7c4      	b.n	8008706 <_vfiprintf_r+0x156>
 800877c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008780:	4604      	mov	r4, r0
 8008782:	2301      	movs	r3, #1
 8008784:	e7f0      	b.n	8008768 <_vfiprintf_r+0x1b8>
 8008786:	ab03      	add	r3, sp, #12
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	462a      	mov	r2, r5
 800878c:	4b12      	ldr	r3, [pc, #72]	@ (80087d8 <_vfiprintf_r+0x228>)
 800878e:	a904      	add	r1, sp, #16
 8008790:	4630      	mov	r0, r6
 8008792:	f7fd fec5 	bl	8006520 <_printf_float>
 8008796:	4607      	mov	r7, r0
 8008798:	1c78      	adds	r0, r7, #1
 800879a:	d1d6      	bne.n	800874a <_vfiprintf_r+0x19a>
 800879c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800879e:	07d9      	lsls	r1, r3, #31
 80087a0:	d405      	bmi.n	80087ae <_vfiprintf_r+0x1fe>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	059a      	lsls	r2, r3, #22
 80087a6:	d402      	bmi.n	80087ae <_vfiprintf_r+0x1fe>
 80087a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087aa:	f7fe fc07 	bl	8006fbc <__retarget_lock_release_recursive>
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	065b      	lsls	r3, r3, #25
 80087b2:	f53f af1f 	bmi.w	80085f4 <_vfiprintf_r+0x44>
 80087b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087b8:	e71e      	b.n	80085f8 <_vfiprintf_r+0x48>
 80087ba:	ab03      	add	r3, sp, #12
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	462a      	mov	r2, r5
 80087c0:	4b05      	ldr	r3, [pc, #20]	@ (80087d8 <_vfiprintf_r+0x228>)
 80087c2:	a904      	add	r1, sp, #16
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7fe f943 	bl	8006a50 <_printf_i>
 80087ca:	e7e4      	b.n	8008796 <_vfiprintf_r+0x1e6>
 80087cc:	08008fd0 	.word	0x08008fd0
 80087d0:	08008fda 	.word	0x08008fda
 80087d4:	08006521 	.word	0x08006521
 80087d8:	0800858b 	.word	0x0800858b
 80087dc:	08008fd6 	.word	0x08008fd6

080087e0 <__sflush_r>:
 80087e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e8:	0716      	lsls	r6, r2, #28
 80087ea:	4605      	mov	r5, r0
 80087ec:	460c      	mov	r4, r1
 80087ee:	d454      	bmi.n	800889a <__sflush_r+0xba>
 80087f0:	684b      	ldr	r3, [r1, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dc02      	bgt.n	80087fc <__sflush_r+0x1c>
 80087f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dd48      	ble.n	800888e <__sflush_r+0xae>
 80087fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087fe:	2e00      	cmp	r6, #0
 8008800:	d045      	beq.n	800888e <__sflush_r+0xae>
 8008802:	2300      	movs	r3, #0
 8008804:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008808:	682f      	ldr	r7, [r5, #0]
 800880a:	6a21      	ldr	r1, [r4, #32]
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	d030      	beq.n	8008872 <__sflush_r+0x92>
 8008810:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	0759      	lsls	r1, r3, #29
 8008816:	d505      	bpl.n	8008824 <__sflush_r+0x44>
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800881e:	b10b      	cbz	r3, 8008824 <__sflush_r+0x44>
 8008820:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	2300      	movs	r3, #0
 8008826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008828:	6a21      	ldr	r1, [r4, #32]
 800882a:	4628      	mov	r0, r5
 800882c:	47b0      	blx	r6
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	d106      	bne.n	8008842 <__sflush_r+0x62>
 8008834:	6829      	ldr	r1, [r5, #0]
 8008836:	291d      	cmp	r1, #29
 8008838:	d82b      	bhi.n	8008892 <__sflush_r+0xb2>
 800883a:	4a2a      	ldr	r2, [pc, #168]	@ (80088e4 <__sflush_r+0x104>)
 800883c:	410a      	asrs	r2, r1
 800883e:	07d6      	lsls	r6, r2, #31
 8008840:	d427      	bmi.n	8008892 <__sflush_r+0xb2>
 8008842:	2200      	movs	r2, #0
 8008844:	6062      	str	r2, [r4, #4]
 8008846:	04d9      	lsls	r1, r3, #19
 8008848:	6922      	ldr	r2, [r4, #16]
 800884a:	6022      	str	r2, [r4, #0]
 800884c:	d504      	bpl.n	8008858 <__sflush_r+0x78>
 800884e:	1c42      	adds	r2, r0, #1
 8008850:	d101      	bne.n	8008856 <__sflush_r+0x76>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	b903      	cbnz	r3, 8008858 <__sflush_r+0x78>
 8008856:	6560      	str	r0, [r4, #84]	@ 0x54
 8008858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800885a:	602f      	str	r7, [r5, #0]
 800885c:	b1b9      	cbz	r1, 800888e <__sflush_r+0xae>
 800885e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008862:	4299      	cmp	r1, r3
 8008864:	d002      	beq.n	800886c <__sflush_r+0x8c>
 8008866:	4628      	mov	r0, r5
 8008868:	f7ff f9f6 	bl	8007c58 <_free_r>
 800886c:	2300      	movs	r3, #0
 800886e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008870:	e00d      	b.n	800888e <__sflush_r+0xae>
 8008872:	2301      	movs	r3, #1
 8008874:	4628      	mov	r0, r5
 8008876:	47b0      	blx	r6
 8008878:	4602      	mov	r2, r0
 800887a:	1c50      	adds	r0, r2, #1
 800887c:	d1c9      	bne.n	8008812 <__sflush_r+0x32>
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0c6      	beq.n	8008812 <__sflush_r+0x32>
 8008884:	2b1d      	cmp	r3, #29
 8008886:	d001      	beq.n	800888c <__sflush_r+0xac>
 8008888:	2b16      	cmp	r3, #22
 800888a:	d11e      	bne.n	80088ca <__sflush_r+0xea>
 800888c:	602f      	str	r7, [r5, #0]
 800888e:	2000      	movs	r0, #0
 8008890:	e022      	b.n	80088d8 <__sflush_r+0xf8>
 8008892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008896:	b21b      	sxth	r3, r3
 8008898:	e01b      	b.n	80088d2 <__sflush_r+0xf2>
 800889a:	690f      	ldr	r7, [r1, #16]
 800889c:	2f00      	cmp	r7, #0
 800889e:	d0f6      	beq.n	800888e <__sflush_r+0xae>
 80088a0:	0793      	lsls	r3, r2, #30
 80088a2:	680e      	ldr	r6, [r1, #0]
 80088a4:	bf08      	it	eq
 80088a6:	694b      	ldreq	r3, [r1, #20]
 80088a8:	600f      	str	r7, [r1, #0]
 80088aa:	bf18      	it	ne
 80088ac:	2300      	movne	r3, #0
 80088ae:	eba6 0807 	sub.w	r8, r6, r7
 80088b2:	608b      	str	r3, [r1, #8]
 80088b4:	f1b8 0f00 	cmp.w	r8, #0
 80088b8:	dde9      	ble.n	800888e <__sflush_r+0xae>
 80088ba:	6a21      	ldr	r1, [r4, #32]
 80088bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088be:	4643      	mov	r3, r8
 80088c0:	463a      	mov	r2, r7
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b0      	blx	r6
 80088c6:	2800      	cmp	r0, #0
 80088c8:	dc08      	bgt.n	80088dc <__sflush_r+0xfc>
 80088ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088dc:	4407      	add	r7, r0
 80088de:	eba8 0800 	sub.w	r8, r8, r0
 80088e2:	e7e7      	b.n	80088b4 <__sflush_r+0xd4>
 80088e4:	dfbffffe 	.word	0xdfbffffe

080088e8 <_fflush_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	690b      	ldr	r3, [r1, #16]
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	b913      	cbnz	r3, 80088f8 <_fflush_r+0x10>
 80088f2:	2500      	movs	r5, #0
 80088f4:	4628      	mov	r0, r5
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	b118      	cbz	r0, 8008902 <_fflush_r+0x1a>
 80088fa:	6a03      	ldr	r3, [r0, #32]
 80088fc:	b90b      	cbnz	r3, 8008902 <_fflush_r+0x1a>
 80088fe:	f7fe fa53 	bl	8006da8 <__sinit>
 8008902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f3      	beq.n	80088f2 <_fflush_r+0xa>
 800890a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800890c:	07d0      	lsls	r0, r2, #31
 800890e:	d404      	bmi.n	800891a <_fflush_r+0x32>
 8008910:	0599      	lsls	r1, r3, #22
 8008912:	d402      	bmi.n	800891a <_fflush_r+0x32>
 8008914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008916:	f7fe fb50 	bl	8006fba <__retarget_lock_acquire_recursive>
 800891a:	4628      	mov	r0, r5
 800891c:	4621      	mov	r1, r4
 800891e:	f7ff ff5f 	bl	80087e0 <__sflush_r>
 8008922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008924:	07da      	lsls	r2, r3, #31
 8008926:	4605      	mov	r5, r0
 8008928:	d4e4      	bmi.n	80088f4 <_fflush_r+0xc>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	059b      	lsls	r3, r3, #22
 800892e:	d4e1      	bmi.n	80088f4 <_fflush_r+0xc>
 8008930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008932:	f7fe fb43 	bl	8006fbc <__retarget_lock_release_recursive>
 8008936:	e7dd      	b.n	80088f4 <_fflush_r+0xc>

08008938 <__swbuf_r>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	460e      	mov	r6, r1
 800893c:	4614      	mov	r4, r2
 800893e:	4605      	mov	r5, r0
 8008940:	b118      	cbz	r0, 800894a <__swbuf_r+0x12>
 8008942:	6a03      	ldr	r3, [r0, #32]
 8008944:	b90b      	cbnz	r3, 800894a <__swbuf_r+0x12>
 8008946:	f7fe fa2f 	bl	8006da8 <__sinit>
 800894a:	69a3      	ldr	r3, [r4, #24]
 800894c:	60a3      	str	r3, [r4, #8]
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	071a      	lsls	r2, r3, #28
 8008952:	d501      	bpl.n	8008958 <__swbuf_r+0x20>
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	b943      	cbnz	r3, 800896a <__swbuf_r+0x32>
 8008958:	4621      	mov	r1, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f000 f82a 	bl	80089b4 <__swsetup_r>
 8008960:	b118      	cbz	r0, 800896a <__swbuf_r+0x32>
 8008962:	f04f 37ff 	mov.w	r7, #4294967295
 8008966:	4638      	mov	r0, r7
 8008968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	6922      	ldr	r2, [r4, #16]
 800896e:	1a98      	subs	r0, r3, r2
 8008970:	6963      	ldr	r3, [r4, #20]
 8008972:	b2f6      	uxtb	r6, r6
 8008974:	4283      	cmp	r3, r0
 8008976:	4637      	mov	r7, r6
 8008978:	dc05      	bgt.n	8008986 <__swbuf_r+0x4e>
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f7ff ffb3 	bl	80088e8 <_fflush_r>
 8008982:	2800      	cmp	r0, #0
 8008984:	d1ed      	bne.n	8008962 <__swbuf_r+0x2a>
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	3b01      	subs	r3, #1
 800898a:	60a3      	str	r3, [r4, #8]
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	6022      	str	r2, [r4, #0]
 8008992:	701e      	strb	r6, [r3, #0]
 8008994:	6962      	ldr	r2, [r4, #20]
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	429a      	cmp	r2, r3
 800899a:	d004      	beq.n	80089a6 <__swbuf_r+0x6e>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	07db      	lsls	r3, r3, #31
 80089a0:	d5e1      	bpl.n	8008966 <__swbuf_r+0x2e>
 80089a2:	2e0a      	cmp	r6, #10
 80089a4:	d1df      	bne.n	8008966 <__swbuf_r+0x2e>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f7ff ff9d 	bl	80088e8 <_fflush_r>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0d9      	beq.n	8008966 <__swbuf_r+0x2e>
 80089b2:	e7d6      	b.n	8008962 <__swbuf_r+0x2a>

080089b4 <__swsetup_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4b29      	ldr	r3, [pc, #164]	@ (8008a5c <__swsetup_r+0xa8>)
 80089b8:	4605      	mov	r5, r0
 80089ba:	6818      	ldr	r0, [r3, #0]
 80089bc:	460c      	mov	r4, r1
 80089be:	b118      	cbz	r0, 80089c8 <__swsetup_r+0x14>
 80089c0:	6a03      	ldr	r3, [r0, #32]
 80089c2:	b90b      	cbnz	r3, 80089c8 <__swsetup_r+0x14>
 80089c4:	f7fe f9f0 	bl	8006da8 <__sinit>
 80089c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089cc:	0719      	lsls	r1, r3, #28
 80089ce:	d422      	bmi.n	8008a16 <__swsetup_r+0x62>
 80089d0:	06da      	lsls	r2, r3, #27
 80089d2:	d407      	bmi.n	80089e4 <__swsetup_r+0x30>
 80089d4:	2209      	movs	r2, #9
 80089d6:	602a      	str	r2, [r5, #0]
 80089d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	f04f 30ff 	mov.w	r0, #4294967295
 80089e2:	e033      	b.n	8008a4c <__swsetup_r+0x98>
 80089e4:	0758      	lsls	r0, r3, #29
 80089e6:	d512      	bpl.n	8008a0e <__swsetup_r+0x5a>
 80089e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ea:	b141      	cbz	r1, 80089fe <__swsetup_r+0x4a>
 80089ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089f0:	4299      	cmp	r1, r3
 80089f2:	d002      	beq.n	80089fa <__swsetup_r+0x46>
 80089f4:	4628      	mov	r0, r5
 80089f6:	f7ff f92f 	bl	8007c58 <_free_r>
 80089fa:	2300      	movs	r3, #0
 80089fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a04:	81a3      	strh	r3, [r4, #12]
 8008a06:	2300      	movs	r3, #0
 8008a08:	6063      	str	r3, [r4, #4]
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	f043 0308 	orr.w	r3, r3, #8
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	b94b      	cbnz	r3, 8008a2e <__swsetup_r+0x7a>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a24:	d003      	beq.n	8008a2e <__swsetup_r+0x7a>
 8008a26:	4621      	mov	r1, r4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f000 f8c1 	bl	8008bb0 <__smakebuf_r>
 8008a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a32:	f013 0201 	ands.w	r2, r3, #1
 8008a36:	d00a      	beq.n	8008a4e <__swsetup_r+0x9a>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	60a2      	str	r2, [r4, #8]
 8008a3c:	6962      	ldr	r2, [r4, #20]
 8008a3e:	4252      	negs	r2, r2
 8008a40:	61a2      	str	r2, [r4, #24]
 8008a42:	6922      	ldr	r2, [r4, #16]
 8008a44:	b942      	cbnz	r2, 8008a58 <__swsetup_r+0xa4>
 8008a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a4a:	d1c5      	bne.n	80089d8 <__swsetup_r+0x24>
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
 8008a4e:	0799      	lsls	r1, r3, #30
 8008a50:	bf58      	it	pl
 8008a52:	6962      	ldrpl	r2, [r4, #20]
 8008a54:	60a2      	str	r2, [r4, #8]
 8008a56:	e7f4      	b.n	8008a42 <__swsetup_r+0x8e>
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e7f7      	b.n	8008a4c <__swsetup_r+0x98>
 8008a5c:	20000058 	.word	0x20000058

08008a60 <_sbrk_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d06      	ldr	r5, [pc, #24]	@ (8008a7c <_sbrk_r+0x1c>)
 8008a64:	2300      	movs	r3, #0
 8008a66:	4604      	mov	r4, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	602b      	str	r3, [r5, #0]
 8008a6c:	f7f8 ff30 	bl	80018d0 <_sbrk>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d102      	bne.n	8008a7a <_sbrk_r+0x1a>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	b103      	cbz	r3, 8008a7a <_sbrk_r+0x1a>
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	200005bc 	.word	0x200005bc

08008a80 <memcpy>:
 8008a80:	440a      	add	r2, r1
 8008a82:	4291      	cmp	r1, r2
 8008a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a88:	d100      	bne.n	8008a8c <memcpy+0xc>
 8008a8a:	4770      	bx	lr
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a96:	4291      	cmp	r1, r2
 8008a98:	d1f9      	bne.n	8008a8e <memcpy+0xe>
 8008a9a:	bd10      	pop	{r4, pc}

08008a9c <__assert_func>:
 8008a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a9e:	4614      	mov	r4, r2
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4b09      	ldr	r3, [pc, #36]	@ (8008ac8 <__assert_func+0x2c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	68d8      	ldr	r0, [r3, #12]
 8008aaa:	b954      	cbnz	r4, 8008ac2 <__assert_func+0x26>
 8008aac:	4b07      	ldr	r3, [pc, #28]	@ (8008acc <__assert_func+0x30>)
 8008aae:	461c      	mov	r4, r3
 8008ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ab4:	9100      	str	r1, [sp, #0]
 8008ab6:	462b      	mov	r3, r5
 8008ab8:	4905      	ldr	r1, [pc, #20]	@ (8008ad0 <__assert_func+0x34>)
 8008aba:	f000 f841 	bl	8008b40 <fiprintf>
 8008abe:	f000 f8d5 	bl	8008c6c <abort>
 8008ac2:	4b04      	ldr	r3, [pc, #16]	@ (8008ad4 <__assert_func+0x38>)
 8008ac4:	e7f4      	b.n	8008ab0 <__assert_func+0x14>
 8008ac6:	bf00      	nop
 8008ac8:	20000058 	.word	0x20000058
 8008acc:	08009026 	.word	0x08009026
 8008ad0:	08008ff8 	.word	0x08008ff8
 8008ad4:	08008feb 	.word	0x08008feb

08008ad8 <_calloc_r>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	fba1 5402 	umull	r5, r4, r1, r2
 8008ade:	b93c      	cbnz	r4, 8008af0 <_calloc_r+0x18>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	f7ff f92d 	bl	8007d40 <_malloc_r>
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	b928      	cbnz	r0, 8008af6 <_calloc_r+0x1e>
 8008aea:	2600      	movs	r6, #0
 8008aec:	4630      	mov	r0, r6
 8008aee:	bd70      	pop	{r4, r5, r6, pc}
 8008af0:	220c      	movs	r2, #12
 8008af2:	6002      	str	r2, [r0, #0]
 8008af4:	e7f9      	b.n	8008aea <_calloc_r+0x12>
 8008af6:	462a      	mov	r2, r5
 8008af8:	4621      	mov	r1, r4
 8008afa:	f7fe f9e0 	bl	8006ebe <memset>
 8008afe:	e7f5      	b.n	8008aec <_calloc_r+0x14>

08008b00 <__ascii_mbtowc>:
 8008b00:	b082      	sub	sp, #8
 8008b02:	b901      	cbnz	r1, 8008b06 <__ascii_mbtowc+0x6>
 8008b04:	a901      	add	r1, sp, #4
 8008b06:	b142      	cbz	r2, 8008b1a <__ascii_mbtowc+0x1a>
 8008b08:	b14b      	cbz	r3, 8008b1e <__ascii_mbtowc+0x1e>
 8008b0a:	7813      	ldrb	r3, [r2, #0]
 8008b0c:	600b      	str	r3, [r1, #0]
 8008b0e:	7812      	ldrb	r2, [r2, #0]
 8008b10:	1e10      	subs	r0, r2, #0
 8008b12:	bf18      	it	ne
 8008b14:	2001      	movne	r0, #1
 8008b16:	b002      	add	sp, #8
 8008b18:	4770      	bx	lr
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	e7fb      	b.n	8008b16 <__ascii_mbtowc+0x16>
 8008b1e:	f06f 0001 	mvn.w	r0, #1
 8008b22:	e7f8      	b.n	8008b16 <__ascii_mbtowc+0x16>

08008b24 <__ascii_wctomb>:
 8008b24:	4603      	mov	r3, r0
 8008b26:	4608      	mov	r0, r1
 8008b28:	b141      	cbz	r1, 8008b3c <__ascii_wctomb+0x18>
 8008b2a:	2aff      	cmp	r2, #255	@ 0xff
 8008b2c:	d904      	bls.n	8008b38 <__ascii_wctomb+0x14>
 8008b2e:	228a      	movs	r2, #138	@ 0x8a
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295
 8008b36:	4770      	bx	lr
 8008b38:	700a      	strb	r2, [r1, #0]
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	4770      	bx	lr
	...

08008b40 <fiprintf>:
 8008b40:	b40e      	push	{r1, r2, r3}
 8008b42:	b503      	push	{r0, r1, lr}
 8008b44:	4601      	mov	r1, r0
 8008b46:	ab03      	add	r3, sp, #12
 8008b48:	4805      	ldr	r0, [pc, #20]	@ (8008b60 <fiprintf+0x20>)
 8008b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b4e:	6800      	ldr	r0, [r0, #0]
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	f7ff fd2d 	bl	80085b0 <_vfiprintf_r>
 8008b56:	b002      	add	sp, #8
 8008b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b5c:	b003      	add	sp, #12
 8008b5e:	4770      	bx	lr
 8008b60:	20000058 	.word	0x20000058

08008b64 <__swhatbuf_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	460c      	mov	r4, r1
 8008b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	b096      	sub	sp, #88	@ 0x58
 8008b70:	4615      	mov	r5, r2
 8008b72:	461e      	mov	r6, r3
 8008b74:	da0d      	bge.n	8008b92 <__swhatbuf_r+0x2e>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b7c:	f04f 0100 	mov.w	r1, #0
 8008b80:	bf14      	ite	ne
 8008b82:	2340      	movne	r3, #64	@ 0x40
 8008b84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b88:	2000      	movs	r0, #0
 8008b8a:	6031      	str	r1, [r6, #0]
 8008b8c:	602b      	str	r3, [r5, #0]
 8008b8e:	b016      	add	sp, #88	@ 0x58
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	466a      	mov	r2, sp
 8008b94:	f000 f848 	bl	8008c28 <_fstat_r>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	dbec      	blt.n	8008b76 <__swhatbuf_r+0x12>
 8008b9c:	9901      	ldr	r1, [sp, #4]
 8008b9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ba6:	4259      	negs	r1, r3
 8008ba8:	4159      	adcs	r1, r3
 8008baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bae:	e7eb      	b.n	8008b88 <__swhatbuf_r+0x24>

08008bb0 <__smakebuf_r>:
 8008bb0:	898b      	ldrh	r3, [r1, #12]
 8008bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb4:	079d      	lsls	r5, r3, #30
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460c      	mov	r4, r1
 8008bba:	d507      	bpl.n	8008bcc <__smakebuf_r+0x1c>
 8008bbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	6163      	str	r3, [r4, #20]
 8008bc8:	b003      	add	sp, #12
 8008bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bcc:	ab01      	add	r3, sp, #4
 8008bce:	466a      	mov	r2, sp
 8008bd0:	f7ff ffc8 	bl	8008b64 <__swhatbuf_r>
 8008bd4:	9f00      	ldr	r7, [sp, #0]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	4639      	mov	r1, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff f8b0 	bl	8007d40 <_malloc_r>
 8008be0:	b948      	cbnz	r0, 8008bf6 <__smakebuf_r+0x46>
 8008be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be6:	059a      	lsls	r2, r3, #22
 8008be8:	d4ee      	bmi.n	8008bc8 <__smakebuf_r+0x18>
 8008bea:	f023 0303 	bic.w	r3, r3, #3
 8008bee:	f043 0302 	orr.w	r3, r3, #2
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	e7e2      	b.n	8008bbc <__smakebuf_r+0xc>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	6020      	str	r0, [r4, #0]
 8008bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c06:	b15b      	cbz	r3, 8008c20 <__smakebuf_r+0x70>
 8008c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 f81d 	bl	8008c4c <_isatty_r>
 8008c12:	b128      	cbz	r0, 8008c20 <__smakebuf_r+0x70>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	431d      	orrs	r5, r3
 8008c24:	81a5      	strh	r5, [r4, #12]
 8008c26:	e7cf      	b.n	8008bc8 <__smakebuf_r+0x18>

08008c28 <_fstat_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d07      	ldr	r5, [pc, #28]	@ (8008c48 <_fstat_r+0x20>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	f7f8 fe23 	bl	8001880 <_fstat>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d102      	bne.n	8008c44 <_fstat_r+0x1c>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b103      	cbz	r3, 8008c44 <_fstat_r+0x1c>
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	200005bc 	.word	0x200005bc

08008c4c <_isatty_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d06      	ldr	r5, [pc, #24]	@ (8008c68 <_isatty_r+0x1c>)
 8008c50:	2300      	movs	r3, #0
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	f7f8 fe22 	bl	80018a0 <_isatty>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_isatty_r+0x1a>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_isatty_r+0x1a>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	200005bc 	.word	0x200005bc

08008c6c <abort>:
 8008c6c:	b508      	push	{r3, lr}
 8008c6e:	2006      	movs	r0, #6
 8008c70:	f000 f82c 	bl	8008ccc <raise>
 8008c74:	2001      	movs	r0, #1
 8008c76:	f7f8 fdb3 	bl	80017e0 <_exit>

08008c7a <_raise_r>:
 8008c7a:	291f      	cmp	r1, #31
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4605      	mov	r5, r0
 8008c80:	460c      	mov	r4, r1
 8008c82:	d904      	bls.n	8008c8e <_raise_r+0x14>
 8008c84:	2316      	movs	r3, #22
 8008c86:	6003      	str	r3, [r0, #0]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
 8008c8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c90:	b112      	cbz	r2, 8008c98 <_raise_r+0x1e>
 8008c92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c96:	b94b      	cbnz	r3, 8008cac <_raise_r+0x32>
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f000 f831 	bl	8008d00 <_getpid_r>
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca8:	f000 b818 	b.w	8008cdc <_kill_r>
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d00a      	beq.n	8008cc6 <_raise_r+0x4c>
 8008cb0:	1c59      	adds	r1, r3, #1
 8008cb2:	d103      	bne.n	8008cbc <_raise_r+0x42>
 8008cb4:	2316      	movs	r3, #22
 8008cb6:	6003      	str	r3, [r0, #0]
 8008cb8:	2001      	movs	r0, #1
 8008cba:	e7e7      	b.n	8008c8c <_raise_r+0x12>
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	4798      	blx	r3
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	e7e0      	b.n	8008c8c <_raise_r+0x12>
	...

08008ccc <raise>:
 8008ccc:	4b02      	ldr	r3, [pc, #8]	@ (8008cd8 <raise+0xc>)
 8008cce:	4601      	mov	r1, r0
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f7ff bfd2 	b.w	8008c7a <_raise_r>
 8008cd6:	bf00      	nop
 8008cd8:	20000058 	.word	0x20000058

08008cdc <_kill_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d07      	ldr	r5, [pc, #28]	@ (8008cfc <_kill_r+0x20>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	f7f8 fd69 	bl	80017c0 <_kill>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d102      	bne.n	8008cf8 <_kill_r+0x1c>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	b103      	cbz	r3, 8008cf8 <_kill_r+0x1c>
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	bf00      	nop
 8008cfc:	200005bc 	.word	0x200005bc

08008d00 <_getpid_r>:
 8008d00:	f7f8 bd56 	b.w	80017b0 <_getpid>

08008d04 <_init>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	bf00      	nop
 8008d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0a:	bc08      	pop	{r3}
 8008d0c:	469e      	mov	lr, r3
 8008d0e:	4770      	bx	lr

08008d10 <_fini>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr
